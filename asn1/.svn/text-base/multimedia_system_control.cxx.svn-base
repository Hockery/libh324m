//
// multimedia_system_control.cxx
//
// Code automatically generated by asnparser.
//

#define MULTIMEDIA_SYSTEM_CONTROL_CXX
#include "multimedia_system_control.h"

namespace MULTIMEDIA_SYSTEM_CONTROL{

//
// MasterSlaveDetermination
//


const void* MasterSlaveDetermination::fieldInfos[2] = {
         &terminalType::value_type::theInfo,
         &statusDeterminationNumber::value_type::theInfo
};
int MasterSlaveDetermination::fieldIds[2] = {
        -1,
        -1,
    };

const char* MasterSlaveDetermination::fieldNames[2] = {
        "terminalType",
        "statusDeterminationNumber"
};

const MasterSlaveDetermination::InfoType MasterSlaveDetermination::theInfo = {
    MasterSlaveDetermination::create,
    0x000010,
    true,
    MasterSlaveDetermination::fieldInfos,
    MasterSlaveDetermination::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MasterSlaveDetermination::fieldNames
};

//
// MasterSlaveDeterminationRelease
//


const MasterSlaveDeterminationRelease::InfoType MasterSlaveDeterminationRelease::theInfo = {
    MasterSlaveDeterminationRelease::create,
    0x000010,
    true,
    NULL, NULL,
    0, 0, 0,
    NULL,
    NULL,
    NULL
};

//
// TerminalCapabilitySetRelease
//


const TerminalCapabilitySetRelease::InfoType TerminalCapabilitySetRelease::theInfo = {
    TerminalCapabilitySetRelease::create,
    0x000010,
    true,
    NULL, NULL,
    0, 0, 0,
    NULL,
    NULL,
    NULL
};

//
// H223AnnexCCapability
//


const void* H223AnnexCCapability::fieldInfos[14] = {
         &videoWithAL1M::value_type::theInfo,
         &videoWithAL2M::value_type::theInfo,
         &videoWithAL3M::value_type::theInfo,
         &audioWithAL1M::value_type::theInfo,
         &audioWithAL2M::value_type::theInfo,
         &audioWithAL3M::value_type::theInfo,
         &dataWithAL1M::value_type::theInfo,
         &dataWithAL2M::value_type::theInfo,
         &dataWithAL3M::value_type::theInfo,
         &alpduInterleaving::value_type::theInfo,
         &maximumAL1MPDUSize::value_type::theInfo,
         &maximumAL2MSDUSize::value_type::theInfo,
         &maximumAL3MSDUSize::value_type::theInfo,
         &rsCodeCapability::value_type::theInfo
};
int H223AnnexCCapability::fieldIds[14] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* H223AnnexCCapability::fieldNames[14] = {
        "videoWithAL1M",
        "videoWithAL2M",
        "videoWithAL3M",
        "audioWithAL1M",
        "audioWithAL2M",
        "audioWithAL3M",
        "dataWithAL1M",
        "dataWithAL2M",
        "dataWithAL3M",
        "alpduInterleaving",
        "maximumAL1MPDUSize",
        "maximumAL2MSDUSize",
        "maximumAL3MSDUSize",
        "rsCodeCapability"
};

const H223AnnexCCapability::InfoType H223AnnexCCapability::theInfo = {
    H223AnnexCCapability::create,
    0x000010,
    true,
    H223AnnexCCapability::fieldInfos,
    H223AnnexCCapability::fieldIds,
    13, 1, 0,
    NULL,
    NULL,
    H223AnnexCCapability::fieldNames
};

//
// V75Capability
//


const void* V75Capability::fieldInfos[1] = {
         &audioHeader::value_type::theInfo
};
int V75Capability::fieldIds[1] = {
        -1,
    };

const char* V75Capability::fieldNames[1] = {
        "audioHeader"
};

const V75Capability::InfoType V75Capability::theInfo = {
    V75Capability::create,
    0x000010,
    true,
    V75Capability::fieldInfos,
    V75Capability::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    V75Capability::fieldNames
};

//
// QOSMode
//


const void* QOSMode::selectionInfos[2] = {
         &guaranteedQOS::value_type::theInfo,
         &controlledLoad::value_type::theInfo
};

const char* QOSMode::selectionNames[2] = { "guaranteedQOS"
                                      ,"controlledLoad"};

const QOSMode::InfoType QOSMode::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    QOSMode::selectionInfos,
    2, 2,
    NULL,
    QOSMode::selectionNames
};

//
// ATMParameters
//


const void* ATMParameters::fieldInfos[6] = {
         &maxNTUSize::value_type::theInfo,
         &atmUBR::value_type::theInfo,
         &atmrtVBR::value_type::theInfo,
         &atmnrtVBR::value_type::theInfo,
         &atmABR::value_type::theInfo,
         &atmCBR::value_type::theInfo
};
int ATMParameters::fieldIds[6] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* ATMParameters::fieldNames[6] = {
        "maxNTUSize",
        "atmUBR",
        "atmrtVBR",
        "atmnrtVBR",
        "atmABR",
        "atmCBR"
};

const ATMParameters::InfoType ATMParameters::theInfo = {
    ATMParameters::create,
    0x000010,
    true,
    ATMParameters::fieldInfos,
    ATMParameters::fieldIds,
    6, 0, 0,
    NULL,
    NULL,
    ATMParameters::fieldNames
};

//
// H261VideoCapability
//


const void* H261VideoCapability::fieldInfos[6] = {
         &qcifMPI::value_type::theInfo,
         &cifMPI::value_type::theInfo,
         &temporalSpatialTradeOffCapability::value_type::theInfo,
         &maxBitRate::value_type::theInfo,
         &stillImageTransmission::value_type::theInfo,
         &videoBadMBsCap::value_type::theInfo
};
int H261VideoCapability::fieldIds[6] = {
        0,
        1,
        -1,
        -1,
        -1,
    };

const char* H261VideoCapability::nonOptionalExtensions = "\x80";

const char* H261VideoCapability::fieldNames[6] = {
        "qcifMPI",
        "cifMPI",
        "temporalSpatialTradeOffCapability",
        "maxBitRate",
        "stillImageTransmission",
        "videoBadMBsCap"
};

const H261VideoCapability::InfoType H261VideoCapability::theInfo = {
    H261VideoCapability::create,
    0x000010,
    true,
    H261VideoCapability::fieldInfos,
    H261VideoCapability::fieldIds,
    5, 1, 2,
    H261VideoCapability::nonOptionalExtensions,
    NULL,
    H261VideoCapability::fieldNames
};

//
// H262VideoCapability
//


const void* H262VideoCapability::fieldInfos[18] = {
         &profileAndLevel_SPatML::value_type::theInfo,
         &profileAndLevel_MPatLL::value_type::theInfo,
         &profileAndLevel_MPatML::value_type::theInfo,
         &profileAndLevel_MPatH_14::value_type::theInfo,
         &profileAndLevel_MPatHL::value_type::theInfo,
         &profileAndLevel_SNRatLL::value_type::theInfo,
         &profileAndLevel_SNRatML::value_type::theInfo,
         &profileAndLevel_SpatialatH_14::value_type::theInfo,
         &profileAndLevel_HPatML::value_type::theInfo,
         &profileAndLevel_HPatH_14::value_type::theInfo,
         &profileAndLevel_HPatHL::value_type::theInfo,
         &videoBitRate::value_type::theInfo,
         &vbvBufferSize::value_type::theInfo,
         &samplesPerLine::value_type::theInfo,
         &linesPerFrame::value_type::theInfo,
         &framesPerSecond::value_type::theInfo,
         &luminanceSampleRate::value_type::theInfo,
         &videoBadMBsCap::value_type::theInfo
};
int H262VideoCapability::fieldIds[18] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        0,
        1,
        2,
        3,
        4,
        5,
        -1,
    };

const char* H262VideoCapability::fieldNames[18] = {
        "profileAndLevel-SPatML",
        "profileAndLevel-MPatLL",
        "profileAndLevel-MPatML",
        "profileAndLevel-MPatH-14",
        "profileAndLevel-MPatHL",
        "profileAndLevel-SNRatLL",
        "profileAndLevel-SNRatML",
        "profileAndLevel-SpatialatH-14",
        "profileAndLevel-HPatML",
        "profileAndLevel-HPatH-14",
        "profileAndLevel-HPatHL",
        "videoBitRate",
        "vbvBufferSize",
        "samplesPerLine",
        "linesPerFrame",
        "framesPerSecond",
        "luminanceSampleRate",
        "videoBadMBsCap"
};

const H262VideoCapability::InfoType H262VideoCapability::theInfo = {
    H262VideoCapability::create,
    0x000010,
    false,
    H262VideoCapability::fieldInfos,
    H262VideoCapability::fieldIds,
    18, 0, 6,
    NULL,
    NULL,
    H262VideoCapability::fieldNames
};

//
// TransparencyParameters
//


const void* TransparencyParameters::fieldInfos[5] = {
         &presentationOrder::value_type::theInfo,
         &offset_x::value_type::theInfo,
         &offset_y::value_type::theInfo,
         &scale_x::value_type::theInfo,
         &scale_y::value_type::theInfo
};
int TransparencyParameters::fieldIds[5] = {
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* TransparencyParameters::fieldNames[5] = {
        "presentationOrder",
        "offset-x",
        "offset-y",
        "scale-x",
        "scale-y"
};

const TransparencyParameters::InfoType TransparencyParameters::theInfo = {
    TransparencyParameters::create,
    0x000010,
    true,
    TransparencyParameters::fieldInfos,
    TransparencyParameters::fieldIds,
    5, 0, 0,
    NULL,
    NULL,
    TransparencyParameters::fieldNames
};

//
// CustomPictureClockFrequency
//


const void* CustomPictureClockFrequency::fieldInfos[7] = {
         &clockConversionCode::value_type::theInfo,
         &clockDivisor::value_type::theInfo,
         &sqcifMPI::value_type::theInfo,
         &qcifMPI::value_type::theInfo,
         &cifMPI::value_type::theInfo,
         &cif4MPI::value_type::theInfo,
         &cif16MPI::value_type::theInfo
};
int CustomPictureClockFrequency::fieldIds[7] = {
        -1,
        -1,
        0,
        1,
        2,
        3,
        4
    };

const char* CustomPictureClockFrequency::fieldNames[7] = {
        "clockConversionCode",
        "clockDivisor",
        "sqcifMPI",
        "qcifMPI",
        "cifMPI",
        "cif4MPI",
        "cif16MPI"
};

const CustomPictureClockFrequency::InfoType CustomPictureClockFrequency::theInfo = {
    CustomPictureClockFrequency::create,
    0x000010,
    true,
    CustomPictureClockFrequency::fieldInfos,
    CustomPictureClockFrequency::fieldIds,
    7, 0, 5,
    NULL,
    NULL,
    CustomPictureClockFrequency::fieldNames
};

//
// H263Version3Options
//


const void* H263Version3Options::fieldInfos[8] = {
         &dataPartitionedSlices::value_type::theInfo,
         &fixedPointIDCT0::value_type::theInfo,
         &interlacedFields::value_type::theInfo,
         &currentPictureHeaderRepetition::value_type::theInfo,
         &previousPictureHeaderRepetition::value_type::theInfo,
         &nextPictureHeaderRepetition::value_type::theInfo,
         &pictureNumber::value_type::theInfo,
         &spareReferencePictures::value_type::theInfo
};
int H263Version3Options::fieldIds[8] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* H263Version3Options::fieldNames[8] = {
        "dataPartitionedSlices",
        "fixedPointIDCT0",
        "interlacedFields",
        "currentPictureHeaderRepetition",
        "previousPictureHeaderRepetition",
        "nextPictureHeaderRepetition",
        "pictureNumber",
        "spareReferencePictures"
};

const H263Version3Options::InfoType H263Version3Options::theInfo = {
    H263Version3Options::create,
    0x000010,
    true,
    H263Version3Options::fieldInfos,
    H263Version3Options::fieldIds,
    8, 0, 0,
    NULL,
    NULL,
    H263Version3Options::fieldNames
};

//
// IS11172VideoCapability
//


const void* IS11172VideoCapability::fieldInfos[8] = {
         &constrainedBitstream::value_type::theInfo,
         &videoBitRate::value_type::theInfo,
         &vbvBufferSize::value_type::theInfo,
         &samplesPerLine::value_type::theInfo,
         &linesPerFrame::value_type::theInfo,
         &pictureRate::value_type::theInfo,
         &luminanceSampleRate::value_type::theInfo,
         &videoBadMBsCap::value_type::theInfo
};
int IS11172VideoCapability::fieldIds[8] = {
        -1,
        0,
        1,
        2,
        3,
        4,
        5
    };

const char* IS11172VideoCapability::nonOptionalExtensions = "\x80";

const char* IS11172VideoCapability::fieldNames[8] = {
        "constrainedBitstream",
        "videoBitRate",
        "vbvBufferSize",
        "samplesPerLine",
        "linesPerFrame",
        "pictureRate",
        "luminanceSampleRate",
        "videoBadMBsCap"
};

const IS11172VideoCapability::InfoType IS11172VideoCapability::theInfo = {
    IS11172VideoCapability::create,
    0x000010,
    true,
    IS11172VideoCapability::fieldInfos,
    IS11172VideoCapability::fieldIds,
    7, 1, 6,
    IS11172VideoCapability::nonOptionalExtensions,
    NULL,
    IS11172VideoCapability::fieldNames
};

//
// G729Extensions
//


const void* G729Extensions::fieldInfos[8] = {
         &audioUnit::value_type::theInfo,
         &annexA::value_type::theInfo,
         &annexB::value_type::theInfo,
         &annexD::value_type::theInfo,
         &annexE::value_type::theInfo,
         &annexF::value_type::theInfo,
         &annexG::value_type::theInfo,
         &annexH::value_type::theInfo
};
int G729Extensions::fieldIds[8] = {
        0,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* G729Extensions::fieldNames[8] = {
        "audioUnit",
        "annexA",
        "annexB",
        "annexD",
        "annexE",
        "annexF",
        "annexG",
        "annexH"
};

const G729Extensions::InfoType G729Extensions::theInfo = {
    G729Extensions::create,
    0x000010,
    true,
    G729Extensions::fieldInfos,
    G729Extensions::fieldIds,
    8, 0, 1,
    NULL,
    NULL,
    G729Extensions::fieldNames
};

//
// IS11172AudioCapability
//


const void* IS11172AudioCapability::fieldInfos[9] = {
         &audioLayer1::value_type::theInfo,
         &audioLayer2::value_type::theInfo,
         &audioLayer3::value_type::theInfo,
         &audioSampling32k::value_type::theInfo,
         &audioSampling44k1::value_type::theInfo,
         &audioSampling48k::value_type::theInfo,
         &singleChannel::value_type::theInfo,
         &twoChannels::value_type::theInfo,
         &bitRate::value_type::theInfo
};
int IS11172AudioCapability::fieldIds[9] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* IS11172AudioCapability::fieldNames[9] = {
        "audioLayer1",
        "audioLayer2",
        "audioLayer3",
        "audioSampling32k",
        "audioSampling44k1",
        "audioSampling48k",
        "singleChannel",
        "twoChannels",
        "bitRate"
};

const IS11172AudioCapability::InfoType IS11172AudioCapability::theInfo = {
    IS11172AudioCapability::create,
    0x000010,
    true,
    IS11172AudioCapability::fieldInfos,
    IS11172AudioCapability::fieldIds,
    9, 0, 0,
    NULL,
    NULL,
    IS11172AudioCapability::fieldNames
};

//
// IS13818AudioCapability
//


const void* IS13818AudioCapability::fieldInfos[21] = {
         &audioLayer1::value_type::theInfo,
         &audioLayer2::value_type::theInfo,
         &audioLayer3::value_type::theInfo,
         &audioSampling16k::value_type::theInfo,
         &audioSampling22k05::value_type::theInfo,
         &audioSampling24k::value_type::theInfo,
         &audioSampling32k::value_type::theInfo,
         &audioSampling44k1::value_type::theInfo,
         &audioSampling48k::value_type::theInfo,
         &singleChannel::value_type::theInfo,
         &twoChannels::value_type::theInfo,
         &threeChannels2_1::value_type::theInfo,
         &threeChannels3_0::value_type::theInfo,
         &fourChannels2_0_2_0::value_type::theInfo,
         &fourChannels2_2::value_type::theInfo,
         &fourChannels3_1::value_type::theInfo,
         &fiveChannels3_0_2_0::value_type::theInfo,
         &fiveChannels3_2::value_type::theInfo,
         &lowFrequencyEnhancement::value_type::theInfo,
         &multilingual::value_type::theInfo,
         &bitRate::value_type::theInfo
};
int IS13818AudioCapability::fieldIds[21] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* IS13818AudioCapability::fieldNames[21] = {
        "audioLayer1",
        "audioLayer2",
        "audioLayer3",
        "audioSampling16k",
        "audioSampling22k05",
        "audioSampling24k",
        "audioSampling32k",
        "audioSampling44k1",
        "audioSampling48k",
        "singleChannel",
        "twoChannels",
        "threeChannels2-1",
        "threeChannels3-0",
        "fourChannels2-0-2-0",
        "fourChannels2-2",
        "fourChannels3-1",
        "fiveChannels3-0-2-0",
        "fiveChannels3-2",
        "lowFrequencyEnhancement",
        "multilingual",
        "bitRate"
};

const IS13818AudioCapability::InfoType IS13818AudioCapability::theInfo = {
    IS13818AudioCapability::create,
    0x000010,
    true,
    IS13818AudioCapability::fieldInfos,
    IS13818AudioCapability::fieldIds,
    21, 0, 0,
    NULL,
    NULL,
    IS13818AudioCapability::fieldNames
};

//
// GSMAudioCapability
//


const void* GSMAudioCapability::fieldInfos[3] = {
         &audioUnitSize::value_type::theInfo,
         &comfortNoise::value_type::theInfo,
         &scrambled::value_type::theInfo
};
int GSMAudioCapability::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* GSMAudioCapability::fieldNames[3] = {
        "audioUnitSize",
        "comfortNoise",
        "scrambled"
};

const GSMAudioCapability::InfoType GSMAudioCapability::theInfo = {
    GSMAudioCapability::create,
    0x000010,
    true,
    GSMAudioCapability::fieldInfos,
    GSMAudioCapability::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    GSMAudioCapability::fieldNames
};

//
// VBDCapability
//


const void* VBDCapability::fieldInfos[1] = {
         &type::value_type::theInfo
};
int VBDCapability::fieldIds[1] = {
        -1,
    };

const char* VBDCapability::fieldNames[1] = {
        "type"
};

const VBDCapability::InfoType VBDCapability::theInfo = {
    VBDCapability::create,
    0x000010,
    true,
    VBDCapability::fieldInfos,
    VBDCapability::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    VBDCapability::fieldNames
};

//
// V42bis
//


const void* V42bis::fieldInfos[2] = {
         &numberOfCodewords::value_type::theInfo,
         &maximumStringLength::value_type::theInfo
};
int V42bis::fieldIds[2] = {
        -1,
        -1,
    };

const char* V42bis::fieldNames[2] = {
        "numberOfCodewords",
        "maximumStringLength"
};

const V42bis::InfoType V42bis::theInfo = {
    V42bis::create,
    0x000010,
    true,
    V42bis::fieldInfos,
    V42bis::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    V42bis::fieldNames
};

//
// T38FaxRateManagement
//


const void* T38FaxRateManagement::selectionInfos[2] = {
         &localTCF::value_type::theInfo,
         &transferredTCF::value_type::theInfo
};

const char* T38FaxRateManagement::selectionNames[2] = { "localTCF"
                                      ,"transferredTCF"};

const T38FaxRateManagement::InfoType T38FaxRateManagement::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    T38FaxRateManagement::selectionInfos,
    2, 2,
    NULL,
    T38FaxRateManagement::selectionNames
};

//
// T38FaxTcpOptions
//


const void* T38FaxTcpOptions::fieldInfos[1] = {
         &t38TCPBidirectionalMode::value_type::theInfo
};
int T38FaxTcpOptions::fieldIds[1] = {
        -1,
    };

const char* T38FaxTcpOptions::fieldNames[1] = {
        "t38TCPBidirectionalMode"
};

const T38FaxTcpOptions::InfoType T38FaxTcpOptions::theInfo = {
    T38FaxTcpOptions::create,
    0x000010,
    true,
    T38FaxTcpOptions::fieldInfos,
    T38FaxTcpOptions::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    T38FaxTcpOptions::fieldNames
};

//
// AudioTelephonyEventCapability
//


const void* AudioTelephonyEventCapability::fieldInfos[2] = {
         &dynamicRTPPayloadType::value_type::theInfo,
         &audioTelephoneEvent::value_type::theInfo
};
int AudioTelephonyEventCapability::fieldIds[2] = {
        -1,
        -1,
    };

const char* AudioTelephonyEventCapability::fieldNames[2] = {
        "dynamicRTPPayloadType",
        "audioTelephoneEvent"
};

const AudioTelephonyEventCapability::InfoType AudioTelephonyEventCapability::theInfo = {
    AudioTelephonyEventCapability::create,
    0x000010,
    true,
    AudioTelephonyEventCapability::fieldInfos,
    AudioTelephonyEventCapability::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    AudioTelephonyEventCapability::fieldNames
};

//
// AudioToneCapability
//


const void* AudioToneCapability::fieldInfos[1] = {
         &dynamicRTPPayloadType::value_type::theInfo
};
int AudioToneCapability::fieldIds[1] = {
        -1,
    };

const char* AudioToneCapability::fieldNames[1] = {
        "dynamicRTPPayloadType"
};

const AudioToneCapability::InfoType AudioToneCapability::theInfo = {
    AudioToneCapability::create,
    0x000010,
    true,
    AudioToneCapability::fieldInfos,
    AudioToneCapability::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    AudioToneCapability::fieldNames
};

//
// NoPTAudioTelephonyEventCapability
//


const void* NoPTAudioTelephonyEventCapability::fieldInfos[1] = {
         &audioTelephoneEvent::value_type::theInfo
};
int NoPTAudioTelephonyEventCapability::fieldIds[1] = {
        -1,
    };

const char* NoPTAudioTelephonyEventCapability::fieldNames[1] = {
        "audioTelephoneEvent"
};

const NoPTAudioTelephonyEventCapability::InfoType NoPTAudioTelephonyEventCapability::theInfo = {
    NoPTAudioTelephonyEventCapability::create,
    0x000010,
    true,
    NoPTAudioTelephonyEventCapability::fieldInfos,
    NoPTAudioTelephonyEventCapability::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    NoPTAudioTelephonyEventCapability::fieldNames
};

//
// NoPTAudioToneCapability
//


const NoPTAudioToneCapability::InfoType NoPTAudioToneCapability::theInfo = {
    NoPTAudioToneCapability::create,
    0x000010,
    true,
    NULL, NULL,
    0, 0, 0,
    NULL,
    NULL,
    NULL
};

//
// V75Parameters
//


const void* V75Parameters::fieldInfos[1] = {
         &audioHeaderPresent::value_type::theInfo
};
int V75Parameters::fieldIds[1] = {
        -1,
    };

const char* V75Parameters::fieldNames[1] = {
        "audioHeaderPresent"
};

const V75Parameters::InfoType V75Parameters::theInfo = {
    V75Parameters::create,
    0x000010,
    true,
    V75Parameters::fieldInfos,
    V75Parameters::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    V75Parameters::fieldNames
};

//
// H222LogicalChannelParameters
//


const void* H222LogicalChannelParameters::fieldInfos[5] = {
         &resourceID::value_type::theInfo,
         &subChannelID::value_type::theInfo,
         &pcr_pid::value_type::theInfo,
         &programDescriptors::value_type::theInfo,
         &streamDescriptors::value_type::theInfo
};
int H222LogicalChannelParameters::fieldIds[5] = {
        -1,
        -1,
        0,
        1,
        2
    };

const char* H222LogicalChannelParameters::fieldNames[5] = {
        "resourceID",
        "subChannelID",
        "pcr-pid",
        "programDescriptors",
        "streamDescriptors"
};

const H222LogicalChannelParameters::InfoType H222LogicalChannelParameters::theInfo = {
    H222LogicalChannelParameters::create,
    0x000010,
    true,
    H222LogicalChannelParameters::fieldInfos,
    H222LogicalChannelParameters::fieldIds,
    5, 0, 3,
    NULL,
    NULL,
    H222LogicalChannelParameters::fieldNames
};

//
// CRCLength
//


const void* CRCLength::selectionInfos[3] = {
         &crc8bit::value_type::theInfo,
         &crc16bit::value_type::theInfo,
         &crc32bit::value_type::theInfo
};

const char* CRCLength::selectionNames[3] = { "crc8bit"
                                      ,"crc16bit"
                                      ,"crc32bit"};

const CRCLength::InfoType CRCLength::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    CRCLength::selectionInfos,
    3, 3,
    NULL,
    CRCLength::selectionNames
};

//
// RedundancyEncodingElement
//


const void* RedundancyEncodingElement::fieldInfos[1] = {
         &payloadType::value_type::theInfo
};
int RedundancyEncodingElement::fieldIds[1] = {
        0
    };

const char* RedundancyEncodingElement::fieldNames[1] = {
        "payloadType"
};

const RedundancyEncodingElement::InfoType RedundancyEncodingElement::theInfo = {
    RedundancyEncodingElement::create,
    0x000010,
    true,
    RedundancyEncodingElement::fieldInfos,
    RedundancyEncodingElement::fieldIds,
    1, 0, 1,
    NULL,
    NULL,
    RedundancyEncodingElement::fieldNames
};

//
// MultiplePayloadStream
//


const MultiplePayloadStream::InfoType MultiplePayloadStream::theInfo = {
    MultiplePayloadStream::create,
    0x000010,
    true,
    NULL, NULL,
    0, 0, 0,
    NULL,
    NULL,
    NULL
};

//
// EscrowData
//


const void* EscrowData::fieldInfos[2] = {
         &escrowID::value_type::theInfo,
         &escrowValue::value_type::theInfo
};
int EscrowData::fieldIds[2] = {
        -1,
        -1,
    };

const char* EscrowData::fieldNames[2] = {
        "escrowID",
        "escrowValue"
};

const EscrowData::InfoType EscrowData::theInfo = {
    EscrowData::create,
    0x000010,
    true,
    EscrowData::fieldInfos,
    EscrowData::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    EscrowData::fieldNames
};

//
// CloseLogicalChannelAck
//


const void* CloseLogicalChannelAck::fieldInfos[1] = {
         &forwardLogicalChannelNumber::value_type::theInfo
};
int CloseLogicalChannelAck::fieldIds[1] = {
        -1,
    };

const char* CloseLogicalChannelAck::fieldNames[1] = {
        "forwardLogicalChannelNumber"
};

const CloseLogicalChannelAck::InfoType CloseLogicalChannelAck::theInfo = {
    CloseLogicalChannelAck::create,
    0x000010,
    true,
    CloseLogicalChannelAck::fieldInfos,
    CloseLogicalChannelAck::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    CloseLogicalChannelAck::fieldNames
};

//
// RequestChannelCloseAck
//


const void* RequestChannelCloseAck::fieldInfos[1] = {
         &forwardLogicalChannelNumber::value_type::theInfo
};
int RequestChannelCloseAck::fieldIds[1] = {
        -1,
    };

const char* RequestChannelCloseAck::fieldNames[1] = {
        "forwardLogicalChannelNumber"
};

const RequestChannelCloseAck::InfoType RequestChannelCloseAck::theInfo = {
    RequestChannelCloseAck::create,
    0x000010,
    true,
    RequestChannelCloseAck::fieldInfos,
    RequestChannelCloseAck::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    RequestChannelCloseAck::fieldNames
};

//
// RequestChannelCloseRelease
//


const void* RequestChannelCloseRelease::fieldInfos[1] = {
         &forwardLogicalChannelNumber::value_type::theInfo
};
int RequestChannelCloseRelease::fieldIds[1] = {
        -1,
    };

const char* RequestChannelCloseRelease::fieldNames[1] = {
        "forwardLogicalChannelNumber"
};

const RequestChannelCloseRelease::InfoType RequestChannelCloseRelease::theInfo = {
    RequestChannelCloseRelease::create,
    0x000010,
    true,
    RequestChannelCloseRelease::fieldInfos,
    RequestChannelCloseRelease::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    RequestChannelCloseRelease::fieldNames
};

//
// MultiplexEntrySendAck
//


const void* MultiplexEntrySendAck::fieldInfos[2] = {
         &sequenceNumber::value_type::theInfo,
         &multiplexTableEntryNumber::value_type::theInfo
};
int MultiplexEntrySendAck::fieldIds[2] = {
        -1,
        -1,
    };

const char* MultiplexEntrySendAck::fieldNames[2] = {
        "sequenceNumber",
        "multiplexTableEntryNumber"
};

const MultiplexEntrySendAck::InfoType MultiplexEntrySendAck::theInfo = {
    MultiplexEntrySendAck::create,
    0x000010,
    true,
    MultiplexEntrySendAck::fieldInfos,
    MultiplexEntrySendAck::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MultiplexEntrySendAck::fieldNames
};

//
// MultiplexEntrySendRelease
//


const void* MultiplexEntrySendRelease::fieldInfos[1] = {
         &multiplexTableEntryNumber::value_type::theInfo
};
int MultiplexEntrySendRelease::fieldIds[1] = {
        -1,
    };

const char* MultiplexEntrySendRelease::fieldNames[1] = {
        "multiplexTableEntryNumber"
};

const MultiplexEntrySendRelease::InfoType MultiplexEntrySendRelease::theInfo = {
    MultiplexEntrySendRelease::create,
    0x000010,
    true,
    MultiplexEntrySendRelease::fieldInfos,
    MultiplexEntrySendRelease::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MultiplexEntrySendRelease::fieldNames
};

//
// RequestMultiplexEntry
//


const void* RequestMultiplexEntry::fieldInfos[1] = {
         &entryNumbers::value_type::theInfo
};
int RequestMultiplexEntry::fieldIds[1] = {
        -1,
    };

const char* RequestMultiplexEntry::fieldNames[1] = {
        "entryNumbers"
};

const RequestMultiplexEntry::InfoType RequestMultiplexEntry::theInfo = {
    RequestMultiplexEntry::create,
    0x000010,
    true,
    RequestMultiplexEntry::fieldInfos,
    RequestMultiplexEntry::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    RequestMultiplexEntry::fieldNames
};

//
// RequestMultiplexEntryAck
//


const void* RequestMultiplexEntryAck::fieldInfos[1] = {
         &entryNumbers::value_type::theInfo
};
int RequestMultiplexEntryAck::fieldIds[1] = {
        -1,
    };

const char* RequestMultiplexEntryAck::fieldNames[1] = {
        "entryNumbers"
};

const RequestMultiplexEntryAck::InfoType RequestMultiplexEntryAck::theInfo = {
    RequestMultiplexEntryAck::create,
    0x000010,
    true,
    RequestMultiplexEntryAck::fieldInfos,
    RequestMultiplexEntryAck::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    RequestMultiplexEntryAck::fieldNames
};

//
// RequestMultiplexEntryRelease
//


const void* RequestMultiplexEntryRelease::fieldInfos[1] = {
         &entryNumbers::value_type::theInfo
};
int RequestMultiplexEntryRelease::fieldIds[1] = {
        -1,
    };

const char* RequestMultiplexEntryRelease::fieldNames[1] = {
        "entryNumbers"
};

const RequestMultiplexEntryRelease::InfoType RequestMultiplexEntryRelease::theInfo = {
    RequestMultiplexEntryRelease::create,
    0x000010,
    true,
    RequestMultiplexEntryRelease::fieldInfos,
    RequestMultiplexEntryRelease::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    RequestMultiplexEntryRelease::fieldNames
};

//
// RequestModeRelease
//


const RequestModeRelease::InfoType RequestModeRelease::theInfo = {
    RequestModeRelease::create,
    0x000010,
    true,
    NULL, NULL,
    0, 0, 0,
    NULL,
    NULL,
    NULL
};

//
// MultiplexedStreamModeParameters
//


const void* MultiplexedStreamModeParameters::fieldInfos[1] = {
         &logicalChannelNumber::value_type::theInfo
};
int MultiplexedStreamModeParameters::fieldIds[1] = {
        -1,
    };

const char* MultiplexedStreamModeParameters::fieldNames[1] = {
        "logicalChannelNumber"
};

const MultiplexedStreamModeParameters::InfoType MultiplexedStreamModeParameters::theInfo = {
    MultiplexedStreamModeParameters::create,
    0x000010,
    true,
    MultiplexedStreamModeParameters::fieldInfos,
    MultiplexedStreamModeParameters::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MultiplexedStreamModeParameters::fieldNames
};

//
// V76ModeParameters
//


const void* V76ModeParameters::selectionInfos[2] = {
         &suspendResumewAddress::value_type::theInfo,
         &suspendResumewoAddress::value_type::theInfo
};

const char* V76ModeParameters::selectionNames[2] = { "suspendResumewAddress"
                                      ,"suspendResumewoAddress"};

const V76ModeParameters::InfoType V76ModeParameters::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    V76ModeParameters::selectionInfos,
    2, 2,
    NULL,
    V76ModeParameters::selectionNames
};

//
// IS11172VideoMode
//


const void* IS11172VideoMode::fieldInfos[7] = {
         &constrainedBitstream::value_type::theInfo,
         &videoBitRate::value_type::theInfo,
         &vbvBufferSize::value_type::theInfo,
         &samplesPerLine::value_type::theInfo,
         &linesPerFrame::value_type::theInfo,
         &pictureRate::value_type::theInfo,
         &luminanceSampleRate::value_type::theInfo
};
int IS11172VideoMode::fieldIds[7] = {
        -1,
        0,
        1,
        2,
        3,
        4,
        5
    };

const char* IS11172VideoMode::fieldNames[7] = {
        "constrainedBitstream",
        "videoBitRate",
        "vbvBufferSize",
        "samplesPerLine",
        "linesPerFrame",
        "pictureRate",
        "luminanceSampleRate"
};

const IS11172VideoMode::InfoType IS11172VideoMode::theInfo = {
    IS11172VideoMode::create,
    0x000010,
    true,
    IS11172VideoMode::fieldInfos,
    IS11172VideoMode::fieldIds,
    7, 0, 6,
    NULL,
    NULL,
    IS11172VideoMode::fieldNames
};

//
// VBDMode
//


const void* VBDMode::fieldInfos[1] = {
         &type::value_type::theInfo
};
int VBDMode::fieldIds[1] = {
        -1,
    };

const char* VBDMode::fieldNames[1] = {
        "type"
};

const VBDMode::InfoType VBDMode::theInfo = {
    VBDMode::create,
    0x000010,
    true,
    VBDMode::fieldInfos,
    VBDMode::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    VBDMode::fieldNames
};

//
// RoundTripDelayRequest
//


const void* RoundTripDelayRequest::fieldInfos[1] = {
         &sequenceNumber::value_type::theInfo
};
int RoundTripDelayRequest::fieldIds[1] = {
        -1,
    };

const char* RoundTripDelayRequest::fieldNames[1] = {
        "sequenceNumber"
};

const RoundTripDelayRequest::InfoType RoundTripDelayRequest::theInfo = {
    RoundTripDelayRequest::create,
    0x000010,
    true,
    RoundTripDelayRequest::fieldInfos,
    RoundTripDelayRequest::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    RoundTripDelayRequest::fieldNames
};

//
// RoundTripDelayResponse
//


const void* RoundTripDelayResponse::fieldInfos[1] = {
         &sequenceNumber::value_type::theInfo
};
int RoundTripDelayResponse::fieldIds[1] = {
        -1,
    };

const char* RoundTripDelayResponse::fieldNames[1] = {
        "sequenceNumber"
};

const RoundTripDelayResponse::InfoType RoundTripDelayResponse::theInfo = {
    RoundTripDelayResponse::create,
    0x000010,
    true,
    RoundTripDelayResponse::fieldInfos,
    RoundTripDelayResponse::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    RoundTripDelayResponse::fieldNames
};

//
// MaintenanceLoopOffCommand
//


const MaintenanceLoopOffCommand::InfoType MaintenanceLoopOffCommand::theInfo = {
    MaintenanceLoopOffCommand::create,
    0x000010,
    true,
    NULL, NULL,
    0, 0, 0,
    NULL,
    NULL,
    NULL
};

//
// CommunicationModeRequest
//


const CommunicationModeRequest::InfoType CommunicationModeRequest::theInfo = {
    CommunicationModeRequest::create,
    0x000010,
    true,
    NULL, NULL,
    0, 0, 0,
    NULL,
    NULL,
    NULL
};

//
// Criteria
//


const void* Criteria::fieldInfos[2] = {
         &field::value_type::theInfo,
         &value::value_type::theInfo
};
int Criteria::fieldIds[2] = {
        -1,
        -1,
    };

const char* Criteria::fieldNames[2] = {
        "field",
        "value"
};

const Criteria::InfoType Criteria::theInfo = {
    Criteria::create,
    0x000010,
    true,
    Criteria::fieldInfos,
    Criteria::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    Criteria::fieldNames
};

//
// RemoteMCRequest
//


const void* RemoteMCRequest::selectionInfos[3] = {
         &masterActivate::value_type::theInfo,
         &slaveActivate::value_type::theInfo,
         &deActivate::value_type::theInfo
};

const char* RemoteMCRequest::selectionNames[3] = { "masterActivate"
                                      ,"slaveActivate"
                                      ,"deActivate"};

const RemoteMCRequest::InfoType RemoteMCRequest::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RemoteMCRequest::selectionInfos,
    3, 3,
    NULL,
    RemoteMCRequest::selectionNames
};

//
// ConnectionIdentifier
//


const void* ConnectionIdentifier::fieldInfos[2] = {
         &channelTag::value_type::theInfo,
         &sequenceNumber::value_type::theInfo
};
int ConnectionIdentifier::fieldIds[2] = {
        -1,
        -1,
    };

const char* ConnectionIdentifier::fieldNames[2] = {
        "channelTag",
        "sequenceNumber"
};

const ConnectionIdentifier::InfoType ConnectionIdentifier::theInfo = {
    ConnectionIdentifier::create,
    0x000010,
    true,
    ConnectionIdentifier::fieldInfos,
    ConnectionIdentifier::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    ConnectionIdentifier::fieldNames
};

//
// LogicalChannelRateRequest
//


const void* LogicalChannelRateRequest::fieldInfos[3] = {
         &sequenceNumber::value_type::theInfo,
         &logicalChannelNumber::value_type::theInfo,
         &maximumBitRate::value_type::theInfo
};
int LogicalChannelRateRequest::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* LogicalChannelRateRequest::fieldNames[3] = {
        "sequenceNumber",
        "logicalChannelNumber",
        "maximumBitRate"
};

const LogicalChannelRateRequest::InfoType LogicalChannelRateRequest::theInfo = {
    LogicalChannelRateRequest::create,
    0x000010,
    true,
    LogicalChannelRateRequest::fieldInfos,
    LogicalChannelRateRequest::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    LogicalChannelRateRequest::fieldNames
};

//
// LogicalChannelRateAcknowledge
//


const void* LogicalChannelRateAcknowledge::fieldInfos[3] = {
         &sequenceNumber::value_type::theInfo,
         &logicalChannelNumber::value_type::theInfo,
         &maximumBitRate::value_type::theInfo
};
int LogicalChannelRateAcknowledge::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* LogicalChannelRateAcknowledge::fieldNames[3] = {
        "sequenceNumber",
        "logicalChannelNumber",
        "maximumBitRate"
};

const LogicalChannelRateAcknowledge::InfoType LogicalChannelRateAcknowledge::theInfo = {
    LogicalChannelRateAcknowledge::create,
    0x000010,
    true,
    LogicalChannelRateAcknowledge::fieldInfos,
    LogicalChannelRateAcknowledge::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    LogicalChannelRateAcknowledge::fieldNames
};

//
// LogicalChannelRateRejectReason
//


const void* LogicalChannelRateRejectReason::selectionInfos[2] = {
         &undefinedReason::value_type::theInfo,
         &insufficientResources::value_type::theInfo
};

const char* LogicalChannelRateRejectReason::selectionNames[2] = { "undefinedReason"
                                      ,"insufficientResources"};

const LogicalChannelRateRejectReason::InfoType LogicalChannelRateRejectReason::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    LogicalChannelRateRejectReason::selectionInfos,
    2, 2,
    NULL,
    LogicalChannelRateRejectReason::selectionNames
};

//
// LogicalChannelRateRelease
//


const LogicalChannelRateRelease::InfoType LogicalChannelRateRelease::theInfo = {
    LogicalChannelRateRelease::create,
    0x000010,
    true,
    NULL, NULL,
    0, 0, 0,
    NULL,
    NULL,
    NULL
};

//
// SubstituteConferenceIDCommand
//


const void* SubstituteConferenceIDCommand::fieldInfos[1] = {
         &conferenceIdentifier::value_type::theInfo
};
int SubstituteConferenceIDCommand::fieldIds[1] = {
        -1,
    };

const char* SubstituteConferenceIDCommand::fieldNames[1] = {
        "conferenceIdentifier"
};

const SubstituteConferenceIDCommand::InfoType SubstituteConferenceIDCommand::theInfo = {
    SubstituteConferenceIDCommand::create,
    0x000010,
    true,
    SubstituteConferenceIDCommand::fieldInfos,
    SubstituteConferenceIDCommand::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    SubstituteConferenceIDCommand::fieldNames
};

//
// EncryptionUpdateDirection
//


const void* EncryptionUpdateDirection::selectionInfos[2] = {
         &masterToSlave::value_type::theInfo,
         &slaveToMaster::value_type::theInfo
};

const char* EncryptionUpdateDirection::selectionNames[2] = { "masterToSlave"
                                      ,"slaveToMaster"};

const EncryptionUpdateDirection::InfoType EncryptionUpdateDirection::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    EncryptionUpdateDirection::selectionInfos,
    2, 2,
    NULL,
    EncryptionUpdateDirection::selectionNames
};

//
// KeyProtectionMethod
//


const void* KeyProtectionMethod::fieldInfos[3] = {
         &secureChannel::value_type::theInfo,
         &sharedSecret::value_type::theInfo,
         &certProtectedKey::value_type::theInfo
};
int KeyProtectionMethod::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* KeyProtectionMethod::fieldNames[3] = {
        "secureChannel",
        "sharedSecret",
        "certProtectedKey"
};

const KeyProtectionMethod::InfoType KeyProtectionMethod::theInfo = {
    KeyProtectionMethod::create,
    0x000010,
    true,
    KeyProtectionMethod::fieldInfos,
    KeyProtectionMethod::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    KeyProtectionMethod::fieldNames
};

//
// EncryptionUpdateRequest
//


const void* EncryptionUpdateRequest::fieldInfos[2] = {
         &keyProtectionMethod::value_type::theInfo,
         &synchFlag::value_type::theInfo
};
int EncryptionUpdateRequest::fieldIds[2] = {
        0
    };

const char* EncryptionUpdateRequest::fieldNames[2] = {
        "keyProtectionMethod",
        "synchFlag"
};

const EncryptionUpdateRequest::InfoType EncryptionUpdateRequest::theInfo = {
    EncryptionUpdateRequest::create,
    0x000010,
    true,
    EncryptionUpdateRequest::fieldInfos,
    EncryptionUpdateRequest::fieldIds,
    1, 1, 1,
    NULL,
    NULL,
    EncryptionUpdateRequest::fieldNames
};

//
// PictureReference
//


const void* PictureReference::selectionInfos[2] = {
         &pictureNumber::value_type::theInfo,
         &longTermPictureIndex::value_type::theInfo
};

const char* PictureReference::selectionNames[2] = { "pictureNumber"
                                      ,"longTermPictureIndex"};

const PictureReference::InfoType PictureReference::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    PictureReference::selectionInfos,
    2, 2,
    NULL,
    PictureReference::selectionNames
};

//
// TerminalYouAreSeeingInSubPictureNumber
//


const void* TerminalYouAreSeeingInSubPictureNumber::fieldInfos[2] = {
         &terminalNumber::value_type::theInfo,
         &subPictureNumber::value_type::theInfo
};
int TerminalYouAreSeeingInSubPictureNumber::fieldIds[2] = {
        -1,
        -1,
    };

const char* TerminalYouAreSeeingInSubPictureNumber::fieldNames[2] = {
        "terminalNumber",
        "subPictureNumber"
};

const TerminalYouAreSeeingInSubPictureNumber::InfoType TerminalYouAreSeeingInSubPictureNumber::theInfo = {
    TerminalYouAreSeeingInSubPictureNumber::create,
    0x000010,
    true,
    TerminalYouAreSeeingInSubPictureNumber::fieldInfos,
    TerminalYouAreSeeingInSubPictureNumber::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    TerminalYouAreSeeingInSubPictureNumber::fieldNames
};

//
// VideoIndicateCompose
//


const void* VideoIndicateCompose::fieldInfos[1] = {
         &compositionNumber::value_type::theInfo
};
int VideoIndicateCompose::fieldIds[1] = {
        -1,
    };

const char* VideoIndicateCompose::fieldNames[1] = {
        "compositionNumber"
};

const VideoIndicateCompose::InfoType VideoIndicateCompose::theInfo = {
    VideoIndicateCompose::create,
    0x000010,
    true,
    VideoIndicateCompose::fieldInfos,
    VideoIndicateCompose::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    VideoIndicateCompose::fieldNames
};

//
// H223SkewIndication
//


const void* H223SkewIndication::fieldInfos[3] = {
         &logicalChannelNumber1::value_type::theInfo,
         &logicalChannelNumber2::value_type::theInfo,
         &skew::value_type::theInfo
};
int H223SkewIndication::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* H223SkewIndication::fieldNames[3] = {
        "logicalChannelNumber1",
        "logicalChannelNumber2",
        "skew"
};

const H223SkewIndication::InfoType H223SkewIndication::theInfo = {
    H223SkewIndication::create,
    0x000010,
    true,
    H223SkewIndication::fieldInfos,
    H223SkewIndication::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    H223SkewIndication::fieldNames
};

//
// H2250MaximumSkewIndication
//


const void* H2250MaximumSkewIndication::fieldInfos[3] = {
         &logicalChannelNumber1::value_type::theInfo,
         &logicalChannelNumber2::value_type::theInfo,
         &maximumSkew::value_type::theInfo
};
int H2250MaximumSkewIndication::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* H2250MaximumSkewIndication::fieldNames[3] = {
        "logicalChannelNumber1",
        "logicalChannelNumber2",
        "maximumSkew"
};

const H2250MaximumSkewIndication::InfoType H2250MaximumSkewIndication::theInfo = {
    H2250MaximumSkewIndication::create,
    0x000010,
    true,
    H2250MaximumSkewIndication::fieldInfos,
    H2250MaximumSkewIndication::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    H2250MaximumSkewIndication::fieldNames
};

//
// Params
//


const void* Params::fieldInfos[3] = {
         &iv8::value_type::theInfo,
         &iv16::value_type::theInfo,
         &iv::value_type::theInfo
};
int Params::fieldIds[3] = {
        0,
        1,
        2
    };

const char* Params::fieldNames[3] = {
        "iv8",
        "iv16",
        "iv"
};

const Params::InfoType Params::theInfo = {
    Params::create,
    0x000010,
    true,
    Params::fieldInfos,
    Params::fieldIds,
    3, 0, 3,
    NULL,
    NULL,
    Params::fieldNames
};

//
// MobileMultilinkReconfigurationIndication
//


const void* MobileMultilinkReconfigurationIndication::fieldInfos[2] = {
         &sampleSize::value_type::theInfo,
         &samplesPerFrame::value_type::theInfo
};
int MobileMultilinkReconfigurationIndication::fieldIds[2] = {
        -1,
        -1,
    };

const char* MobileMultilinkReconfigurationIndication::fieldNames[2] = {
        "sampleSize",
        "samplesPerFrame"
};

const MobileMultilinkReconfigurationIndication::InfoType MobileMultilinkReconfigurationIndication::theInfo = {
    MobileMultilinkReconfigurationIndication::create,
    0x000010,
    true,
    MobileMultilinkReconfigurationIndication::fieldInfos,
    MobileMultilinkReconfigurationIndication::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MobileMultilinkReconfigurationIndication::fieldNames
};

//
// NonStandardIdentifier_h221NonStandard
//


const void* NonStandardIdentifier_h221NonStandard::fieldInfos[3] = {
         &t35CountryCode::value_type::theInfo,
         &t35Extension::value_type::theInfo,
         &manufacturerCode::value_type::theInfo
};
int NonStandardIdentifier_h221NonStandard::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* NonStandardIdentifier_h221NonStandard::fieldNames[3] = {
        "t35CountryCode",
        "t35Extension",
        "manufacturerCode"
};

const NonStandardIdentifier_h221NonStandard::InfoType NonStandardIdentifier_h221NonStandard::theInfo = {
    NonStandardIdentifier_h221NonStandard::create,
    0x000010,
    false,
    NonStandardIdentifier_h221NonStandard::fieldInfos,
    NonStandardIdentifier_h221NonStandard::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    NonStandardIdentifier_h221NonStandard::fieldNames
};

//
// MasterSlaveDeterminationAck_decision
//


const void* MasterSlaveDeterminationAck_decision::selectionInfos[2] = {
         &master::value_type::theInfo,
         &slave::value_type::theInfo
};

const char* MasterSlaveDeterminationAck_decision::selectionNames[2] = { "master"
                                      ,"slave"};

const MasterSlaveDeterminationAck_decision::InfoType MasterSlaveDeterminationAck_decision::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    MasterSlaveDeterminationAck_decision::selectionInfos,
    2, 2,
    NULL,
    MasterSlaveDeterminationAck_decision::selectionNames
};

//
// MasterSlaveDeterminationReject_cause
//


const void* MasterSlaveDeterminationReject_cause::selectionInfos[1] = {
         &identicalNumbers::value_type::theInfo
};

const char* MasterSlaveDeterminationReject_cause::selectionNames[1] = { "identicalNumbers"};

const MasterSlaveDeterminationReject_cause::InfoType MasterSlaveDeterminationReject_cause::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MasterSlaveDeterminationReject_cause::selectionInfos,
    1, 1,
    NULL,
    MasterSlaveDeterminationReject_cause::selectionNames
};

//
// Capability_h233EncryptionReceiveCapability
//


const void* Capability_h233EncryptionReceiveCapability::fieldInfos[1] = {
         &h233IVResponseTime::value_type::theInfo
};
int Capability_h233EncryptionReceiveCapability::fieldIds[1] = {
        -1,
    };

const char* Capability_h233EncryptionReceiveCapability::fieldNames[1] = {
        "h233IVResponseTime"
};

const Capability_h233EncryptionReceiveCapability::InfoType Capability_h233EncryptionReceiveCapability::theInfo = {
    Capability_h233EncryptionReceiveCapability::create,
    0x000010,
    true,
    Capability_h233EncryptionReceiveCapability::fieldInfos,
    Capability_h233EncryptionReceiveCapability::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    Capability_h233EncryptionReceiveCapability::fieldNames
};

//
// VCCapability_aal1
//


const void* VCCapability_aal1::fieldInfos[9] = {
         &nullClockRecovery::value_type::theInfo,
         &srtsClockRecovery::value_type::theInfo,
         &adaptiveClockRecovery::value_type::theInfo,
         &nullErrorCorrection::value_type::theInfo,
         &longInterleaver::value_type::theInfo,
         &shortInterleaver::value_type::theInfo,
         &errorCorrectionOnly::value_type::theInfo,
         &structuredDataTransfer::value_type::theInfo,
         &partiallyFilledCells::value_type::theInfo
};
int VCCapability_aal1::fieldIds[9] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* VCCapability_aal1::fieldNames[9] = {
        "nullClockRecovery",
        "srtsClockRecovery",
        "adaptiveClockRecovery",
        "nullErrorCorrection",
        "longInterleaver",
        "shortInterleaver",
        "errorCorrectionOnly",
        "structuredDataTransfer",
        "partiallyFilledCells"
};

const VCCapability_aal1::InfoType VCCapability_aal1::theInfo = {
    VCCapability_aal1::create,
    0x000010,
    true,
    VCCapability_aal1::fieldInfos,
    VCCapability_aal1::fieldIds,
    9, 0, 0,
    NULL,
    NULL,
    VCCapability_aal1::fieldNames
};

//
// VCCapability_aal5
//


const void* VCCapability_aal5::fieldInfos[2] = {
         &forwardMaximumSDUSize::value_type::theInfo,
         &backwardMaximumSDUSize::value_type::theInfo
};
int VCCapability_aal5::fieldIds[2] = {
        -1,
        -1,
    };

const char* VCCapability_aal5::fieldNames[2] = {
        "forwardMaximumSDUSize",
        "backwardMaximumSDUSize"
};

const VCCapability_aal5::InfoType VCCapability_aal5::theInfo = {
    VCCapability_aal5::create,
    0x000010,
    true,
    VCCapability_aal5::fieldInfos,
    VCCapability_aal5::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    VCCapability_aal5::fieldNames
};

//
// H223Capability_mobileOperationTransmitCapability
//


const void* H223Capability_mobileOperationTransmitCapability::fieldInfos[5] = {
         &modeChangeCapability::value_type::theInfo,
         &h223AnnexA::value_type::theInfo,
         &h223AnnexADoubleFlag::value_type::theInfo,
         &h223AnnexB::value_type::theInfo,
         &h223AnnexBwithHeader::value_type::theInfo
};
int H223Capability_mobileOperationTransmitCapability::fieldIds[5] = {
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* H223Capability_mobileOperationTransmitCapability::fieldNames[5] = {
        "modeChangeCapability",
        "h223AnnexA",
        "h223AnnexADoubleFlag",
        "h223AnnexB",
        "h223AnnexBwithHeader"
};

const H223Capability_mobileOperationTransmitCapability::InfoType H223Capability_mobileOperationTransmitCapability::theInfo = {
    H223Capability_mobileOperationTransmitCapability::create,
    0x000010,
    true,
    H223Capability_mobileOperationTransmitCapability::fieldInfos,
    H223Capability_mobileOperationTransmitCapability::fieldIds,
    5, 0, 0,
    NULL,
    NULL,
    H223Capability_mobileOperationTransmitCapability::fieldNames
};

//
// H223Capability_mobileMultilinkFrameCapability
//


const void* H223Capability_mobileMultilinkFrameCapability::fieldInfos[2] = {
         &maximumSampleSize::value_type::theInfo,
         &maximumPayloadLength::value_type::theInfo
};
int H223Capability_mobileMultilinkFrameCapability::fieldIds[2] = {
        -1,
        -1,
    };

const char* H223Capability_mobileMultilinkFrameCapability::fieldNames[2] = {
        "maximumSampleSize",
        "maximumPayloadLength"
};

const H223Capability_mobileMultilinkFrameCapability::InfoType H223Capability_mobileMultilinkFrameCapability::theInfo = {
    H223Capability_mobileMultilinkFrameCapability::create,
    0x000010,
    true,
    H223Capability_mobileMultilinkFrameCapability::fieldInfos,
    H223Capability_mobileMultilinkFrameCapability::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H223Capability_mobileMultilinkFrameCapability::fieldNames
};

//
// H2250Capability_mcCapability
//


const void* H2250Capability_mcCapability::fieldInfos[2] = {
         &centralizedConferenceMC::value_type::theInfo,
         &decentralizedConferenceMC::value_type::theInfo
};
int H2250Capability_mcCapability::fieldIds[2] = {
        -1,
        -1,
    };

const char* H2250Capability_mcCapability::fieldNames[2] = {
        "centralizedConferenceMC",
        "decentralizedConferenceMC"
};

const H2250Capability_mcCapability::InfoType H2250Capability_mcCapability::theInfo = {
    H2250Capability_mcCapability::create,
    0x000010,
    true,
    H2250Capability_mcCapability::fieldInfos,
    H2250Capability_mcCapability::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H2250Capability_mcCapability::fieldNames
};

//
// MediaTransportType_atm_AAL5_compressed
//


const void* MediaTransportType_atm_AAL5_compressed::fieldInfos[1] = {
         &variable_delta::value_type::theInfo
};
int MediaTransportType_atm_AAL5_compressed::fieldIds[1] = {
        -1,
    };

const char* MediaTransportType_atm_AAL5_compressed::fieldNames[1] = {
        "variable-delta"
};

const MediaTransportType_atm_AAL5_compressed::InfoType MediaTransportType_atm_AAL5_compressed::theInfo = {
    MediaTransportType_atm_AAL5_compressed::create,
    0x000010,
    true,
    MediaTransportType_atm_AAL5_compressed::fieldInfos,
    MediaTransportType_atm_AAL5_compressed::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MediaTransportType_atm_AAL5_compressed::fieldNames
};

//
// RefPictureSelection_additionalPictureMemory
//


const void* RefPictureSelection_additionalPictureMemory::fieldInfos[6] = {
         &sqcifAdditionalPictureMemory::value_type::theInfo,
         &qcifAdditionalPictureMemory::value_type::theInfo,
         &cifAdditionalPictureMemory::value_type::theInfo,
         &cif4AdditionalPictureMemory::value_type::theInfo,
         &cif16AdditionalPictureMemory::value_type::theInfo,
         &bigCpfAdditionalPictureMemory::value_type::theInfo
};
int RefPictureSelection_additionalPictureMemory::fieldIds[6] = {
        0,
        1,
        2,
        3,
        4,
        5
    };

const char* RefPictureSelection_additionalPictureMemory::fieldNames[6] = {
        "sqcifAdditionalPictureMemory",
        "qcifAdditionalPictureMemory",
        "cifAdditionalPictureMemory",
        "cif4AdditionalPictureMemory",
        "cif16AdditionalPictureMemory",
        "bigCpfAdditionalPictureMemory"
};

const RefPictureSelection_additionalPictureMemory::InfoType RefPictureSelection_additionalPictureMemory::theInfo = {
    RefPictureSelection_additionalPictureMemory::create,
    0x000010,
    true,
    RefPictureSelection_additionalPictureMemory::fieldInfos,
    RefPictureSelection_additionalPictureMemory::fieldIds,
    6, 0, 6,
    NULL,
    NULL,
    RefPictureSelection_additionalPictureMemory::fieldNames
};

//
// RefPictureSelection_videoBackChannelSend
//


const void* RefPictureSelection_videoBackChannelSend::selectionInfos[5] = {
         &none::value_type::theInfo,
         &ackMessageOnly::value_type::theInfo,
         &nackMessageOnly::value_type::theInfo,
         &ackOrNackMessageOnly::value_type::theInfo,
         &ackAndNackMessage::value_type::theInfo
};

const char* RefPictureSelection_videoBackChannelSend::selectionNames[5] = { "none"
                                      ,"ackMessageOnly"
                                      ,"nackMessageOnly"
                                      ,"ackOrNackMessageOnly"
                                      ,"ackAndNackMessage"};

const RefPictureSelection_videoBackChannelSend::InfoType RefPictureSelection_videoBackChannelSend::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RefPictureSelection_videoBackChannelSend::selectionInfos,
    5, 5,
    NULL,
    RefPictureSelection_videoBackChannelSend::selectionNames
};

//
// AudioCapability_g7231
//


const void* AudioCapability_g7231::fieldInfos[2] = {
         &maxAl_sduAudioFrames::value_type::theInfo,
         &silenceSuppression::value_type::theInfo
};
int AudioCapability_g7231::fieldIds[2] = {
        -1,
        -1,
    };

const char* AudioCapability_g7231::fieldNames[2] = {
        "maxAl-sduAudioFrames",
        "silenceSuppression"
};

const AudioCapability_g7231::InfoType AudioCapability_g7231::theInfo = {
    AudioCapability_g7231::create,
    0x000010,
    false,
    AudioCapability_g7231::fieldInfos,
    AudioCapability_g7231::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    AudioCapability_g7231::fieldNames
};

//
// G7231AnnexCCapability_g723AnnexCAudioMode
//


const void* G7231AnnexCCapability_g723AnnexCAudioMode::fieldInfos[6] = {
         &highRateMode0::value_type::theInfo,
         &highRateMode1::value_type::theInfo,
         &lowRateMode0::value_type::theInfo,
         &lowRateMode1::value_type::theInfo,
         &sidMode0::value_type::theInfo,
         &sidMode1::value_type::theInfo
};
int G7231AnnexCCapability_g723AnnexCAudioMode::fieldIds[6] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* G7231AnnexCCapability_g723AnnexCAudioMode::fieldNames[6] = {
        "highRateMode0",
        "highRateMode1",
        "lowRateMode0",
        "lowRateMode1",
        "sidMode0",
        "sidMode1"
};

const G7231AnnexCCapability_g723AnnexCAudioMode::InfoType G7231AnnexCCapability_g723AnnexCAudioMode::theInfo = {
    G7231AnnexCCapability_g723AnnexCAudioMode::create,
    0x000010,
    true,
    G7231AnnexCCapability_g723AnnexCAudioMode::fieldInfos,
    G7231AnnexCCapability_g723AnnexCAudioMode::fieldIds,
    6, 0, 0,
    NULL,
    NULL,
    G7231AnnexCCapability_g723AnnexCAudioMode::fieldNames
};

//
// T84Profile_t84Restricted
//


const void* T84Profile_t84Restricted::fieldInfos[19] = {
         &qcif::value_type::theInfo,
         &cif::value_type::theInfo,
         &ccir601Seq::value_type::theInfo,
         &ccir601Prog::value_type::theInfo,
         &hdtvSeq::value_type::theInfo,
         &hdtvProg::value_type::theInfo,
         &g3FacsMH200x100::value_type::theInfo,
         &g3FacsMH200x200::value_type::theInfo,
         &g4FacsMMR200x100::value_type::theInfo,
         &g4FacsMMR200x200::value_type::theInfo,
         &jbig200x200Seq::value_type::theInfo,
         &jbig200x200Prog::value_type::theInfo,
         &jbig300x300Seq::value_type::theInfo,
         &jbig300x300Prog::value_type::theInfo,
         &digPhotoLow::value_type::theInfo,
         &digPhotoMedSeq::value_type::theInfo,
         &digPhotoMedProg::value_type::theInfo,
         &digPhotoHighSeq::value_type::theInfo,
         &digPhotoHighProg::value_type::theInfo
};
int T84Profile_t84Restricted::fieldIds[19] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* T84Profile_t84Restricted::fieldNames[19] = {
        "qcif",
        "cif",
        "ccir601Seq",
        "ccir601Prog",
        "hdtvSeq",
        "hdtvProg",
        "g3FacsMH200x100",
        "g3FacsMH200x200",
        "g4FacsMMR200x100",
        "g4FacsMMR200x200",
        "jbig200x200Seq",
        "jbig200x200Prog",
        "jbig300x300Seq",
        "jbig300x300Prog",
        "digPhotoLow",
        "digPhotoMedSeq",
        "digPhotoMedProg",
        "digPhotoHighSeq",
        "digPhotoHighProg"
};

const T84Profile_t84Restricted::InfoType T84Profile_t84Restricted::theInfo = {
    T84Profile_t84Restricted::create,
    0x000010,
    true,
    T84Profile_t84Restricted::fieldInfos,
    T84Profile_t84Restricted::fieldIds,
    19, 0, 0,
    NULL,
    NULL,
    T84Profile_t84Restricted::fieldNames
};

//
// T38FaxUdpOptions_t38FaxUdpEC
//


const void* T38FaxUdpOptions_t38FaxUdpEC::selectionInfos[2] = {
         &t38UDPFEC::value_type::theInfo,
         &t38UDPRedundancy::value_type::theInfo
};

const char* T38FaxUdpOptions_t38FaxUdpEC::selectionNames[2] = { "t38UDPFEC"
                                      ,"t38UDPRedundancy"};

const T38FaxUdpOptions_t38FaxUdpEC::InfoType T38FaxUdpOptions_t38FaxUdpEC::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    T38FaxUdpOptions_t38FaxUdpEC::selectionInfos,
    2, 2,
    NULL,
    T38FaxUdpOptions_t38FaxUdpEC::selectionNames
};

//
// FECCapability_rfc2733Format
//


const void* FECCapability_rfc2733Format::selectionInfos[3] = {
         &rfc2733rfc2198::value_type::theInfo,
         &rfc2733sameport::value_type::theInfo,
         &rfc2733diffport::value_type::theInfo
};

const char* FECCapability_rfc2733Format::selectionNames[3] = { "rfc2733rfc2198"
                                      ,"rfc2733sameport"
                                      ,"rfc2733diffport"};

const FECCapability_rfc2733Format::InfoType FECCapability_rfc2733Format::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    FECCapability_rfc2733Format::selectionInfos,
    3, 3,
    NULL,
    FECCapability_rfc2733Format::selectionNames
};

//
// NetworkAccessParameters_distribution
//


const void* NetworkAccessParameters_distribution::selectionInfos[2] = {
         &unicast::value_type::theInfo,
         &multicast::value_type::theInfo
};

const char* NetworkAccessParameters_distribution::selectionNames[2] = { "unicast"
                                      ,"multicast"};

const NetworkAccessParameters_distribution::InfoType NetworkAccessParameters_distribution::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NetworkAccessParameters_distribution::selectionInfos,
    2, 2,
    NULL,
    NetworkAccessParameters_distribution::selectionNames
};

//
// NetworkAccessParameters_t120SetupProcedure
//


const void* NetworkAccessParameters_t120SetupProcedure::selectionInfos[3] = {
         &originateCall::value_type::theInfo,
         &waitForCall::value_type::theInfo,
         &issueQuery::value_type::theInfo
};

const char* NetworkAccessParameters_t120SetupProcedure::selectionNames[3] = { "originateCall"
                                      ,"waitForCall"
                                      ,"issueQuery"};

const NetworkAccessParameters_t120SetupProcedure::InfoType NetworkAccessParameters_t120SetupProcedure::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NetworkAccessParameters_t120SetupProcedure::selectionInfos,
    3, 3,
    NULL,
    NetworkAccessParameters_t120SetupProcedure::selectionNames
};

//
// Q2931Address_address
//


const void* Q2931Address_address::selectionInfos[2] = {
         &internationalNumber::value_type::theInfo,
         &nsapAddress::value_type::theInfo
};

const char* Q2931Address_address::selectionNames[2] = { "internationalNumber"
                                      ,"nsapAddress"};

const Q2931Address_address::InfoType Q2931Address_address::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    Q2931Address_address::selectionInfos,
    2, 2,
    NULL,
    Q2931Address_address::selectionNames
};

//
// Q2931Address_address::internationalNumber::value_type
//


const Q2931Address_address::internationalNumber::value_type::InfoType Q2931Address_address::internationalNumber::value_type::theInfo = {
    ASN1::AbstractString::create,
    0x000012,
    ASN1::FixedConstraint, 1, 16,
    ASN1::NumericString::theInfo.characterSet, 11,
    4,
    4, 4
};

//
// H223AL1MParameters_transferMode
//


const void* H223AL1MParameters_transferMode::selectionInfos[2] = {
         &framed::value_type::theInfo,
         &unframed::value_type::theInfo
};

const char* H223AL1MParameters_transferMode::selectionNames[2] = { "framed"
                                      ,"unframed"};

const H223AL1MParameters_transferMode::InfoType H223AL1MParameters_transferMode::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223AL1MParameters_transferMode::selectionInfos,
    2, 2,
    NULL,
    H223AL1MParameters_transferMode::selectionNames
};

//
// H223AL1MParameters_headerFEC
//


const void* H223AL1MParameters_headerFEC::selectionInfos[2] = {
         &sebch16_7::value_type::theInfo,
         &golay24_12::value_type::theInfo
};

const char* H223AL1MParameters_headerFEC::selectionNames[2] = { "sebch16-7"
                                      ,"golay24-12"};

const H223AL1MParameters_headerFEC::InfoType H223AL1MParameters_headerFEC::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223AL1MParameters_headerFEC::selectionInfos,
    2, 2,
    NULL,
    H223AL1MParameters_headerFEC::selectionNames
};

//
// H223AL1MParameters_crcLength
//


const void* H223AL1MParameters_crcLength::selectionInfos[8] = {
         &crc4bit::value_type::theInfo,
         &crc12bit::value_type::theInfo,
         &crc20bit::value_type::theInfo,
         &crc28bit::value_type::theInfo,
         &crc8bit::value_type::theInfo,
         &crc16bit::value_type::theInfo,
         &crc32bit::value_type::theInfo,
         &crcNotUsed::value_type::theInfo
};

const char* H223AL1MParameters_crcLength::selectionNames[8] = { "crc4bit"
                                      ,"crc12bit"
                                      ,"crc20bit"
                                      ,"crc28bit"
                                      ,"crc8bit"
                                      ,"crc16bit"
                                      ,"crc32bit"
                                      ,"crcNotUsed"};

const H223AL1MParameters_crcLength::InfoType H223AL1MParameters_crcLength::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223AL1MParameters_crcLength::selectionInfos,
    4, 8,
    NULL,
    H223AL1MParameters_crcLength::selectionNames
};

//
// H223AL2MParameters_headerFEC
//


const void* H223AL2MParameters_headerFEC::selectionInfos[2] = {
         &sebch16_5::value_type::theInfo,
         &golay24_12::value_type::theInfo
};

const char* H223AL2MParameters_headerFEC::selectionNames[2] = { "sebch16-5"
                                      ,"golay24-12"};

const H223AL2MParameters_headerFEC::InfoType H223AL2MParameters_headerFEC::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223AL2MParameters_headerFEC::selectionInfos,
    2, 2,
    NULL,
    H223AL2MParameters_headerFEC::selectionNames
};

//
// H223AL3MParameters_headerFormat
//


const void* H223AL3MParameters_headerFormat::selectionInfos[2] = {
         &sebch16_7::value_type::theInfo,
         &golay24_12::value_type::theInfo
};

const char* H223AL3MParameters_headerFormat::selectionNames[2] = { "sebch16-7"
                                      ,"golay24-12"};

const H223AL3MParameters_headerFormat::InfoType H223AL3MParameters_headerFormat::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223AL3MParameters_headerFormat::selectionInfos,
    2, 2,
    NULL,
    H223AL3MParameters_headerFormat::selectionNames
};

//
// H223AL3MParameters_crcLength
//


const void* H223AL3MParameters_crcLength::selectionInfos[8] = {
         &crc4bit::value_type::theInfo,
         &crc12bit::value_type::theInfo,
         &crc20bit::value_type::theInfo,
         &crc28bit::value_type::theInfo,
         &crc8bit::value_type::theInfo,
         &crc16bit::value_type::theInfo,
         &crc32bit::value_type::theInfo,
         &crcNotUsed::value_type::theInfo
};

const char* H223AL3MParameters_crcLength::selectionNames[8] = { "crc4bit"
                                      ,"crc12bit"
                                      ,"crc20bit"
                                      ,"crc28bit"
                                      ,"crc8bit"
                                      ,"crc16bit"
                                      ,"crc32bit"
                                      ,"crcNotUsed"};

const H223AL3MParameters_crcLength::InfoType H223AL3MParameters_crcLength::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223AL3MParameters_crcLength::selectionInfos,
    4, 8,
    NULL,
    H223AL3MParameters_crcLength::selectionNames
};

//
// H223AnnexCArqParameters_numberOfRetransmissions
//


const void* H223AnnexCArqParameters_numberOfRetransmissions::selectionInfos[2] = {
         &finite::value_type::theInfo,
         &infinite::value_type::theInfo
};

const char* H223AnnexCArqParameters_numberOfRetransmissions::selectionNames[2] = { "finite"
                                      ,"infinite"};

const H223AnnexCArqParameters_numberOfRetransmissions::InfoType H223AnnexCArqParameters_numberOfRetransmissions::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223AnnexCArqParameters_numberOfRetransmissions::selectionInfos,
    2, 2,
    NULL,
    H223AnnexCArqParameters_numberOfRetransmissions::selectionNames
};

//
// V76LogicalChannelParameters_suspendResume
//


const void* V76LogicalChannelParameters_suspendResume::selectionInfos[3] = {
         &noSuspendResume::value_type::theInfo,
         &suspendResumewAddress::value_type::theInfo,
         &suspendResumewoAddress::value_type::theInfo
};

const char* V76LogicalChannelParameters_suspendResume::selectionNames[3] = { "noSuspendResume"
                                      ,"suspendResumewAddress"
                                      ,"suspendResumewoAddress"};

const V76LogicalChannelParameters_suspendResume::InfoType V76LogicalChannelParameters_suspendResume::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    V76LogicalChannelParameters_suspendResume::selectionInfos,
    3, 3,
    NULL,
    V76LogicalChannelParameters_suspendResume::selectionNames
};

//
// UnicastAddress_iPAddress
//


const void* UnicastAddress_iPAddress::fieldInfos[2] = {
         &network::value_type::theInfo,
         &tsapIdentifier::value_type::theInfo
};
int UnicastAddress_iPAddress::fieldIds[2] = {
        -1,
        -1,
    };

const char* UnicastAddress_iPAddress::fieldNames[2] = {
        "network",
        "tsapIdentifier"
};

const UnicastAddress_iPAddress::InfoType UnicastAddress_iPAddress::theInfo = {
    UnicastAddress_iPAddress::create,
    0x000010,
    true,
    UnicastAddress_iPAddress::fieldInfos,
    UnicastAddress_iPAddress::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    UnicastAddress_iPAddress::fieldNames
};

//
// UnicastAddress_iPXAddress
//


const void* UnicastAddress_iPXAddress::fieldInfos[3] = {
         &node::value_type::theInfo,
         &netnum::value_type::theInfo,
         &tsapIdentifier::value_type::theInfo
};
int UnicastAddress_iPXAddress::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* UnicastAddress_iPXAddress::fieldNames[3] = {
        "node",
        "netnum",
        "tsapIdentifier"
};

const UnicastAddress_iPXAddress::InfoType UnicastAddress_iPXAddress::theInfo = {
    UnicastAddress_iPXAddress::create,
    0x000010,
    true,
    UnicastAddress_iPXAddress::fieldInfos,
    UnicastAddress_iPXAddress::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    UnicastAddress_iPXAddress::fieldNames
};

//
// UnicastAddress_iP6Address
//


const void* UnicastAddress_iP6Address::fieldInfos[2] = {
         &network::value_type::theInfo,
         &tsapIdentifier::value_type::theInfo
};
int UnicastAddress_iP6Address::fieldIds[2] = {
        -1,
        -1,
    };

const char* UnicastAddress_iP6Address::fieldNames[2] = {
        "network",
        "tsapIdentifier"
};

const UnicastAddress_iP6Address::InfoType UnicastAddress_iP6Address::theInfo = {
    UnicastAddress_iP6Address::create,
    0x000010,
    true,
    UnicastAddress_iP6Address::fieldInfos,
    UnicastAddress_iP6Address::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    UnicastAddress_iP6Address::fieldNames
};

//
// MulticastAddress_iPAddress
//


const void* MulticastAddress_iPAddress::fieldInfos[2] = {
         &network::value_type::theInfo,
         &tsapIdentifier::value_type::theInfo
};
int MulticastAddress_iPAddress::fieldIds[2] = {
        -1,
        -1,
    };

const char* MulticastAddress_iPAddress::fieldNames[2] = {
        "network",
        "tsapIdentifier"
};

const MulticastAddress_iPAddress::InfoType MulticastAddress_iPAddress::theInfo = {
    MulticastAddress_iPAddress::create,
    0x000010,
    true,
    MulticastAddress_iPAddress::fieldInfos,
    MulticastAddress_iPAddress::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MulticastAddress_iPAddress::fieldNames
};

//
// MulticastAddress_iP6Address
//


const void* MulticastAddress_iP6Address::fieldInfos[2] = {
         &network::value_type::theInfo,
         &tsapIdentifier::value_type::theInfo
};
int MulticastAddress_iP6Address::fieldIds[2] = {
        -1,
        -1,
    };

const char* MulticastAddress_iP6Address::fieldNames[2] = {
        "network",
        "tsapIdentifier"
};

const MulticastAddress_iP6Address::InfoType MulticastAddress_iP6Address::theInfo = {
    MulticastAddress_iP6Address::create,
    0x000010,
    true,
    MulticastAddress_iP6Address::fieldInfos,
    MulticastAddress_iP6Address::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MulticastAddress_iP6Address::fieldNames
};

//
// OpenLogicalChannelReject_cause
//


const void* OpenLogicalChannelReject_cause::selectionInfos[15] = {
         &unspecified::value_type::theInfo,
         &unsuitableReverseParameters::value_type::theInfo,
         &dataTypeNotSupported::value_type::theInfo,
         &dataTypeNotAvailable::value_type::theInfo,
         &unknownDataType::value_type::theInfo,
         &dataTypeALCombinationNotSupported::value_type::theInfo,
         &multicastChannelNotAllowed::value_type::theInfo,
         &insufficientBandwidth::value_type::theInfo,
         &separateStackEstablishmentFailed::value_type::theInfo,
         &invalidSessionID::value_type::theInfo,
         &masterSlaveConflict::value_type::theInfo,
         &waitForCommunicationMode::value_type::theInfo,
         &invalidDependentChannel::value_type::theInfo,
         &replacementForRejected::value_type::theInfo,
         &securityDenied::value_type::theInfo
};

const char* OpenLogicalChannelReject_cause::selectionNames[15] = { "unspecified"
                                      ,"unsuitableReverseParameters"
                                      ,"dataTypeNotSupported"
                                      ,"dataTypeNotAvailable"
                                      ,"unknownDataType"
                                      ,"dataTypeALCombinationNotSupported"
                                      ,"multicastChannelNotAllowed"
                                      ,"insufficientBandwidth"
                                      ,"separateStackEstablishmentFailed"
                                      ,"invalidSessionID"
                                      ,"masterSlaveConflict"
                                      ,"waitForCommunicationMode"
                                      ,"invalidDependentChannel"
                                      ,"replacementForRejected"
                                      ,"securityDenied"};

const OpenLogicalChannelReject_cause::InfoType OpenLogicalChannelReject_cause::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    OpenLogicalChannelReject_cause::selectionInfos,
    6, 15,
    NULL,
    OpenLogicalChannelReject_cause::selectionNames
};

//
// CloseLogicalChannel_source
//


const void* CloseLogicalChannel_source::selectionInfos[2] = {
         &user::value_type::theInfo,
         &lcse::value_type::theInfo
};

const char* CloseLogicalChannel_source::selectionNames[2] = { "user"
                                      ,"lcse"};

const CloseLogicalChannel_source::InfoType CloseLogicalChannel_source::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    CloseLogicalChannel_source::selectionInfos,
    2, 2,
    NULL,
    CloseLogicalChannel_source::selectionNames
};

//
// CloseLogicalChannel_reason
//


const void* CloseLogicalChannel_reason::selectionInfos[3] = {
         &unknown::value_type::theInfo,
         &reopen::value_type::theInfo,
         &reservationFailure::value_type::theInfo
};

const char* CloseLogicalChannel_reason::selectionNames[3] = { "unknown"
                                      ,"reopen"
                                      ,"reservationFailure"};

const CloseLogicalChannel_reason::InfoType CloseLogicalChannel_reason::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    CloseLogicalChannel_reason::selectionInfos,
    3, 3,
    NULL,
    CloseLogicalChannel_reason::selectionNames
};

//
// RequestChannelClose_reason
//


const void* RequestChannelClose_reason::selectionInfos[4] = {
         &unknown::value_type::theInfo,
         &normal::value_type::theInfo,
         &reopen::value_type::theInfo,
         &reservationFailure::value_type::theInfo
};

const char* RequestChannelClose_reason::selectionNames[4] = { "unknown"
                                      ,"normal"
                                      ,"reopen"
                                      ,"reservationFailure"};

const RequestChannelClose_reason::InfoType RequestChannelClose_reason::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RequestChannelClose_reason::selectionInfos,
    4, 4,
    NULL,
    RequestChannelClose_reason::selectionNames
};

//
// RequestChannelCloseReject_cause
//


const void* RequestChannelCloseReject_cause::selectionInfos[1] = {
         &unspecified::value_type::theInfo
};

const char* RequestChannelCloseReject_cause::selectionNames[1] = { "unspecified"};

const RequestChannelCloseReject_cause::InfoType RequestChannelCloseReject_cause::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RequestChannelCloseReject_cause::selectionInfos,
    1, 1,
    NULL,
    RequestChannelCloseReject_cause::selectionNames
};

//
// MultiplexElement_repeatCount
//


const void* MultiplexElement_repeatCount::selectionInfos[2] = {
         &finite::value_type::theInfo,
         &untilClosingFlag::value_type::theInfo
};

const char* MultiplexElement_repeatCount::selectionNames[2] = { "finite"
                                      ,"untilClosingFlag"};

const MultiplexElement_repeatCount::InfoType MultiplexElement_repeatCount::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    MultiplexElement_repeatCount::selectionInfos,
    2, 2,
    NULL,
    MultiplexElement_repeatCount::selectionNames
};

//
// MultiplexEntryRejectionDescriptions_cause
//


const void* MultiplexEntryRejectionDescriptions_cause::selectionInfos[2] = {
         &unspecifiedCause::value_type::theInfo,
         &descriptorTooComplex::value_type::theInfo
};

const char* MultiplexEntryRejectionDescriptions_cause::selectionNames[2] = { "unspecifiedCause"
                                      ,"descriptorTooComplex"};

const MultiplexEntryRejectionDescriptions_cause::InfoType MultiplexEntryRejectionDescriptions_cause::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MultiplexEntryRejectionDescriptions_cause::selectionInfos,
    2, 2,
    NULL,
    MultiplexEntryRejectionDescriptions_cause::selectionNames
};

//
// RequestMultiplexEntryRejectionDescriptions_cause
//


const void* RequestMultiplexEntryRejectionDescriptions_cause::selectionInfos[1] = {
         &unspecifiedCause::value_type::theInfo
};

const char* RequestMultiplexEntryRejectionDescriptions_cause::selectionNames[1] = { "unspecifiedCause"};

const RequestMultiplexEntryRejectionDescriptions_cause::InfoType RequestMultiplexEntryRejectionDescriptions_cause::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RequestMultiplexEntryRejectionDescriptions_cause::selectionInfos,
    1, 1,
    NULL,
    RequestMultiplexEntryRejectionDescriptions_cause::selectionNames
};

//
// RequestModeAck_response
//


const void* RequestModeAck_response::selectionInfos[2] = {
         &willTransmitMostPreferredMode::value_type::theInfo,
         &willTransmitLessPreferredMode::value_type::theInfo
};

const char* RequestModeAck_response::selectionNames[2] = { "willTransmitMostPreferredMode"
                                      ,"willTransmitLessPreferredMode"};

const RequestModeAck_response::InfoType RequestModeAck_response::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RequestModeAck_response::selectionInfos,
    2, 2,
    NULL,
    RequestModeAck_response::selectionNames
};

//
// RequestModeReject_cause
//


const void* RequestModeReject_cause::selectionInfos[3] = {
         &modeUnavailable::value_type::theInfo,
         &multipointConstraint::value_type::theInfo,
         &requestDenied::value_type::theInfo
};

const char* RequestModeReject_cause::selectionNames[3] = { "modeUnavailable"
                                      ,"multipointConstraint"
                                      ,"requestDenied"};

const RequestModeReject_cause::InfoType RequestModeReject_cause::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RequestModeReject_cause::selectionInfos,
    3, 3,
    NULL,
    RequestModeReject_cause::selectionNames
};

//
// FECMode_rfc2733Format
//


const void* FECMode_rfc2733Format::selectionInfos[3] = {
         &rfc2733rfc2198::value_type::theInfo,
         &rfc2733sameport::value_type::theInfo,
         &rfc2733diffport::value_type::theInfo
};

const char* FECMode_rfc2733Format::selectionNames[3] = { "rfc2733rfc2198"
                                      ,"rfc2733sameport"
                                      ,"rfc2733diffport"};

const FECMode_rfc2733Format::InfoType FECMode_rfc2733Format::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    FECMode_rfc2733Format::selectionInfos,
    3, 3,
    NULL,
    FECMode_rfc2733Format::selectionNames
};

//
// H261VideoMode_resolution
//


const void* H261VideoMode_resolution::selectionInfos[2] = {
         &qcif::value_type::theInfo,
         &cif::value_type::theInfo
};

const char* H261VideoMode_resolution::selectionNames[2] = { "qcif"
                                      ,"cif"};

const H261VideoMode_resolution::InfoType H261VideoMode_resolution::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    H261VideoMode_resolution::selectionInfos,
    2, 2,
    NULL,
    H261VideoMode_resolution::selectionNames
};

//
// H262VideoMode_profileAndLevel
//


const void* H262VideoMode_profileAndLevel::selectionInfos[11] = {
         &profileAndLevel_SPatML::value_type::theInfo,
         &profileAndLevel_MPatLL::value_type::theInfo,
         &profileAndLevel_MPatML::value_type::theInfo,
         &profileAndLevel_MPatH_14::value_type::theInfo,
         &profileAndLevel_MPatHL::value_type::theInfo,
         &profileAndLevel_SNRatLL::value_type::theInfo,
         &profileAndLevel_SNRatML::value_type::theInfo,
         &profileAndLevel_SpatialatH_14::value_type::theInfo,
         &profileAndLevel_HPatML::value_type::theInfo,
         &profileAndLevel_HPatH_14::value_type::theInfo,
         &profileAndLevel_HPatHL::value_type::theInfo
};

const char* H262VideoMode_profileAndLevel::selectionNames[11] = { "profileAndLevel-SPatML"
                                      ,"profileAndLevel-MPatLL"
                                      ,"profileAndLevel-MPatML"
                                      ,"profileAndLevel-MPatH-14"
                                      ,"profileAndLevel-MPatHL"
                                      ,"profileAndLevel-SNRatLL"
                                      ,"profileAndLevel-SNRatML"
                                      ,"profileAndLevel-SpatialatH-14"
                                      ,"profileAndLevel-HPatML"
                                      ,"profileAndLevel-HPatH-14"
                                      ,"profileAndLevel-HPatHL"};

const H262VideoMode_profileAndLevel::InfoType H262VideoMode_profileAndLevel::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H262VideoMode_profileAndLevel::selectionInfos,
    11, 11,
    NULL,
    H262VideoMode_profileAndLevel::selectionNames
};

//
// H263VideoMode_resolution
//


const void* H263VideoMode_resolution::selectionInfos[6] = {
         &sqcif::value_type::theInfo,
         &qcif::value_type::theInfo,
         &cif::value_type::theInfo,
         &cif4::value_type::theInfo,
         &cif16::value_type::theInfo,
         &custom::value_type::theInfo
};

const char* H263VideoMode_resolution::selectionNames[6] = { "sqcif"
                                      ,"qcif"
                                      ,"cif"
                                      ,"cif4"
                                      ,"cif16"
                                      ,"custom"};

const H263VideoMode_resolution::InfoType H263VideoMode_resolution::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H263VideoMode_resolution::selectionInfos,
    5, 6,
    NULL,
    H263VideoMode_resolution::selectionNames
};

//
// AudioMode_g7231
//


const void* AudioMode_g7231::selectionInfos[4] = {
         &noSilenceSuppressionLowRate::value_type::theInfo,
         &noSilenceSuppressionHighRate::value_type::theInfo,
         &silenceSuppressionLowRate::value_type::theInfo,
         &silenceSuppressionHighRate::value_type::theInfo
};

const char* AudioMode_g7231::selectionNames[4] = { "noSilenceSuppressionLowRate"
                                      ,"noSilenceSuppressionHighRate"
                                      ,"silenceSuppressionLowRate"
                                      ,"silenceSuppressionHighRate"};

const AudioMode_g7231::InfoType AudioMode_g7231::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    AudioMode_g7231::selectionInfos,
    4, 4,
    NULL,
    AudioMode_g7231::selectionNames
};

//
// IS11172AudioMode_audioLayer
//


const void* IS11172AudioMode_audioLayer::selectionInfos[3] = {
         &audioLayer1::value_type::theInfo,
         &audioLayer2::value_type::theInfo,
         &audioLayer3::value_type::theInfo
};

const char* IS11172AudioMode_audioLayer::selectionNames[3] = { "audioLayer1"
                                      ,"audioLayer2"
                                      ,"audioLayer3"};

const IS11172AudioMode_audioLayer::InfoType IS11172AudioMode_audioLayer::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    IS11172AudioMode_audioLayer::selectionInfos,
    3, 3,
    NULL,
    IS11172AudioMode_audioLayer::selectionNames
};

//
// IS11172AudioMode_audioSampling
//


const void* IS11172AudioMode_audioSampling::selectionInfos[3] = {
         &audioSampling32k::value_type::theInfo,
         &audioSampling44k1::value_type::theInfo,
         &audioSampling48k::value_type::theInfo
};

const char* IS11172AudioMode_audioSampling::selectionNames[3] = { "audioSampling32k"
                                      ,"audioSampling44k1"
                                      ,"audioSampling48k"};

const IS11172AudioMode_audioSampling::InfoType IS11172AudioMode_audioSampling::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    IS11172AudioMode_audioSampling::selectionInfos,
    3, 3,
    NULL,
    IS11172AudioMode_audioSampling::selectionNames
};

//
// IS11172AudioMode_multichannelType
//


const void* IS11172AudioMode_multichannelType::selectionInfos[3] = {
         &singleChannel::value_type::theInfo,
         &twoChannelStereo::value_type::theInfo,
         &twoChannelDual::value_type::theInfo
};

const char* IS11172AudioMode_multichannelType::selectionNames[3] = { "singleChannel"
                                      ,"twoChannelStereo"
                                      ,"twoChannelDual"};

const IS11172AudioMode_multichannelType::InfoType IS11172AudioMode_multichannelType::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    IS11172AudioMode_multichannelType::selectionInfos,
    3, 3,
    NULL,
    IS11172AudioMode_multichannelType::selectionNames
};

//
// IS13818AudioMode_audioLayer
//


const void* IS13818AudioMode_audioLayer::selectionInfos[3] = {
         &audioLayer1::value_type::theInfo,
         &audioLayer2::value_type::theInfo,
         &audioLayer3::value_type::theInfo
};

const char* IS13818AudioMode_audioLayer::selectionNames[3] = { "audioLayer1"
                                      ,"audioLayer2"
                                      ,"audioLayer3"};

const IS13818AudioMode_audioLayer::InfoType IS13818AudioMode_audioLayer::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    IS13818AudioMode_audioLayer::selectionInfos,
    3, 3,
    NULL,
    IS13818AudioMode_audioLayer::selectionNames
};

//
// IS13818AudioMode_audioSampling
//


const void* IS13818AudioMode_audioSampling::selectionInfos[6] = {
         &audioSampling16k::value_type::theInfo,
         &audioSampling22k05::value_type::theInfo,
         &audioSampling24k::value_type::theInfo,
         &audioSampling32k::value_type::theInfo,
         &audioSampling44k1::value_type::theInfo,
         &audioSampling48k::value_type::theInfo
};

const char* IS13818AudioMode_audioSampling::selectionNames[6] = { "audioSampling16k"
                                      ,"audioSampling22k05"
                                      ,"audioSampling24k"
                                      ,"audioSampling32k"
                                      ,"audioSampling44k1"
                                      ,"audioSampling48k"};

const IS13818AudioMode_audioSampling::InfoType IS13818AudioMode_audioSampling::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    IS13818AudioMode_audioSampling::selectionInfos,
    6, 6,
    NULL,
    IS13818AudioMode_audioSampling::selectionNames
};

//
// IS13818AudioMode_multichannelType
//


const void* IS13818AudioMode_multichannelType::selectionInfos[10] = {
         &singleChannel::value_type::theInfo,
         &twoChannelStereo::value_type::theInfo,
         &twoChannelDual::value_type::theInfo,
         &threeChannels2_1::value_type::theInfo,
         &threeChannels3_0::value_type::theInfo,
         &fourChannels2_0_2_0::value_type::theInfo,
         &fourChannels2_2::value_type::theInfo,
         &fourChannels3_1::value_type::theInfo,
         &fiveChannels3_0_2_0::value_type::theInfo,
         &fiveChannels3_2::value_type::theInfo
};

const char* IS13818AudioMode_multichannelType::selectionNames[10] = { "singleChannel"
                                      ,"twoChannelStereo"
                                      ,"twoChannelDual"
                                      ,"threeChannels2-1"
                                      ,"threeChannels3-0"
                                      ,"fourChannels2-0-2-0"
                                      ,"fourChannels2-2"
                                      ,"fourChannels3-1"
                                      ,"fiveChannels3-0-2-0"
                                      ,"fiveChannels3-2"};

const IS13818AudioMode_multichannelType::InfoType IS13818AudioMode_multichannelType::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    IS13818AudioMode_multichannelType::selectionInfos,
    10, 10,
    NULL,
    IS13818AudioMode_multichannelType::selectionNames
};

//
// G7231AnnexCMode_g723AnnexCAudioMode
//


const void* G7231AnnexCMode_g723AnnexCAudioMode::fieldInfos[6] = {
         &highRateMode0::value_type::theInfo,
         &highRateMode1::value_type::theInfo,
         &lowRateMode0::value_type::theInfo,
         &lowRateMode1::value_type::theInfo,
         &sidMode0::value_type::theInfo,
         &sidMode1::value_type::theInfo
};
int G7231AnnexCMode_g723AnnexCAudioMode::fieldIds[6] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* G7231AnnexCMode_g723AnnexCAudioMode::fieldNames[6] = {
        "highRateMode0",
        "highRateMode1",
        "lowRateMode0",
        "lowRateMode1",
        "sidMode0",
        "sidMode1"
};

const G7231AnnexCMode_g723AnnexCAudioMode::InfoType G7231AnnexCMode_g723AnnexCAudioMode::theInfo = {
    G7231AnnexCMode_g723AnnexCAudioMode::create,
    0x000010,
    true,
    G7231AnnexCMode_g723AnnexCAudioMode::fieldInfos,
    G7231AnnexCMode_g723AnnexCAudioMode::fieldIds,
    6, 0, 0,
    NULL,
    NULL,
    G7231AnnexCMode_g723AnnexCAudioMode::fieldNames
};

//
// MaintenanceLoopRequest_type
//


const void* MaintenanceLoopRequest_type::selectionInfos[3] = {
         &systemLoop::value_type::theInfo,
         &mediaLoop::value_type::theInfo,
         &logicalChannelLoop::value_type::theInfo
};

const char* MaintenanceLoopRequest_type::selectionNames[3] = { "systemLoop"
                                      ,"mediaLoop"
                                      ,"logicalChannelLoop"};

const MaintenanceLoopRequest_type::InfoType MaintenanceLoopRequest_type::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MaintenanceLoopRequest_type::selectionInfos,
    3, 3,
    NULL,
    MaintenanceLoopRequest_type::selectionNames
};

//
// MaintenanceLoopAck_type
//


const void* MaintenanceLoopAck_type::selectionInfos[3] = {
         &systemLoop::value_type::theInfo,
         &mediaLoop::value_type::theInfo,
         &logicalChannelLoop::value_type::theInfo
};

const char* MaintenanceLoopAck_type::selectionNames[3] = { "systemLoop"
                                      ,"mediaLoop"
                                      ,"logicalChannelLoop"};

const MaintenanceLoopAck_type::InfoType MaintenanceLoopAck_type::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MaintenanceLoopAck_type::selectionInfos,
    3, 3,
    NULL,
    MaintenanceLoopAck_type::selectionNames
};

//
// MaintenanceLoopReject_type
//


const void* MaintenanceLoopReject_type::selectionInfos[3] = {
         &systemLoop::value_type::theInfo,
         &mediaLoop::value_type::theInfo,
         &logicalChannelLoop::value_type::theInfo
};

const char* MaintenanceLoopReject_type::selectionNames[3] = { "systemLoop"
                                      ,"mediaLoop"
                                      ,"logicalChannelLoop"};

const MaintenanceLoopReject_type::InfoType MaintenanceLoopReject_type::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MaintenanceLoopReject_type::selectionInfos,
    3, 3,
    NULL,
    MaintenanceLoopReject_type::selectionNames
};

//
// MaintenanceLoopReject_cause
//


const void* MaintenanceLoopReject_cause::selectionInfos[1] = {
         &canNotPerformLoop::value_type::theInfo
};

const char* MaintenanceLoopReject_cause::selectionNames[1] = { "canNotPerformLoop"};

const MaintenanceLoopReject_cause::InfoType MaintenanceLoopReject_cause::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MaintenanceLoopReject_cause::selectionInfos,
    1, 1,
    NULL,
    MaintenanceLoopReject_cause::selectionNames
};

//
// ConferenceResponse_makeMeChairResponse
//


const void* ConferenceResponse_makeMeChairResponse::selectionInfos[2] = {
         &grantedChairToken::value_type::theInfo,
         &deniedChairToken::value_type::theInfo
};

const char* ConferenceResponse_makeMeChairResponse::selectionNames[2] = { "grantedChairToken"
                                      ,"deniedChairToken"};

const ConferenceResponse_makeMeChairResponse::InfoType ConferenceResponse_makeMeChairResponse::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ConferenceResponse_makeMeChairResponse::selectionInfos,
    2, 2,
    NULL,
    ConferenceResponse_makeMeChairResponse::selectionNames
};

//
// ConferenceResponse_extensionAddressResponse
//


const void* ConferenceResponse_extensionAddressResponse::fieldInfos[1] = {
         &extensionAddress::value_type::theInfo
};
int ConferenceResponse_extensionAddressResponse::fieldIds[1] = {
        -1,
    };

const char* ConferenceResponse_extensionAddressResponse::fieldNames[1] = {
        "extensionAddress"
};

const ConferenceResponse_extensionAddressResponse::InfoType ConferenceResponse_extensionAddressResponse::theInfo = {
    ConferenceResponse_extensionAddressResponse::create,
    0x000010,
    true,
    ConferenceResponse_extensionAddressResponse::fieldInfos,
    ConferenceResponse_extensionAddressResponse::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    ConferenceResponse_extensionAddressResponse::fieldNames
};

//
// ConferenceResponse_broadcastMyLogicalChannelResponse
//


const void* ConferenceResponse_broadcastMyLogicalChannelResponse::selectionInfos[2] = {
         &grantedBroadcastMyLogicalChannel::value_type::theInfo,
         &deniedBroadcastMyLogicalChannel::value_type::theInfo
};

const char* ConferenceResponse_broadcastMyLogicalChannelResponse::selectionNames[2] = { "grantedBroadcastMyLogicalChannel"
                                      ,"deniedBroadcastMyLogicalChannel"};

const ConferenceResponse_broadcastMyLogicalChannelResponse::InfoType ConferenceResponse_broadcastMyLogicalChannelResponse::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ConferenceResponse_broadcastMyLogicalChannelResponse::selectionInfos,
    2, 2,
    NULL,
    ConferenceResponse_broadcastMyLogicalChannelResponse::selectionNames
};

//
// ConferenceResponse_makeTerminalBroadcasterResponse
//


const void* ConferenceResponse_makeTerminalBroadcasterResponse::selectionInfos[2] = {
         &grantedMakeTerminalBroadcaster::value_type::theInfo,
         &deniedMakeTerminalBroadcaster::value_type::theInfo
};

const char* ConferenceResponse_makeTerminalBroadcasterResponse::selectionNames[2] = { "grantedMakeTerminalBroadcaster"
                                      ,"deniedMakeTerminalBroadcaster"};

const ConferenceResponse_makeTerminalBroadcasterResponse::InfoType ConferenceResponse_makeTerminalBroadcasterResponse::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ConferenceResponse_makeTerminalBroadcasterResponse::selectionInfos,
    2, 2,
    NULL,
    ConferenceResponse_makeTerminalBroadcasterResponse::selectionNames
};

//
// ConferenceResponse_sendThisSourceResponse
//


const void* ConferenceResponse_sendThisSourceResponse::selectionInfos[2] = {
         &grantedSendThisSource::value_type::theInfo,
         &deniedSendThisSource::value_type::theInfo
};

const char* ConferenceResponse_sendThisSourceResponse::selectionNames[2] = { "grantedSendThisSource"
                                      ,"deniedSendThisSource"};

const ConferenceResponse_sendThisSourceResponse::InfoType ConferenceResponse_sendThisSourceResponse::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ConferenceResponse_sendThisSourceResponse::selectionInfos,
    2, 2,
    NULL,
    ConferenceResponse_sendThisSourceResponse::selectionNames
};

//
// RemoteMCResponse_reject
//


const void* RemoteMCResponse_reject::selectionInfos[2] = {
         &unspecified::value_type::theInfo,
         &functionNotSupported::value_type::theInfo
};

const char* RemoteMCResponse_reject::selectionNames[2] = { "unspecified"
                                      ,"functionNotSupported"};

const RemoteMCResponse_reject::InfoType RemoteMCResponse_reject::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RemoteMCResponse_reject::selectionInfos,
    2, 2,
    NULL,
    RemoteMCResponse_reject::selectionNames
};

//
// MultilinkRequest_callInformation
//


const void* MultilinkRequest_callInformation::fieldInfos[1] = {
         &maxNumberOfAdditionalConnections::value_type::theInfo
};
int MultilinkRequest_callInformation::fieldIds[1] = {
        -1,
    };

const char* MultilinkRequest_callInformation::fieldNames[1] = {
        "maxNumberOfAdditionalConnections"
};

const MultilinkRequest_callInformation::InfoType MultilinkRequest_callInformation::theInfo = {
    MultilinkRequest_callInformation::create,
    0x000010,
    true,
    MultilinkRequest_callInformation::fieldInfos,
    MultilinkRequest_callInformation::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MultilinkRequest_callInformation::fieldNames
};

//
// MultilinkRequest_removeConnection
//


const void* MultilinkRequest_removeConnection::fieldInfos[1] = {
         &connectionIdentifier::value_type::theInfo
};
int MultilinkRequest_removeConnection::fieldIds[1] = {
        -1,
    };

const char* MultilinkRequest_removeConnection::fieldNames[1] = {
        "connectionIdentifier"
};

const MultilinkRequest_removeConnection::InfoType MultilinkRequest_removeConnection::theInfo = {
    MultilinkRequest_removeConnection::create,
    0x000010,
    true,
    MultilinkRequest_removeConnection::fieldInfos,
    MultilinkRequest_removeConnection::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MultilinkRequest_removeConnection::fieldNames
};

//
// MultilinkResponse_removeConnection
//


const void* MultilinkResponse_removeConnection::fieldInfos[1] = {
         &connectionIdentifier::value_type::theInfo
};
int MultilinkResponse_removeConnection::fieldIds[1] = {
        -1,
    };

const char* MultilinkResponse_removeConnection::fieldNames[1] = {
        "connectionIdentifier"
};

const MultilinkResponse_removeConnection::InfoType MultilinkResponse_removeConnection::theInfo = {
    MultilinkResponse_removeConnection::create,
    0x000010,
    true,
    MultilinkResponse_removeConnection::fieldInfos,
    MultilinkResponse_removeConnection::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MultilinkResponse_removeConnection::fieldNames
};

//
// MultilinkResponse_maximumHeaderInterval
//


const void* MultilinkResponse_maximumHeaderInterval::fieldInfos[1] = {
         &currentInterval::value_type::theInfo
};
int MultilinkResponse_maximumHeaderInterval::fieldIds[1] = {
        -1,
    };

const char* MultilinkResponse_maximumHeaderInterval::fieldNames[1] = {
        "currentInterval"
};

const MultilinkResponse_maximumHeaderInterval::InfoType MultilinkResponse_maximumHeaderInterval::theInfo = {
    MultilinkResponse_maximumHeaderInterval::create,
    0x000010,
    true,
    MultilinkResponse_maximumHeaderInterval::fieldInfos,
    MultilinkResponse_maximumHeaderInterval::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MultilinkResponse_maximumHeaderInterval::fieldNames
};

//
// MultilinkIndication_crcDesired
//


const MultilinkIndication_crcDesired::InfoType MultilinkIndication_crcDesired::theInfo = {
    MultilinkIndication_crcDesired::create,
    0x000010,
    true,
    NULL, NULL,
    0, 0, 0,
    NULL,
    NULL,
    NULL
};

//
// MultilinkIndication_excessiveError
//


const void* MultilinkIndication_excessiveError::fieldInfos[1] = {
         &connectionIdentifier::value_type::theInfo
};
int MultilinkIndication_excessiveError::fieldIds[1] = {
        -1,
    };

const char* MultilinkIndication_excessiveError::fieldNames[1] = {
        "connectionIdentifier"
};

const MultilinkIndication_excessiveError::InfoType MultilinkIndication_excessiveError::theInfo = {
    MultilinkIndication_excessiveError::create,
    0x000010,
    true,
    MultilinkIndication_excessiveError::fieldInfos,
    MultilinkIndication_excessiveError::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MultilinkIndication_excessiveError::fieldNames
};

//
// SendTerminalCapabilitySet_specificRequest
//


const void* SendTerminalCapabilitySet_specificRequest::fieldInfos[3] = {
         &multiplexCapability::value_type::theInfo,
         &capabilityTableEntryNumbers::value_type::theInfo,
         &capabilityDescriptorNumbers::value_type::theInfo
};
int SendTerminalCapabilitySet_specificRequest::fieldIds[3] = {
        -1,
        0,
        1
    };

const char* SendTerminalCapabilitySet_specificRequest::fieldNames[3] = {
        "multiplexCapability",
        "capabilityTableEntryNumbers",
        "capabilityDescriptorNumbers"
};

const SendTerminalCapabilitySet_specificRequest::InfoType SendTerminalCapabilitySet_specificRequest::theInfo = {
    SendTerminalCapabilitySet_specificRequest::create,
    0x000010,
    true,
    SendTerminalCapabilitySet_specificRequest::fieldInfos,
    SendTerminalCapabilitySet_specificRequest::fieldIds,
    3, 0, 2,
    NULL,
    NULL,
    SendTerminalCapabilitySet_specificRequest::fieldNames
};

//
// FlowControlCommand_scope
//


const void* FlowControlCommand_scope::selectionInfos[3] = {
         &logicalChannelNumber::value_type::theInfo,
         &resourceID::value_type::theInfo,
         &wholeMultiplex::value_type::theInfo
};

const char* FlowControlCommand_scope::selectionNames[3] = { "logicalChannelNumber"
                                      ,"resourceID"
                                      ,"wholeMultiplex"};

const FlowControlCommand_scope::InfoType FlowControlCommand_scope::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    FlowControlCommand_scope::selectionInfos,
    3, 3,
    NULL,
    FlowControlCommand_scope::selectionNames
};

//
// FlowControlCommand_restriction
//


const void* FlowControlCommand_restriction::selectionInfos[2] = {
         &maximumBitRate::value_type::theInfo,
         &noRestriction::value_type::theInfo
};

const char* FlowControlCommand_restriction::selectionNames[2] = { "maximumBitRate"
                                      ,"noRestriction"};

const FlowControlCommand_restriction::InfoType FlowControlCommand_restriction::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    FlowControlCommand_restriction::selectionInfos,
    2, 2,
    NULL,
    FlowControlCommand_restriction::selectionNames
};

//
// EndSessionCommand_gstnOptions
//


const void* EndSessionCommand_gstnOptions::selectionInfos[5] = {
         &telephonyMode::value_type::theInfo,
         &v8bis::value_type::theInfo,
         &v34DSVD::value_type::theInfo,
         &v34DuplexFAX::value_type::theInfo,
         &v34H324::value_type::theInfo
};

const char* EndSessionCommand_gstnOptions::selectionNames[5] = { "telephonyMode"
                                      ,"v8bis"
                                      ,"v34DSVD"
                                      ,"v34DuplexFAX"
                                      ,"v34H324"};

const EndSessionCommand_gstnOptions::InfoType EndSessionCommand_gstnOptions::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    EndSessionCommand_gstnOptions::selectionInfos,
    5, 5,
    NULL,
    EndSessionCommand_gstnOptions::selectionNames
};

//
// EndSessionCommand_isdnOptions
//


const void* EndSessionCommand_isdnOptions::selectionInfos[3] = {
         &telephonyMode::value_type::theInfo,
         &v140::value_type::theInfo,
         &terminalOnHold::value_type::theInfo
};

const char* EndSessionCommand_isdnOptions::selectionNames[3] = { "telephonyMode"
                                      ,"v140"
                                      ,"terminalOnHold"};

const EndSessionCommand_isdnOptions::InfoType EndSessionCommand_isdnOptions::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    EndSessionCommand_isdnOptions::selectionInfos,
    3, 3,
    NULL,
    EndSessionCommand_isdnOptions::selectionNames
};

//
// H223MultiplexReconfiguration_h223ModeChange
//


const void* H223MultiplexReconfiguration_h223ModeChange::selectionInfos[4] = {
         &toLevel0::value_type::theInfo,
         &toLevel1::value_type::theInfo,
         &toLevel2::value_type::theInfo,
         &toLevel2withOptionalHeader::value_type::theInfo
};

const char* H223MultiplexReconfiguration_h223ModeChange::selectionNames[4] = { "toLevel0"
                                      ,"toLevel1"
                                      ,"toLevel2"
                                      ,"toLevel2withOptionalHeader"};

const H223MultiplexReconfiguration_h223ModeChange::InfoType H223MultiplexReconfiguration_h223ModeChange::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223MultiplexReconfiguration_h223ModeChange::selectionInfos,
    4, 4,
    NULL,
    H223MultiplexReconfiguration_h223ModeChange::selectionNames
};

//
// H223MultiplexReconfiguration_h223AnnexADoubleFlag
//


const void* H223MultiplexReconfiguration_h223AnnexADoubleFlag::selectionInfos[2] = {
         &start::value_type::theInfo,
         &stop::value_type::theInfo
};

const char* H223MultiplexReconfiguration_h223AnnexADoubleFlag::selectionNames[2] = { "start"
                                      ,"stop"};

const H223MultiplexReconfiguration_h223AnnexADoubleFlag::InfoType H223MultiplexReconfiguration_h223AnnexADoubleFlag::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223MultiplexReconfiguration_h223AnnexADoubleFlag::selectionInfos,
    2, 2,
    NULL,
    H223MultiplexReconfiguration_h223AnnexADoubleFlag::selectionNames
};

//
// NewATMVCCommand_multiplex
//


const void* NewATMVCCommand_multiplex::selectionInfos[3] = {
         &noMultiplex::value_type::theInfo,
         &transportStream::value_type::theInfo,
         &programStream::value_type::theInfo
};

const char* NewATMVCCommand_multiplex::selectionNames[3] = { "noMultiplex"
                                      ,"transportStream"
                                      ,"programStream"};

const NewATMVCCommand_multiplex::InfoType NewATMVCCommand_multiplex::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NewATMVCCommand_multiplex::selectionInfos,
    3, 3,
    NULL,
    NewATMVCCommand_multiplex::selectionNames
};

//
// MobileMultilinkReconfigurationCommand_status
//


const void* MobileMultilinkReconfigurationCommand_status::selectionInfos[2] = {
         &synchronized::value_type::theInfo,
         &reconfiguration::value_type::theInfo
};

const char* MobileMultilinkReconfigurationCommand_status::selectionNames[2] = { "synchronized"
                                      ,"reconfiguration"};

const MobileMultilinkReconfigurationCommand_status::InfoType MobileMultilinkReconfigurationCommand_status::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MobileMultilinkReconfigurationCommand_status::selectionInfos,
    2, 2,
    NULL,
    MobileMultilinkReconfigurationCommand_status::selectionNames
};

//
// FunctionNotSupported_cause
//


const void* FunctionNotSupported_cause::selectionInfos[3] = {
         &syntaxError::value_type::theInfo,
         &semanticError::value_type::theInfo,
         &unknownFunction::value_type::theInfo
};

const char* FunctionNotSupported_cause::selectionNames[3] = { "syntaxError"
                                      ,"semanticError"
                                      ,"unknownFunction"};

const FunctionNotSupported_cause::InfoType FunctionNotSupported_cause::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    FunctionNotSupported_cause::selectionInfos,
    3, 3,
    NULL,
    FunctionNotSupported_cause::selectionNames
};

//
// JitterIndication_scope
//


const void* JitterIndication_scope::selectionInfos[3] = {
         &logicalChannelNumber::value_type::theInfo,
         &resourceID::value_type::theInfo,
         &wholeMultiplex::value_type::theInfo
};

const char* JitterIndication_scope::selectionNames[3] = { "logicalChannelNumber"
                                      ,"resourceID"
                                      ,"wholeMultiplex"};

const JitterIndication_scope::InfoType JitterIndication_scope::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    JitterIndication_scope::selectionInfos,
    3, 3,
    NULL,
    JitterIndication_scope::selectionNames
};

//
// NewATMVCIndication_multiplex
//


const void* NewATMVCIndication_multiplex::selectionInfos[3] = {
         &noMultiplex::value_type::theInfo,
         &transportStream::value_type::theInfo,
         &programStream::value_type::theInfo
};

const char* NewATMVCIndication_multiplex::selectionNames[3] = { "noMultiplex"
                                      ,"transportStream"
                                      ,"programStream"};

const NewATMVCIndication_multiplex::InfoType NewATMVCIndication_multiplex::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NewATMVCIndication_multiplex::selectionInfos,
    3, 3,
    NULL,
    NewATMVCIndication_multiplex::selectionNames
};

//
// UserInputIndication_encryptedAlphanumeric
//


const void* UserInputIndication_encryptedAlphanumeric::fieldInfos[3] = {
         &algorithmOID::value_type::theInfo,
         &paramS::value_type::theInfo,
         &encrypted::value_type::theInfo
};
int UserInputIndication_encryptedAlphanumeric::fieldIds[3] = {
        -1,
        0,
        -1,
    };

const char* UserInputIndication_encryptedAlphanumeric::fieldNames[3] = {
        "algorithmOID",
        "paramS",
        "encrypted"
};

const UserInputIndication_encryptedAlphanumeric::InfoType UserInputIndication_encryptedAlphanumeric::theInfo = {
    UserInputIndication_encryptedAlphanumeric::create,
    0x000010,
    true,
    UserInputIndication_encryptedAlphanumeric::fieldInfos,
    UserInputIndication_encryptedAlphanumeric::fieldIds,
    3, 0, 1,
    NULL,
    NULL,
    UserInputIndication_encryptedAlphanumeric::fieldNames
};

//
// FlowControlIndication_scope
//


const void* FlowControlIndication_scope::selectionInfos[3] = {
         &logicalChannelNumber::value_type::theInfo,
         &resourceID::value_type::theInfo,
         &wholeMultiplex::value_type::theInfo
};

const char* FlowControlIndication_scope::selectionNames[3] = { "logicalChannelNumber"
                                      ,"resourceID"
                                      ,"wholeMultiplex"};

const FlowControlIndication_scope::InfoType FlowControlIndication_scope::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    FlowControlIndication_scope::selectionInfos,
    3, 3,
    NULL,
    FlowControlIndication_scope::selectionNames
};

//
// FlowControlIndication_restriction
//


const void* FlowControlIndication_restriction::selectionInfos[2] = {
         &maximumBitRate::value_type::theInfo,
         &noRestriction::value_type::theInfo
};

const char* FlowControlIndication_restriction::selectionNames[2] = { "maximumBitRate"
                                      ,"noRestriction"};

const FlowControlIndication_restriction::InfoType FlowControlIndication_restriction::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    FlowControlIndication_restriction::selectionInfos,
    2, 2,
    NULL,
    FlowControlIndication_restriction::selectionNames
};

//
// TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded
//


const void* TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::selectionInfos[2] = {
         &highestEntryNumberProcessed::value_type::theInfo,
         &noneProcessed::value_type::theInfo
};

const char* TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::selectionNames[2] = { "highestEntryNumberProcessed"
                                      ,"noneProcessed"};

const TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::InfoType TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::selectionInfos,
    2, 2,
    NULL,
    TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::selectionNames
};

//
// H223Capability_h223MultiplexTableCapability_enhanced
//


const void* H223Capability_h223MultiplexTableCapability_enhanced::fieldInfos[3] = {
         &maximumNestingDepth::value_type::theInfo,
         &maximumElementListSize::value_type::theInfo,
         &maximumSubElementListSize::value_type::theInfo
};
int H223Capability_h223MultiplexTableCapability_enhanced::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* H223Capability_h223MultiplexTableCapability_enhanced::fieldNames[3] = {
        "maximumNestingDepth",
        "maximumElementListSize",
        "maximumSubElementListSize"
};

const H223Capability_h223MultiplexTableCapability_enhanced::InfoType H223Capability_h223MultiplexTableCapability_enhanced::theInfo = {
    H223Capability_h223MultiplexTableCapability_enhanced::create,
    0x000010,
    true,
    H223Capability_h223MultiplexTableCapability_enhanced::fieldInfos,
    H223Capability_h223MultiplexTableCapability_enhanced::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    H223Capability_h223MultiplexTableCapability_enhanced::fieldNames
};

//
// RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters
//


const void* RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::fieldInfos[3] = {
         &mpuHorizMBs::value_type::theInfo,
         &mpuVertMBs::value_type::theInfo,
         &mpuTotalNumber::value_type::theInfo
};
int RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::fieldNames[3] = {
        "mpuHorizMBs",
        "mpuVertMBs",
        "mpuTotalNumber"
};

const RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::InfoType RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::theInfo = {
    RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::create,
    0x000010,
    true,
    RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::fieldInfos,
    RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::fieldNames
};

//
// DepFECCapability_rfc2733_separateStream
//


const void* DepFECCapability_rfc2733_separateStream::fieldInfos[2] = {
         &separatePort::value_type::theInfo,
         &samePort::value_type::theInfo
};
int DepFECCapability_rfc2733_separateStream::fieldIds[2] = {
        -1,
        -1,
    };

const char* DepFECCapability_rfc2733_separateStream::fieldNames[2] = {
        "separatePort",
        "samePort"
};

const DepFECCapability_rfc2733_separateStream::InfoType DepFECCapability_rfc2733_separateStream::theInfo = {
    DepFECCapability_rfc2733_separateStream::create,
    0x000010,
    true,
    DepFECCapability_rfc2733_separateStream::fieldInfos,
    DepFECCapability_rfc2733_separateStream::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    DepFECCapability_rfc2733_separateStream::fieldNames
};

//
// H223LogicalChannelParameters_adaptationLayerType_al3
//


const void* H223LogicalChannelParameters_adaptationLayerType_al3::fieldInfos[2] = {
         &controlFieldOctets::value_type::theInfo,
         &sendBufferSize::value_type::theInfo
};
int H223LogicalChannelParameters_adaptationLayerType_al3::fieldIds[2] = {
        -1,
        -1,
    };

const char* H223LogicalChannelParameters_adaptationLayerType_al3::fieldNames[2] = {
        "controlFieldOctets",
        "sendBufferSize"
};

const H223LogicalChannelParameters_adaptationLayerType_al3::InfoType H223LogicalChannelParameters_adaptationLayerType_al3::theInfo = {
    H223LogicalChannelParameters_adaptationLayerType_al3::create,
    0x000010,
    false,
    H223LogicalChannelParameters_adaptationLayerType_al3::fieldInfos,
    H223LogicalChannelParameters_adaptationLayerType_al3::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H223LogicalChannelParameters_adaptationLayerType_al3::fieldNames
};

//
// UnicastAddress_iPSourceRouteAddress_routing
//


const void* UnicastAddress_iPSourceRouteAddress_routing::selectionInfos[2] = {
         &strict::value_type::theInfo,
         &loose::value_type::theInfo
};

const char* UnicastAddress_iPSourceRouteAddress_routing::selectionNames[2] = { "strict"
                                      ,"loose"};

const UnicastAddress_iPSourceRouteAddress_routing::InfoType UnicastAddress_iPSourceRouteAddress_routing::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    UnicastAddress_iPSourceRouteAddress_routing::selectionInfos,
    2, 2,
    NULL,
    UnicastAddress_iPSourceRouteAddress_routing::selectionNames
};

//
// H223ModeParameters_adaptationLayerType_al3
//


const void* H223ModeParameters_adaptationLayerType_al3::fieldInfos[2] = {
         &controlFieldOctets::value_type::theInfo,
         &sendBufferSize::value_type::theInfo
};
int H223ModeParameters_adaptationLayerType_al3::fieldIds[2] = {
        -1,
        -1,
    };

const char* H223ModeParameters_adaptationLayerType_al3::fieldNames[2] = {
        "controlFieldOctets",
        "sendBufferSize"
};

const H223ModeParameters_adaptationLayerType_al3::InfoType H223ModeParameters_adaptationLayerType_al3::theInfo = {
    H223ModeParameters_adaptationLayerType_al3::create,
    0x000010,
    false,
    H223ModeParameters_adaptationLayerType_al3::fieldInfos,
    H223ModeParameters_adaptationLayerType_al3::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H223ModeParameters_adaptationLayerType_al3::fieldNames
};

//
// MultilinkRequest_maximumHeaderInterval_requestType
//


const void* MultilinkRequest_maximumHeaderInterval_requestType::selectionInfos[2] = {
         &currentIntervalInformation::value_type::theInfo,
         &requestedInterval::value_type::theInfo
};

const char* MultilinkRequest_maximumHeaderInterval_requestType::selectionNames[2] = { "currentIntervalInformation"
                                      ,"requestedInterval"};

const MultilinkRequest_maximumHeaderInterval_requestType::InfoType MultilinkRequest_maximumHeaderInterval_requestType::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MultilinkRequest_maximumHeaderInterval_requestType::selectionInfos,
    2, 2,
    NULL,
    MultilinkRequest_maximumHeaderInterval_requestType::selectionNames
};

//
// MiscellaneousCommand_type_videoFastUpdateGOB
//


const void* MiscellaneousCommand_type_videoFastUpdateGOB::fieldInfos[2] = {
         &firstGOB::value_type::theInfo,
         &numberOfGOBs::value_type::theInfo
};
int MiscellaneousCommand_type_videoFastUpdateGOB::fieldIds[2] = {
        -1,
        -1,
    };

const char* MiscellaneousCommand_type_videoFastUpdateGOB::fieldNames[2] = {
        "firstGOB",
        "numberOfGOBs"
};

const MiscellaneousCommand_type_videoFastUpdateGOB::InfoType MiscellaneousCommand_type_videoFastUpdateGOB::theInfo = {
    MiscellaneousCommand_type_videoFastUpdateGOB::create,
    0x000010,
    false,
    MiscellaneousCommand_type_videoFastUpdateGOB::fieldInfos,
    MiscellaneousCommand_type_videoFastUpdateGOB::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MiscellaneousCommand_type_videoFastUpdateGOB::fieldNames
};

//
// MiscellaneousCommand_type_videoFastUpdateMB
//


const void* MiscellaneousCommand_type_videoFastUpdateMB::fieldInfos[3] = {
         &firstGOB::value_type::theInfo,
         &firstMB::value_type::theInfo,
         &numberOfMBs::value_type::theInfo
};
int MiscellaneousCommand_type_videoFastUpdateMB::fieldIds[3] = {
        0,
        1,
        -1,
    };

const char* MiscellaneousCommand_type_videoFastUpdateMB::fieldNames[3] = {
        "firstGOB",
        "firstMB",
        "numberOfMBs"
};

const MiscellaneousCommand_type_videoFastUpdateMB::InfoType MiscellaneousCommand_type_videoFastUpdateMB::theInfo = {
    MiscellaneousCommand_type_videoFastUpdateMB::create,
    0x000010,
    true,
    MiscellaneousCommand_type_videoFastUpdateMB::fieldInfos,
    MiscellaneousCommand_type_videoFastUpdateMB::fieldIds,
    3, 0, 2,
    NULL,
    NULL,
    MiscellaneousCommand_type_videoFastUpdateMB::fieldNames
};

//
// MiscellaneousCommand_type_videoBadMBs
//


const void* MiscellaneousCommand_type_videoBadMBs::fieldInfos[3] = {
         &firstMB::value_type::theInfo,
         &numberOfMBs::value_type::theInfo,
         &temporalReference::value_type::theInfo
};
int MiscellaneousCommand_type_videoBadMBs::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* MiscellaneousCommand_type_videoBadMBs::fieldNames[3] = {
        "firstMB",
        "numberOfMBs",
        "temporalReference"
};

const MiscellaneousCommand_type_videoBadMBs::InfoType MiscellaneousCommand_type_videoBadMBs::theInfo = {
    MiscellaneousCommand_type_videoBadMBs::create,
    0x000010,
    true,
    MiscellaneousCommand_type_videoBadMBs::fieldInfos,
    MiscellaneousCommand_type_videoBadMBs::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    MiscellaneousCommand_type_videoBadMBs::fieldNames
};

//
// MiscellaneousCommand_type_lostPartialPicture
//


const void* MiscellaneousCommand_type_lostPartialPicture::fieldInfos[3] = {
         &pictureReference::value_type::theInfo,
         &firstMB::value_type::theInfo,
         &numberOfMBs::value_type::theInfo
};
int MiscellaneousCommand_type_lostPartialPicture::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* MiscellaneousCommand_type_lostPartialPicture::fieldNames[3] = {
        "pictureReference",
        "firstMB",
        "numberOfMBs"
};

const MiscellaneousCommand_type_lostPartialPicture::InfoType MiscellaneousCommand_type_lostPartialPicture::theInfo = {
    MiscellaneousCommand_type_lostPartialPicture::create,
    0x000010,
    true,
    MiscellaneousCommand_type_lostPartialPicture::fieldInfos,
    MiscellaneousCommand_type_lostPartialPicture::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    MiscellaneousCommand_type_lostPartialPicture::fieldNames
};

//
// MiscellaneousCommand_type_encryptionUpdateAck
//


const void* MiscellaneousCommand_type_encryptionUpdateAck::fieldInfos[1] = {
         &synchFlag::value_type::theInfo
};
int MiscellaneousCommand_type_encryptionUpdateAck::fieldIds[1] = {
        -1,
    };

const char* MiscellaneousCommand_type_encryptionUpdateAck::fieldNames[1] = {
        "synchFlag"
};

const MiscellaneousCommand_type_encryptionUpdateAck::InfoType MiscellaneousCommand_type_encryptionUpdateAck::theInfo = {
    MiscellaneousCommand_type_encryptionUpdateAck::create,
    0x000010,
    true,
    MiscellaneousCommand_type_encryptionUpdateAck::fieldInfos,
    MiscellaneousCommand_type_encryptionUpdateAck::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MiscellaneousCommand_type_encryptionUpdateAck::fieldNames
};

//
// NewATMVCCommand_aal_aal5
//


const void* NewATMVCCommand_aal_aal5::fieldInfos[2] = {
         &forwardMaximumSDUSize::value_type::theInfo,
         &backwardMaximumSDUSize::value_type::theInfo
};
int NewATMVCCommand_aal_aal5::fieldIds[2] = {
        -1,
        -1,
    };

const char* NewATMVCCommand_aal_aal5::fieldNames[2] = {
        "forwardMaximumSDUSize",
        "backwardMaximumSDUSize"
};

const NewATMVCCommand_aal_aal5::InfoType NewATMVCCommand_aal_aal5::theInfo = {
    NewATMVCCommand_aal_aal5::create,
    0x000010,
    true,
    NewATMVCCommand_aal_aal5::fieldInfos,
    NewATMVCCommand_aal_aal5::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    NewATMVCCommand_aal_aal5::fieldNames
};

//
// NewATMVCCommand_reverseParameters_multiplex
//


const void* NewATMVCCommand_reverseParameters_multiplex::selectionInfos[3] = {
         &noMultiplex::value_type::theInfo,
         &transportStream::value_type::theInfo,
         &programStream::value_type::theInfo
};

const char* NewATMVCCommand_reverseParameters_multiplex::selectionNames[3] = { "noMultiplex"
                                      ,"transportStream"
                                      ,"programStream"};

const NewATMVCCommand_reverseParameters_multiplex::InfoType NewATMVCCommand_reverseParameters_multiplex::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NewATMVCCommand_reverseParameters_multiplex::selectionInfos,
    3, 3,
    NULL,
    NewATMVCCommand_reverseParameters_multiplex::selectionNames
};

//
// MiscellaneousIndication_type_videoNotDecodedMBs
//


const void* MiscellaneousIndication_type_videoNotDecodedMBs::fieldInfos[3] = {
         &firstMB::value_type::theInfo,
         &numberOfMBs::value_type::theInfo,
         &temporalReference::value_type::theInfo
};
int MiscellaneousIndication_type_videoNotDecodedMBs::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* MiscellaneousIndication_type_videoNotDecodedMBs::fieldNames[3] = {
        "firstMB",
        "numberOfMBs",
        "temporalReference"
};

const MiscellaneousIndication_type_videoNotDecodedMBs::InfoType MiscellaneousIndication_type_videoNotDecodedMBs::theInfo = {
    MiscellaneousIndication_type_videoNotDecodedMBs::create,
    0x000010,
    true,
    MiscellaneousIndication_type_videoNotDecodedMBs::fieldInfos,
    MiscellaneousIndication_type_videoNotDecodedMBs::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    MiscellaneousIndication_type_videoNotDecodedMBs::fieldNames
};

//
// NewATMVCIndication_aal_aal5
//


const void* NewATMVCIndication_aal_aal5::fieldInfos[2] = {
         &forwardMaximumSDUSize::value_type::theInfo,
         &backwardMaximumSDUSize::value_type::theInfo
};
int NewATMVCIndication_aal_aal5::fieldIds[2] = {
        -1,
        -1,
    };

const char* NewATMVCIndication_aal_aal5::fieldNames[2] = {
        "forwardMaximumSDUSize",
        "backwardMaximumSDUSize"
};

const NewATMVCIndication_aal_aal5::InfoType NewATMVCIndication_aal_aal5::theInfo = {
    NewATMVCIndication_aal_aal5::create,
    0x000010,
    true,
    NewATMVCIndication_aal_aal5::fieldInfos,
    NewATMVCIndication_aal_aal5::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    NewATMVCIndication_aal_aal5::fieldNames
};

//
// NewATMVCIndication_reverseParameters_multiplex
//


const void* NewATMVCIndication_reverseParameters_multiplex::selectionInfos[3] = {
         &noMultiplex::value_type::theInfo,
         &transportStream::value_type::theInfo,
         &programStream::value_type::theInfo
};

const char* NewATMVCIndication_reverseParameters_multiplex::selectionNames[3] = { "noMultiplex"
                                      ,"transportStream"
                                      ,"programStream"};

const NewATMVCIndication_reverseParameters_multiplex::InfoType NewATMVCIndication_reverseParameters_multiplex::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NewATMVCIndication_reverseParameters_multiplex::selectionInfos,
    3, 3,
    NULL,
    NewATMVCIndication_reverseParameters_multiplex::selectionNames
};

//
// UserInputIndication_signal_rtp
//


const void* UserInputIndication_signal_rtp::fieldInfos[3] = {
         &timestamp::value_type::theInfo,
         &expirationTime::value_type::theInfo,
         &logicalChannelNumber::value_type::theInfo
};
int UserInputIndication_signal_rtp::fieldIds[3] = {
        0,
        1,
        -1,
    };

const char* UserInputIndication_signal_rtp::fieldNames[3] = {
        "timestamp",
        "expirationTime",
        "logicalChannelNumber"
};

const UserInputIndication_signal_rtp::InfoType UserInputIndication_signal_rtp::theInfo = {
    UserInputIndication_signal_rtp::create,
    0x000010,
    true,
    UserInputIndication_signal_rtp::fieldInfos,
    UserInputIndication_signal_rtp::fieldIds,
    3, 0, 2,
    NULL,
    NULL,
    UserInputIndication_signal_rtp::fieldNames
};

//
// UserInputIndication_signalUpdate_rtp
//


const void* UserInputIndication_signalUpdate_rtp::fieldInfos[1] = {
         &logicalChannelNumber::value_type::theInfo
};
int UserInputIndication_signalUpdate_rtp::fieldIds[1] = {
        -1,
    };

const char* UserInputIndication_signalUpdate_rtp::fieldNames[1] = {
        "logicalChannelNumber"
};

const UserInputIndication_signalUpdate_rtp::InfoType UserInputIndication_signalUpdate_rtp::theInfo = {
    UserInputIndication_signalUpdate_rtp::create,
    0x000010,
    true,
    UserInputIndication_signalUpdate_rtp::fieldInfos,
    UserInputIndication_signalUpdate_rtp::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    UserInputIndication_signalUpdate_rtp::fieldNames
};

//
// UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric
//


const void* UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::fieldInfos[3] = {
         &algorithmOID::value_type::theInfo,
         &paramS::value_type::theInfo,
         &encrypted::value_type::theInfo
};
int UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::fieldIds[3] = {
        -1,
        0,
        -1,
    };

const char* UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::fieldNames[3] = {
        "algorithmOID",
        "paramS",
        "encrypted"
};

const UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::InfoType UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::theInfo = {
    UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::create,
    0x000010,
    true,
    UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::fieldInfos,
    UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::fieldIds,
    3, 0, 1,
    NULL,
    NULL,
    UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::fieldNames
};

//
// VCCapability_availableBitRates_type_rangeOfBitRates
//


const void* VCCapability_availableBitRates_type_rangeOfBitRates::fieldInfos[2] = {
         &lowerBitRate::value_type::theInfo,
         &higherBitRate::value_type::theInfo
};
int VCCapability_availableBitRates_type_rangeOfBitRates::fieldIds[2] = {
        -1,
        -1,
    };

const char* VCCapability_availableBitRates_type_rangeOfBitRates::fieldNames[2] = {
        "lowerBitRate",
        "higherBitRate"
};

const VCCapability_availableBitRates_type_rangeOfBitRates::InfoType VCCapability_availableBitRates_type_rangeOfBitRates::theInfo = {
    VCCapability_availableBitRates_type_rangeOfBitRates::create,
    0x000010,
    false,
    VCCapability_availableBitRates_type_rangeOfBitRates::fieldInfos,
    VCCapability_availableBitRates_type_rangeOfBitRates::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    VCCapability_availableBitRates_type_rangeOfBitRates::fieldNames
};

//
// CustomPictureFormat_mPI_customPCF_subtype
//


const void* CustomPictureFormat_mPI_customPCF_subtype::fieldInfos[3] = {
         &clockConversionCode::value_type::theInfo,
         &clockDivisor::value_type::theInfo,
         &customMPI::value_type::theInfo
};
int CustomPictureFormat_mPI_customPCF_subtype::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* CustomPictureFormat_mPI_customPCF_subtype::fieldNames[3] = {
        "clockConversionCode",
        "clockDivisor",
        "customMPI"
};

const CustomPictureFormat_mPI_customPCF_subtype::InfoType CustomPictureFormat_mPI_customPCF_subtype::theInfo = {
    CustomPictureFormat_mPI_customPCF_subtype::create,
    0x000010,
    true,
    CustomPictureFormat_mPI_customPCF_subtype::fieldInfos,
    CustomPictureFormat_mPI_customPCF_subtype::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    CustomPictureFormat_mPI_customPCF_subtype::fieldNames
};

//
// CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype
//


const void* CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::fieldInfos[2] = {
         &width::value_type::theInfo,
         &height::value_type::theInfo
};
int CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::fieldIds[2] = {
        -1,
        -1,
    };

const char* CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::fieldNames[2] = {
        "width",
        "height"
};

const CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::InfoType CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::theInfo = {
    CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::create,
    0x000010,
    true,
    CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::fieldInfos,
    CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::fieldNames
};

//
// V76LogicalChannelParameters_mode_eRM_recovery
//


const void* V76LogicalChannelParameters_mode_eRM_recovery::selectionInfos[3] = {
         &rej::value_type::theInfo,
         &sREJ::value_type::theInfo,
         &mSREJ::value_type::theInfo
};

const char* V76LogicalChannelParameters_mode_eRM_recovery::selectionNames[3] = { "rej"
                                      ,"sREJ"
                                      ,"mSREJ"};

const V76LogicalChannelParameters_mode_eRM_recovery::InfoType V76LogicalChannelParameters_mode_eRM_recovery::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    V76LogicalChannelParameters_mode_eRM_recovery::selectionInfos,
    3, 3,
    NULL,
    V76LogicalChannelParameters_mode_eRM_recovery::selectionNames
};

//
// FECData_rfc2733_pktMode_rfc2733sameport
//


const FECData_rfc2733_pktMode_rfc2733sameport::InfoType FECData_rfc2733_pktMode_rfc2733sameport::theInfo = {
    FECData_rfc2733_pktMode_rfc2733sameport::create,
    0x000010,
    true,
    NULL, NULL,
    0, 0, 0,
    NULL,
    NULL,
    NULL
};

//
// FECData_rfc2733_pktMode_rfc2733diffport
//


const void* FECData_rfc2733_pktMode_rfc2733diffport::fieldInfos[1] = {
         &protectedChannel::value_type::theInfo
};
int FECData_rfc2733_pktMode_rfc2733diffport::fieldIds[1] = {
        -1,
    };

const char* FECData_rfc2733_pktMode_rfc2733diffport::fieldNames[1] = {
        "protectedChannel"
};

const FECData_rfc2733_pktMode_rfc2733diffport::InfoType FECData_rfc2733_pktMode_rfc2733diffport::theInfo = {
    FECData_rfc2733_pktMode_rfc2733diffport::create,
    0x000010,
    true,
    FECData_rfc2733_pktMode_rfc2733diffport::fieldInfos,
    FECData_rfc2733_pktMode_rfc2733diffport::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    FECData_rfc2733_pktMode_rfc2733diffport::fieldNames
};

//
// MultilinkResponse_addConnection_responseCode_rejected
//


const void* MultilinkResponse_addConnection_responseCode_rejected::selectionInfos[2] = {
         &connectionsNotAvailable::value_type::theInfo,
         &userRejected::value_type::theInfo
};

const char* MultilinkResponse_addConnection_responseCode_rejected::selectionNames[2] = { "connectionsNotAvailable"
                                      ,"userRejected"};

const MultilinkResponse_addConnection_responseCode_rejected::InfoType MultilinkResponse_addConnection_responseCode_rejected::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MultilinkResponse_addConnection_responseCode_rejected::selectionInfos,
    2, 2,
    NULL,
    MultilinkResponse_addConnection_responseCode_rejected::selectionNames
};

//
// MiscellaneousCommand_type_progressiveRefinementStart_repeatCount
//


const void* MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::selectionInfos[4] = {
         &doOneProgression::value_type::theInfo,
         &doContinuousProgressions::value_type::theInfo,
         &doOneIndependentProgression::value_type::theInfo,
         &doContinuousIndependentProgressions::value_type::theInfo
};

const char* MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::selectionNames[4] = { "doOneProgression"
                                      ,"doContinuousProgressions"
                                      ,"doOneIndependentProgression"
                                      ,"doContinuousIndependentProgressions"};

const MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::InfoType MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::selectionInfos,
    4, 4,
    NULL,
    MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::selectionNames
};

//
// NewATMVCCommand_aal_aal1_clockRecovery
//


const void* NewATMVCCommand_aal_aal1_clockRecovery::selectionInfos[3] = {
         &nullClockRecovery::value_type::theInfo,
         &srtsClockRecovery::value_type::theInfo,
         &adaptiveClockRecovery::value_type::theInfo
};

const char* NewATMVCCommand_aal_aal1_clockRecovery::selectionNames[3] = { "nullClockRecovery"
                                      ,"srtsClockRecovery"
                                      ,"adaptiveClockRecovery"};

const NewATMVCCommand_aal_aal1_clockRecovery::InfoType NewATMVCCommand_aal_aal1_clockRecovery::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NewATMVCCommand_aal_aal1_clockRecovery::selectionInfos,
    3, 3,
    NULL,
    NewATMVCCommand_aal_aal1_clockRecovery::selectionNames
};

//
// NewATMVCCommand_aal_aal1_errorCorrection
//


const void* NewATMVCCommand_aal_aal1_errorCorrection::selectionInfos[4] = {
         &nullErrorCorrection::value_type::theInfo,
         &longInterleaver::value_type::theInfo,
         &shortInterleaver::value_type::theInfo,
         &errorCorrectionOnly::value_type::theInfo
};

const char* NewATMVCCommand_aal_aal1_errorCorrection::selectionNames[4] = { "nullErrorCorrection"
                                      ,"longInterleaver"
                                      ,"shortInterleaver"
                                      ,"errorCorrectionOnly"};

const NewATMVCCommand_aal_aal1_errorCorrection::InfoType NewATMVCCommand_aal_aal1_errorCorrection::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NewATMVCCommand_aal_aal1_errorCorrection::selectionInfos,
    4, 4,
    NULL,
    NewATMVCCommand_aal_aal1_errorCorrection::selectionNames
};

//
// NewATMVCIndication_aal_aal1_clockRecovery
//


const void* NewATMVCIndication_aal_aal1_clockRecovery::selectionInfos[3] = {
         &nullClockRecovery::value_type::theInfo,
         &srtsClockRecovery::value_type::theInfo,
         &adaptiveClockRecovery::value_type::theInfo
};

const char* NewATMVCIndication_aal_aal1_clockRecovery::selectionNames[3] = { "nullClockRecovery"
                                      ,"srtsClockRecovery"
                                      ,"adaptiveClockRecovery"};

const NewATMVCIndication_aal_aal1_clockRecovery::InfoType NewATMVCIndication_aal_aal1_clockRecovery::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NewATMVCIndication_aal_aal1_clockRecovery::selectionInfos,
    3, 3,
    NULL,
    NewATMVCIndication_aal_aal1_clockRecovery::selectionNames
};

//
// NewATMVCIndication_aal_aal1_errorCorrection
//


const void* NewATMVCIndication_aal_aal1_errorCorrection::selectionInfos[4] = {
         &nullErrorCorrection::value_type::theInfo,
         &longInterleaver::value_type::theInfo,
         &shortInterleaver::value_type::theInfo,
         &errorCorrectionOnly::value_type::theInfo
};

const char* NewATMVCIndication_aal_aal1_errorCorrection::selectionNames[4] = { "nullErrorCorrection"
                                      ,"longInterleaver"
                                      ,"shortInterleaver"
                                      ,"errorCorrectionOnly"};

const NewATMVCIndication_aal_aal1_errorCorrection::InfoType NewATMVCIndication_aal_aal1_errorCorrection::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NewATMVCIndication_aal_aal1_errorCorrection::selectionInfos,
    4, 4,
    NULL,
    NewATMVCIndication_aal_aal1_errorCorrection::selectionNames
};

//
// DepFECData_rfc2733_mode_separateStream_differentPort
//


const void* DepFECData_rfc2733_mode_separateStream_differentPort::fieldInfos[2] = {
         &protectedSessionID::value_type::theInfo,
         &protectedPayloadType::value_type::theInfo
};
int DepFECData_rfc2733_mode_separateStream_differentPort::fieldIds[2] = {
        -1,
        0
    };

const char* DepFECData_rfc2733_mode_separateStream_differentPort::fieldNames[2] = {
        "protectedSessionID",
        "protectedPayloadType"
};

const DepFECData_rfc2733_mode_separateStream_differentPort::InfoType DepFECData_rfc2733_mode_separateStream_differentPort::theInfo = {
    DepFECData_rfc2733_mode_separateStream_differentPort::create,
    0x000010,
    true,
    DepFECData_rfc2733_mode_separateStream_differentPort::fieldInfos,
    DepFECData_rfc2733_mode_separateStream_differentPort::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    DepFECData_rfc2733_mode_separateStream_differentPort::fieldNames
};

//
// DepFECData_rfc2733_mode_separateStream_samePort
//


const void* DepFECData_rfc2733_mode_separateStream_samePort::fieldInfos[1] = {
         &protectedPayloadType::value_type::theInfo
};
int DepFECData_rfc2733_mode_separateStream_samePort::fieldIds[1] = {
        -1,
    };

const char* DepFECData_rfc2733_mode_separateStream_samePort::fieldNames[1] = {
        "protectedPayloadType"
};

const DepFECData_rfc2733_mode_separateStream_samePort::InfoType DepFECData_rfc2733_mode_separateStream_samePort::theInfo = {
    DepFECData_rfc2733_mode_separateStream_samePort::create,
    0x000010,
    true,
    DepFECData_rfc2733_mode_separateStream_samePort::fieldInfos,
    DepFECData_rfc2733_mode_separateStream_samePort::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    DepFECData_rfc2733_mode_separateStream_samePort::fieldNames
};

//
// NonStandardIdentifier
//


const void* NonStandardIdentifier::selectionInfos[2] = {
         &object::value_type::theInfo,
         &h221NonStandard::value_type::theInfo
};

const char* NonStandardIdentifier::selectionNames[2] = { "object"
                                      ,"h221NonStandard"};

const NonStandardIdentifier::InfoType NonStandardIdentifier::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    NonStandardIdentifier::selectionInfos,
    2, 2,
    NULL,
    NonStandardIdentifier::selectionNames
};

//
// MasterSlaveDeterminationAck
//


const void* MasterSlaveDeterminationAck::fieldInfos[1] = {
         &decision::value_type::theInfo
};
int MasterSlaveDeterminationAck::fieldIds[1] = {
        -1,
    };

const char* MasterSlaveDeterminationAck::fieldNames[1] = {
        "decision"
};

const MasterSlaveDeterminationAck::InfoType MasterSlaveDeterminationAck::theInfo = {
    MasterSlaveDeterminationAck::create,
    0x000010,
    true,
    MasterSlaveDeterminationAck::fieldInfos,
    MasterSlaveDeterminationAck::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MasterSlaveDeterminationAck::fieldNames
};

//
// MasterSlaveDeterminationReject
//


const void* MasterSlaveDeterminationReject::fieldInfos[1] = {
         &cause::value_type::theInfo
};
int MasterSlaveDeterminationReject::fieldIds[1] = {
        -1,
    };

const char* MasterSlaveDeterminationReject::fieldNames[1] = {
        "cause"
};

const MasterSlaveDeterminationReject::InfoType MasterSlaveDeterminationReject::theInfo = {
    MasterSlaveDeterminationReject::create,
    0x000010,
    true,
    MasterSlaveDeterminationReject::fieldInfos,
    MasterSlaveDeterminationReject::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MasterSlaveDeterminationReject::fieldNames
};

//
// V76Capability
//


const void* V76Capability::fieldInfos[15] = {
         &suspendResumeCapabilitywAddress::value_type::theInfo,
         &suspendResumeCapabilitywoAddress::value_type::theInfo,
         &rejCapability::value_type::theInfo,
         &sREJCapability::value_type::theInfo,
         &mREJCapability::value_type::theInfo,
         &crc8bitCapability::value_type::theInfo,
         &crc16bitCapability::value_type::theInfo,
         &crc32bitCapability::value_type::theInfo,
         &uihCapability::value_type::theInfo,
         &numOfDLCS::value_type::theInfo,
         &twoOctetAddressFieldCapability::value_type::theInfo,
         &loopBackTestCapability::value_type::theInfo,
         &n401Capability::value_type::theInfo,
         &maxWindowSizeCapability::value_type::theInfo,
         &v75Capability::value_type::theInfo
};
int V76Capability::fieldIds[15] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* V76Capability::fieldNames[15] = {
        "suspendResumeCapabilitywAddress",
        "suspendResumeCapabilitywoAddress",
        "rejCapability",
        "sREJCapability",
        "mREJCapability",
        "crc8bitCapability",
        "crc16bitCapability",
        "crc32bitCapability",
        "uihCapability",
        "numOfDLCS",
        "twoOctetAddressFieldCapability",
        "loopBackTestCapability",
        "n401Capability",
        "maxWindowSizeCapability",
        "v75Capability"
};

const V76Capability::InfoType V76Capability::theInfo = {
    V76Capability::create,
    0x000010,
    true,
    V76Capability::fieldInfos,
    V76Capability::fieldIds,
    15, 0, 0,
    NULL,
    NULL,
    V76Capability::fieldNames
};

//
// RSVPParameters
//


const void* RSVPParameters::fieldInfos[6] = {
         &qosMode::value_type::theInfo,
         &tokenRate::value_type::theInfo,
         &bucketSize::value_type::theInfo,
         &peakRate::value_type::theInfo,
         &minPoliced::value_type::theInfo,
         &maxPktSize::value_type::theInfo
};
int RSVPParameters::fieldIds[6] = {
        0,
        1,
        2,
        3,
        4,
        5
    };

const char* RSVPParameters::fieldNames[6] = {
        "qosMode",
        "tokenRate",
        "bucketSize",
        "peakRate",
        "minPoliced",
        "maxPktSize"
};

const RSVPParameters::InfoType RSVPParameters::theInfo = {
    RSVPParameters::create,
    0x000010,
    true,
    RSVPParameters::fieldInfos,
    RSVPParameters::fieldIds,
    6, 0, 6,
    NULL,
    NULL,
    RSVPParameters::fieldNames
};

//
// MediaTransportType
//


const void* MediaTransportType::selectionInfos[5] = {
         &ip_UDP::value_type::theInfo,
         &ip_TCP::value_type::theInfo,
         &atm_AAL5_UNIDIR::value_type::theInfo,
         &atm_AAL5_BIDIR::value_type::theInfo,
         &atm_AAL5_compressed::value_type::theInfo
};

const char* MediaTransportType::selectionNames[5] = { "ip-UDP"
                                      ,"ip-TCP"
                                      ,"atm-AAL5-UNIDIR"
                                      ,"atm-AAL5-BIDIR"
                                      ,"atm-AAL5-compressed"};

const MediaTransportType::InfoType MediaTransportType::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MediaTransportType::selectionInfos,
    4, 5,
    NULL,
    MediaTransportType::selectionNames
};

//
// MediaChannelCapability
//


const void* MediaChannelCapability::fieldInfos[1] = {
         &mediaTransport::value_type::theInfo
};
int MediaChannelCapability::fieldIds[1] = {
        0
    };

const char* MediaChannelCapability::fieldNames[1] = {
        "mediaTransport"
};

const MediaChannelCapability::InfoType MediaChannelCapability::theInfo = {
    MediaChannelCapability::create,
    0x000010,
    true,
    MediaChannelCapability::fieldInfos,
    MediaChannelCapability::fieldIds,
    1, 0, 1,
    NULL,
    NULL,
    MediaChannelCapability::fieldNames
};

//
// RTPH263VideoRedundancyFrameMapping
//


const void* RTPH263VideoRedundancyFrameMapping::fieldInfos[2] = {
         &threadNumber::value_type::theInfo,
         &frameSequence::value_type::theInfo
};
int RTPH263VideoRedundancyFrameMapping::fieldIds[2] = {
        -1,
        -1,
    };

const char* RTPH263VideoRedundancyFrameMapping::fieldNames[2] = {
        "threadNumber",
        "frameSequence"
};

const RTPH263VideoRedundancyFrameMapping::InfoType RTPH263VideoRedundancyFrameMapping::theInfo = {
    RTPH263VideoRedundancyFrameMapping::create,
    0x000010,
    true,
    RTPH263VideoRedundancyFrameMapping::fieldInfos,
    RTPH263VideoRedundancyFrameMapping::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    RTPH263VideoRedundancyFrameMapping::fieldNames
};

//
// H263ModeComboFlags
//


const void* H263ModeComboFlags::fieldInfos[23] = {
         &unrestrictedVector::value_type::theInfo,
         &arithmeticCoding::value_type::theInfo,
         &advancedPrediction::value_type::theInfo,
         &pbFrames::value_type::theInfo,
         &advancedIntraCodingMode::value_type::theInfo,
         &deblockingFilterMode::value_type::theInfo,
         &unlimitedMotionVectors::value_type::theInfo,
         &slicesInOrder_NonRect::value_type::theInfo,
         &slicesInOrder_Rect::value_type::theInfo,
         &slicesNoOrder_NonRect::value_type::theInfo,
         &slicesNoOrder_Rect::value_type::theInfo,
         &improvedPBFramesMode::value_type::theInfo,
         &referencePicSelect::value_type::theInfo,
         &dynamicPictureResizingByFour::value_type::theInfo,
         &dynamicPictureResizingSixteenthPel::value_type::theInfo,
         &dynamicWarpingHalfPel::value_type::theInfo,
         &dynamicWarpingSixteenthPel::value_type::theInfo,
         &reducedResolutionUpdate::value_type::theInfo,
         &independentSegmentDecoding::value_type::theInfo,
         &alternateInterVLCMode::value_type::theInfo,
         &modifiedQuantizationMode::value_type::theInfo,
         &enhancedReferencePicSelect::value_type::theInfo,
         &h263Version3Options::value_type::theInfo
};
int H263ModeComboFlags::fieldIds[23] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* H263ModeComboFlags::nonOptionalExtensions = "\xc0";

const char* H263ModeComboFlags::fieldNames[23] = {
        "unrestrictedVector",
        "arithmeticCoding",
        "advancedPrediction",
        "pbFrames",
        "advancedIntraCodingMode",
        "deblockingFilterMode",
        "unlimitedMotionVectors",
        "slicesInOrder-NonRect",
        "slicesInOrder-Rect",
        "slicesNoOrder-NonRect",
        "slicesNoOrder-Rect",
        "improvedPBFramesMode",
        "referencePicSelect",
        "dynamicPictureResizingByFour",
        "dynamicPictureResizingSixteenthPel",
        "dynamicWarpingHalfPel",
        "dynamicWarpingSixteenthPel",
        "reducedResolutionUpdate",
        "independentSegmentDecoding",
        "alternateInterVLCMode",
        "modifiedQuantizationMode",
        "enhancedReferencePicSelect",
        "h263Version3Options"
};

const H263ModeComboFlags::InfoType H263ModeComboFlags::theInfo = {
    H263ModeComboFlags::create,
    0x000010,
    true,
    H263ModeComboFlags::fieldInfos,
    H263ModeComboFlags::fieldIds,
    21, 2, 0,
    H263ModeComboFlags::nonOptionalExtensions,
    NULL,
    H263ModeComboFlags::fieldNames
};

//
// G7231AnnexCCapability
//


const void* G7231AnnexCCapability::fieldInfos[3] = {
         &maxAl_sduAudioFrames::value_type::theInfo,
         &silenceSuppression::value_type::theInfo,
         &g723AnnexCAudioMode::value_type::theInfo
};
int G7231AnnexCCapability::fieldIds[3] = {
        -1,
        -1,
        0
    };

const char* G7231AnnexCCapability::fieldNames[3] = {
        "maxAl-sduAudioFrames",
        "silenceSuppression",
        "g723AnnexCAudioMode"
};

const G7231AnnexCCapability::InfoType G7231AnnexCCapability::theInfo = {
    G7231AnnexCCapability::create,
    0x000010,
    true,
    G7231AnnexCCapability::fieldInfos,
    G7231AnnexCCapability::fieldIds,
    3, 0, 1,
    NULL,
    NULL,
    G7231AnnexCCapability::fieldNames
};

//
// CompressionType
//


const void* CompressionType::selectionInfos[1] = {
         &v42bis::value_type::theInfo
};

const char* CompressionType::selectionNames[1] = { "v42bis"};

const CompressionType::InfoType CompressionType::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    CompressionType::selectionInfos,
    1, 1,
    NULL,
    CompressionType::selectionNames
};

//
// T84Profile
//


const void* T84Profile::selectionInfos[2] = {
         &t84Unrestricted::value_type::theInfo,
         &t84Restricted::value_type::theInfo
};

const char* T84Profile::selectionNames[2] = { "t84Unrestricted"
                                      ,"t84Restricted"};

const T84Profile::InfoType T84Profile::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    T84Profile::selectionInfos,
    2, 2,
    NULL,
    T84Profile::selectionNames
};

//
// T38FaxUdpOptions
//


const void* T38FaxUdpOptions::fieldInfos[3] = {
         &t38FaxMaxBuffer::value_type::theInfo,
         &t38FaxMaxDatagram::value_type::theInfo,
         &t38FaxUdpEC::value_type::theInfo
};
int T38FaxUdpOptions::fieldIds[3] = {
        0,
        1,
        -1,
    };

const char* T38FaxUdpOptions::fieldNames[3] = {
        "t38FaxMaxBuffer",
        "t38FaxMaxDatagram",
        "t38FaxUdpEC"
};

const T38FaxUdpOptions::InfoType T38FaxUdpOptions::theInfo = {
    T38FaxUdpOptions::create,
    0x000010,
    false,
    T38FaxUdpOptions::fieldInfos,
    T38FaxUdpOptions::fieldIds,
    3, 0, 2,
    NULL,
    NULL,
    T38FaxUdpOptions::fieldNames
};

//
// MultiplePayloadStreamCapability
//


const void* MultiplePayloadStreamCapability::fieldInfos[1] = {
         &capabilities::value_type::theInfo
};
int MultiplePayloadStreamCapability::fieldIds[1] = {
        -1,
    };

const char* MultiplePayloadStreamCapability::fieldNames[1] = {
        "capabilities"
};

const MultiplePayloadStreamCapability::InfoType MultiplePayloadStreamCapability::theInfo = {
    MultiplePayloadStreamCapability::create,
    0x000010,
    true,
    MultiplePayloadStreamCapability::fieldInfos,
    MultiplePayloadStreamCapability::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MultiplePayloadStreamCapability::fieldNames
};

//
// FECCapability
//


const void* FECCapability::fieldInfos[3] = {
         &protectedCapability::value_type::theInfo,
         &fecScheme::value_type::theInfo,
         &rfc2733Format::value_type::theInfo
};
int FECCapability::fieldIds[3] = {
        -1,
        0,
        1
    };

const char* FECCapability::fieldNames[3] = {
        "protectedCapability",
        "fecScheme",
        "rfc2733Format"
};

const FECCapability::InfoType FECCapability::theInfo = {
    FECCapability::create,
    0x000010,
    true,
    FECCapability::fieldInfos,
    FECCapability::fieldIds,
    3, 0, 2,
    NULL,
    NULL,
    FECCapability::fieldNames
};

//
// Q2931Address
//


const void* Q2931Address::fieldInfos[2] = {
         &address::value_type::theInfo,
         &subaddress::value_type::theInfo
};
int Q2931Address::fieldIds[2] = {
        -1,
        0
    };

const char* Q2931Address::fieldNames[2] = {
        "address",
        "subaddress"
};

const Q2931Address::InfoType Q2931Address::theInfo = {
    Q2931Address::create,
    0x000010,
    true,
    Q2931Address::fieldInfos,
    Q2931Address::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    Q2931Address::fieldNames
};

//
// H223AL2MParameters
//


const void* H223AL2MParameters::fieldInfos[2] = {
         &headerFEC::value_type::theInfo,
         &alpduInterleaving::value_type::theInfo
};
int H223AL2MParameters::fieldIds[2] = {
        -1,
        -1,
    };

const char* H223AL2MParameters::fieldNames[2] = {
        "headerFEC",
        "alpduInterleaving"
};

const H223AL2MParameters::InfoType H223AL2MParameters::theInfo = {
    H223AL2MParameters::create,
    0x000010,
    true,
    H223AL2MParameters::fieldInfos,
    H223AL2MParameters::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H223AL2MParameters::fieldNames
};

//
// H223AnnexCArqParameters
//


const void* H223AnnexCArqParameters::fieldInfos[2] = {
         &numberOfRetransmissions::value_type::theInfo,
         &sendBufferSize::value_type::theInfo
};
int H223AnnexCArqParameters::fieldIds[2] = {
        -1,
        -1,
    };

const char* H223AnnexCArqParameters::fieldNames[2] = {
        "numberOfRetransmissions",
        "sendBufferSize"
};

const H223AnnexCArqParameters::InfoType H223AnnexCArqParameters::theInfo = {
    H223AnnexCArqParameters::create,
    0x000010,
    true,
    H223AnnexCArqParameters::fieldInfos,
    H223AnnexCArqParameters::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H223AnnexCArqParameters::fieldNames
};

//
// V76HDLCParameters
//


const void* V76HDLCParameters::fieldInfos[3] = {
         &crcLength::value_type::theInfo,
         &n401::value_type::theInfo,
         &loopbackTestProcedure::value_type::theInfo
};
int V76HDLCParameters::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* V76HDLCParameters::fieldNames[3] = {
        "crcLength",
        "n401",
        "loopbackTestProcedure"
};

const V76HDLCParameters::InfoType V76HDLCParameters::theInfo = {
    V76HDLCParameters::create,
    0x000010,
    true,
    V76HDLCParameters::fieldInfos,
    V76HDLCParameters::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    V76HDLCParameters::fieldNames
};

//
// CloseLogicalChannel
//


const void* CloseLogicalChannel::fieldInfos[3] = {
         &forwardLogicalChannelNumber::value_type::theInfo,
         &source::value_type::theInfo,
         &reason::value_type::theInfo
};
int CloseLogicalChannel::fieldIds[3] = {
        -1,
        -1,
    };

const char* CloseLogicalChannel::nonOptionalExtensions = "\x80";

const char* CloseLogicalChannel::fieldNames[3] = {
        "forwardLogicalChannelNumber",
        "source",
        "reason"
};

const CloseLogicalChannel::InfoType CloseLogicalChannel::theInfo = {
    CloseLogicalChannel::create,
    0x000010,
    true,
    CloseLogicalChannel::fieldInfos,
    CloseLogicalChannel::fieldIds,
    2, 1, 0,
    CloseLogicalChannel::nonOptionalExtensions,
    NULL,
    CloseLogicalChannel::fieldNames
};

//
// RequestChannelCloseReject
//


const void* RequestChannelCloseReject::fieldInfos[2] = {
         &forwardLogicalChannelNumber::value_type::theInfo,
         &cause::value_type::theInfo
};
int RequestChannelCloseReject::fieldIds[2] = {
        -1,
        -1,
    };

const char* RequestChannelCloseReject::fieldNames[2] = {
        "forwardLogicalChannelNumber",
        "cause"
};

const RequestChannelCloseReject::InfoType RequestChannelCloseReject::theInfo = {
    RequestChannelCloseReject::create,
    0x000010,
    true,
    RequestChannelCloseReject::fieldInfos,
    RequestChannelCloseReject::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    RequestChannelCloseReject::fieldNames
};

//
// MultiplexElement
//


const void* MultiplexElement::fieldInfos[2] = {
         &type::value_type::theInfo,
         &repeatCount::value_type::theInfo
};
int MultiplexElement::fieldIds[2] = {
        -1,
        -1,
    };

const char* MultiplexElement::fieldNames[2] = {
        "type",
        "repeatCount"
};

const MultiplexElement::InfoType MultiplexElement::theInfo = {
    MultiplexElement::create,
    0x000010,
    false,
    MultiplexElement::fieldInfos,
    MultiplexElement::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MultiplexElement::fieldNames
};

//
// MultiplexEntryRejectionDescriptions
//


const void* MultiplexEntryRejectionDescriptions::fieldInfos[2] = {
         &multiplexTableEntryNumber::value_type::theInfo,
         &cause::value_type::theInfo
};
int MultiplexEntryRejectionDescriptions::fieldIds[2] = {
        -1,
        -1,
    };

const char* MultiplexEntryRejectionDescriptions::fieldNames[2] = {
        "multiplexTableEntryNumber",
        "cause"
};

const MultiplexEntryRejectionDescriptions::InfoType MultiplexEntryRejectionDescriptions::theInfo = {
    MultiplexEntryRejectionDescriptions::create,
    0x000010,
    true,
    MultiplexEntryRejectionDescriptions::fieldInfos,
    MultiplexEntryRejectionDescriptions::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MultiplexEntryRejectionDescriptions::fieldNames
};

//
// RequestMultiplexEntryRejectionDescriptions
//


const void* RequestMultiplexEntryRejectionDescriptions::fieldInfos[2] = {
         &multiplexTableEntryNumber::value_type::theInfo,
         &cause::value_type::theInfo
};
int RequestMultiplexEntryRejectionDescriptions::fieldIds[2] = {
        -1,
        -1,
    };

const char* RequestMultiplexEntryRejectionDescriptions::fieldNames[2] = {
        "multiplexTableEntryNumber",
        "cause"
};

const RequestMultiplexEntryRejectionDescriptions::InfoType RequestMultiplexEntryRejectionDescriptions::theInfo = {
    RequestMultiplexEntryRejectionDescriptions::create,
    0x000010,
    true,
    RequestMultiplexEntryRejectionDescriptions::fieldInfos,
    RequestMultiplexEntryRejectionDescriptions::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    RequestMultiplexEntryRejectionDescriptions::fieldNames
};

//
// RequestModeAck
//


const void* RequestModeAck::fieldInfos[2] = {
         &sequenceNumber::value_type::theInfo,
         &response::value_type::theInfo
};
int RequestModeAck::fieldIds[2] = {
        -1,
        -1,
    };

const char* RequestModeAck::fieldNames[2] = {
        "sequenceNumber",
        "response"
};

const RequestModeAck::InfoType RequestModeAck::theInfo = {
    RequestModeAck::create,
    0x000010,
    true,
    RequestModeAck::fieldInfos,
    RequestModeAck::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    RequestModeAck::fieldNames
};

//
// RequestModeReject
//


const void* RequestModeReject::fieldInfos[2] = {
         &sequenceNumber::value_type::theInfo,
         &cause::value_type::theInfo
};
int RequestModeReject::fieldIds[2] = {
        -1,
        -1,
    };

const char* RequestModeReject::fieldNames[2] = {
        "sequenceNumber",
        "cause"
};

const RequestModeReject::InfoType RequestModeReject::theInfo = {
    RequestModeReject::create,
    0x000010,
    true,
    RequestModeReject::fieldInfos,
    RequestModeReject::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    RequestModeReject::fieldNames
};

//
// FECMode
//


const void* FECMode::fieldInfos[3] = {
         &protectedElement::value_type::theInfo,
         &fecScheme::value_type::theInfo,
         &rfc2733Format::value_type::theInfo
};
int FECMode::fieldIds[3] = {
        -1,
        0,
        1
    };

const char* FECMode::fieldNames[3] = {
        "protectedElement",
        "fecScheme",
        "rfc2733Format"
};

const FECMode::InfoType FECMode::theInfo = {
    FECMode::create,
    0x000010,
    true,
    FECMode::fieldInfos,
    FECMode::fieldIds,
    3, 0, 2,
    NULL,
    NULL,
    FECMode::fieldNames
};

//
// H261VideoMode
//


const void* H261VideoMode::fieldInfos[3] = {
         &resolution::value_type::theInfo,
         &bitRate::value_type::theInfo,
         &stillImageTransmission::value_type::theInfo
};
int H261VideoMode::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* H261VideoMode::fieldNames[3] = {
        "resolution",
        "bitRate",
        "stillImageTransmission"
};

const H261VideoMode::InfoType H261VideoMode::theInfo = {
    H261VideoMode::create,
    0x000010,
    true,
    H261VideoMode::fieldInfos,
    H261VideoMode::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    H261VideoMode::fieldNames
};

//
// H262VideoMode
//


const void* H262VideoMode::fieldInfos[7] = {
         &profileAndLevel::value_type::theInfo,
         &videoBitRate::value_type::theInfo,
         &vbvBufferSize::value_type::theInfo,
         &samplesPerLine::value_type::theInfo,
         &linesPerFrame::value_type::theInfo,
         &framesPerSecond::value_type::theInfo,
         &luminanceSampleRate::value_type::theInfo
};
int H262VideoMode::fieldIds[7] = {
        -1,
        0,
        1,
        2,
        3,
        4,
        5
    };

const char* H262VideoMode::fieldNames[7] = {
        "profileAndLevel",
        "videoBitRate",
        "vbvBufferSize",
        "samplesPerLine",
        "linesPerFrame",
        "framesPerSecond",
        "luminanceSampleRate"
};

const H262VideoMode::InfoType H262VideoMode::theInfo = {
    H262VideoMode::create,
    0x000010,
    true,
    H262VideoMode::fieldInfos,
    H262VideoMode::fieldIds,
    7, 0, 6,
    NULL,
    NULL,
    H262VideoMode::fieldNames
};

//
// IS11172AudioMode
//


const void* IS11172AudioMode::fieldInfos[4] = {
         &audioLayer::value_type::theInfo,
         &audioSampling::value_type::theInfo,
         &multichannelType::value_type::theInfo,
         &bitRate::value_type::theInfo
};
int IS11172AudioMode::fieldIds[4] = {
        -1,
        -1,
        -1,
        -1,
    };

const char* IS11172AudioMode::fieldNames[4] = {
        "audioLayer",
        "audioSampling",
        "multichannelType",
        "bitRate"
};

const IS11172AudioMode::InfoType IS11172AudioMode::theInfo = {
    IS11172AudioMode::create,
    0x000010,
    true,
    IS11172AudioMode::fieldInfos,
    IS11172AudioMode::fieldIds,
    4, 0, 0,
    NULL,
    NULL,
    IS11172AudioMode::fieldNames
};

//
// IS13818AudioMode
//


const void* IS13818AudioMode::fieldInfos[6] = {
         &audioLayer::value_type::theInfo,
         &audioSampling::value_type::theInfo,
         &multichannelType::value_type::theInfo,
         &lowFrequencyEnhancement::value_type::theInfo,
         &multilingual::value_type::theInfo,
         &bitRate::value_type::theInfo
};
int IS13818AudioMode::fieldIds[6] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* IS13818AudioMode::fieldNames[6] = {
        "audioLayer",
        "audioSampling",
        "multichannelType",
        "lowFrequencyEnhancement",
        "multilingual",
        "bitRate"
};

const IS13818AudioMode::InfoType IS13818AudioMode::theInfo = {
    IS13818AudioMode::create,
    0x000010,
    true,
    IS13818AudioMode::fieldInfos,
    IS13818AudioMode::fieldIds,
    6, 0, 0,
    NULL,
    NULL,
    IS13818AudioMode::fieldNames
};

//
// G7231AnnexCMode
//


const void* G7231AnnexCMode::fieldInfos[3] = {
         &maxAl_sduAudioFrames::value_type::theInfo,
         &silenceSuppression::value_type::theInfo,
         &g723AnnexCAudioMode::value_type::theInfo
};
int G7231AnnexCMode::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* G7231AnnexCMode::fieldNames[3] = {
        "maxAl-sduAudioFrames",
        "silenceSuppression",
        "g723AnnexCAudioMode"
};

const G7231AnnexCMode::InfoType G7231AnnexCMode::theInfo = {
    G7231AnnexCMode::create,
    0x000010,
    true,
    G7231AnnexCMode::fieldInfos,
    G7231AnnexCMode::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    G7231AnnexCMode::fieldNames
};

//
// MaintenanceLoopRequest
//


const void* MaintenanceLoopRequest::fieldInfos[1] = {
         &type::value_type::theInfo
};
int MaintenanceLoopRequest::fieldIds[1] = {
        -1,
    };

const char* MaintenanceLoopRequest::fieldNames[1] = {
        "type"
};

const MaintenanceLoopRequest::InfoType MaintenanceLoopRequest::theInfo = {
    MaintenanceLoopRequest::create,
    0x000010,
    true,
    MaintenanceLoopRequest::fieldInfos,
    MaintenanceLoopRequest::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MaintenanceLoopRequest::fieldNames
};

//
// MaintenanceLoopAck
//


const void* MaintenanceLoopAck::fieldInfos[1] = {
         &type::value_type::theInfo
};
int MaintenanceLoopAck::fieldIds[1] = {
        -1,
    };

const char* MaintenanceLoopAck::fieldNames[1] = {
        "type"
};

const MaintenanceLoopAck::InfoType MaintenanceLoopAck::theInfo = {
    MaintenanceLoopAck::create,
    0x000010,
    true,
    MaintenanceLoopAck::fieldInfos,
    MaintenanceLoopAck::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MaintenanceLoopAck::fieldNames
};

//
// MaintenanceLoopReject
//


const void* MaintenanceLoopReject::fieldInfos[2] = {
         &type::value_type::theInfo,
         &cause::value_type::theInfo
};
int MaintenanceLoopReject::fieldIds[2] = {
        -1,
        -1,
    };

const char* MaintenanceLoopReject::fieldNames[2] = {
        "type",
        "cause"
};

const MaintenanceLoopReject::InfoType MaintenanceLoopReject::theInfo = {
    MaintenanceLoopReject::create,
    0x000010,
    true,
    MaintenanceLoopReject::fieldInfos,
    MaintenanceLoopReject::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MaintenanceLoopReject::fieldNames
};

//
// TerminalLabel
//


const void* TerminalLabel::fieldInfos[2] = {
         &mcuNumber::value_type::theInfo,
         &terminalNumber::value_type::theInfo
};
int TerminalLabel::fieldIds[2] = {
        -1,
        -1,
    };

const char* TerminalLabel::fieldNames[2] = {
        "mcuNumber",
        "terminalNumber"
};

const TerminalLabel::InfoType TerminalLabel::theInfo = {
    TerminalLabel::create,
    0x000010,
    true,
    TerminalLabel::fieldInfos,
    TerminalLabel::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    TerminalLabel::fieldNames
};

//
// TerminalInformation
//


const void* TerminalInformation::fieldInfos[2] = {
         &terminalLabel::value_type::theInfo,
         &terminalID::value_type::theInfo
};
int TerminalInformation::fieldIds[2] = {
        -1,
        -1,
    };

const char* TerminalInformation::fieldNames[2] = {
        "terminalLabel",
        "terminalID"
};

const TerminalInformation::InfoType TerminalInformation::theInfo = {
    TerminalInformation::create,
    0x000010,
    true,
    TerminalInformation::fieldInfos,
    TerminalInformation::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    TerminalInformation::fieldNames
};

//
// RemoteMCResponse
//


const void* RemoteMCResponse::selectionInfos[2] = {
         &accept::value_type::theInfo,
         &reject::value_type::theInfo
};

const char* RemoteMCResponse::selectionNames[2] = { "accept"
                                      ,"reject"};

const RemoteMCResponse::InfoType RemoteMCResponse::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RemoteMCResponse::selectionInfos,
    2, 2,
    NULL,
    RemoteMCResponse::selectionNames
};

//
// LogicalChannelRateReject
//


const void* LogicalChannelRateReject::fieldInfos[4] = {
         &sequenceNumber::value_type::theInfo,
         &logicalChannelNumber::value_type::theInfo,
         &rejectReason::value_type::theInfo,
         &currentMaximumBitRate::value_type::theInfo
};
int LogicalChannelRateReject::fieldIds[4] = {
        -1,
        -1,
        -1,
        0
    };

const char* LogicalChannelRateReject::fieldNames[4] = {
        "sequenceNumber",
        "logicalChannelNumber",
        "rejectReason",
        "currentMaximumBitRate"
};

const LogicalChannelRateReject::InfoType LogicalChannelRateReject::theInfo = {
    LogicalChannelRateReject::create,
    0x000010,
    true,
    LogicalChannelRateReject::fieldInfos,
    LogicalChannelRateReject::fieldIds,
    4, 0, 1,
    NULL,
    NULL,
    LogicalChannelRateReject::fieldNames
};

//
// SendTerminalCapabilitySet
//


const void* SendTerminalCapabilitySet::selectionInfos[2] = {
         &specificRequest::value_type::theInfo,
         &genericRequest::value_type::theInfo
};

const char* SendTerminalCapabilitySet::selectionNames[2] = { "specificRequest"
                                      ,"genericRequest"};

const SendTerminalCapabilitySet::InfoType SendTerminalCapabilitySet::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    SendTerminalCapabilitySet::selectionInfos,
    2, 2,
    NULL,
    SendTerminalCapabilitySet::selectionNames
};

//
// FlowControlCommand
//


const void* FlowControlCommand::fieldInfos[2] = {
         &scope::value_type::theInfo,
         &restriction::value_type::theInfo
};
int FlowControlCommand::fieldIds[2] = {
        -1,
        -1,
    };

const char* FlowControlCommand::fieldNames[2] = {
        "scope",
        "restriction"
};

const FlowControlCommand::InfoType FlowControlCommand::theInfo = {
    FlowControlCommand::create,
    0x000010,
    true,
    FlowControlCommand::fieldInfos,
    FlowControlCommand::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    FlowControlCommand::fieldNames
};

//
// ConferenceCommand
//


const void* ConferenceCommand::selectionInfos[8] = {
         &broadcastMyLogicalChannel::value_type::theInfo,
         &cancelBroadcastMyLogicalChannel::value_type::theInfo,
         &makeTerminalBroadcaster::value_type::theInfo,
         &cancelMakeTerminalBroadcaster::value_type::theInfo,
         &sendThisSource::value_type::theInfo,
         &cancelSendThisSource::value_type::theInfo,
         &dropConference::value_type::theInfo,
         &substituteConferenceIDCommand::value_type::theInfo
};

const char* ConferenceCommand::selectionNames[8] = { "broadcastMyLogicalChannel"
                                      ,"cancelBroadcastMyLogicalChannel"
                                      ,"makeTerminalBroadcaster"
                                      ,"cancelMakeTerminalBroadcaster"
                                      ,"sendThisSource"
                                      ,"cancelSendThisSource"
                                      ,"dropConference"
                                      ,"substituteConferenceIDCommand"};

const ConferenceCommand::InfoType ConferenceCommand::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ConferenceCommand::selectionInfos,
    7, 8,
    NULL,
    ConferenceCommand::selectionNames
};

//
// H223MultiplexReconfiguration
//


const void* H223MultiplexReconfiguration::selectionInfos[2] = {
         &h223ModeChange::value_type::theInfo,
         &h223AnnexADoubleFlag::value_type::theInfo
};

const char* H223MultiplexReconfiguration::selectionNames[2] = { "h223ModeChange"
                                      ,"h223AnnexADoubleFlag"};

const H223MultiplexReconfiguration::InfoType H223MultiplexReconfiguration::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223MultiplexReconfiguration::selectionInfos,
    2, 2,
    NULL,
    H223MultiplexReconfiguration::selectionNames
};

//
// MobileMultilinkReconfigurationCommand
//


const void* MobileMultilinkReconfigurationCommand::fieldInfos[3] = {
         &sampleSize::value_type::theInfo,
         &samplesPerFrame::value_type::theInfo,
         &status::value_type::theInfo
};
int MobileMultilinkReconfigurationCommand::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* MobileMultilinkReconfigurationCommand::fieldNames[3] = {
        "sampleSize",
        "samplesPerFrame",
        "status"
};

const MobileMultilinkReconfigurationCommand::InfoType MobileMultilinkReconfigurationCommand::theInfo = {
    MobileMultilinkReconfigurationCommand::create,
    0x000010,
    true,
    MobileMultilinkReconfigurationCommand::fieldInfos,
    MobileMultilinkReconfigurationCommand::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    MobileMultilinkReconfigurationCommand::fieldNames
};

//
// FunctionNotSupported
//


const void* FunctionNotSupported::fieldInfos[2] = {
         &cause::value_type::theInfo,
         &returnedFunction::value_type::theInfo
};
int FunctionNotSupported::fieldIds[2] = {
        -1,
        0
    };

const char* FunctionNotSupported::fieldNames[2] = {
        "cause",
        "returnedFunction"
};

const FunctionNotSupported::InfoType FunctionNotSupported::theInfo = {
    FunctionNotSupported::create,
    0x000010,
    true,
    FunctionNotSupported::fieldInfos,
    FunctionNotSupported::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    FunctionNotSupported::fieldNames
};

//
// ConferenceIndication
//


const void* ConferenceIndication::selectionInfos[14] = {
         &sbeNumber::value_type::theInfo,
         &terminalNumberAssign::value_type::theInfo,
         &terminalJoinedConference::value_type::theInfo,
         &terminalLeftConference::value_type::theInfo,
         &seenByAtLeastOneOther::value_type::theInfo,
         &cancelSeenByAtLeastOneOther::value_type::theInfo,
         &seenByAll::value_type::theInfo,
         &cancelSeenByAll::value_type::theInfo,
         &terminalYouAreSeeing::value_type::theInfo,
         &requestForFloor::value_type::theInfo,
         &withdrawChairToken::value_type::theInfo,
         &floorRequested::value_type::theInfo,
         &terminalYouAreSeeingInSubPictureNumber::value_type::theInfo,
         &videoIndicateCompose::value_type::theInfo
};

const char* ConferenceIndication::selectionNames[14] = { "sbeNumber"
                                      ,"terminalNumberAssign"
                                      ,"terminalJoinedConference"
                                      ,"terminalLeftConference"
                                      ,"seenByAtLeastOneOther"
                                      ,"cancelSeenByAtLeastOneOther"
                                      ,"seenByAll"
                                      ,"cancelSeenByAll"
                                      ,"terminalYouAreSeeing"
                                      ,"requestForFloor"
                                      ,"withdrawChairToken"
                                      ,"floorRequested"
                                      ,"terminalYouAreSeeingInSubPictureNumber"
                                      ,"videoIndicateCompose"};

const ConferenceIndication::InfoType ConferenceIndication::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ConferenceIndication::selectionInfos,
    10, 14,
    NULL,
    ConferenceIndication::selectionNames
};

//
// JitterIndication
//


const void* JitterIndication::fieldInfos[5] = {
         &scope::value_type::theInfo,
         &estimatedReceivedJitterMantissa::value_type::theInfo,
         &estimatedReceivedJitterExponent::value_type::theInfo,
         &skippedFrameCount::value_type::theInfo,
         &additionalDecoderBuffer::value_type::theInfo
};
int JitterIndication::fieldIds[5] = {
        -1,
        -1,
        -1,
        0,
        1
    };

const char* JitterIndication::fieldNames[5] = {
        "scope",
        "estimatedReceivedJitterMantissa",
        "estimatedReceivedJitterExponent",
        "skippedFrameCount",
        "additionalDecoderBuffer"
};

const JitterIndication::InfoType JitterIndication::theInfo = {
    JitterIndication::create,
    0x000010,
    true,
    JitterIndication::fieldInfos,
    JitterIndication::fieldIds,
    5, 0, 2,
    NULL,
    NULL,
    JitterIndication::fieldNames
};

//
// VendorIdentification
//


const void* VendorIdentification::fieldInfos[3] = {
         &vendor::value_type::theInfo,
         &productNumber::value_type::theInfo,
         &versionNumber::value_type::theInfo
};
int VendorIdentification::fieldIds[3] = {
        -1,
        0,
        1
    };

const char* VendorIdentification::fieldNames[3] = {
        "vendor",
        "productNumber",
        "versionNumber"
};

const VendorIdentification::InfoType VendorIdentification::theInfo = {
    VendorIdentification::create,
    0x000010,
    true,
    VendorIdentification::fieldInfos,
    VendorIdentification::fieldIds,
    3, 0, 2,
    NULL,
    NULL,
    VendorIdentification::fieldNames
};

//
// FlowControlIndication
//


const void* FlowControlIndication::fieldInfos[2] = {
         &scope::value_type::theInfo,
         &restriction::value_type::theInfo
};
int FlowControlIndication::fieldIds[2] = {
        -1,
        -1,
    };

const char* FlowControlIndication::fieldNames[2] = {
        "scope",
        "restriction"
};

const FlowControlIndication::InfoType FlowControlIndication::theInfo = {
    FlowControlIndication::create,
    0x000010,
    true,
    FlowControlIndication::fieldInfos,
    FlowControlIndication::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    FlowControlIndication::fieldNames
};

//
// TerminalCapabilitySetReject_cause
//


const void* TerminalCapabilitySetReject_cause::selectionInfos[4] = {
         &unspecified::value_type::theInfo,
         &undefinedTableEntryUsed::value_type::theInfo,
         &descriptorCapacityExceeded::value_type::theInfo,
         &tableEntryCapacityExceeded::value_type::theInfo
};

const char* TerminalCapabilitySetReject_cause::selectionNames[4] = { "unspecified"
                                      ,"undefinedTableEntryUsed"
                                      ,"descriptorCapacityExceeded"
                                      ,"tableEntryCapacityExceeded"};

const TerminalCapabilitySetReject_cause::InfoType TerminalCapabilitySetReject_cause::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    TerminalCapabilitySetReject_cause::selectionInfos,
    4, 4,
    NULL,
    TerminalCapabilitySetReject_cause::selectionNames
};

//
// VCCapability_aal1ViaGateway
//


const void* VCCapability_aal1ViaGateway::fieldInfos[10] = {
         &gatewayAddress::value_type::theInfo,
         &nullClockRecovery::value_type::theInfo,
         &srtsClockRecovery::value_type::theInfo,
         &adaptiveClockRecovery::value_type::theInfo,
         &nullErrorCorrection::value_type::theInfo,
         &longInterleaver::value_type::theInfo,
         &shortInterleaver::value_type::theInfo,
         &errorCorrectionOnly::value_type::theInfo,
         &structuredDataTransfer::value_type::theInfo,
         &partiallyFilledCells::value_type::theInfo
};
int VCCapability_aal1ViaGateway::fieldIds[10] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* VCCapability_aal1ViaGateway::fieldNames[10] = {
        "gatewayAddress",
        "nullClockRecovery",
        "srtsClockRecovery",
        "adaptiveClockRecovery",
        "nullErrorCorrection",
        "longInterleaver",
        "shortInterleaver",
        "errorCorrectionOnly",
        "structuredDataTransfer",
        "partiallyFilledCells"
};

const VCCapability_aal1ViaGateway::InfoType VCCapability_aal1ViaGateway::theInfo = {
    VCCapability_aal1ViaGateway::create,
    0x000010,
    true,
    VCCapability_aal1ViaGateway::fieldInfos,
    VCCapability_aal1ViaGateway::fieldIds,
    10, 0, 0,
    NULL,
    NULL,
    VCCapability_aal1ViaGateway::fieldNames
};

//
// H223Capability_h223MultiplexTableCapability
//


const void* H223Capability_h223MultiplexTableCapability::selectionInfos[2] = {
         &basic::value_type::theInfo,
         &enhanced::value_type::theInfo
};

const char* H223Capability_h223MultiplexTableCapability::selectionNames[2] = { "basic"
                                      ,"enhanced"};

const H223Capability_h223MultiplexTableCapability::InfoType H223Capability_h223MultiplexTableCapability::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    H223Capability_h223MultiplexTableCapability::selectionInfos,
    2, 2,
    NULL,
    H223Capability_h223MultiplexTableCapability::selectionNames
};

//
// RTPH263VideoRedundancyEncoding_frameToThreadMapping
//


const void* RTPH263VideoRedundancyEncoding_frameToThreadMapping::selectionInfos[2] = {
         &roundrobin::value_type::theInfo,
         &custom::value_type::theInfo
};

const char* RTPH263VideoRedundancyEncoding_frameToThreadMapping::selectionNames[2] = { "roundrobin"
                                      ,"custom"};

const RTPH263VideoRedundancyEncoding_frameToThreadMapping::InfoType RTPH263VideoRedundancyEncoding_frameToThreadMapping::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RTPH263VideoRedundancyEncoding_frameToThreadMapping::selectionInfos,
    2, 2,
    NULL,
    RTPH263VideoRedundancyEncoding_frameToThreadMapping::selectionNames
};

//
// RefPictureSelection_enhancedReferencePicSelect
//


const void* RefPictureSelection_enhancedReferencePicSelect::fieldInfos[1] = {
         &subPictureRemovalParameters::value_type::theInfo
};
int RefPictureSelection_enhancedReferencePicSelect::fieldIds[1] = {
        0
    };

const char* RefPictureSelection_enhancedReferencePicSelect::fieldNames[1] = {
        "subPictureRemovalParameters"
};

const RefPictureSelection_enhancedReferencePicSelect::InfoType RefPictureSelection_enhancedReferencePicSelect::theInfo = {
    RefPictureSelection_enhancedReferencePicSelect::create,
    0x000010,
    true,
    RefPictureSelection_enhancedReferencePicSelect::fieldInfos,
    RefPictureSelection_enhancedReferencePicSelect::fieldIds,
    1, 0, 1,
    NULL,
    NULL,
    RefPictureSelection_enhancedReferencePicSelect::fieldNames
};

//
// DataProtocolCapability_v76wCompression
//


const void* DataProtocolCapability_v76wCompression::selectionInfos[3] = {
         &transmitCompression::value_type::theInfo,
         &receiveCompression::value_type::theInfo,
         &transmitAndReceiveCompression::value_type::theInfo
};

const char* DataProtocolCapability_v76wCompression::selectionNames[3] = { "transmitCompression"
                                      ,"receiveCompression"
                                      ,"transmitAndReceiveCompression"};

const DataProtocolCapability_v76wCompression::InfoType DataProtocolCapability_v76wCompression::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    DataProtocolCapability_v76wCompression::selectionInfos,
    3, 3,
    NULL,
    DataProtocolCapability_v76wCompression::selectionNames
};

//
// DepFECCapability_rfc2733
//


const void* DepFECCapability_rfc2733::fieldInfos[2] = {
         &redundancyEncoding::value_type::theInfo,
         &separateStream::value_type::theInfo
};
int DepFECCapability_rfc2733::fieldIds[2] = {
        -1,
        -1,
    };

const char* DepFECCapability_rfc2733::fieldNames[2] = {
        "redundancyEncoding",
        "separateStream"
};

const DepFECCapability_rfc2733::InfoType DepFECCapability_rfc2733::theInfo = {
    DepFECCapability_rfc2733::create,
    0x000010,
    true,
    DepFECCapability_rfc2733::fieldInfos,
    DepFECCapability_rfc2733::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    DepFECCapability_rfc2733::fieldNames
};

//
// H223AL1MParameters_arqType
//


const void* H223AL1MParameters_arqType::selectionInfos[3] = {
         &noArq::value_type::theInfo,
         &typeIArq::value_type::theInfo,
         &typeIIArq::value_type::theInfo
};

const char* H223AL1MParameters_arqType::selectionNames[3] = { "noArq"
                                      ,"typeIArq"
                                      ,"typeIIArq"};

const H223AL1MParameters_arqType::InfoType H223AL1MParameters_arqType::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223AL1MParameters_arqType::selectionInfos,
    3, 3,
    NULL,
    H223AL1MParameters_arqType::selectionNames
};

//
// H223AL3MParameters_arqType
//


const void* H223AL3MParameters_arqType::selectionInfos[3] = {
         &noArq::value_type::theInfo,
         &typeIArq::value_type::theInfo,
         &typeIIArq::value_type::theInfo
};

const char* H223AL3MParameters_arqType::selectionNames[3] = { "noArq"
                                      ,"typeIArq"
                                      ,"typeIIArq"};

const H223AL3MParameters_arqType::InfoType H223AL3MParameters_arqType::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223AL3MParameters_arqType::selectionInfos,
    3, 3,
    NULL,
    H223AL3MParameters_arqType::selectionNames
};

//
// UnicastAddress_iPSourceRouteAddress
//


const void* UnicastAddress_iPSourceRouteAddress::fieldInfos[4] = {
         &routing::value_type::theInfo,
         &network::value_type::theInfo,
         &tsapIdentifier::value_type::theInfo,
         &route::value_type::theInfo
};
int UnicastAddress_iPSourceRouteAddress::fieldIds[4] = {
        -1,
        -1,
        -1,
        -1,
    };

const char* UnicastAddress_iPSourceRouteAddress::fieldNames[4] = {
        "routing",
        "network",
        "tsapIdentifier",
        "route"
};

const UnicastAddress_iPSourceRouteAddress::InfoType UnicastAddress_iPSourceRouteAddress::theInfo = {
    UnicastAddress_iPSourceRouteAddress::create,
    0x000010,
    true,
    UnicastAddress_iPSourceRouteAddress::fieldInfos,
    UnicastAddress_iPSourceRouteAddress::fieldIds,
    4, 0, 0,
    NULL,
    NULL,
    UnicastAddress_iPSourceRouteAddress::fieldNames
};

//
// MultiplexElement_type
//


const void* MultiplexElement_type::selectionInfos[2] = {
         &logicalChannelNumber::value_type::theInfo,
         &subElementList::value_type::theInfo
};

const char* MultiplexElement_type::selectionNames[2] = { "logicalChannelNumber"
                                      ,"subElementList"};

const MultiplexElement_type::InfoType MultiplexElement_type::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    MultiplexElement_type::selectionInfos,
    2, 2,
    NULL,
    MultiplexElement_type::selectionNames
};

//
// ConferenceRequest_requestTerminalCertificate
//


const void* ConferenceRequest_requestTerminalCertificate::fieldInfos[3] = {
         &terminalLabel::value_type::theInfo,
         &certSelectionCriteria::value_type::theInfo,
         &sRandom::value_type::theInfo
};
int ConferenceRequest_requestTerminalCertificate::fieldIds[3] = {
        0,
        1,
        2
    };

const char* ConferenceRequest_requestTerminalCertificate::fieldNames[3] = {
        "terminalLabel",
        "certSelectionCriteria",
        "sRandom"
};

const ConferenceRequest_requestTerminalCertificate::InfoType ConferenceRequest_requestTerminalCertificate::theInfo = {
    ConferenceRequest_requestTerminalCertificate::create,
    0x000010,
    true,
    ConferenceRequest_requestTerminalCertificate::fieldInfos,
    ConferenceRequest_requestTerminalCertificate::fieldIds,
    3, 0, 3,
    NULL,
    NULL,
    ConferenceRequest_requestTerminalCertificate::fieldNames
};

//
// ConferenceResponse_mCTerminalIDResponse
//


const void* ConferenceResponse_mCTerminalIDResponse::fieldInfos[2] = {
         &terminalLabel::value_type::theInfo,
         &terminalID::value_type::theInfo
};
int ConferenceResponse_mCTerminalIDResponse::fieldIds[2] = {
        -1,
        -1,
    };

const char* ConferenceResponse_mCTerminalIDResponse::fieldNames[2] = {
        "terminalLabel",
        "terminalID"
};

const ConferenceResponse_mCTerminalIDResponse::InfoType ConferenceResponse_mCTerminalIDResponse::theInfo = {
    ConferenceResponse_mCTerminalIDResponse::create,
    0x000010,
    true,
    ConferenceResponse_mCTerminalIDResponse::fieldInfos,
    ConferenceResponse_mCTerminalIDResponse::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    ConferenceResponse_mCTerminalIDResponse::fieldNames
};

//
// ConferenceResponse_terminalIDResponse
//


const void* ConferenceResponse_terminalIDResponse::fieldInfos[2] = {
         &terminalLabel::value_type::theInfo,
         &terminalID::value_type::theInfo
};
int ConferenceResponse_terminalIDResponse::fieldIds[2] = {
        -1,
        -1,
    };

const char* ConferenceResponse_terminalIDResponse::fieldNames[2] = {
        "terminalLabel",
        "terminalID"
};

const ConferenceResponse_terminalIDResponse::InfoType ConferenceResponse_terminalIDResponse::theInfo = {
    ConferenceResponse_terminalIDResponse::create,
    0x000010,
    true,
    ConferenceResponse_terminalIDResponse::fieldInfos,
    ConferenceResponse_terminalIDResponse::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    ConferenceResponse_terminalIDResponse::fieldNames
};

//
// ConferenceResponse_conferenceIDResponse
//


const void* ConferenceResponse_conferenceIDResponse::fieldInfos[2] = {
         &terminalLabel::value_type::theInfo,
         &conferenceID::value_type::theInfo
};
int ConferenceResponse_conferenceIDResponse::fieldIds[2] = {
        -1,
        -1,
    };

const char* ConferenceResponse_conferenceIDResponse::fieldNames[2] = {
        "terminalLabel",
        "conferenceID"
};

const ConferenceResponse_conferenceIDResponse::InfoType ConferenceResponse_conferenceIDResponse::theInfo = {
    ConferenceResponse_conferenceIDResponse::create,
    0x000010,
    true,
    ConferenceResponse_conferenceIDResponse::fieldInfos,
    ConferenceResponse_conferenceIDResponse::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    ConferenceResponse_conferenceIDResponse::fieldNames
};

//
// ConferenceResponse_passwordResponse
//


const void* ConferenceResponse_passwordResponse::fieldInfos[2] = {
         &terminalLabel::value_type::theInfo,
         &password::value_type::theInfo
};
int ConferenceResponse_passwordResponse::fieldIds[2] = {
        -1,
        -1,
    };

const char* ConferenceResponse_passwordResponse::fieldNames[2] = {
        "terminalLabel",
        "password"
};

const ConferenceResponse_passwordResponse::InfoType ConferenceResponse_passwordResponse::theInfo = {
    ConferenceResponse_passwordResponse::create,
    0x000010,
    true,
    ConferenceResponse_passwordResponse::fieldInfos,
    ConferenceResponse_passwordResponse::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    ConferenceResponse_passwordResponse::fieldNames
};

//
// ConferenceResponse_chairTokenOwnerResponse
//


const void* ConferenceResponse_chairTokenOwnerResponse::fieldInfos[2] = {
         &terminalLabel::value_type::theInfo,
         &terminalID::value_type::theInfo
};
int ConferenceResponse_chairTokenOwnerResponse::fieldIds[2] = {
        -1,
        -1,
    };

const char* ConferenceResponse_chairTokenOwnerResponse::fieldNames[2] = {
        "terminalLabel",
        "terminalID"
};

const ConferenceResponse_chairTokenOwnerResponse::InfoType ConferenceResponse_chairTokenOwnerResponse::theInfo = {
    ConferenceResponse_chairTokenOwnerResponse::create,
    0x000010,
    true,
    ConferenceResponse_chairTokenOwnerResponse::fieldInfos,
    ConferenceResponse_chairTokenOwnerResponse::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    ConferenceResponse_chairTokenOwnerResponse::fieldNames
};

//
// ConferenceResponse_terminalCertificateResponse
//


const void* ConferenceResponse_terminalCertificateResponse::fieldInfos[2] = {
         &terminalLabel::value_type::theInfo,
         &certificateResponse::value_type::theInfo
};
int ConferenceResponse_terminalCertificateResponse::fieldIds[2] = {
        0,
        1
    };

const char* ConferenceResponse_terminalCertificateResponse::fieldNames[2] = {
        "terminalLabel",
        "certificateResponse"
};

const ConferenceResponse_terminalCertificateResponse::InfoType ConferenceResponse_terminalCertificateResponse::theInfo = {
    ConferenceResponse_terminalCertificateResponse::create,
    0x000010,
    true,
    ConferenceResponse_terminalCertificateResponse::fieldInfos,
    ConferenceResponse_terminalCertificateResponse::fieldIds,
    2, 0, 2,
    NULL,
    NULL,
    ConferenceResponse_terminalCertificateResponse::fieldNames
};

//
// MultilinkRequest_maximumHeaderInterval
//


const void* MultilinkRequest_maximumHeaderInterval::fieldInfos[1] = {
         &requestType::value_type::theInfo
};
int MultilinkRequest_maximumHeaderInterval::fieldIds[1] = {
        -1,
    };

const char* MultilinkRequest_maximumHeaderInterval::fieldNames[1] = {
        "requestType"
};

const MultilinkRequest_maximumHeaderInterval::InfoType MultilinkRequest_maximumHeaderInterval::theInfo = {
    MultilinkRequest_maximumHeaderInterval::create,
    0x000010,
    true,
    MultilinkRequest_maximumHeaderInterval::fieldInfos,
    MultilinkRequest_maximumHeaderInterval::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MultilinkRequest_maximumHeaderInterval::fieldNames
};

//
// NewATMVCCommand_reverseParameters
//


const void* NewATMVCCommand_reverseParameters::fieldInfos[4] = {
         &bitRate::value_type::theInfo,
         &bitRateLockedToPCRClock::value_type::theInfo,
         &bitRateLockedToNetworkClock::value_type::theInfo,
         &multiplex::value_type::theInfo
};
int NewATMVCCommand_reverseParameters::fieldIds[4] = {
        -1,
        -1,
        -1,
        -1,
    };

const char* NewATMVCCommand_reverseParameters::fieldNames[4] = {
        "bitRate",
        "bitRateLockedToPCRClock",
        "bitRateLockedToNetworkClock",
        "multiplex"
};

const NewATMVCCommand_reverseParameters::InfoType NewATMVCCommand_reverseParameters::theInfo = {
    NewATMVCCommand_reverseParameters::create,
    0x000010,
    true,
    NewATMVCCommand_reverseParameters::fieldInfos,
    NewATMVCCommand_reverseParameters::fieldIds,
    4, 0, 0,
    NULL,
    NULL,
    NewATMVCCommand_reverseParameters::fieldNames
};

//
// NewATMVCIndication_reverseParameters
//


const void* NewATMVCIndication_reverseParameters::fieldInfos[4] = {
         &bitRate::value_type::theInfo,
         &bitRateLockedToPCRClock::value_type::theInfo,
         &bitRateLockedToNetworkClock::value_type::theInfo,
         &multiplex::value_type::theInfo
};
int NewATMVCIndication_reverseParameters::fieldIds[4] = {
        -1,
        -1,
        -1,
        -1,
    };

const char* NewATMVCIndication_reverseParameters::fieldNames[4] = {
        "bitRate",
        "bitRateLockedToPCRClock",
        "bitRateLockedToNetworkClock",
        "multiplex"
};

const NewATMVCIndication_reverseParameters::InfoType NewATMVCIndication_reverseParameters::theInfo = {
    NewATMVCIndication_reverseParameters::create,
    0x000010,
    true,
    NewATMVCIndication_reverseParameters::fieldInfos,
    NewATMVCIndication_reverseParameters::fieldIds,
    4, 0, 0,
    NULL,
    NULL,
    NewATMVCIndication_reverseParameters::fieldNames
};

//
// UserInputIndication_signal
//


const void* UserInputIndication_signal::fieldInfos[7] = {
         &signalType::value_type::theInfo,
         &duration::value_type::theInfo,
         &rtp::value_type::theInfo,
         &rtpPayloadIndication::value_type::theInfo,
         &paramS::value_type::theInfo,
         &encryptedSignalType::value_type::theInfo,
         &algorithmOID::value_type::theInfo
};
int UserInputIndication_signal::fieldIds[7] = {
        -1,
        0,
        1
    };

const char* UserInputIndication_signal::fieldNames[7] = {
        "signalType",
        "duration",
        "rtp",
        "rtpPayloadIndication",
        "paramS",
        "encryptedSignalType",
        "algorithmOID"
};

const UserInputIndication_signal::InfoType UserInputIndication_signal::theInfo = {
    UserInputIndication_signal::create,
    0x000010,
    true,
    UserInputIndication_signal::fieldInfos,
    UserInputIndication_signal::fieldIds,
    3, 4, 2,
    NULL,
    NULL,
    UserInputIndication_signal::fieldNames
};

//
// UserInputIndication_signal::signalType::value_type
//


const UserInputIndication_signal::signalType::value_type::InfoType UserInputIndication_signal::signalType::value_type::theInfo = {
    ASN1::AbstractString::create,
    0x000016,
    ASN1::FixedConstraint, 1, 1,
    "!#*0123456789ABCD", 17,
    7,
    5, 8
};

//
// UserInputIndication_signalUpdate
//


const void* UserInputIndication_signalUpdate::fieldInfos[2] = {
         &duration::value_type::theInfo,
         &rtp::value_type::theInfo
};
int UserInputIndication_signalUpdate::fieldIds[2] = {
        -1,
        0
    };

const char* UserInputIndication_signalUpdate::fieldNames[2] = {
        "duration",
        "rtp"
};

const UserInputIndication_signalUpdate::InfoType UserInputIndication_signalUpdate::theInfo = {
    UserInputIndication_signalUpdate::create,
    0x000010,
    true,
    UserInputIndication_signalUpdate::fieldInfos,
    UserInputIndication_signalUpdate::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    UserInputIndication_signalUpdate::fieldNames
};

//
// UserInputIndication_extendedAlphanumeric
//


const void* UserInputIndication_extendedAlphanumeric::fieldInfos[3] = {
         &alphanumeric::value_type::theInfo,
         &rtpPayloadIndication::value_type::theInfo,
         &encryptedAlphanumeric::value_type::theInfo
};
int UserInputIndication_extendedAlphanumeric::fieldIds[3] = {
        -1,
        0
    };

const char* UserInputIndication_extendedAlphanumeric::fieldNames[3] = {
        "alphanumeric",
        "rtpPayloadIndication",
        "encryptedAlphanumeric"
};

const UserInputIndication_extendedAlphanumeric::InfoType UserInputIndication_extendedAlphanumeric::theInfo = {
    UserInputIndication_extendedAlphanumeric::create,
    0x000010,
    true,
    UserInputIndication_extendedAlphanumeric::fieldInfos,
    UserInputIndication_extendedAlphanumeric::fieldIds,
    2, 1, 1,
    NULL,
    NULL,
    UserInputIndication_extendedAlphanumeric::fieldNames
};

//
// VCCapability_availableBitRates_type
//


const void* VCCapability_availableBitRates_type::selectionInfos[2] = {
         &singleBitRate::value_type::theInfo,
         &rangeOfBitRates::value_type::theInfo
};

const char* VCCapability_availableBitRates_type::selectionNames[2] = { "singleBitRate"
                                      ,"rangeOfBitRates"};

const VCCapability_availableBitRates_type::InfoType VCCapability_availableBitRates_type::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    VCCapability_availableBitRates_type::selectionInfos,
    2, 2,
    NULL,
    VCCapability_availableBitRates_type::selectionNames
};

//
// V76LogicalChannelParameters_mode_eRM
//


const void* V76LogicalChannelParameters_mode_eRM::fieldInfos[2] = {
         &windowSize::value_type::theInfo,
         &recovery::value_type::theInfo
};
int V76LogicalChannelParameters_mode_eRM::fieldIds[2] = {
        -1,
        -1,
    };

const char* V76LogicalChannelParameters_mode_eRM::fieldNames[2] = {
        "windowSize",
        "recovery"
};

const V76LogicalChannelParameters_mode_eRM::InfoType V76LogicalChannelParameters_mode_eRM::theInfo = {
    V76LogicalChannelParameters_mode_eRM::create,
    0x000010,
    true,
    V76LogicalChannelParameters_mode_eRM::fieldInfos,
    V76LogicalChannelParameters_mode_eRM::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    V76LogicalChannelParameters_mode_eRM::fieldNames
};

//
// FECData_rfc2733_pktMode
//


const void* FECData_rfc2733_pktMode::selectionInfos[3] = {
         &rfc2198coding::value_type::theInfo,
         &rfc2733sameport::value_type::theInfo,
         &rfc2733diffport::value_type::theInfo
};

const char* FECData_rfc2733_pktMode::selectionNames[3] = { "rfc2198coding"
                                      ,"rfc2733sameport"
                                      ,"rfc2733diffport"};

const FECData_rfc2733_pktMode::InfoType FECData_rfc2733_pktMode::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    FECData_rfc2733_pktMode::selectionInfos,
    3, 3,
    NULL,
    FECData_rfc2733_pktMode::selectionNames
};

//
// MultilinkResponse_addConnection_responseCode
//


const void* MultilinkResponse_addConnection_responseCode::selectionInfos[2] = {
         &accepted::value_type::theInfo,
         &rejected::value_type::theInfo
};

const char* MultilinkResponse_addConnection_responseCode::selectionNames[2] = { "accepted"
                                      ,"rejected"};

const MultilinkResponse_addConnection_responseCode::InfoType MultilinkResponse_addConnection_responseCode::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MultilinkResponse_addConnection_responseCode::selectionInfos,
    2, 2,
    NULL,
    MultilinkResponse_addConnection_responseCode::selectionNames
};

//
// MiscellaneousCommand_type_progressiveRefinementStart
//


const void* MiscellaneousCommand_type_progressiveRefinementStart::fieldInfos[1] = {
         &repeatCount::value_type::theInfo
};
int MiscellaneousCommand_type_progressiveRefinementStart::fieldIds[1] = {
        -1,
    };

const char* MiscellaneousCommand_type_progressiveRefinementStart::fieldNames[1] = {
        "repeatCount"
};

const MiscellaneousCommand_type_progressiveRefinementStart::InfoType MiscellaneousCommand_type_progressiveRefinementStart::theInfo = {
    MiscellaneousCommand_type_progressiveRefinementStart::create,
    0x000010,
    true,
    MiscellaneousCommand_type_progressiveRefinementStart::fieldInfos,
    MiscellaneousCommand_type_progressiveRefinementStart::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MiscellaneousCommand_type_progressiveRefinementStart::fieldNames
};

//
// NewATMVCCommand_aal_aal1
//


const void* NewATMVCCommand_aal_aal1::fieldInfos[4] = {
         &clockRecovery::value_type::theInfo,
         &errorCorrection::value_type::theInfo,
         &structuredDataTransfer::value_type::theInfo,
         &partiallyFilledCells::value_type::theInfo
};
int NewATMVCCommand_aal_aal1::fieldIds[4] = {
        -1,
        -1,
        -1,
        -1,
    };

const char* NewATMVCCommand_aal_aal1::fieldNames[4] = {
        "clockRecovery",
        "errorCorrection",
        "structuredDataTransfer",
        "partiallyFilledCells"
};

const NewATMVCCommand_aal_aal1::InfoType NewATMVCCommand_aal_aal1::theInfo = {
    NewATMVCCommand_aal_aal1::create,
    0x000010,
    true,
    NewATMVCCommand_aal_aal1::fieldInfos,
    NewATMVCCommand_aal_aal1::fieldIds,
    4, 0, 0,
    NULL,
    NULL,
    NewATMVCCommand_aal_aal1::fieldNames
};

//
// NewATMVCIndication_aal_aal1
//


const void* NewATMVCIndication_aal_aal1::fieldInfos[4] = {
         &clockRecovery::value_type::theInfo,
         &errorCorrection::value_type::theInfo,
         &structuredDataTransfer::value_type::theInfo,
         &partiallyFilledCells::value_type::theInfo
};
int NewATMVCIndication_aal_aal1::fieldIds[4] = {
        -1,
        -1,
        -1,
        -1,
    };

const char* NewATMVCIndication_aal_aal1::fieldNames[4] = {
        "clockRecovery",
        "errorCorrection",
        "structuredDataTransfer",
        "partiallyFilledCells"
};

const NewATMVCIndication_aal_aal1::InfoType NewATMVCIndication_aal_aal1::theInfo = {
    NewATMVCIndication_aal_aal1::create,
    0x000010,
    true,
    NewATMVCIndication_aal_aal1::fieldInfos,
    NewATMVCIndication_aal_aal1::fieldIds,
    4, 0, 0,
    NULL,
    NULL,
    NewATMVCIndication_aal_aal1::fieldNames
};

//
// DepFECData_rfc2733_mode_separateStream
//


const void* DepFECData_rfc2733_mode_separateStream::selectionInfos[2] = {
         &differentPort::value_type::theInfo,
         &samePort::value_type::theInfo
};

const char* DepFECData_rfc2733_mode_separateStream::selectionNames[2] = { "differentPort"
                                      ,"samePort"};

const DepFECData_rfc2733_mode_separateStream::InfoType DepFECData_rfc2733_mode_separateStream::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    DepFECData_rfc2733_mode_separateStream::selectionInfos,
    2, 2,
    NULL,
    DepFECData_rfc2733_mode_separateStream::selectionNames
};

//
// NonStandardParameter
//


const void* NonStandardParameter::fieldInfos[2] = {
         &nonStandardIdentifier::value_type::theInfo,
         &data::value_type::theInfo
};
int NonStandardParameter::fieldIds[2] = {
        -1,
        -1,
    };

const char* NonStandardParameter::fieldNames[2] = {
        "nonStandardIdentifier",
        "data"
};

const NonStandardParameter::InfoType NonStandardParameter::theInfo = {
    NonStandardParameter::create,
    0x000010,
    false,
    NonStandardParameter::fieldInfos,
    NonStandardParameter::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    NonStandardParameter::fieldNames
};

//
// CapabilityDescriptor
//


const void* CapabilityDescriptor::fieldInfos[2] = {
         &capabilityDescriptorNumber::value_type::theInfo,
         &simultaneousCapabilities::value_type::theInfo
};
int CapabilityDescriptor::fieldIds[2] = {
        -1,
        0
    };

const char* CapabilityDescriptor::fieldNames[2] = {
        "capabilityDescriptorNumber",
        "simultaneousCapabilities"
};

const CapabilityDescriptor::InfoType CapabilityDescriptor::theInfo = {
    CapabilityDescriptor::create,
    0x000010,
    false,
    CapabilityDescriptor::fieldInfos,
    CapabilityDescriptor::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    CapabilityDescriptor::fieldNames
};

//
// H223Capability
//


const void* H223Capability::fieldInfos[20] = {
         &transportWithI_frames::value_type::theInfo,
         &videoWithAL1::value_type::theInfo,
         &videoWithAL2::value_type::theInfo,
         &videoWithAL3::value_type::theInfo,
         &audioWithAL1::value_type::theInfo,
         &audioWithAL2::value_type::theInfo,
         &audioWithAL3::value_type::theInfo,
         &dataWithAL1::value_type::theInfo,
         &dataWithAL2::value_type::theInfo,
         &dataWithAL3::value_type::theInfo,
         &maximumAl2SDUSize::value_type::theInfo,
         &maximumAl3SDUSize::value_type::theInfo,
         &maximumDelayJitter::value_type::theInfo,
         &h223MultiplexTableCapability::value_type::theInfo,
         &maxMUXPDUSizeCapability::value_type::theInfo,
         &nsrpSupport::value_type::theInfo,
         &mobileOperationTransmitCapability::value_type::theInfo,
         &h223AnnexCCapability::value_type::theInfo,
         &bitRate::value_type::theInfo,
         &mobileMultilinkFrameCapability::value_type::theInfo
};
int H223Capability::fieldIds[20] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* H223Capability::nonOptionalExtensions = "\xc0";

const char* H223Capability::fieldNames[20] = {
        "transportWithI-frames",
        "videoWithAL1",
        "videoWithAL2",
        "videoWithAL3",
        "audioWithAL1",
        "audioWithAL2",
        "audioWithAL3",
        "dataWithAL1",
        "dataWithAL2",
        "dataWithAL3",
        "maximumAl2SDUSize",
        "maximumAl3SDUSize",
        "maximumDelayJitter",
        "h223MultiplexTableCapability",
        "maxMUXPDUSizeCapability",
        "nsrpSupport",
        "mobileOperationTransmitCapability",
        "h223AnnexCCapability",
        "bitRate",
        "mobileMultilinkFrameCapability"
};

const H223Capability::InfoType H223Capability::theInfo = {
    H223Capability::create,
    0x000010,
    true,
    H223Capability::fieldInfos,
    H223Capability::fieldIds,
    14, 6, 0,
    H223Capability::nonOptionalExtensions,
    NULL,
    H223Capability::fieldNames
};

//
// QOSCapability
//


const void* QOSCapability::fieldInfos[3] = {
         &nonStandardData::value_type::theInfo,
         &rsvpParameters::value_type::theInfo,
         &atmParameters::value_type::theInfo
};
int QOSCapability::fieldIds[3] = {
        0,
        1,
        2
    };

const char* QOSCapability::fieldNames[3] = {
        "nonStandardData",
        "rsvpParameters",
        "atmParameters"
};

const QOSCapability::InfoType QOSCapability::theInfo = {
    QOSCapability::create,
    0x000010,
    true,
    QOSCapability::fieldInfos,
    QOSCapability::fieldIds,
    3, 0, 3,
    NULL,
    NULL,
    QOSCapability::fieldNames
};

//
// TransportCapability
//


const void* TransportCapability::fieldInfos[3] = {
         &nonStandard::value_type::theInfo,
         &qOSCapabilities::value_type::theInfo,
         &mediaChannelCapabilities::value_type::theInfo
};
int TransportCapability::fieldIds[3] = {
        0,
        1,
        2
    };

const char* TransportCapability::fieldNames[3] = {
        "nonStandard",
        "qOSCapabilities",
        "mediaChannelCapabilities"
};

const TransportCapability::InfoType TransportCapability::theInfo = {
    TransportCapability::create,
    0x000010,
    true,
    TransportCapability::fieldInfos,
    TransportCapability::fieldIds,
    3, 0, 3,
    NULL,
    NULL,
    TransportCapability::fieldNames
};

//
// RTPH263VideoRedundancyEncoding
//


const void* RTPH263VideoRedundancyEncoding::fieldInfos[4] = {
         &numberOfThreads::value_type::theInfo,
         &framesBetweenSyncPoints::value_type::theInfo,
         &frameToThreadMapping::value_type::theInfo,
         &containedThreads::value_type::theInfo
};
int RTPH263VideoRedundancyEncoding::fieldIds[4] = {
        -1,
        -1,
        -1,
        0
    };

const char* RTPH263VideoRedundancyEncoding::fieldNames[4] = {
        "numberOfThreads",
        "framesBetweenSyncPoints",
        "frameToThreadMapping",
        "containedThreads"
};

const RTPH263VideoRedundancyEncoding::InfoType RTPH263VideoRedundancyEncoding::theInfo = {
    RTPH263VideoRedundancyEncoding::create,
    0x000010,
    true,
    RTPH263VideoRedundancyEncoding::fieldInfos,
    RTPH263VideoRedundancyEncoding::fieldIds,
    4, 0, 1,
    NULL,
    NULL,
    RTPH263VideoRedundancyEncoding::fieldNames
};

//
// RefPictureSelection
//


const void* RefPictureSelection::fieldInfos[4] = {
         &additionalPictureMemory::value_type::theInfo,
         &videoMux::value_type::theInfo,
         &videoBackChannelSend::value_type::theInfo,
         &enhancedReferencePicSelect::value_type::theInfo
};
int RefPictureSelection::fieldIds[4] = {
        0,
        -1,
        -1,
    };

const char* RefPictureSelection::nonOptionalExtensions = "\x80";

const char* RefPictureSelection::fieldNames[4] = {
        "additionalPictureMemory",
        "videoMux",
        "videoBackChannelSend",
        "enhancedReferencePicSelect"
};

const RefPictureSelection::InfoType RefPictureSelection::theInfo = {
    RefPictureSelection::create,
    0x000010,
    true,
    RefPictureSelection::fieldInfos,
    RefPictureSelection::fieldIds,
    3, 1, 1,
    RefPictureSelection::nonOptionalExtensions,
    NULL,
    RefPictureSelection::fieldNames
};

//
// H263VideoModeCombos
//


const void* H263VideoModeCombos::fieldInfos[2] = {
         &h263VideoUncoupledModes::value_type::theInfo,
         &h263VideoCoupledModes::value_type::theInfo
};
int H263VideoModeCombos::fieldIds[2] = {
        -1,
        -1,
    };

const char* H263VideoModeCombos::fieldNames[2] = {
        "h263VideoUncoupledModes",
        "h263VideoCoupledModes"
};

const H263VideoModeCombos::InfoType H263VideoModeCombos::theInfo = {
    H263VideoModeCombos::create,
    0x000010,
    true,
    H263VideoModeCombos::fieldInfos,
    H263VideoModeCombos::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H263VideoModeCombos::fieldNames
};

//
// DataProtocolCapability
//


const void* DataProtocolCapability::selectionInfos[14] = {
         &nonStandard::value_type::theInfo,
         &v14buffered::value_type::theInfo,
         &v42lapm::value_type::theInfo,
         &hdlcFrameTunnelling::value_type::theInfo,
         &h310SeparateVCStack::value_type::theInfo,
         &h310SingleVCStack::value_type::theInfo,
         &transparent::value_type::theInfo,
         &segmentationAndReassembly::value_type::theInfo,
         &hdlcFrameTunnelingwSAR::value_type::theInfo,
         &v120::value_type::theInfo,
         &separateLANStack::value_type::theInfo,
         &v76wCompression::value_type::theInfo,
         &tcp::value_type::theInfo,
         &udp::value_type::theInfo
};

const char* DataProtocolCapability::selectionNames[14] = { "nonStandard"
                                      ,"v14buffered"
                                      ,"v42lapm"
                                      ,"hdlcFrameTunnelling"
                                      ,"h310SeparateVCStack"
                                      ,"h310SingleVCStack"
                                      ,"transparent"
                                      ,"segmentationAndReassembly"
                                      ,"hdlcFrameTunnelingwSAR"
                                      ,"v120"
                                      ,"separateLANStack"
                                      ,"v76wCompression"
                                      ,"tcp"
                                      ,"udp"};

const DataProtocolCapability::InfoType DataProtocolCapability::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    DataProtocolCapability::selectionInfos,
    7, 14,
    NULL,
    DataProtocolCapability::selectionNames
};

//
// T38FaxProfile
//


const void* T38FaxProfile::fieldInfos[7] = {
         &fillBitRemoval::value_type::theInfo,
         &transcodingJBIG::value_type::theInfo,
         &transcodingMMR::value_type::theInfo,
         &version::value_type::theInfo,
         &t38FaxRateManagement::value_type::theInfo,
         &t38FaxUdpOptions::value_type::theInfo,
         &t38FaxTcpOptions::value_type::theInfo
};
int T38FaxProfile::fieldIds[7] = {
        -1,
        -1,
        -1,
    };

const char* T38FaxProfile::nonOptionalExtensions = "\xc0";

const char* T38FaxProfile::fieldNames[7] = {
        "fillBitRemoval",
        "transcodingJBIG",
        "transcodingMMR",
        "version",
        "t38FaxRateManagement",
        "t38FaxUdpOptions",
        "t38FaxTcpOptions"
};

const T38FaxProfile::InfoType T38FaxProfile::theInfo = {
    T38FaxProfile::create,
    0x000010,
    true,
    T38FaxProfile::fieldInfos,
    T38FaxProfile::fieldIds,
    3, 4, 0,
    T38FaxProfile::nonOptionalExtensions,
    NULL,
    T38FaxProfile::fieldNames
};

//
// MediaEncryptionAlgorithm
//


const void* MediaEncryptionAlgorithm::selectionInfos[2] = {
         &nonStandard::value_type::theInfo,
         &algorithm::value_type::theInfo
};

const char* MediaEncryptionAlgorithm::selectionNames[2] = { "nonStandard"
                                      ,"algorithm"};

const MediaEncryptionAlgorithm::InfoType MediaEncryptionAlgorithm::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MediaEncryptionAlgorithm::selectionInfos,
    2, 2,
    NULL,
    MediaEncryptionAlgorithm::selectionNames
};

//
// AuthenticationCapability
//


const void* AuthenticationCapability::fieldInfos[2] = {
         &nonStandard::value_type::theInfo,
         &antiSpamAlgorithm::value_type::theInfo
};
int AuthenticationCapability::fieldIds[2] = {
        0
    };

const char* AuthenticationCapability::fieldNames[2] = {
        "nonStandard",
        "antiSpamAlgorithm"
};

const AuthenticationCapability::InfoType AuthenticationCapability::theInfo = {
    AuthenticationCapability::create,
    0x000010,
    true,
    AuthenticationCapability::fieldInfos,
    AuthenticationCapability::fieldIds,
    1, 1, 1,
    NULL,
    NULL,
    AuthenticationCapability::fieldNames
};

//
// IntegrityCapability
//


const void* IntegrityCapability::fieldInfos[1] = {
         &nonStandard::value_type::theInfo
};
int IntegrityCapability::fieldIds[1] = {
        0
    };

const char* IntegrityCapability::fieldNames[1] = {
        "nonStandard"
};

const IntegrityCapability::InfoType IntegrityCapability::theInfo = {
    IntegrityCapability::create,
    0x000010,
    true,
    IntegrityCapability::fieldInfos,
    IntegrityCapability::fieldIds,
    1, 0, 1,
    NULL,
    NULL,
    IntegrityCapability::fieldNames
};

//
// ConferenceCapability
//


const void* ConferenceCapability::fieldInfos[4] = {
         &nonStandardData::value_type::theInfo,
         &chairControlCapability::value_type::theInfo,
         &videoIndicateMixingCapability::value_type::theInfo,
         &multipointVisualizationCapability::value_type::theInfo
};
int ConferenceCapability::fieldIds[4] = {
        0,
        -1,
    };

const char* ConferenceCapability::nonOptionalExtensions = "\x80";

const char* ConferenceCapability::fieldNames[4] = {
        "nonStandardData",
        "chairControlCapability",
        "videoIndicateMixingCapability",
        "multipointVisualizationCapability"
};

const ConferenceCapability::InfoType ConferenceCapability::theInfo = {
    ConferenceCapability::create,
    0x000010,
    true,
    ConferenceCapability::fieldInfos,
    ConferenceCapability::fieldIds,
    2, 2, 1,
    ConferenceCapability::nonOptionalExtensions,
    NULL,
    ConferenceCapability::fieldNames
};

//
// CapabilityIdentifier
//


const void* CapabilityIdentifier::selectionInfos[4] = {
         &standard::value_type::theInfo,
         &h221NonStandard::value_type::theInfo,
         &uuid::value_type::theInfo,
         &domainBased::value_type::theInfo
};

const char* CapabilityIdentifier::selectionNames[4] = { "standard"
                                      ,"h221NonStandard"
                                      ,"uuid"
                                      ,"domainBased"};

const CapabilityIdentifier::InfoType CapabilityIdentifier::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    CapabilityIdentifier::selectionInfos,
    4, 4,
    NULL,
    CapabilityIdentifier::selectionNames
};

//
// CapabilityIdentifier::domainBased::value_type
//


const CapabilityIdentifier::domainBased::value_type::InfoType CapabilityIdentifier::domainBased::value_type::theInfo = {
    ASN1::AbstractString::create,
    0x000016,
    ASN1::FixedConstraint, 1, 64,
    ASN1::IA5String::theInfo.characterSet, 128,
    7,
    7, 8
};

//
// ParameterIdentifier
//


const void* ParameterIdentifier::selectionInfos[4] = {
         &standard::value_type::theInfo,
         &h221NonStandard::value_type::theInfo,
         &uuid::value_type::theInfo,
         &domainBased::value_type::theInfo
};

const char* ParameterIdentifier::selectionNames[4] = { "standard"
                                      ,"h221NonStandard"
                                      ,"uuid"
                                      ,"domainBased"};

const ParameterIdentifier::InfoType ParameterIdentifier::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ParameterIdentifier::selectionInfos,
    4, 4,
    NULL,
    ParameterIdentifier::selectionNames
};

//
// ParameterIdentifier::domainBased::value_type
//


const ParameterIdentifier::domainBased::value_type::InfoType ParameterIdentifier::domainBased::value_type::theInfo = {
    ASN1::AbstractString::create,
    0x000016,
    ASN1::FixedConstraint, 1, 64,
    ASN1::IA5String::theInfo.characterSet, 128,
    7,
    7, 8
};

//
// DepFECCapability
//


const void* DepFECCapability::selectionInfos[1] = {
         &rfc2733::value_type::theInfo
};

const char* DepFECCapability::selectionNames[1] = { "rfc2733"};

const DepFECCapability::InfoType DepFECCapability::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    DepFECCapability::selectionInfos,
    1, 1,
    NULL,
    DepFECCapability::selectionNames
};

//
// H223AL1MParameters
//


const void* H223AL1MParameters::fieldInfos[8] = {
         &transferMode::value_type::theInfo,
         &headerFEC::value_type::theInfo,
         &crcLength::value_type::theInfo,
         &rcpcCodeRate::value_type::theInfo,
         &arqType::value_type::theInfo,
         &alpduInterleaving::value_type::theInfo,
         &alsduSplitting::value_type::theInfo,
         &rsCodeCorrection::value_type::theInfo
};
int H223AL1MParameters::fieldIds[8] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* H223AL1MParameters::fieldNames[8] = {
        "transferMode",
        "headerFEC",
        "crcLength",
        "rcpcCodeRate",
        "arqType",
        "alpduInterleaving",
        "alsduSplitting",
        "rsCodeCorrection"
};

const H223AL1MParameters::InfoType H223AL1MParameters::theInfo = {
    H223AL1MParameters::create,
    0x000010,
    true,
    H223AL1MParameters::fieldInfos,
    H223AL1MParameters::fieldIds,
    7, 1, 0,
    NULL,
    NULL,
    H223AL1MParameters::fieldNames
};

//
// H223AL3MParameters
//


const void* H223AL3MParameters::fieldInfos[6] = {
         &headerFormat::value_type::theInfo,
         &crcLength::value_type::theInfo,
         &rcpcCodeRate::value_type::theInfo,
         &arqType::value_type::theInfo,
         &alpduInterleaving::value_type::theInfo,
         &rsCodeCorrection::value_type::theInfo
};
int H223AL3MParameters::fieldIds[6] = {
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* H223AL3MParameters::fieldNames[6] = {
        "headerFormat",
        "crcLength",
        "rcpcCodeRate",
        "arqType",
        "alpduInterleaving",
        "rsCodeCorrection"
};

const H223AL3MParameters::InfoType H223AL3MParameters::theInfo = {
    H223AL3MParameters::create,
    0x000010,
    true,
    H223AL3MParameters::fieldInfos,
    H223AL3MParameters::fieldIds,
    5, 1, 0,
    NULL,
    NULL,
    H223AL3MParameters::fieldNames
};

//
// UnicastAddress
//


const void* UnicastAddress::selectionInfos[7] = {
         &iPAddress::value_type::theInfo,
         &iPXAddress::value_type::theInfo,
         &iP6Address::value_type::theInfo,
         &netBios::value_type::theInfo,
         &iPSourceRouteAddress::value_type::theInfo,
         &nsap::value_type::theInfo,
         &nonStandardAddress::value_type::theInfo
};

const char* UnicastAddress::selectionNames[7] = { "iPAddress"
                                      ,"iPXAddress"
                                      ,"iP6Address"
                                      ,"netBios"
                                      ,"iPSourceRouteAddress"
                                      ,"nsap"
                                      ,"nonStandardAddress"};

const UnicastAddress::InfoType UnicastAddress::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    UnicastAddress::selectionInfos,
    5, 7,
    NULL,
    UnicastAddress::selectionNames
};

//
// MulticastAddress
//


const void* MulticastAddress::selectionInfos[4] = {
         &iPAddress::value_type::theInfo,
         &iP6Address::value_type::theInfo,
         &nsap::value_type::theInfo,
         &nonStandardAddress::value_type::theInfo
};

const char* MulticastAddress::selectionNames[4] = { "iPAddress"
                                      ,"iP6Address"
                                      ,"nsap"
                                      ,"nonStandardAddress"};

const MulticastAddress::InfoType MulticastAddress::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MulticastAddress::selectionInfos,
    2, 4,
    NULL,
    MulticastAddress::selectionNames
};

//
// RequestChannelClose
//


const void* RequestChannelClose::fieldInfos[3] = {
         &forwardLogicalChannelNumber::value_type::theInfo,
         &qosCapability::value_type::theInfo,
         &reason::value_type::theInfo
};
int RequestChannelClose::fieldIds[3] = {
        -1,
    };

const char* RequestChannelClose::nonOptionalExtensions = "\x40";

const char* RequestChannelClose::fieldNames[3] = {
        "forwardLogicalChannelNumber",
        "qosCapability",
        "reason"
};

const RequestChannelClose::InfoType RequestChannelClose::theInfo = {
    RequestChannelClose::create,
    0x000010,
    true,
    RequestChannelClose::fieldInfos,
    RequestChannelClose::fieldIds,
    1, 2, 0,
    RequestChannelClose::nonOptionalExtensions,
    NULL,
    RequestChannelClose::fieldNames
};

//
// MultiplexEntryDescriptor
//


const void* MultiplexEntryDescriptor::fieldInfos[2] = {
         &multiplexTableEntryNumber::value_type::theInfo,
         &elementList::value_type::theInfo
};
int MultiplexEntryDescriptor::fieldIds[2] = {
        -1,
        0
    };

const char* MultiplexEntryDescriptor::fieldNames[2] = {
        "multiplexTableEntryNumber",
        "elementList"
};

const MultiplexEntryDescriptor::InfoType MultiplexEntryDescriptor::theInfo = {
    MultiplexEntryDescriptor::create,
    0x000010,
    false,
    MultiplexEntryDescriptor::fieldInfos,
    MultiplexEntryDescriptor::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    MultiplexEntryDescriptor::fieldNames
};

//
// MultiplexEntrySendReject
//


const void* MultiplexEntrySendReject::fieldInfos[2] = {
         &sequenceNumber::value_type::theInfo,
         &rejectionDescriptions::value_type::theInfo
};
int MultiplexEntrySendReject::fieldIds[2] = {
        -1,
        -1,
    };

const char* MultiplexEntrySendReject::fieldNames[2] = {
        "sequenceNumber",
        "rejectionDescriptions"
};

const MultiplexEntrySendReject::InfoType MultiplexEntrySendReject::theInfo = {
    MultiplexEntrySendReject::create,
    0x000010,
    true,
    MultiplexEntrySendReject::fieldInfos,
    MultiplexEntrySendReject::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MultiplexEntrySendReject::fieldNames
};

//
// RequestMultiplexEntryReject
//


const void* RequestMultiplexEntryReject::fieldInfos[2] = {
         &entryNumbers::value_type::theInfo,
         &rejectionDescriptions::value_type::theInfo
};
int RequestMultiplexEntryReject::fieldIds[2] = {
        -1,
        -1,
    };

const char* RequestMultiplexEntryReject::fieldNames[2] = {
        "entryNumbers",
        "rejectionDescriptions"
};

const RequestMultiplexEntryReject::InfoType RequestMultiplexEntryReject::theInfo = {
    RequestMultiplexEntryReject::create,
    0x000010,
    true,
    RequestMultiplexEntryReject::fieldInfos,
    RequestMultiplexEntryReject::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    RequestMultiplexEntryReject::fieldNames
};

//
// EncryptionMode
//


const void* EncryptionMode::selectionInfos[2] = {
         &nonStandard::value_type::theInfo,
         &h233Encryption::value_type::theInfo
};

const char* EncryptionMode::selectionNames[2] = { "nonStandard"
                                      ,"h233Encryption"};

const EncryptionMode::InfoType EncryptionMode::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    EncryptionMode::selectionInfos,
    2, 2,
    NULL,
    EncryptionMode::selectionNames
};

//
// ConferenceRequest
//


const void* ConferenceRequest::selectionInfos[16] = {
         &terminalListRequest::value_type::theInfo,
         &makeMeChair::value_type::theInfo,
         &cancelMakeMeChair::value_type::theInfo,
         &dropTerminal::value_type::theInfo,
         &requestTerminalID::value_type::theInfo,
         &enterH243Password::value_type::theInfo,
         &enterH243TerminalID::value_type::theInfo,
         &enterH243ConferenceID::value_type::theInfo,
         &enterExtensionAddress::value_type::theInfo,
         &requestChairTokenOwner::value_type::theInfo,
         &requestTerminalCertificate::value_type::theInfo,
         &broadcastMyLogicalChannel::value_type::theInfo,
         &makeTerminalBroadcaster::value_type::theInfo,
         &sendThisSource::value_type::theInfo,
         &requestAllTerminalIDs::value_type::theInfo,
         &remoteMCRequest::value_type::theInfo
};

const char* ConferenceRequest::selectionNames[16] = { "terminalListRequest"
                                      ,"makeMeChair"
                                      ,"cancelMakeMeChair"
                                      ,"dropTerminal"
                                      ,"requestTerminalID"
                                      ,"enterH243Password"
                                      ,"enterH243TerminalID"
                                      ,"enterH243ConferenceID"
                                      ,"enterExtensionAddress"
                                      ,"requestChairTokenOwner"
                                      ,"requestTerminalCertificate"
                                      ,"broadcastMyLogicalChannel"
                                      ,"makeTerminalBroadcaster"
                                      ,"sendThisSource"
                                      ,"requestAllTerminalIDs"
                                      ,"remoteMCRequest"};

const ConferenceRequest::InfoType ConferenceRequest::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ConferenceRequest::selectionInfos,
    8, 16,
    NULL,
    ConferenceRequest::selectionNames
};

//
// RequestAllTerminalIDsResponse
//


const void* RequestAllTerminalIDsResponse::fieldInfos[1] = {
         &terminalInformation::value_type::theInfo
};
int RequestAllTerminalIDsResponse::fieldIds[1] = {
        -1,
    };

const char* RequestAllTerminalIDsResponse::fieldNames[1] = {
        "terminalInformation"
};

const RequestAllTerminalIDsResponse::InfoType RequestAllTerminalIDsResponse::theInfo = {
    RequestAllTerminalIDsResponse::create,
    0x000010,
    true,
    RequestAllTerminalIDsResponse::fieldInfos,
    RequestAllTerminalIDsResponse::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    RequestAllTerminalIDsResponse::fieldNames
};

//
// VCCapability_availableBitRates
//


const void* VCCapability_availableBitRates::fieldInfos[1] = {
         &type::value_type::theInfo
};
int VCCapability_availableBitRates::fieldIds[1] = {
        -1,
    };

const char* VCCapability_availableBitRates::fieldNames[1] = {
        "type"
};

const VCCapability_availableBitRates::InfoType VCCapability_availableBitRates::theInfo = {
    VCCapability_availableBitRates::create,
    0x000010,
    true,
    VCCapability_availableBitRates::fieldInfos,
    VCCapability_availableBitRates::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    VCCapability_availableBitRates::fieldNames
};

//
// CustomPictureFormat_mPI
//


const void* CustomPictureFormat_mPI::fieldInfos[2] = {
         &standardMPI::value_type::theInfo,
         &customPCF::value_type::theInfo
};
int CustomPictureFormat_mPI::fieldIds[2] = {
        0,
        1
    };

const char* CustomPictureFormat_mPI::fieldNames[2] = {
        "standardMPI",
        "customPCF"
};

const CustomPictureFormat_mPI::InfoType CustomPictureFormat_mPI::theInfo = {
    CustomPictureFormat_mPI::create,
    0x000010,
    true,
    CustomPictureFormat_mPI::fieldInfos,
    CustomPictureFormat_mPI::fieldIds,
    2, 0, 2,
    NULL,
    NULL,
    CustomPictureFormat_mPI::fieldNames
};

//
// CustomPictureFormat_pixelAspectInformation
//


const void* CustomPictureFormat_pixelAspectInformation::selectionInfos[3] = {
         &anyPixelAspectRatio::value_type::theInfo,
         &pixelAspectCode::value_type::theInfo,
         &extendedPAR::value_type::theInfo
};

const char* CustomPictureFormat_pixelAspectInformation::selectionNames[3] = { "anyPixelAspectRatio"
                                      ,"pixelAspectCode"
                                      ,"extendedPAR"};

const CustomPictureFormat_pixelAspectInformation::InfoType CustomPictureFormat_pixelAspectInformation::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    CustomPictureFormat_pixelAspectInformation::selectionInfos,
    3, 3,
    NULL,
    CustomPictureFormat_pixelAspectInformation::selectionNames
};

//
// H223LogicalChannelParameters_adaptationLayerType
//


const void* H223LogicalChannelParameters_adaptationLayerType::selectionInfos[9] = {
         &nonStandard::value_type::theInfo,
         &al1Framed::value_type::theInfo,
         &al1NotFramed::value_type::theInfo,
         &al2WithoutSequenceNumbers::value_type::theInfo,
         &al2WithSequenceNumbers::value_type::theInfo,
         &al3::value_type::theInfo,
         &al1M::value_type::theInfo,
         &al2M::value_type::theInfo,
         &al3M::value_type::theInfo
};

const char* H223LogicalChannelParameters_adaptationLayerType::selectionNames[9] = { "nonStandard"
                                      ,"al1Framed"
                                      ,"al1NotFramed"
                                      ,"al2WithoutSequenceNumbers"
                                      ,"al2WithSequenceNumbers"
                                      ,"al3"
                                      ,"al1M"
                                      ,"al2M"
                                      ,"al3M"};

const H223LogicalChannelParameters_adaptationLayerType::InfoType H223LogicalChannelParameters_adaptationLayerType::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223LogicalChannelParameters_adaptationLayerType::selectionInfos,
    6, 9,
    NULL,
    H223LogicalChannelParameters_adaptationLayerType::selectionNames
};

//
// V76LogicalChannelParameters_mode
//


const void* V76LogicalChannelParameters_mode::selectionInfos[2] = {
         &eRM::value_type::theInfo,
         &uNERM::value_type::theInfo
};

const char* V76LogicalChannelParameters_mode::selectionNames[2] = { "eRM"
                                      ,"uNERM"};

const V76LogicalChannelParameters_mode::InfoType V76LogicalChannelParameters_mode::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    V76LogicalChannelParameters_mode::selectionInfos,
    2, 2,
    NULL,
    V76LogicalChannelParameters_mode::selectionNames
};

//
// RTPPayloadType_payloadDescriptor
//


const void* RTPPayloadType_payloadDescriptor::selectionInfos[3] = {
         &nonStandardIdentifier::value_type::theInfo,
         &rfc_number::value_type::theInfo,
         &oid::value_type::theInfo
};

const char* RTPPayloadType_payloadDescriptor::selectionNames[3] = { "nonStandardIdentifier"
                                      ,"rfc-number"
                                      ,"oid"};

const RTPPayloadType_payloadDescriptor::InfoType RTPPayloadType_payloadDescriptor::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RTPPayloadType_payloadDescriptor::selectionInfos,
    3, 3,
    NULL,
    RTPPayloadType_payloadDescriptor::selectionNames
};

//
// FECData_rfc2733
//


const void* FECData_rfc2733::fieldInfos[3] = {
         &protectedPayloadType::value_type::theInfo,
         &fecScheme::value_type::theInfo,
         &pktMode::value_type::theInfo
};
int FECData_rfc2733::fieldIds[3] = {
        -1,
        0,
        -1,
    };

const char* FECData_rfc2733::fieldNames[3] = {
        "protectedPayloadType",
        "fecScheme",
        "pktMode"
};

const FECData_rfc2733::InfoType FECData_rfc2733::theInfo = {
    FECData_rfc2733::create,
    0x000010,
    true,
    FECData_rfc2733::fieldInfos,
    FECData_rfc2733::fieldIds,
    3, 0, 1,
    NULL,
    NULL,
    FECData_rfc2733::fieldNames
};

//
// H223ModeParameters_adaptationLayerType
//


const void* H223ModeParameters_adaptationLayerType::selectionInfos[9] = {
         &nonStandard::value_type::theInfo,
         &al1Framed::value_type::theInfo,
         &al1NotFramed::value_type::theInfo,
         &al2WithoutSequenceNumbers::value_type::theInfo,
         &al2WithSequenceNumbers::value_type::theInfo,
         &al3::value_type::theInfo,
         &al1M::value_type::theInfo,
         &al2M::value_type::theInfo,
         &al3M::value_type::theInfo
};

const char* H223ModeParameters_adaptationLayerType::selectionNames[9] = { "nonStandard"
                                      ,"al1Framed"
                                      ,"al1NotFramed"
                                      ,"al2WithoutSequenceNumbers"
                                      ,"al2WithSequenceNumbers"
                                      ,"al3"
                                      ,"al1M"
                                      ,"al2M"
                                      ,"al3M"};

const H223ModeParameters_adaptationLayerType::InfoType H223ModeParameters_adaptationLayerType::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H223ModeParameters_adaptationLayerType::selectionInfos,
    6, 9,
    NULL,
    H223ModeParameters_adaptationLayerType::selectionNames
};

//
// MultilinkResponse_addConnection
//


const void* MultilinkResponse_addConnection::fieldInfos[2] = {
         &sequenceNumber::value_type::theInfo,
         &responseCode::value_type::theInfo
};
int MultilinkResponse_addConnection::fieldIds[2] = {
        -1,
        -1,
    };

const char* MultilinkResponse_addConnection::fieldNames[2] = {
        "sequenceNumber",
        "responseCode"
};

const MultilinkResponse_addConnection::InfoType MultilinkResponse_addConnection::theInfo = {
    MultilinkResponse_addConnection::create,
    0x000010,
    true,
    MultilinkResponse_addConnection::fieldInfos,
    MultilinkResponse_addConnection::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MultilinkResponse_addConnection::fieldNames
};

//
// EncryptionCommand_encryptionAlgorithmID
//


const void* EncryptionCommand_encryptionAlgorithmID::fieldInfos[2] = {
         &h233AlgorithmIdentifier::value_type::theInfo,
         &associatedAlgorithm::value_type::theInfo
};
int EncryptionCommand_encryptionAlgorithmID::fieldIds[2] = {
        -1,
        -1,
    };

const char* EncryptionCommand_encryptionAlgorithmID::fieldNames[2] = {
        "h233AlgorithmIdentifier",
        "associatedAlgorithm"
};

const EncryptionCommand_encryptionAlgorithmID::InfoType EncryptionCommand_encryptionAlgorithmID::theInfo = {
    EncryptionCommand_encryptionAlgorithmID::create,
    0x000010,
    false,
    EncryptionCommand_encryptionAlgorithmID::fieldInfos,
    EncryptionCommand_encryptionAlgorithmID::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    EncryptionCommand_encryptionAlgorithmID::fieldNames
};

//
// NewATMVCCommand_aal
//


const void* NewATMVCCommand_aal::selectionInfos[2] = {
         &aal1::value_type::theInfo,
         &aal5::value_type::theInfo
};

const char* NewATMVCCommand_aal::selectionNames[2] = { "aal1"
                                      ,"aal5"};

const NewATMVCCommand_aal::InfoType NewATMVCCommand_aal::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NewATMVCCommand_aal::selectionInfos,
    2, 2,
    NULL,
    NewATMVCCommand_aal::selectionNames
};

//
// MiscellaneousIndication_type
//


const void* MiscellaneousIndication_type::selectionInfos[12] = {
         &logicalChannelActive::value_type::theInfo,
         &logicalChannelInactive::value_type::theInfo,
         &multipointConference::value_type::theInfo,
         &cancelMultipointConference::value_type::theInfo,
         &multipointZeroComm::value_type::theInfo,
         &cancelMultipointZeroComm::value_type::theInfo,
         &multipointSecondaryStatus::value_type::theInfo,
         &cancelMultipointSecondaryStatus::value_type::theInfo,
         &videoIndicateReadyToActivate::value_type::theInfo,
         &videoTemporalSpatialTradeOff::value_type::theInfo,
         &videoNotDecodedMBs::value_type::theInfo,
         &transportCapability::value_type::theInfo
};

const char* MiscellaneousIndication_type::selectionNames[12] = { "logicalChannelActive"
                                      ,"logicalChannelInactive"
                                      ,"multipointConference"
                                      ,"cancelMultipointConference"
                                      ,"multipointZeroComm"
                                      ,"cancelMultipointZeroComm"
                                      ,"multipointSecondaryStatus"
                                      ,"cancelMultipointSecondaryStatus"
                                      ,"videoIndicateReadyToActivate"
                                      ,"videoTemporalSpatialTradeOff"
                                      ,"videoNotDecodedMBs"
                                      ,"transportCapability"};

const MiscellaneousIndication_type::InfoType MiscellaneousIndication_type::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MiscellaneousIndication_type::selectionInfos,
    10, 12,
    NULL,
    MiscellaneousIndication_type::selectionNames
};

//
// NewATMVCIndication_aal
//


const void* NewATMVCIndication_aal::selectionInfos[2] = {
         &aal1::value_type::theInfo,
         &aal5::value_type::theInfo
};

const char* NewATMVCIndication_aal::selectionNames[2] = { "aal1"
                                      ,"aal5"};

const NewATMVCIndication_aal::InfoType NewATMVCIndication_aal::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NewATMVCIndication_aal::selectionInfos,
    2, 2,
    NULL,
    NewATMVCIndication_aal::selectionNames
};

//
// UserInputIndication_userInputSupportIndication
//


const void* UserInputIndication_userInputSupportIndication::selectionInfos[7] = {
         &nonStandard::value_type::theInfo,
         &basicString::value_type::theInfo,
         &iA5String::value_type::theInfo,
         &generalString::value_type::theInfo,
         &encryptedBasicString::value_type::theInfo,
         &encryptedIA5String::value_type::theInfo,
         &encryptedGeneralString::value_type::theInfo
};

const char* UserInputIndication_userInputSupportIndication::selectionNames[7] = { "nonStandard"
                                      ,"basicString"
                                      ,"iA5String"
                                      ,"generalString"
                                      ,"encryptedBasicString"
                                      ,"encryptedIA5String"
                                      ,"encryptedGeneralString"};

const UserInputIndication_userInputSupportIndication::InfoType UserInputIndication_userInputSupportIndication::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    UserInputIndication_userInputSupportIndication::selectionInfos,
    4, 7,
    NULL,
    UserInputIndication_userInputSupportIndication::selectionNames
};

//
// DataApplicationCapability_application_t84
//


const void* DataApplicationCapability_application_t84::fieldInfos[2] = {
         &t84Protocol::value_type::theInfo,
         &t84Profile::value_type::theInfo
};
int DataApplicationCapability_application_t84::fieldIds[2] = {
        -1,
        -1,
    };

const char* DataApplicationCapability_application_t84::fieldNames[2] = {
        "t84Protocol",
        "t84Profile"
};

const DataApplicationCapability_application_t84::InfoType DataApplicationCapability_application_t84::theInfo = {
    DataApplicationCapability_application_t84::create,
    0x000010,
    false,
    DataApplicationCapability_application_t84::fieldInfos,
    DataApplicationCapability_application_t84::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    DataApplicationCapability_application_t84::fieldNames
};

//
// DataApplicationCapability_application_nlpid
//


const void* DataApplicationCapability_application_nlpid::fieldInfos[2] = {
         &nlpidProtocol::value_type::theInfo,
         &nlpidData::value_type::theInfo
};
int DataApplicationCapability_application_nlpid::fieldIds[2] = {
        -1,
        -1,
    };

const char* DataApplicationCapability_application_nlpid::fieldNames[2] = {
        "nlpidProtocol",
        "nlpidData"
};

const DataApplicationCapability_application_nlpid::InfoType DataApplicationCapability_application_nlpid::theInfo = {
    DataApplicationCapability_application_nlpid::create,
    0x000010,
    false,
    DataApplicationCapability_application_nlpid::fieldInfos,
    DataApplicationCapability_application_nlpid::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    DataApplicationCapability_application_nlpid::fieldNames
};

//
// DataApplicationCapability_application_t38fax
//


const void* DataApplicationCapability_application_t38fax::fieldInfos[2] = {
         &t38FaxProtocol::value_type::theInfo,
         &t38FaxProfile::value_type::theInfo
};
int DataApplicationCapability_application_t38fax::fieldIds[2] = {
        -1,
        -1,
    };

const char* DataApplicationCapability_application_t38fax::fieldNames[2] = {
        "t38FaxProtocol",
        "t38FaxProfile"
};

const DataApplicationCapability_application_t38fax::InfoType DataApplicationCapability_application_t38fax::theInfo = {
    DataApplicationCapability_application_t38fax::create,
    0x000010,
    false,
    DataApplicationCapability_application_t38fax::fieldInfos,
    DataApplicationCapability_application_t38fax::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    DataApplicationCapability_application_t38fax::fieldNames
};

//
// DepFECData_rfc2733_mode
//


const void* DepFECData_rfc2733_mode::selectionInfos[2] = {
         &redundancyEncoding::value_type::theInfo,
         &separateStream::value_type::theInfo
};

const char* DepFECData_rfc2733_mode::selectionNames[2] = { "redundancyEncoding"
                                      ,"separateStream"};

const DepFECData_rfc2733_mode::InfoType DepFECData_rfc2733_mode::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    DepFECData_rfc2733_mode::selectionInfos,
    2, 2,
    NULL,
    DepFECData_rfc2733_mode::selectionNames
};

//
// DataMode_application_nlpid
//


const void* DataMode_application_nlpid::fieldInfos[2] = {
         &nlpidProtocol::value_type::theInfo,
         &nlpidData::value_type::theInfo
};
int DataMode_application_nlpid::fieldIds[2] = {
        -1,
        -1,
    };

const char* DataMode_application_nlpid::fieldNames[2] = {
        "nlpidProtocol",
        "nlpidData"
};

const DataMode_application_nlpid::InfoType DataMode_application_nlpid::theInfo = {
    DataMode_application_nlpid::create,
    0x000010,
    false,
    DataMode_application_nlpid::fieldInfos,
    DataMode_application_nlpid::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    DataMode_application_nlpid::fieldNames
};

//
// DataMode_application_t38fax
//


const void* DataMode_application_t38fax::fieldInfos[2] = {
         &t38FaxProtocol::value_type::theInfo,
         &t38FaxProfile::value_type::theInfo
};
int DataMode_application_t38fax::fieldIds[2] = {
        -1,
        -1,
    };

const char* DataMode_application_t38fax::fieldNames[2] = {
        "t38FaxProtocol",
        "t38FaxProfile"
};

const DataMode_application_t38fax::InfoType DataMode_application_t38fax::theInfo = {
    DataMode_application_t38fax::create,
    0x000010,
    false,
    DataMode_application_t38fax::fieldInfos,
    DataMode_application_t38fax::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    DataMode_application_t38fax::fieldNames
};

//
// NonStandardMessage
//


const void* NonStandardMessage::fieldInfos[1] = {
         &nonStandardData::value_type::theInfo
};
int NonStandardMessage::fieldIds[1] = {
        -1,
    };

const char* NonStandardMessage::fieldNames[1] = {
        "nonStandardData"
};

const NonStandardMessage::InfoType NonStandardMessage::theInfo = {
    NonStandardMessage::create,
    0x000010,
    true,
    NonStandardMessage::fieldInfos,
    NonStandardMessage::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    NonStandardMessage::fieldNames
};

//
// VCCapability
//


const void* VCCapability::fieldInfos[6] = {
         &aal1::value_type::theInfo,
         &aal5::value_type::theInfo,
         &transportStream::value_type::theInfo,
         &programStream::value_type::theInfo,
         &availableBitRates::value_type::theInfo,
         &aal1ViaGateway::value_type::theInfo
};
int VCCapability::fieldIds[6] = {
        0,
        1,
        -1,
        -1,
        -1,
    };

const char* VCCapability::fieldNames[6] = {
        "aal1",
        "aal5",
        "transportStream",
        "programStream",
        "availableBitRates",
        "aal1ViaGateway"
};

const VCCapability::InfoType VCCapability::theInfo = {
    VCCapability::create,
    0x000010,
    true,
    VCCapability::fieldInfos,
    VCCapability::fieldIds,
    5, 1, 2,
    NULL,
    NULL,
    VCCapability::fieldNames
};

//
// RedundancyEncodingMethod
//


const void* RedundancyEncodingMethod::selectionInfos[3] = {
         &nonStandard::value_type::theInfo,
         &rtpAudioRedundancyEncoding::value_type::theInfo,
         &rtpH263VideoRedundancyEncoding::value_type::theInfo
};

const char* RedundancyEncodingMethod::selectionNames[3] = { "nonStandard"
                                      ,"rtpAudioRedundancyEncoding"
                                      ,"rtpH263VideoRedundancyEncoding"};

const RedundancyEncodingMethod::InfoType RedundancyEncodingMethod::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RedundancyEncodingMethod::selectionInfos,
    2, 3,
    NULL,
    RedundancyEncodingMethod::selectionNames
};

//
// CustomPictureFormat
//


const void* CustomPictureFormat::fieldInfos[6] = {
         &maxCustomPictureWidth::value_type::theInfo,
         &maxCustomPictureHeight::value_type::theInfo,
         &minCustomPictureWidth::value_type::theInfo,
         &minCustomPictureHeight::value_type::theInfo,
         &mPI::value_type::theInfo,
         &pixelAspectInformation::value_type::theInfo
};
int CustomPictureFormat::fieldIds[6] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* CustomPictureFormat::fieldNames[6] = {
        "maxCustomPictureWidth",
        "maxCustomPictureHeight",
        "minCustomPictureWidth",
        "minCustomPictureHeight",
        "mPI",
        "pixelAspectInformation"
};

const CustomPictureFormat::InfoType CustomPictureFormat::theInfo = {
    CustomPictureFormat::create,
    0x000010,
    true,
    CustomPictureFormat::fieldInfos,
    CustomPictureFormat::fieldIds,
    6, 0, 0,
    NULL,
    NULL,
    CustomPictureFormat::fieldNames
};

//
// GenericParameter
//


const void* GenericParameter::fieldInfos[3] = {
         &parameterIdentifier::value_type::theInfo,
         &parameterValue::value_type::theInfo,
         &supersedes::value_type::theInfo
};
int GenericParameter::fieldIds[3] = {
        -1,
        -1,
        0
    };

const char* GenericParameter::fieldNames[3] = {
        "parameterIdentifier",
        "parameterValue",
        "supersedes"
};

const GenericParameter::InfoType GenericParameter::theInfo = {
    GenericParameter::create,
    0x000010,
    true,
    GenericParameter::fieldInfos,
    GenericParameter::fieldIds,
    3, 0, 1,
    NULL,
    NULL,
    GenericParameter::fieldNames
};

//
// ParameterValue
//


const void* ParameterValue::selectionInfos[8] = {
         &logical::value_type::theInfo,
         &booleanArray::value_type::theInfo,
         &unsignedMin::value_type::theInfo,
         &unsignedMax::value_type::theInfo,
         &unsigned32Min::value_type::theInfo,
         &unsigned32Max::value_type::theInfo,
         &octetString::value_type::theInfo,
         &genericParameter::value_type::theInfo
};

const char* ParameterValue::selectionNames[8] = { "logical"
                                      ,"booleanArray"
                                      ,"unsignedMin"
                                      ,"unsignedMax"
                                      ,"unsigned32Min"
                                      ,"unsigned32Max"
                                      ,"octetString"
                                      ,"genericParameter"};

const ParameterValue::InfoType ParameterValue::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ParameterValue::selectionInfos,
    8, 8,
    NULL,
    ParameterValue::selectionNames
};

//
// H223LogicalChannelParameters
//


const void* H223LogicalChannelParameters::fieldInfos[2] = {
         &adaptationLayerType::value_type::theInfo,
         &segmentableFlag::value_type::theInfo
};
int H223LogicalChannelParameters::fieldIds[2] = {
        -1,
        -1,
    };

const char* H223LogicalChannelParameters::fieldNames[2] = {
        "adaptationLayerType",
        "segmentableFlag"
};

const H223LogicalChannelParameters::InfoType H223LogicalChannelParameters::theInfo = {
    H223LogicalChannelParameters::create,
    0x000010,
    true,
    H223LogicalChannelParameters::fieldInfos,
    H223LogicalChannelParameters::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H223LogicalChannelParameters::fieldNames
};

//
// V76LogicalChannelParameters
//


const void* V76LogicalChannelParameters::fieldInfos[5] = {
         &hdlcParameters::value_type::theInfo,
         &suspendResume::value_type::theInfo,
         &uIH::value_type::theInfo,
         &mode::value_type::theInfo,
         &v75Parameters::value_type::theInfo
};
int V76LogicalChannelParameters::fieldIds[5] = {
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* V76LogicalChannelParameters::fieldNames[5] = {
        "hdlcParameters",
        "suspendResume",
        "uIH",
        "mode",
        "v75Parameters"
};

const V76LogicalChannelParameters::InfoType V76LogicalChannelParameters::theInfo = {
    V76LogicalChannelParameters::create,
    0x000010,
    true,
    V76LogicalChannelParameters::fieldInfos,
    V76LogicalChannelParameters::fieldIds,
    5, 0, 0,
    NULL,
    NULL,
    V76LogicalChannelParameters::fieldNames
};

//
// RTPPayloadType
//


const void* RTPPayloadType::fieldInfos[2] = {
         &payloadDescriptor::value_type::theInfo,
         &payloadType::value_type::theInfo
};
int RTPPayloadType::fieldIds[2] = {
        -1,
        0
    };

const char* RTPPayloadType::fieldNames[2] = {
        "payloadDescriptor",
        "payloadType"
};

const RTPPayloadType::InfoType RTPPayloadType::theInfo = {
    RTPPayloadType::create,
    0x000010,
    true,
    RTPPayloadType::fieldInfos,
    RTPPayloadType::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    RTPPayloadType::fieldNames
};

//
// RedundancyEncoding
//


const void* RedundancyEncoding::fieldInfos[2] = {
         &redundancyEncodingMethod::value_type::theInfo,
         &secondaryEncoding::value_type::theInfo
};
int RedundancyEncoding::fieldIds[2] = {
        -1,
        0
    };

const char* RedundancyEncoding::fieldNames[2] = {
        "redundancyEncodingMethod",
        "secondaryEncoding"
};

const RedundancyEncoding::InfoType RedundancyEncoding::theInfo = {
    RedundancyEncoding::create,
    0x000010,
    true,
    RedundancyEncoding::fieldInfos,
    RedundancyEncoding::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    RedundancyEncoding::fieldNames
};

//
// FECData
//


const void* FECData::selectionInfos[1] = {
         &rfc2733::value_type::theInfo
};

const char* FECData::selectionNames[1] = { "rfc2733"};

const FECData::InfoType FECData::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    FECData::selectionInfos,
    1, 1,
    NULL,
    FECData::selectionNames
};

//
// TransportAddress
//


const void* TransportAddress::selectionInfos[2] = {
         &unicastAddress::value_type::theInfo,
         &multicastAddress::value_type::theInfo
};

const char* TransportAddress::selectionNames[2] = { "unicastAddress"
                                      ,"multicastAddress"};

const TransportAddress::InfoType TransportAddress::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    TransportAddress::selectionInfos,
    2, 2,
    NULL,
    TransportAddress::selectionNames
};

//
// EncryptionSync
//


const void* EncryptionSync::fieldInfos[5] = {
         &nonStandard::value_type::theInfo,
         &synchFlag::value_type::theInfo,
         &h235Key::value_type::theInfo,
         &escrowentry::value_type::theInfo,
         &genericParameter::value_type::theInfo
};
int EncryptionSync::fieldIds[5] = {
        0,
        -1,
        -1,
        1
    };

const char* EncryptionSync::fieldNames[5] = {
        "nonStandard",
        "synchFlag",
        "h235Key",
        "escrowentry",
        "genericParameter"
};

const EncryptionSync::InfoType EncryptionSync::theInfo = {
    EncryptionSync::create,
    0x000010,
    true,
    EncryptionSync::fieldInfos,
    EncryptionSync::fieldIds,
    4, 1, 2,
    NULL,
    NULL,
    EncryptionSync::fieldNames
};

//
// H2250LogicalChannelAckParameters
//


const void* H2250LogicalChannelAckParameters::fieldInfos[7] = {
         &nonStandard::value_type::theInfo,
         &sessionID::value_type::theInfo,
         &mediaChannel::value_type::theInfo,
         &mediaControlChannel::value_type::theInfo,
         &dynamicRTPPayloadType::value_type::theInfo,
         &flowControlToZero::value_type::theInfo,
         &portNumber::value_type::theInfo
};
int H2250LogicalChannelAckParameters::fieldIds[7] = {
        0,
        1,
        2,
        3,
        4
    };

const char* H2250LogicalChannelAckParameters::nonOptionalExtensions = "\x80";

const char* H2250LogicalChannelAckParameters::fieldNames[7] = {
        "nonStandard",
        "sessionID",
        "mediaChannel",
        "mediaControlChannel",
        "dynamicRTPPayloadType",
        "flowControlToZero",
        "portNumber"
};

const H2250LogicalChannelAckParameters::InfoType H2250LogicalChannelAckParameters::theInfo = {
    H2250LogicalChannelAckParameters::create,
    0x000010,
    true,
    H2250LogicalChannelAckParameters::fieldInfos,
    H2250LogicalChannelAckParameters::fieldIds,
    5, 2, 5,
    H2250LogicalChannelAckParameters::nonOptionalExtensions,
    NULL,
    H2250LogicalChannelAckParameters::fieldNames
};

//
// MultiplexEntrySend
//


const void* MultiplexEntrySend::fieldInfos[2] = {
         &sequenceNumber::value_type::theInfo,
         &multiplexEntryDescriptors::value_type::theInfo
};
int MultiplexEntrySend::fieldIds[2] = {
        -1,
        -1,
    };

const char* MultiplexEntrySend::fieldNames[2] = {
        "sequenceNumber",
        "multiplexEntryDescriptors"
};

const MultiplexEntrySend::InfoType MultiplexEntrySend::theInfo = {
    MultiplexEntrySend::create,
    0x000010,
    true,
    MultiplexEntrySend::fieldInfos,
    MultiplexEntrySend::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MultiplexEntrySend::fieldNames
};

//
// H223ModeParameters
//


const void* H223ModeParameters::fieldInfos[2] = {
         &adaptationLayerType::value_type::theInfo,
         &segmentableFlag::value_type::theInfo
};
int H223ModeParameters::fieldIds[2] = {
        -1,
        -1,
    };

const char* H223ModeParameters::fieldNames[2] = {
        "adaptationLayerType",
        "segmentableFlag"
};

const H223ModeParameters::InfoType H223ModeParameters::theInfo = {
    H223ModeParameters::create,
    0x000010,
    true,
    H223ModeParameters::fieldInfos,
    H223ModeParameters::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H223ModeParameters::fieldNames
};

//
// ConferenceResponse
//


const void* ConferenceResponse::selectionInfos[16] = {
         &mCTerminalIDResponse::value_type::theInfo,
         &terminalIDResponse::value_type::theInfo,
         &conferenceIDResponse::value_type::theInfo,
         &passwordResponse::value_type::theInfo,
         &terminalListResponse::value_type::theInfo,
         &videoCommandReject::value_type::theInfo,
         &terminalDropReject::value_type::theInfo,
         &makeMeChairResponse::value_type::theInfo,
         &extensionAddressResponse::value_type::theInfo,
         &chairTokenOwnerResponse::value_type::theInfo,
         &terminalCertificateResponse::value_type::theInfo,
         &broadcastMyLogicalChannelResponse::value_type::theInfo,
         &makeTerminalBroadcasterResponse::value_type::theInfo,
         &sendThisSourceResponse::value_type::theInfo,
         &requestAllTerminalIDsResponse::value_type::theInfo,
         &remoteMCResponse::value_type::theInfo
};

const char* ConferenceResponse::selectionNames[16] = { "mCTerminalIDResponse"
                                      ,"terminalIDResponse"
                                      ,"conferenceIDResponse"
                                      ,"passwordResponse"
                                      ,"terminalListResponse"
                                      ,"videoCommandReject"
                                      ,"terminalDropReject"
                                      ,"makeMeChairResponse"
                                      ,"extensionAddressResponse"
                                      ,"chairTokenOwnerResponse"
                                      ,"terminalCertificateResponse"
                                      ,"broadcastMyLogicalChannelResponse"
                                      ,"makeTerminalBroadcasterResponse"
                                      ,"sendThisSourceResponse"
                                      ,"requestAllTerminalIDsResponse"
                                      ,"remoteMCResponse"};

const ConferenceResponse::InfoType ConferenceResponse::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ConferenceResponse::selectionInfos,
    8, 16,
    NULL,
    ConferenceResponse::selectionNames
};

//
// MultilinkIndication
//


const void* MultilinkIndication::selectionInfos[3] = {
         &nonStandard::value_type::theInfo,
         &crcDesired::value_type::theInfo,
         &excessiveError::value_type::theInfo
};

const char* MultilinkIndication::selectionNames[3] = { "nonStandard"
                                      ,"crcDesired"
                                      ,"excessiveError"};

const MultilinkIndication::InfoType MultilinkIndication::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MultilinkIndication::selectionInfos,
    3, 3,
    NULL,
    MultilinkIndication::selectionNames
};

//
// DialingInformationNetworkType
//


const void* DialingInformationNetworkType::selectionInfos[4] = {
         &nonStandard::value_type::theInfo,
         &n_isdn::value_type::theInfo,
         &gstn::value_type::theInfo,
         &mobile::value_type::theInfo
};

const char* DialingInformationNetworkType::selectionNames[4] = { "nonStandard"
                                      ,"n-isdn"
                                      ,"gstn"
                                      ,"mobile"};

const DialingInformationNetworkType::InfoType DialingInformationNetworkType::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    DialingInformationNetworkType::selectionInfos,
    3, 4,
    NULL,
    DialingInformationNetworkType::selectionNames
};

//
// EncryptionCommand
//


const void* EncryptionCommand::selectionInfos[3] = {
         &encryptionSE::value_type::theInfo,
         &encryptionIVRequest::value_type::theInfo,
         &encryptionAlgorithmID::value_type::theInfo
};

const char* EncryptionCommand::selectionNames[3] = { "encryptionSE"
                                      ,"encryptionIVRequest"
                                      ,"encryptionAlgorithmID"};

const EncryptionCommand::InfoType EncryptionCommand::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    EncryptionCommand::selectionInfos,
    3, 3,
    NULL,
    EncryptionCommand::selectionNames
};

//
// NewATMVCCommand
//


const void* NewATMVCCommand::fieldInfos[7] = {
         &resourceID::value_type::theInfo,
         &bitRate::value_type::theInfo,
         &bitRateLockedToPCRClock::value_type::theInfo,
         &bitRateLockedToNetworkClock::value_type::theInfo,
         &aal::value_type::theInfo,
         &multiplex::value_type::theInfo,
         &reverseParameters::value_type::theInfo
};
int NewATMVCCommand::fieldIds[7] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* NewATMVCCommand::fieldNames[7] = {
        "resourceID",
        "bitRate",
        "bitRateLockedToPCRClock",
        "bitRateLockedToNetworkClock",
        "aal",
        "multiplex",
        "reverseParameters"
};

const NewATMVCCommand::InfoType NewATMVCCommand::theInfo = {
    NewATMVCCommand::create,
    0x000010,
    true,
    NewATMVCCommand::fieldInfos,
    NewATMVCCommand::fieldIds,
    7, 0, 0,
    NULL,
    NULL,
    NewATMVCCommand::fieldNames
};

//
// MiscellaneousIndication
//


const void* MiscellaneousIndication::fieldInfos[2] = {
         &logicalChannelNumber::value_type::theInfo,
         &type::value_type::theInfo
};
int MiscellaneousIndication::fieldIds[2] = {
        -1,
        -1,
    };

const char* MiscellaneousIndication::fieldNames[2] = {
        "logicalChannelNumber",
        "type"
};

const MiscellaneousIndication::InfoType MiscellaneousIndication::theInfo = {
    MiscellaneousIndication::create,
    0x000010,
    true,
    MiscellaneousIndication::fieldInfos,
    MiscellaneousIndication::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MiscellaneousIndication::fieldNames
};

//
// MCLocationIndication
//


const void* MCLocationIndication::fieldInfos[1] = {
         &signalAddress::value_type::theInfo
};
int MCLocationIndication::fieldIds[1] = {
        -1,
    };

const char* MCLocationIndication::fieldNames[1] = {
        "signalAddress"
};

const MCLocationIndication::InfoType MCLocationIndication::theInfo = {
    MCLocationIndication::create,
    0x000010,
    true,
    MCLocationIndication::fieldInfos,
    MCLocationIndication::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MCLocationIndication::fieldNames
};

//
// NewATMVCIndication
//


const void* NewATMVCIndication::fieldInfos[7] = {
         &resourceID::value_type::theInfo,
         &bitRate::value_type::theInfo,
         &bitRateLockedToPCRClock::value_type::theInfo,
         &bitRateLockedToNetworkClock::value_type::theInfo,
         &aal::value_type::theInfo,
         &multiplex::value_type::theInfo,
         &reverseParameters::value_type::theInfo
};
int NewATMVCIndication::fieldIds[7] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* NewATMVCIndication::nonOptionalExtensions = "\x80";

const char* NewATMVCIndication::fieldNames[7] = {
        "resourceID",
        "bitRate",
        "bitRateLockedToPCRClock",
        "bitRateLockedToNetworkClock",
        "aal",
        "multiplex",
        "reverseParameters"
};

const NewATMVCIndication::InfoType NewATMVCIndication::theInfo = {
    NewATMVCIndication::create,
    0x000010,
    true,
    NewATMVCIndication::fieldInfos,
    NewATMVCIndication::fieldIds,
    6, 1, 0,
    NewATMVCIndication::nonOptionalExtensions,
    NULL,
    NewATMVCIndication::fieldNames
};

//
// NetworkAccessParameters_networkAddress
//


const void* NetworkAccessParameters_networkAddress::selectionInfos[3] = {
         &q2931Address::value_type::theInfo,
         &e164Address::value_type::theInfo,
         &localAreaAddress::value_type::theInfo
};

const char* NetworkAccessParameters_networkAddress::selectionNames[3] = { "q2931Address"
                                      ,"e164Address"
                                      ,"localAreaAddress"};

const NetworkAccessParameters_networkAddress::InfoType NetworkAccessParameters_networkAddress::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    NetworkAccessParameters_networkAddress::selectionInfos,
    3, 3,
    NULL,
    NetworkAccessParameters_networkAddress::selectionNames
};

//
// NetworkAccessParameters_networkAddress::e164Address::value_type
//


const NetworkAccessParameters_networkAddress::e164Address::value_type::InfoType NetworkAccessParameters_networkAddress::e164Address::value_type::theInfo = {
    ASN1::AbstractString::create,
    0x000016,
    ASN1::FixedConstraint, 1, 128,
    "#*,0123456789", 13,
    7,
    4, 4
};

//
// H2250LogicalChannelParameters_mediaPacketization
//


const void* H2250LogicalChannelParameters_mediaPacketization::selectionInfos[2] = {
         &h261aVideoPacketization::value_type::theInfo,
         &rtpPayloadType::value_type::theInfo
};

const char* H2250LogicalChannelParameters_mediaPacketization::selectionNames[2] = { "h261aVideoPacketization"
                                      ,"rtpPayloadType"};

const H2250LogicalChannelParameters_mediaPacketization::InfoType H2250LogicalChannelParameters_mediaPacketization::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H2250LogicalChannelParameters_mediaPacketization::selectionInfos,
    1, 2,
    NULL,
    H2250LogicalChannelParameters_mediaPacketization::selectionNames
};

//
// DepFECData_rfc2733
//


const void* DepFECData_rfc2733::fieldInfos[1] = {
         &mode::value_type::theInfo
};
int DepFECData_rfc2733::fieldIds[1] = {
        -1,
    };

const char* DepFECData_rfc2733::fieldNames[1] = {
        "mode"
};

const DepFECData_rfc2733::InfoType DepFECData_rfc2733::theInfo = {
    DepFECData_rfc2733::create,
    0x000010,
    true,
    DepFECData_rfc2733::fieldInfos,
    DepFECData_rfc2733::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    DepFECData_rfc2733::fieldNames
};

//
// OpenLogicalChannelAck_forwardMultiplexAckParameters
//


const void* OpenLogicalChannelAck_forwardMultiplexAckParameters::selectionInfos[1] = {
         &h2250LogicalChannelAckParameters::value_type::theInfo
};

const char* OpenLogicalChannelAck_forwardMultiplexAckParameters::selectionNames[1] = { "h2250LogicalChannelAckParameters"};

const OpenLogicalChannelAck_forwardMultiplexAckParameters::InfoType OpenLogicalChannelAck_forwardMultiplexAckParameters::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    OpenLogicalChannelAck_forwardMultiplexAckParameters::selectionInfos,
    1, 1,
    NULL,
    OpenLogicalChannelAck_forwardMultiplexAckParameters::selectionNames
};

//
// MiscellaneousCommand_type_encryptionUpdateCommand
//


const void* MiscellaneousCommand_type_encryptionUpdateCommand::fieldInfos[2] = {
         &encryptionSync::value_type::theInfo,
         &multiplePayloadStream::value_type::theInfo
};
int MiscellaneousCommand_type_encryptionUpdateCommand::fieldIds[2] = {
        -1,
        0
    };

const char* MiscellaneousCommand_type_encryptionUpdateCommand::fieldNames[2] = {
        "encryptionSync",
        "multiplePayloadStream"
};

const MiscellaneousCommand_type_encryptionUpdateCommand::InfoType MiscellaneousCommand_type_encryptionUpdateCommand::theInfo = {
    MiscellaneousCommand_type_encryptionUpdateCommand::create,
    0x000010,
    true,
    MiscellaneousCommand_type_encryptionUpdateCommand::fieldInfos,
    MiscellaneousCommand_type_encryptionUpdateCommand::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    MiscellaneousCommand_type_encryptionUpdateCommand::fieldNames
};

//
// GenericMessage
//


const void* GenericMessage::fieldInfos[3] = {
         &messageIdentifier::value_type::theInfo,
         &subMessageIdentifier::value_type::theInfo,
         &messageContent::value_type::theInfo
};
int GenericMessage::fieldIds[3] = {
        -1,
        0,
        1
    };

const char* GenericMessage::fieldNames[3] = {
        "messageIdentifier",
        "subMessageIdentifier",
        "messageContent"
};

const GenericMessage::InfoType GenericMessage::theInfo = {
    GenericMessage::create,
    0x000010,
    true,
    GenericMessage::fieldInfos,
    GenericMessage::fieldIds,
    3, 0, 2,
    NULL,
    NULL,
    GenericMessage::fieldNames
};

//
// TerminalCapabilitySetAck
//


const void* TerminalCapabilitySetAck::fieldInfos[2] = {
         &sequenceNumber::value_type::theInfo,
         &genericInformation::value_type::theInfo
};
int TerminalCapabilitySetAck::fieldIds[2] = {
        -1,
    };

const char* TerminalCapabilitySetAck::fieldNames[2] = {
        "sequenceNumber",
        "genericInformation"
};

const TerminalCapabilitySetAck::InfoType TerminalCapabilitySetAck::theInfo = {
    TerminalCapabilitySetAck::create,
    0x000010,
    true,
    TerminalCapabilitySetAck::fieldInfos,
    TerminalCapabilitySetAck::fieldIds,
    1, 1, 0,
    NULL,
    NULL,
    TerminalCapabilitySetAck::fieldNames
};

//
// TerminalCapabilitySetReject
//


const void* TerminalCapabilitySetReject::fieldInfos[3] = {
         &sequenceNumber::value_type::theInfo,
         &cause::value_type::theInfo,
         &genericInformation::value_type::theInfo
};
int TerminalCapabilitySetReject::fieldIds[3] = {
        -1,
        -1,
    };

const char* TerminalCapabilitySetReject::fieldNames[3] = {
        "sequenceNumber",
        "cause",
        "genericInformation"
};

const TerminalCapabilitySetReject::InfoType TerminalCapabilitySetReject::theInfo = {
    TerminalCapabilitySetReject::create,
    0x000010,
    true,
    TerminalCapabilitySetReject::fieldInfos,
    TerminalCapabilitySetReject::fieldIds,
    2, 1, 0,
    NULL,
    NULL,
    TerminalCapabilitySetReject::fieldNames
};

//
// H222Capability
//


const void* H222Capability::fieldInfos[2] = {
         &numberOfVCs::value_type::theInfo,
         &vcCapability::value_type::theInfo
};
int H222Capability::fieldIds[2] = {
        -1,
        -1,
    };

const char* H222Capability::fieldNames[2] = {
        "numberOfVCs",
        "vcCapability"
};

const H222Capability::InfoType H222Capability::theInfo = {
    H222Capability::create,
    0x000010,
    true,
    H222Capability::fieldInfos,
    H222Capability::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H222Capability::fieldNames
};

//
// MediaPacketizationCapability
//


const void* MediaPacketizationCapability::fieldInfos[2] = {
         &h261aVideoPacketization::value_type::theInfo,
         &rtpPayloadType::value_type::theInfo
};
int MediaPacketizationCapability::fieldIds[2] = {
        -1,
    };

const char* MediaPacketizationCapability::fieldNames[2] = {
        "h261aVideoPacketization",
        "rtpPayloadType"
};

const MediaPacketizationCapability::InfoType MediaPacketizationCapability::theInfo = {
    MediaPacketizationCapability::create,
    0x000010,
    true,
    MediaPacketizationCapability::fieldInfos,
    MediaPacketizationCapability::fieldIds,
    1, 1, 0,
    NULL,
    NULL,
    MediaPacketizationCapability::fieldNames
};

//
// RedundancyEncodingCapability
//


const void* RedundancyEncodingCapability::fieldInfos[3] = {
         &redundancyEncodingMethod::value_type::theInfo,
         &primaryEncoding::value_type::theInfo,
         &secondaryEncoding::value_type::theInfo
};
int RedundancyEncodingCapability::fieldIds[3] = {
        -1,
        -1,
        0
    };

const char* RedundancyEncodingCapability::fieldNames[3] = {
        "redundancyEncodingMethod",
        "primaryEncoding",
        "secondaryEncoding"
};

const RedundancyEncodingCapability::InfoType RedundancyEncodingCapability::theInfo = {
    RedundancyEncodingCapability::create,
    0x000010,
    true,
    RedundancyEncodingCapability::fieldInfos,
    RedundancyEncodingCapability::fieldIds,
    3, 0, 1,
    NULL,
    NULL,
    RedundancyEncodingCapability::fieldNames
};

//
// H263Options
//


const void* H263Options::fieldInfos[31] = {
         &advancedIntraCodingMode::value_type::theInfo,
         &deblockingFilterMode::value_type::theInfo,
         &improvedPBFramesMode::value_type::theInfo,
         &unlimitedMotionVectors::value_type::theInfo,
         &fullPictureFreeze::value_type::theInfo,
         &partialPictureFreezeAndRelease::value_type::theInfo,
         &resizingPartPicFreezeAndRelease::value_type::theInfo,
         &fullPictureSnapshot::value_type::theInfo,
         &partialPictureSnapshot::value_type::theInfo,
         &videoSegmentTagging::value_type::theInfo,
         &progressiveRefinement::value_type::theInfo,
         &dynamicPictureResizingByFour::value_type::theInfo,
         &dynamicPictureResizingSixteenthPel::value_type::theInfo,
         &dynamicWarpingHalfPel::value_type::theInfo,
         &dynamicWarpingSixteenthPel::value_type::theInfo,
         &independentSegmentDecoding::value_type::theInfo,
         &slicesInOrder_NonRect::value_type::theInfo,
         &slicesInOrder_Rect::value_type::theInfo,
         &slicesNoOrder_NonRect::value_type::theInfo,
         &slicesNoOrder_Rect::value_type::theInfo,
         &alternateInterVLCMode::value_type::theInfo,
         &modifiedQuantizationMode::value_type::theInfo,
         &reducedResolutionUpdate::value_type::theInfo,
         &transparencyParameters::value_type::theInfo,
         &separateVideoBackChannel::value_type::theInfo,
         &refPictureSelection::value_type::theInfo,
         &customPictureClockFrequency::value_type::theInfo,
         &customPictureFormat::value_type::theInfo,
         &modeCombos::value_type::theInfo,
         &videoBadMBsCap::value_type::theInfo,
         &h263Version3Options::value_type::theInfo
};
int H263Options::fieldIds[31] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        0,
        -1,
        1,
        2,
        3,
        4
    };

const char* H263Options::nonOptionalExtensions = "\xc0";

const char* H263Options::fieldNames[31] = {
        "advancedIntraCodingMode",
        "deblockingFilterMode",
        "improvedPBFramesMode",
        "unlimitedMotionVectors",
        "fullPictureFreeze",
        "partialPictureFreezeAndRelease",
        "resizingPartPicFreezeAndRelease",
        "fullPictureSnapshot",
        "partialPictureSnapshot",
        "videoSegmentTagging",
        "progressiveRefinement",
        "dynamicPictureResizingByFour",
        "dynamicPictureResizingSixteenthPel",
        "dynamicWarpingHalfPel",
        "dynamicWarpingSixteenthPel",
        "independentSegmentDecoding",
        "slicesInOrder-NonRect",
        "slicesInOrder-Rect",
        "slicesNoOrder-NonRect",
        "slicesNoOrder-Rect",
        "alternateInterVLCMode",
        "modifiedQuantizationMode",
        "reducedResolutionUpdate",
        "transparencyParameters",
        "separateVideoBackChannel",
        "refPictureSelection",
        "customPictureClockFrequency",
        "customPictureFormat",
        "modeCombos",
        "videoBadMBsCap",
        "h263Version3Options"
};

const H263Options::InfoType H263Options::theInfo = {
    H263Options::create,
    0x000010,
    true,
    H263Options::fieldInfos,
    H263Options::fieldIds,
    29, 2, 5,
    H263Options::nonOptionalExtensions,
    NULL,
    H263Options::fieldNames
};

//
// GenericCapability
//


const void* GenericCapability::fieldInfos[6] = {
         &capabilityIdentifier::value_type::theInfo,
         &maxBitRate::value_type::theInfo,
         &collapsing::value_type::theInfo,
         &nonCollapsing::value_type::theInfo,
         &nonCollapsingRaw::value_type::theInfo,
         &transport::value_type::theInfo
};
int GenericCapability::fieldIds[6] = {
        -1,
        0,
        1,
        2,
        3,
        4
    };

const char* GenericCapability::fieldNames[6] = {
        "capabilityIdentifier",
        "maxBitRate",
        "collapsing",
        "nonCollapsing",
        "nonCollapsingRaw",
        "transport"
};

const GenericCapability::InfoType GenericCapability::theInfo = {
    GenericCapability::create,
    0x000010,
    true,
    GenericCapability::fieldInfos,
    GenericCapability::fieldIds,
    6, 0, 5,
    NULL,
    NULL,
    GenericCapability::fieldNames
};

//
// MultiplexFormat
//


const void* MultiplexFormat::selectionInfos[3] = {
         &nonStandard::value_type::theInfo,
         &h222Capability::value_type::theInfo,
         &h223Capability::value_type::theInfo
};

const char* MultiplexFormat::selectionNames[3] = { "nonStandard"
                                      ,"h222Capability"
                                      ,"h223Capability"};

const MultiplexFormat::InfoType MultiplexFormat::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MultiplexFormat::selectionInfos,
    3, 3,
    NULL,
    MultiplexFormat::selectionNames
};

//
// NetworkAccessParameters
//


const void* NetworkAccessParameters::fieldInfos[5] = {
         &distribution::value_type::theInfo,
         &networkAddress::value_type::theInfo,
         &associateConference::value_type::theInfo,
         &externalReference::value_type::theInfo,
         &t120SetupProcedure::value_type::theInfo
};
int NetworkAccessParameters::fieldIds[5] = {
        0,
        -1,
        -1,
        1
    };

const char* NetworkAccessParameters::fieldNames[5] = {
        "distribution",
        "networkAddress",
        "associateConference",
        "externalReference",
        "t120SetupProcedure"
};

const NetworkAccessParameters::InfoType NetworkAccessParameters::theInfo = {
    NetworkAccessParameters::create,
    0x000010,
    true,
    NetworkAccessParameters::fieldInfos,
    NetworkAccessParameters::fieldIds,
    4, 1, 2,
    NULL,
    NULL,
    NetworkAccessParameters::fieldNames
};

//
// MultiplexedStreamParameter
//


const void* MultiplexedStreamParameter::fieldInfos[2] = {
         &multiplexFormat::value_type::theInfo,
         &controlOnMuxStream::value_type::theInfo
};
int MultiplexedStreamParameter::fieldIds[2] = {
        -1,
        -1,
    };

const char* MultiplexedStreamParameter::fieldNames[2] = {
        "multiplexFormat",
        "controlOnMuxStream"
};

const MultiplexedStreamParameter::InfoType MultiplexedStreamParameter::theInfo = {
    MultiplexedStreamParameter::create,
    0x000010,
    true,
    MultiplexedStreamParameter::fieldInfos,
    MultiplexedStreamParameter::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MultiplexedStreamParameter::fieldNames
};

//
// H2250LogicalChannelParameters
//


const void* H2250LogicalChannelParameters::fieldInfos[13] = {
         &nonStandard::value_type::theInfo,
         &sessionID::value_type::theInfo,
         &associatedSessionID::value_type::theInfo,
         &mediaChannel::value_type::theInfo,
         &mediaGuaranteedDelivery::value_type::theInfo,
         &mediaControlChannel::value_type::theInfo,
         &mediaControlGuaranteedDelivery::value_type::theInfo,
         &silenceSuppression::value_type::theInfo,
         &destination::value_type::theInfo,
         &dynamicRTPPayloadType::value_type::theInfo,
         &mediaPacketization::value_type::theInfo,
         &transportCapability::value_type::theInfo,
         &source::value_type::theInfo
};
int H2250LogicalChannelParameters::fieldIds[13] = {
        0,
        -1,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
    };

const char* H2250LogicalChannelParameters::fieldNames[13] = {
        "nonStandard",
        "sessionID",
        "associatedSessionID",
        "mediaChannel",
        "mediaGuaranteedDelivery",
        "mediaControlChannel",
        "mediaControlGuaranteedDelivery",
        "silenceSuppression",
        "destination",
        "dynamicRTPPayloadType",
        "mediaPacketization",
        "transportCapability",
        "source"
};

const H2250LogicalChannelParameters::InfoType H2250LogicalChannelParameters::theInfo = {
    H2250LogicalChannelParameters::create,
    0x000010,
    true,
    H2250LogicalChannelParameters::fieldInfos,
    H2250LogicalChannelParameters::fieldIds,
    11, 2, 10,
    NULL,
    NULL,
    H2250LogicalChannelParameters::fieldNames
};

//
// DepFECData
//


const void* DepFECData::selectionInfos[1] = {
         &rfc2733::value_type::theInfo
};

const char* DepFECData::selectionNames[1] = { "rfc2733"};

const DepFECData::InfoType DepFECData::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    DepFECData::selectionInfos,
    1, 1,
    NULL,
    DepFECData::selectionNames
};

//
// OpenLogicalChannelReject
//


const void* OpenLogicalChannelReject::fieldInfos[3] = {
         &forwardLogicalChannelNumber::value_type::theInfo,
         &cause::value_type::theInfo,
         &genericInformation::value_type::theInfo
};
int OpenLogicalChannelReject::fieldIds[3] = {
        -1,
        -1,
    };

const char* OpenLogicalChannelReject::fieldNames[3] = {
        "forwardLogicalChannelNumber",
        "cause",
        "genericInformation"
};

const OpenLogicalChannelReject::InfoType OpenLogicalChannelReject::theInfo = {
    OpenLogicalChannelReject::create,
    0x000010,
    true,
    OpenLogicalChannelReject::fieldInfos,
    OpenLogicalChannelReject::fieldIds,
    2, 1, 0,
    NULL,
    NULL,
    OpenLogicalChannelReject::fieldNames
};

//
// OpenLogicalChannelConfirm
//


const void* OpenLogicalChannelConfirm::fieldInfos[2] = {
         &forwardLogicalChannelNumber::value_type::theInfo,
         &genericInformation::value_type::theInfo
};
int OpenLogicalChannelConfirm::fieldIds[2] = {
        -1,
    };

const char* OpenLogicalChannelConfirm::fieldNames[2] = {
        "forwardLogicalChannelNumber",
        "genericInformation"
};

const OpenLogicalChannelConfirm::InfoType OpenLogicalChannelConfirm::theInfo = {
    OpenLogicalChannelConfirm::create,
    0x000010,
    true,
    OpenLogicalChannelConfirm::fieldInfos,
    OpenLogicalChannelConfirm::fieldIds,
    1, 1, 0,
    NULL,
    NULL,
    OpenLogicalChannelConfirm::fieldNames
};

//
// AudioMode
//


const void* AudioMode::selectionInfos[23] = {
         &nonStandard::value_type::theInfo,
         &g711Alaw64k::value_type::theInfo,
         &g711Alaw56k::value_type::theInfo,
         &g711Ulaw64k::value_type::theInfo,
         &g711Ulaw56k::value_type::theInfo,
         &g722_64k::value_type::theInfo,
         &g722_56k::value_type::theInfo,
         &g722_48k::value_type::theInfo,
         &g728::value_type::theInfo,
         &g729::value_type::theInfo,
         &g729AnnexA::value_type::theInfo,
         &g7231::value_type::theInfo,
         &is11172AudioMode::value_type::theInfo,
         &is13818AudioMode::value_type::theInfo,
         &g729wAnnexB::value_type::theInfo,
         &g729AnnexAwAnnexB::value_type::theInfo,
         &g7231AnnexCMode::value_type::theInfo,
         &gsmFullRate::value_type::theInfo,
         &gsmHalfRate::value_type::theInfo,
         &gsmEnhancedFullRate::value_type::theInfo,
         &genericAudioMode::value_type::theInfo,
         &g729Extensions::value_type::theInfo,
         &vbd::value_type::theInfo
};

const char* AudioMode::selectionNames[23] = { "nonStandard"
                                      ,"g711Alaw64k"
                                      ,"g711Alaw56k"
                                      ,"g711Ulaw64k"
                                      ,"g711Ulaw56k"
                                      ,"g722-64k"
                                      ,"g722-56k"
                                      ,"g722-48k"
                                      ,"g728"
                                      ,"g729"
                                      ,"g729AnnexA"
                                      ,"g7231"
                                      ,"is11172AudioMode"
                                      ,"is13818AudioMode"
                                      ,"g729wAnnexB"
                                      ,"g729AnnexAwAnnexB"
                                      ,"g7231AnnexCMode"
                                      ,"gsmFullRate"
                                      ,"gsmHalfRate"
                                      ,"gsmEnhancedFullRate"
                                      ,"genericAudioMode"
                                      ,"g729Extensions"
                                      ,"vbd"};

const AudioMode::InfoType AudioMode::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    AudioMode::selectionInfos,
    14, 23,
    NULL,
    AudioMode::selectionNames
};

//
// DialingInformationNumber
//


const void* DialingInformationNumber::fieldInfos[3] = {
         &networkAddress::value_type::theInfo,
         &subAddress::value_type::theInfo,
         &networkType::value_type::theInfo
};
int DialingInformationNumber::fieldIds[3] = {
        -1,
        0,
        -1,
    };

const char* DialingInformationNumber::fieldNames[3] = {
        "networkAddress",
        "subAddress",
        "networkType"
};

const DialingInformationNumber::InfoType DialingInformationNumber::theInfo = {
    DialingInformationNumber::create,
    0x000010,
    true,
    DialingInformationNumber::fieldInfos,
    DialingInformationNumber::fieldIds,
    3, 0, 1,
    NULL,
    NULL,
    DialingInformationNumber::fieldNames
};

//
// DialingInformationNumber::networkAddress::value_type
//


const DialingInformationNumber::networkAddress::value_type::InfoType DialingInformationNumber::networkAddress::value_type::theInfo = {
    ASN1::AbstractString::create,
    0x000012,
    ASN1::FixedConstraint, 0, 40,
    ASN1::NumericString::theInfo.characterSet, 11,
    4,
    4, 4
};

//
// DialingInformationNumber::subAddress::value_type
//


const DialingInformationNumber::subAddress::value_type::InfoType DialingInformationNumber::subAddress::value_type::theInfo = {
    ASN1::AbstractString::create,
    0x000016,
    ASN1::FixedConstraint, 1, 40,
    ASN1::IA5String::theInfo.characterSet, 128,
    7,
    7, 8
};

//
// EndSessionCommand
//


const void* EndSessionCommand::selectionInfos[5] = {
         &nonStandard::value_type::theInfo,
         &disconnect::value_type::theInfo,
         &gstnOptions::value_type::theInfo,
         &isdnOptions::value_type::theInfo,
         &genericInformation::value_type::theInfo
};

const char* EndSessionCommand::selectionNames[5] = { "nonStandard"
                                      ,"disconnect"
                                      ,"gstnOptions"
                                      ,"isdnOptions"
                                      ,"genericInformation"};

const EndSessionCommand::InfoType EndSessionCommand::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    EndSessionCommand::selectionInfos,
    3, 5,
    NULL,
    EndSessionCommand::selectionNames
};

//
// UserInputIndication
//


const void* UserInputIndication::selectionInfos[8] = {
         &nonStandard::value_type::theInfo,
         &alphanumeric::value_type::theInfo,
         &userInputSupportIndication::value_type::theInfo,
         &signal::value_type::theInfo,
         &signalUpdate::value_type::theInfo,
         &extendedAlphanumeric::value_type::theInfo,
         &encryptedAlphanumeric::value_type::theInfo,
         &genericInformation::value_type::theInfo
};

const char* UserInputIndication::selectionNames[8] = { "nonStandard"
                                      ,"alphanumeric"
                                      ,"userInputSupportIndication"
                                      ,"signal"
                                      ,"signalUpdate"
                                      ,"extendedAlphanumeric"
                                      ,"encryptedAlphanumeric"
                                      ,"genericInformation"};

const UserInputIndication::InfoType UserInputIndication::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    UserInputIndication::selectionInfos,
    2, 8,
    NULL,
    UserInputIndication::selectionNames
};

//
// DataApplicationCapability_application
//


const void* DataApplicationCapability_application::selectionInfos[14] = {
         &nonStandard::value_type::theInfo,
         &t120::value_type::theInfo,
         &dsm_cc::value_type::theInfo,
         &userData::value_type::theInfo,
         &t84::value_type::theInfo,
         &t434::value_type::theInfo,
         &h224::value_type::theInfo,
         &nlpid::value_type::theInfo,
         &dsvdControl::value_type::theInfo,
         &h222DataPartitioning::value_type::theInfo,
         &t30fax::value_type::theInfo,
         &t140::value_type::theInfo,
         &t38fax::value_type::theInfo,
         &genericDataCapability::value_type::theInfo
};

const char* DataApplicationCapability_application::selectionNames[14] = { "nonStandard"
                                      ,"t120"
                                      ,"dsm-cc"
                                      ,"userData"
                                      ,"t84"
                                      ,"t434"
                                      ,"h224"
                                      ,"nlpid"
                                      ,"dsvdControl"
                                      ,"h222DataPartitioning"
                                      ,"t30fax"
                                      ,"t140"
                                      ,"t38fax"
                                      ,"genericDataCapability"};

const DataApplicationCapability_application::InfoType DataApplicationCapability_application::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    DataApplicationCapability_application::selectionInfos,
    10, 14,
    NULL,
    DataApplicationCapability_application::selectionNames
};

//
// RedundancyEncodingMode_secondaryEncoding
//


const void* RedundancyEncodingMode_secondaryEncoding::selectionInfos[2] = {
         &nonStandard::value_type::theInfo,
         &audioData::value_type::theInfo
};

const char* RedundancyEncodingMode_secondaryEncoding::selectionNames[2] = { "nonStandard"
                                      ,"audioData"};

const RedundancyEncodingMode_secondaryEncoding::InfoType RedundancyEncodingMode_secondaryEncoding::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RedundancyEncodingMode_secondaryEncoding::selectionInfos,
    2, 2,
    NULL,
    RedundancyEncodingMode_secondaryEncoding::selectionNames
};

//
// DataMode_application
//


const void* DataMode_application::selectionInfos[14] = {
         &nonStandard::value_type::theInfo,
         &t120::value_type::theInfo,
         &dsm_cc::value_type::theInfo,
         &userData::value_type::theInfo,
         &t84::value_type::theInfo,
         &t434::value_type::theInfo,
         &h224::value_type::theInfo,
         &nlpid::value_type::theInfo,
         &dsvdControl::value_type::theInfo,
         &h222DataPartitioning::value_type::theInfo,
         &t30fax::value_type::theInfo,
         &t140::value_type::theInfo,
         &t38fax::value_type::theInfo,
         &genericDataMode::value_type::theInfo
};

const char* DataMode_application::selectionNames[14] = { "nonStandard"
                                      ,"t120"
                                      ,"dsm-cc"
                                      ,"userData"
                                      ,"t84"
                                      ,"t434"
                                      ,"h224"
                                      ,"nlpid"
                                      ,"dsvdControl"
                                      ,"h222DataPartitioning"
                                      ,"t30fax"
                                      ,"t140"
                                      ,"t38fax"
                                      ,"genericDataMode"};

const DataMode_application::InfoType DataMode_application::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    DataMode_application::selectionInfos,
    10, 14,
    NULL,
    DataMode_application::selectionNames
};

//
// MiscellaneousCommand_type
//


const void* MiscellaneousCommand_type::selectionInfos[25] = {
         &equaliseDelay::value_type::theInfo,
         &zeroDelay::value_type::theInfo,
         &multipointModeCommand::value_type::theInfo,
         &cancelMultipointModeCommand::value_type::theInfo,
         &videoFreezePicture::value_type::theInfo,
         &videoFastUpdatePicture::value_type::theInfo,
         &videoFastUpdateGOB::value_type::theInfo,
         &videoTemporalSpatialTradeOff::value_type::theInfo,
         &videoSendSyncEveryGOB::value_type::theInfo,
         &videoSendSyncEveryGOBCancel::value_type::theInfo,
         &videoFastUpdateMB::value_type::theInfo,
         &maxH223MUXPDUsize::value_type::theInfo,
         &encryptionUpdate::value_type::theInfo,
         &encryptionUpdateRequest::value_type::theInfo,
         &switchReceiveMediaOff::value_type::theInfo,
         &switchReceiveMediaOn::value_type::theInfo,
         &progressiveRefinementStart::value_type::theInfo,
         &progressiveRefinementAbortOne::value_type::theInfo,
         &progressiveRefinementAbortContinuous::value_type::theInfo,
         &videoBadMBs::value_type::theInfo,
         &lostPicture::value_type::theInfo,
         &lostPartialPicture::value_type::theInfo,
         &recoveryReferencePicture::value_type::theInfo,
         &encryptionUpdateCommand::value_type::theInfo,
         &encryptionUpdateAck::value_type::theInfo
};

const char* MiscellaneousCommand_type::selectionNames[25] = { "equaliseDelay"
                                      ,"zeroDelay"
                                      ,"multipointModeCommand"
                                      ,"cancelMultipointModeCommand"
                                      ,"videoFreezePicture"
                                      ,"videoFastUpdatePicture"
                                      ,"videoFastUpdateGOB"
                                      ,"videoTemporalSpatialTradeOff"
                                      ,"videoSendSyncEveryGOB"
                                      ,"videoSendSyncEveryGOBCancel"
                                      ,"videoFastUpdateMB"
                                      ,"maxH223MUXPDUsize"
                                      ,"encryptionUpdate"
                                      ,"encryptionUpdateRequest"
                                      ,"switchReceiveMediaOff"
                                      ,"switchReceiveMediaOn"
                                      ,"progressiveRefinementStart"
                                      ,"progressiveRefinementAbortOne"
                                      ,"progressiveRefinementAbortContinuous"
                                      ,"videoBadMBs"
                                      ,"lostPicture"
                                      ,"lostPartialPicture"
                                      ,"recoveryReferencePicture"
                                      ,"encryptionUpdateCommand"
                                      ,"encryptionUpdateAck"};

const MiscellaneousCommand_type::InfoType MiscellaneousCommand_type::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MiscellaneousCommand_type::selectionInfos,
    10, 25,
    NULL,
    MiscellaneousCommand_type::selectionNames
};

//
// OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters
//


const void* OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::selectionInfos[5] = {
         &h222LogicalChannelParameters::value_type::theInfo,
         &h223LogicalChannelParameters::value_type::theInfo,
         &v76LogicalChannelParameters::value_type::theInfo,
         &h2250LogicalChannelParameters::value_type::theInfo,
         &none::value_type::theInfo
};

const char* OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::selectionNames[5] = { "h222LogicalChannelParameters"
                                      ,"h223LogicalChannelParameters"
                                      ,"v76LogicalChannelParameters"
                                      ,"h2250LogicalChannelParameters"
                                      ,"none"};

const OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::InfoType OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::selectionInfos,
    3, 5,
    NULL,
    OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::selectionNames
};

//
// OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters
//


const void* OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::selectionInfos[3] = {
         &h223LogicalChannelParameters::value_type::theInfo,
         &v76LogicalChannelParameters::value_type::theInfo,
         &h2250LogicalChannelParameters::value_type::theInfo
};

const char* OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::selectionNames[3] = { "h223LogicalChannelParameters"
                                      ,"v76LogicalChannelParameters"
                                      ,"h2250LogicalChannelParameters"};

const OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::InfoType OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::selectionInfos,
    2, 3,
    NULL,
    OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::selectionNames
};

//
// OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters
//


const void* OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::selectionInfos[2] = {
         &h222LogicalChannelParameters::value_type::theInfo,
         &h2250LogicalChannelParameters::value_type::theInfo
};

const char* OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::selectionNames[2] = { "h222LogicalChannelParameters"
                                      ,"h2250LogicalChannelParameters"};

const OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::InfoType OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::selectionInfos,
    1, 2,
    NULL,
    OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::selectionNames
};

//
// EnhancementOptions
//


const void* EnhancementOptions::fieldInfos[16] = {
         &sqcifMPI::value_type::theInfo,
         &qcifMPI::value_type::theInfo,
         &cifMPI::value_type::theInfo,
         &cif4MPI::value_type::theInfo,
         &cif16MPI::value_type::theInfo,
         &maxBitRate::value_type::theInfo,
         &unrestrictedVector::value_type::theInfo,
         &arithmeticCoding::value_type::theInfo,
         &temporalSpatialTradeOffCapability::value_type::theInfo,
         &slowSqcifMPI::value_type::theInfo,
         &slowQcifMPI::value_type::theInfo,
         &slowCifMPI::value_type::theInfo,
         &slowCif4MPI::value_type::theInfo,
         &slowCif16MPI::value_type::theInfo,
         &errorCompensation::value_type::theInfo,
         &h263Options::value_type::theInfo
};
int EnhancementOptions::fieldIds[16] = {
        0,
        1,
        2,
        3,
        4,
        -1,
        -1,
        -1,
        -1,
        5,
        6,
        7,
        8,
        9,
        -1,
        10
    };

const char* EnhancementOptions::fieldNames[16] = {
        "sqcifMPI",
        "qcifMPI",
        "cifMPI",
        "cif4MPI",
        "cif16MPI",
        "maxBitRate",
        "unrestrictedVector",
        "arithmeticCoding",
        "temporalSpatialTradeOffCapability",
        "slowSqcifMPI",
        "slowQcifMPI",
        "slowCifMPI",
        "slowCif4MPI",
        "slowCif16MPI",
        "errorCompensation",
        "h263Options"
};

const EnhancementOptions::InfoType EnhancementOptions::theInfo = {
    EnhancementOptions::create,
    0x000010,
    true,
    EnhancementOptions::fieldInfos,
    EnhancementOptions::fieldIds,
    16, 0, 11,
    NULL,
    NULL,
    EnhancementOptions::fieldNames
};

//
// AudioCapability
//


const void* AudioCapability::selectionInfos[25] = {
         &nonStandard::value_type::theInfo,
         &g711Alaw64k::value_type::theInfo,
         &g711Alaw56k::value_type::theInfo,
         &g711Ulaw64k::value_type::theInfo,
         &g711Ulaw56k::value_type::theInfo,
         &g722_64k::value_type::theInfo,
         &g722_56k::value_type::theInfo,
         &g722_48k::value_type::theInfo,
         &g7231::value_type::theInfo,
         &g728::value_type::theInfo,
         &g729::value_type::theInfo,
         &g729AnnexA::value_type::theInfo,
         &is11172AudioCapability::value_type::theInfo,
         &is13818AudioCapability::value_type::theInfo,
         &g729wAnnexB::value_type::theInfo,
         &g729AnnexAwAnnexB::value_type::theInfo,
         &g7231AnnexCCapability::value_type::theInfo,
         &gsmFullRate::value_type::theInfo,
         &gsmHalfRate::value_type::theInfo,
         &gsmEnhancedFullRate::value_type::theInfo,
         &genericAudioCapability::value_type::theInfo,
         &g729Extensions::value_type::theInfo,
         &vbd::value_type::theInfo,
         &audioTelephonyEvent::value_type::theInfo,
         &audioTone::value_type::theInfo
};

const char* AudioCapability::selectionNames[25] = { "nonStandard"
                                      ,"g711Alaw64k"
                                      ,"g711Alaw56k"
                                      ,"g711Ulaw64k"
                                      ,"g711Ulaw56k"
                                      ,"g722-64k"
                                      ,"g722-56k"
                                      ,"g722-48k"
                                      ,"g7231"
                                      ,"g728"
                                      ,"g729"
                                      ,"g729AnnexA"
                                      ,"is11172AudioCapability"
                                      ,"is13818AudioCapability"
                                      ,"g729wAnnexB"
                                      ,"g729AnnexAwAnnexB"
                                      ,"g7231AnnexCCapability"
                                      ,"gsmFullRate"
                                      ,"gsmHalfRate"
                                      ,"gsmEnhancedFullRate"
                                      ,"genericAudioCapability"
                                      ,"g729Extensions"
                                      ,"vbd"
                                      ,"audioTelephonyEvent"
                                      ,"audioTone"};

const AudioCapability::InfoType AudioCapability::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    AudioCapability::selectionInfos,
    14, 25,
    NULL,
    AudioCapability::selectionNames
};

//
// DataApplicationCapability
//


const void* DataApplicationCapability::fieldInfos[2] = {
         &application::value_type::theInfo,
         &maxBitRate::value_type::theInfo
};
int DataApplicationCapability::fieldIds[2] = {
        -1,
        -1,
    };

const char* DataApplicationCapability::fieldNames[2] = {
        "application",
        "maxBitRate"
};

const DataApplicationCapability::InfoType DataApplicationCapability::theInfo = {
    DataApplicationCapability::create,
    0x000010,
    true,
    DataApplicationCapability::fieldInfos,
    DataApplicationCapability::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    DataApplicationCapability::fieldNames
};

//
// EncryptionAuthenticationAndIntegrity
//


const void* EncryptionAuthenticationAndIntegrity::fieldInfos[4] = {
         &encryptionCapability::value_type::theInfo,
         &authenticationCapability::value_type::theInfo,
         &integrityCapability::value_type::theInfo,
         &genericH235SecurityCapability::value_type::theInfo
};
int EncryptionAuthenticationAndIntegrity::fieldIds[4] = {
        0,
        1,
        2
    };

const char* EncryptionAuthenticationAndIntegrity::fieldNames[4] = {
        "encryptionCapability",
        "authenticationCapability",
        "integrityCapability",
        "genericH235SecurityCapability"
};

const EncryptionAuthenticationAndIntegrity::InfoType EncryptionAuthenticationAndIntegrity::theInfo = {
    EncryptionAuthenticationAndIntegrity::create,
    0x000010,
    true,
    EncryptionAuthenticationAndIntegrity::fieldInfos,
    EncryptionAuthenticationAndIntegrity::fieldIds,
    3, 1, 3,
    NULL,
    NULL,
    EncryptionAuthenticationAndIntegrity::fieldNames
};

//
// UserInputCapability
//


const void* UserInputCapability::selectionInfos[12] = {
         &nonStandard::value_type::theInfo,
         &basicString::value_type::theInfo,
         &iA5String::value_type::theInfo,
         &generalString::value_type::theInfo,
         &dtmf::value_type::theInfo,
         &hookflash::value_type::theInfo,
         &extendedAlphanumeric::value_type::theInfo,
         &encryptedBasicString::value_type::theInfo,
         &encryptedIA5String::value_type::theInfo,
         &encryptedGeneralString::value_type::theInfo,
         &secureDTMF::value_type::theInfo,
         &genericUserInputCapability::value_type::theInfo
};

const char* UserInputCapability::selectionNames[12] = { "nonStandard"
                                      ,"basicString"
                                      ,"iA5String"
                                      ,"generalString"
                                      ,"dtmf"
                                      ,"hookflash"
                                      ,"extendedAlphanumeric"
                                      ,"encryptedBasicString"
                                      ,"encryptedIA5String"
                                      ,"encryptedGeneralString"
                                      ,"secureDTMF"
                                      ,"genericUserInputCapability"};

const UserInputCapability::InfoType UserInputCapability::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    UserInputCapability::selectionInfos,
    6, 12,
    NULL,
    UserInputCapability::selectionNames
};

//
// MultiplexedStreamCapability
//


const void* MultiplexedStreamCapability::fieldInfos[3] = {
         &multiplexFormat::value_type::theInfo,
         &controlOnMuxStream::value_type::theInfo,
         &capabilityOnMuxStream::value_type::theInfo
};
int MultiplexedStreamCapability::fieldIds[3] = {
        -1,
        -1,
        0
    };

const char* MultiplexedStreamCapability::fieldNames[3] = {
        "multiplexFormat",
        "controlOnMuxStream",
        "capabilityOnMuxStream"
};

const MultiplexedStreamCapability::InfoType MultiplexedStreamCapability::theInfo = {
    MultiplexedStreamCapability::create,
    0x000010,
    true,
    MultiplexedStreamCapability::fieldInfos,
    MultiplexedStreamCapability::fieldIds,
    3, 0, 1,
    NULL,
    NULL,
    MultiplexedStreamCapability::fieldNames
};

//
// H235Media
//


const void* H235Media::fieldInfos[1] = {
         &encryptionAuthenticationAndIntegrity::value_type::theInfo
};
int H235Media::fieldIds[1] = {
        -1,
    };

const char* H235Media::fieldNames[1] = {
        "encryptionAuthenticationAndIntegrity"
};

const H235Media::InfoType H235Media::theInfo = {
    H235Media::create,
    0x000010,
    true,
    H235Media::fieldInfos,
    H235Media::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    H235Media::fieldNames
};

//
// RedundancyEncodingMode
//


const void* RedundancyEncodingMode::fieldInfos[2] = {
         &redundancyEncodingMethod::value_type::theInfo,
         &secondaryEncoding::value_type::theInfo
};
int RedundancyEncodingMode::fieldIds[2] = {
        -1,
        0
    };

const char* RedundancyEncodingMode::fieldNames[2] = {
        "redundancyEncodingMethod",
        "secondaryEncoding"
};

const RedundancyEncodingMode::InfoType RedundancyEncodingMode::theInfo = {
    RedundancyEncodingMode::create,
    0x000010,
    true,
    RedundancyEncodingMode::fieldInfos,
    RedundancyEncodingMode::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    RedundancyEncodingMode::fieldNames
};

//
// DataMode
//


const void* DataMode::fieldInfos[2] = {
         &application::value_type::theInfo,
         &bitRate::value_type::theInfo
};
int DataMode::fieldIds[2] = {
        -1,
        -1,
    };

const char* DataMode::fieldNames[2] = {
        "application",
        "bitRate"
};

const DataMode::InfoType DataMode::theInfo = {
    DataMode::create,
    0x000010,
    true,
    DataMode::fieldInfos,
    DataMode::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    DataMode::fieldNames
};

//
// DialingInformation
//


const void* DialingInformation::selectionInfos[3] = {
         &nonStandard::value_type::theInfo,
         &differential::value_type::theInfo,
         &infoNotAvailable::value_type::theInfo
};

const char* DialingInformation::selectionNames[3] = { "nonStandard"
                                      ,"differential"
                                      ,"infoNotAvailable"};

const DialingInformation::InfoType DialingInformation::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    DialingInformation::selectionInfos,
    3, 3,
    NULL,
    DialingInformation::selectionNames
};

//
// MiscellaneousCommand
//


const void* MiscellaneousCommand::fieldInfos[3] = {
         &logicalChannelNumber::value_type::theInfo,
         &type::value_type::theInfo,
         &direction::value_type::theInfo
};
int MiscellaneousCommand::fieldIds[3] = {
        -1,
        -1,
    };

const char* MiscellaneousCommand::fieldNames[3] = {
        "logicalChannelNumber",
        "type",
        "direction"
};

const MiscellaneousCommand::InfoType MiscellaneousCommand::theInfo = {
    MiscellaneousCommand::create,
    0x000010,
    true,
    MiscellaneousCommand::fieldInfos,
    MiscellaneousCommand::fieldIds,
    2, 1, 0,
    NULL,
    NULL,
    MiscellaneousCommand::fieldNames
};

//
// OpenLogicalChannelAck_reverseLogicalChannelParameters
//


const void* OpenLogicalChannelAck_reverseLogicalChannelParameters::fieldInfos[4] = {
         &reverseLogicalChannelNumber::value_type::theInfo,
         &portNumber::value_type::theInfo,
         &multiplexParameters::value_type::theInfo,
         &replacementFor::value_type::theInfo
};
int OpenLogicalChannelAck_reverseLogicalChannelParameters::fieldIds[4] = {
        -1,
        0,
        1
    };

const char* OpenLogicalChannelAck_reverseLogicalChannelParameters::fieldNames[4] = {
        "reverseLogicalChannelNumber",
        "portNumber",
        "multiplexParameters",
        "replacementFor"
};

const OpenLogicalChannelAck_reverseLogicalChannelParameters::InfoType OpenLogicalChannelAck_reverseLogicalChannelParameters::theInfo = {
    OpenLogicalChannelAck_reverseLogicalChannelParameters::create,
    0x000010,
    true,
    OpenLogicalChannelAck_reverseLogicalChannelParameters::fieldInfos,
    OpenLogicalChannelAck_reverseLogicalChannelParameters::fieldIds,
    3, 1, 2,
    NULL,
    NULL,
    OpenLogicalChannelAck_reverseLogicalChannelParameters::fieldNames
};

//
// MultilinkRequest_addConnection
//


const void* MultilinkRequest_addConnection::fieldInfos[2] = {
         &sequenceNumber::value_type::theInfo,
         &dialingInformation::value_type::theInfo
};
int MultilinkRequest_addConnection::fieldIds[2] = {
        -1,
        -1,
    };

const char* MultilinkRequest_addConnection::fieldNames[2] = {
        "sequenceNumber",
        "dialingInformation"
};

const MultilinkRequest_addConnection::InfoType MultilinkRequest_addConnection::theInfo = {
    MultilinkRequest_addConnection::create,
    0x000010,
    true,
    MultilinkRequest_addConnection::fieldInfos,
    MultilinkRequest_addConnection::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MultilinkRequest_addConnection::fieldNames
};

//
// MultilinkResponse_callInformation
//


const void* MultilinkResponse_callInformation::fieldInfos[2] = {
         &dialingInformation::value_type::theInfo,
         &callAssociationNumber::value_type::theInfo
};
int MultilinkResponse_callInformation::fieldIds[2] = {
        -1,
        -1,
    };

const char* MultilinkResponse_callInformation::fieldNames[2] = {
        "dialingInformation",
        "callAssociationNumber"
};

const MultilinkResponse_callInformation::InfoType MultilinkResponse_callInformation::theInfo = {
    MultilinkResponse_callInformation::create,
    0x000010,
    true,
    MultilinkResponse_callInformation::fieldInfos,
    MultilinkResponse_callInformation::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    MultilinkResponse_callInformation::fieldNames
};

//
// H235SecurityCapability
//


const void* H235SecurityCapability::fieldInfos[2] = {
         &encryptionAuthenticationAndIntegrity::value_type::theInfo,
         &mediaCapability::value_type::theInfo
};
int H235SecurityCapability::fieldIds[2] = {
        -1,
        -1,
    };

const char* H235SecurityCapability::fieldNames[2] = {
        "encryptionAuthenticationAndIntegrity",
        "mediaCapability"
};

const H235SecurityCapability::InfoType H235SecurityCapability::theInfo = {
    H235SecurityCapability::create,
    0x000010,
    true,
    H235SecurityCapability::fieldInfos,
    H235SecurityCapability::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H235SecurityCapability::fieldNames
};

//
// MediaDistributionCapability
//


const void* MediaDistributionCapability::fieldInfos[8] = {
         &centralizedControl::value_type::theInfo,
         &distributedControl::value_type::theInfo,
         &centralizedAudio::value_type::theInfo,
         &distributedAudio::value_type::theInfo,
         &centralizedVideo::value_type::theInfo,
         &distributedVideo::value_type::theInfo,
         &centralizedData::value_type::theInfo,
         &distributedData::value_type::theInfo
};
int MediaDistributionCapability::fieldIds[8] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        0,
        1
    };

const char* MediaDistributionCapability::fieldNames[8] = {
        "centralizedControl",
        "distributedControl",
        "centralizedAudio",
        "distributedAudio",
        "centralizedVideo",
        "distributedVideo",
        "centralizedData",
        "distributedData"
};

const MediaDistributionCapability::InfoType MediaDistributionCapability::theInfo = {
    MediaDistributionCapability::create,
    0x000010,
    true,
    MediaDistributionCapability::fieldInfos,
    MediaDistributionCapability::fieldIds,
    8, 0, 2,
    NULL,
    NULL,
    MediaDistributionCapability::fieldNames
};

//
// BEnhancementParameters
//


const void* BEnhancementParameters::fieldInfos[2] = {
         &enhancementOptions::value_type::theInfo,
         &numberOfBPictures::value_type::theInfo
};
int BEnhancementParameters::fieldIds[2] = {
        -1,
        -1,
    };

const char* BEnhancementParameters::fieldNames[2] = {
        "enhancementOptions",
        "numberOfBPictures"
};

const BEnhancementParameters::InfoType BEnhancementParameters::theInfo = {
    BEnhancementParameters::create,
    0x000010,
    true,
    BEnhancementParameters::fieldInfos,
    BEnhancementParameters::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    BEnhancementParameters::fieldNames
};

//
// OpenLogicalChannelAck
//


const void* OpenLogicalChannelAck::fieldInfos[6] = {
         &forwardLogicalChannelNumber::value_type::theInfo,
         &reverseLogicalChannelParameters::value_type::theInfo,
         &separateStack::value_type::theInfo,
         &forwardMultiplexAckParameters::value_type::theInfo,
         &encryptionSync::value_type::theInfo,
         &genericInformation::value_type::theInfo
};
int OpenLogicalChannelAck::fieldIds[6] = {
        -1,
        0
    };

const char* OpenLogicalChannelAck::fieldNames[6] = {
        "forwardLogicalChannelNumber",
        "reverseLogicalChannelParameters",
        "separateStack",
        "forwardMultiplexAckParameters",
        "encryptionSync",
        "genericInformation"
};

const OpenLogicalChannelAck::InfoType OpenLogicalChannelAck::theInfo = {
    OpenLogicalChannelAck::create,
    0x000010,
    true,
    OpenLogicalChannelAck::fieldInfos,
    OpenLogicalChannelAck::fieldIds,
    2, 4, 1,
    NULL,
    NULL,
    OpenLogicalChannelAck::fieldNames
};

//
// H2250ModeParameters
//


const void* H2250ModeParameters::fieldInfos[1] = {
         &redundancyEncodingMode::value_type::theInfo
};
int H2250ModeParameters::fieldIds[1] = {
        0
    };

const char* H2250ModeParameters::fieldNames[1] = {
        "redundancyEncodingMode"
};

const H2250ModeParameters::InfoType H2250ModeParameters::theInfo = {
    H2250ModeParameters::create,
    0x000010,
    true,
    H2250ModeParameters::fieldInfos,
    H2250ModeParameters::fieldIds,
    1, 0, 1,
    NULL,
    NULL,
    H2250ModeParameters::fieldNames
};

//
// MultilinkRequest
//


const void* MultilinkRequest::selectionInfos[5] = {
         &nonStandard::value_type::theInfo,
         &callInformation::value_type::theInfo,
         &addConnection::value_type::theInfo,
         &removeConnection::value_type::theInfo,
         &maximumHeaderInterval::value_type::theInfo
};

const char* MultilinkRequest::selectionNames[5] = { "nonStandard"
                                      ,"callInformation"
                                      ,"addConnection"
                                      ,"removeConnection"
                                      ,"maximumHeaderInterval"};

const MultilinkRequest::InfoType MultilinkRequest::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MultilinkRequest::selectionInfos,
    5, 5,
    NULL,
    MultilinkRequest::selectionNames
};

//
// MultilinkResponse
//


const void* MultilinkResponse::selectionInfos[5] = {
         &nonStandard::value_type::theInfo,
         &callInformation::value_type::theInfo,
         &addConnection::value_type::theInfo,
         &removeConnection::value_type::theInfo,
         &maximumHeaderInterval::value_type::theInfo
};

const char* MultilinkResponse::selectionNames[5] = { "nonStandard"
                                      ,"callInformation"
                                      ,"addConnection"
                                      ,"removeConnection"
                                      ,"maximumHeaderInterval"};

const MultilinkResponse::InfoType MultilinkResponse::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MultilinkResponse::selectionInfos,
    5, 5,
    NULL,
    MultilinkResponse::selectionNames
};

//
// MultipointCapability
//


const void* MultipointCapability::fieldInfos[3] = {
         &multicastCapability::value_type::theInfo,
         &multiUniCastConference::value_type::theInfo,
         &mediaDistributionCapability::value_type::theInfo
};
int MultipointCapability::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* MultipointCapability::fieldNames[3] = {
        "multicastCapability",
        "multiUniCastConference",
        "mediaDistributionCapability"
};

const MultipointCapability::InfoType MultipointCapability::theInfo = {
    MultipointCapability::create,
    0x000010,
    true,
    MultipointCapability::fieldInfos,
    MultipointCapability::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    MultipointCapability::fieldNames
};

//
// EnhancementLayerInfo
//


const void* EnhancementLayerInfo::fieldInfos[4] = {
         &baseBitRateConstrained::value_type::theInfo,
         &snrEnhancement::value_type::theInfo,
         &spatialEnhancement::value_type::theInfo,
         &bPictureEnhancement::value_type::theInfo
};
int EnhancementLayerInfo::fieldIds[4] = {
        -1,
        0,
        1,
        2
    };

const char* EnhancementLayerInfo::fieldNames[4] = {
        "baseBitRateConstrained",
        "snrEnhancement",
        "spatialEnhancement",
        "bPictureEnhancement"
};

const EnhancementLayerInfo::InfoType EnhancementLayerInfo::theInfo = {
    EnhancementLayerInfo::create,
    0x000010,
    true,
    EnhancementLayerInfo::fieldInfos,
    EnhancementLayerInfo::fieldIds,
    4, 0, 3,
    NULL,
    NULL,
    EnhancementLayerInfo::fieldNames
};

//
// H263VideoMode
//


const void* H263VideoMode::fieldInfos[9] = {
         &resolution::value_type::theInfo,
         &bitRate::value_type::theInfo,
         &unrestrictedVector::value_type::theInfo,
         &arithmeticCoding::value_type::theInfo,
         &advancedPrediction::value_type::theInfo,
         &pbFrames::value_type::theInfo,
         &errorCompensation::value_type::theInfo,
         &enhancementLayerInfo::value_type::theInfo,
         &h263Options::value_type::theInfo
};
int H263VideoMode::fieldIds[9] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* H263VideoMode::nonOptionalExtensions = "\x80";

const char* H263VideoMode::fieldNames[9] = {
        "resolution",
        "bitRate",
        "unrestrictedVector",
        "arithmeticCoding",
        "advancedPrediction",
        "pbFrames",
        "errorCompensation",
        "enhancementLayerInfo",
        "h263Options"
};

const H263VideoMode::InfoType H263VideoMode::theInfo = {
    H263VideoMode::create,
    0x000010,
    true,
    H263VideoMode::fieldInfos,
    H263VideoMode::fieldIds,
    6, 3, 0,
    H263VideoMode::nonOptionalExtensions,
    NULL,
    H263VideoMode::fieldNames
};

//
// H2250Capability
//


const void* H2250Capability::fieldInfos[11] = {
         &maximumAudioDelayJitter::value_type::theInfo,
         &receiveMultipointCapability::value_type::theInfo,
         &transmitMultipointCapability::value_type::theInfo,
         &receiveAndTransmitMultipointCapability::value_type::theInfo,
         &mcCapability::value_type::theInfo,
         &rtcpVideoControlCapability::value_type::theInfo,
         &mediaPacketizationCapability::value_type::theInfo,
         &transportCapability::value_type::theInfo,
         &redundancyEncodingCapability::value_type::theInfo,
         &logicalChannelSwitchingCapability::value_type::theInfo,
         &t120DynamicPortCapability::value_type::theInfo
};
int H2250Capability::fieldIds[11] = {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    };

const char* H2250Capability::nonOptionalExtensions = "\x30";

const char* H2250Capability::fieldNames[11] = {
        "maximumAudioDelayJitter",
        "receiveMultipointCapability",
        "transmitMultipointCapability",
        "receiveAndTransmitMultipointCapability",
        "mcCapability",
        "rtcpVideoControlCapability",
        "mediaPacketizationCapability",
        "transportCapability",
        "redundancyEncodingCapability",
        "logicalChannelSwitchingCapability",
        "t120DynamicPortCapability"
};

const H2250Capability::InfoType H2250Capability::theInfo = {
    H2250Capability::create,
    0x000010,
    true,
    H2250Capability::fieldInfos,
    H2250Capability::fieldIds,
    7, 4, 0,
    H2250Capability::nonOptionalExtensions,
    NULL,
    H2250Capability::fieldNames
};

//
// H263VideoCapability
//


const void* H263VideoCapability::fieldInfos[21] = {
         &sqcifMPI::value_type::theInfo,
         &qcifMPI::value_type::theInfo,
         &cifMPI::value_type::theInfo,
         &cif4MPI::value_type::theInfo,
         &cif16MPI::value_type::theInfo,
         &maxBitRate::value_type::theInfo,
         &unrestrictedVector::value_type::theInfo,
         &arithmeticCoding::value_type::theInfo,
         &advancedPrediction::value_type::theInfo,
         &pbFrames::value_type::theInfo,
         &temporalSpatialTradeOffCapability::value_type::theInfo,
         &hrd_B::value_type::theInfo,
         &bppMaxKb::value_type::theInfo,
         &slowSqcifMPI::value_type::theInfo,
         &slowQcifMPI::value_type::theInfo,
         &slowCifMPI::value_type::theInfo,
         &slowCif4MPI::value_type::theInfo,
         &slowCif16MPI::value_type::theInfo,
         &errorCompensation::value_type::theInfo,
         &enhancementLayerInfo::value_type::theInfo,
         &h263Options::value_type::theInfo
};
int H263VideoCapability::fieldIds[21] = {
        0,
        1,
        2,
        3,
        4,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        5,
        6
    };

const char* H263VideoCapability::nonOptionalExtensions = "\x4";

const char* H263VideoCapability::fieldNames[21] = {
        "sqcifMPI",
        "qcifMPI",
        "cifMPI",
        "cif4MPI",
        "cif16MPI",
        "maxBitRate",
        "unrestrictedVector",
        "arithmeticCoding",
        "advancedPrediction",
        "pbFrames",
        "temporalSpatialTradeOffCapability",
        "hrd-B",
        "bppMaxKb",
        "slowSqcifMPI",
        "slowQcifMPI",
        "slowCifMPI",
        "slowCif4MPI",
        "slowCif16MPI",
        "errorCompensation",
        "enhancementLayerInfo",
        "h263Options"
};

const H263VideoCapability::InfoType H263VideoCapability::theInfo = {
    H263VideoCapability::create,
    0x000010,
    true,
    H263VideoCapability::fieldInfos,
    H263VideoCapability::fieldIds,
    13, 8, 7,
    H263VideoCapability::nonOptionalExtensions,
    NULL,
    H263VideoCapability::fieldNames
};

//
// VideoMode
//


const void* VideoMode::selectionInfos[6] = {
         &nonStandard::value_type::theInfo,
         &h261VideoMode::value_type::theInfo,
         &h262VideoMode::value_type::theInfo,
         &h263VideoMode::value_type::theInfo,
         &is11172VideoMode::value_type::theInfo,
         &genericVideoMode::value_type::theInfo
};

const char* VideoMode::selectionNames[6] = { "nonStandard"
                                      ,"h261VideoMode"
                                      ,"h262VideoMode"
                                      ,"h263VideoMode"
                                      ,"is11172VideoMode"
                                      ,"genericVideoMode"};

const VideoMode::InfoType VideoMode::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    VideoMode::selectionInfos,
    5, 6,
    NULL,
    VideoMode::selectionNames
};

//
// H235Mode_mediaMode
//


const void* H235Mode_mediaMode::selectionInfos[4] = {
         &nonStandard::value_type::theInfo,
         &videoMode::value_type::theInfo,
         &audioMode::value_type::theInfo,
         &dataMode::value_type::theInfo
};

const char* H235Mode_mediaMode::selectionNames[4] = { "nonStandard"
                                      ,"videoMode"
                                      ,"audioMode"
                                      ,"dataMode"};

const H235Mode_mediaMode::InfoType H235Mode_mediaMode::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    H235Mode_mediaMode::selectionInfos,
    4, 4,
    NULL,
    H235Mode_mediaMode::selectionNames
};

//
// MultiplexCapability
//


const void* MultiplexCapability::selectionInfos[6] = {
         &nonStandard::value_type::theInfo,
         &h222Capability::value_type::theInfo,
         &h223Capability::value_type::theInfo,
         &v76Capability::value_type::theInfo,
         &h2250Capability::value_type::theInfo,
         &genericMultiplexCapability::value_type::theInfo
};

const char* MultiplexCapability::selectionNames[6] = { "nonStandard"
                                      ,"h222Capability"
                                      ,"h223Capability"
                                      ,"v76Capability"
                                      ,"h2250Capability"
                                      ,"genericMultiplexCapability"};

const MultiplexCapability::InfoType MultiplexCapability::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MultiplexCapability::selectionInfos,
    4, 6,
    NULL,
    MultiplexCapability::selectionNames
};

//
// VideoCapability
//


const void* VideoCapability::selectionInfos[7] = {
         &nonStandard::value_type::theInfo,
         &h261VideoCapability::value_type::theInfo,
         &h262VideoCapability::value_type::theInfo,
         &h263VideoCapability::value_type::theInfo,
         &is11172VideoCapability::value_type::theInfo,
         &genericVideoCapability::value_type::theInfo,
         &extendedVideoCapability::value_type::theInfo
};

const char* VideoCapability::selectionNames[7] = { "nonStandard"
                                      ,"h261VideoCapability"
                                      ,"h262VideoCapability"
                                      ,"h263VideoCapability"
                                      ,"is11172VideoCapability"
                                      ,"genericVideoCapability"
                                      ,"extendedVideoCapability"};

const VideoCapability::InfoType VideoCapability::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    VideoCapability::selectionInfos,
    5, 7,
    NULL,
    VideoCapability::selectionNames
};

//
// ExtendedVideoCapability
//


const void* ExtendedVideoCapability::fieldInfos[2] = {
         &videoCapability::value_type::theInfo,
         &videoCapabilityExtension::value_type::theInfo
};
int ExtendedVideoCapability::fieldIds[2] = {
        -1,
        0
    };

const char* ExtendedVideoCapability::fieldNames[2] = {
        "videoCapability",
        "videoCapabilityExtension"
};

const ExtendedVideoCapability::InfoType ExtendedVideoCapability::theInfo = {
    ExtendedVideoCapability::create,
    0x000010,
    true,
    ExtendedVideoCapability::fieldInfos,
    ExtendedVideoCapability::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    ExtendedVideoCapability::fieldNames
};

//
// DataType
//


const void* DataType::selectionInfos[12] = {
         &nonStandard::value_type::theInfo,
         &nullData::value_type::theInfo,
         &videoData::value_type::theInfo,
         &audioData::value_type::theInfo,
         &data::value_type::theInfo,
         &encryptionData::value_type::theInfo,
         &h235Control::value_type::theInfo,
         &multiplexedStream::value_type::theInfo,
         &redundancyEncoding::value_type::theInfo,
         &multiplePayloadStream::value_type::theInfo,
         &depFec::value_type::theInfo,
         &fec::value_type::theInfo
};

const char* DataType::selectionNames[12] = { "nonStandard"
                                      ,"nullData"
                                      ,"videoData"
                                      ,"audioData"
                                      ,"data"
                                      ,"encryptionData"
                                      ,"h235Control"
                                      ,"multiplexedStream"
                                      ,"redundancyEncoding"
                                      ,"multiplePayloadStream"
                                      ,"depFec"
                                      ,"fec"};

const DataType::InfoType DataType::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    DataType::selectionInfos,
    6, 12,
    NULL,
    DataType::selectionNames
};

//
// H235Mode
//


const void* H235Mode::fieldInfos[2] = {
         &encryptionAuthenticationAndIntegrity::value_type::theInfo,
         &mediaMode::value_type::theInfo
};
int H235Mode::fieldIds[2] = {
        -1,
        -1,
    };

const char* H235Mode::fieldNames[2] = {
        "encryptionAuthenticationAndIntegrity",
        "mediaMode"
};

const H235Mode::InfoType H235Mode::theInfo = {
    H235Mode::create,
    0x000010,
    true,
    H235Mode::fieldInfos,
    H235Mode::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    H235Mode::fieldNames
};

//
// OpenLogicalChannel_forwardLogicalChannelParameters
//


const void* OpenLogicalChannel_forwardLogicalChannelParameters::fieldInfos[5] = {
         &portNumber::value_type::theInfo,
         &dataType::value_type::theInfo,
         &multiplexParameters::value_type::theInfo,
         &forwardLogicalChannelDependency::value_type::theInfo,
         &replacementFor::value_type::theInfo
};
int OpenLogicalChannel_forwardLogicalChannelParameters::fieldIds[5] = {
        0,
        -1,
        -1,
    };

const char* OpenLogicalChannel_forwardLogicalChannelParameters::fieldNames[5] = {
        "portNumber",
        "dataType",
        "multiplexParameters",
        "forwardLogicalChannelDependency",
        "replacementFor"
};

const OpenLogicalChannel_forwardLogicalChannelParameters::InfoType OpenLogicalChannel_forwardLogicalChannelParameters::theInfo = {
    OpenLogicalChannel_forwardLogicalChannelParameters::create,
    0x000010,
    true,
    OpenLogicalChannel_forwardLogicalChannelParameters::fieldInfos,
    OpenLogicalChannel_forwardLogicalChannelParameters::fieldIds,
    3, 2, 1,
    NULL,
    NULL,
    OpenLogicalChannel_forwardLogicalChannelParameters::fieldNames
};

//
// OpenLogicalChannel_reverseLogicalChannelParameters
//


const void* OpenLogicalChannel_reverseLogicalChannelParameters::fieldInfos[4] = {
         &dataType::value_type::theInfo,
         &multiplexParameters::value_type::theInfo,
         &reverseLogicalChannelDependency::value_type::theInfo,
         &replacementFor::value_type::theInfo
};
int OpenLogicalChannel_reverseLogicalChannelParameters::fieldIds[4] = {
        -1,
        0
    };

const char* OpenLogicalChannel_reverseLogicalChannelParameters::fieldNames[4] = {
        "dataType",
        "multiplexParameters",
        "reverseLogicalChannelDependency",
        "replacementFor"
};

const OpenLogicalChannel_reverseLogicalChannelParameters::InfoType OpenLogicalChannel_reverseLogicalChannelParameters::theInfo = {
    OpenLogicalChannel_reverseLogicalChannelParameters::create,
    0x000010,
    true,
    OpenLogicalChannel_reverseLogicalChannelParameters::fieldInfos,
    OpenLogicalChannel_reverseLogicalChannelParameters::fieldIds,
    2, 2, 1,
    NULL,
    NULL,
    OpenLogicalChannel_reverseLogicalChannelParameters::fieldNames
};

//
// RedundancyEncodingDTModeElement_type
//


const void* RedundancyEncodingDTModeElement_type::selectionInfos[7] = {
         &nonStandard::value_type::theInfo,
         &videoMode::value_type::theInfo,
         &audioMode::value_type::theInfo,
         &dataMode::value_type::theInfo,
         &encryptionMode::value_type::theInfo,
         &h235Mode::value_type::theInfo,
         &fecMode::value_type::theInfo
};

const char* RedundancyEncodingDTModeElement_type::selectionNames[7] = { "nonStandard"
                                      ,"videoMode"
                                      ,"audioMode"
                                      ,"dataMode"
                                      ,"encryptionMode"
                                      ,"h235Mode"
                                      ,"fecMode"};

const RedundancyEncodingDTModeElement_type::InfoType RedundancyEncodingDTModeElement_type::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RedundancyEncodingDTModeElement_type::selectionInfos,
    6, 7,
    NULL,
    RedundancyEncodingDTModeElement_type::selectionNames
};

//
// CommunicationModeTableEntry_dataType
//


const void* CommunicationModeTableEntry_dataType::selectionInfos[3] = {
         &videoData::value_type::theInfo,
         &audioData::value_type::theInfo,
         &data::value_type::theInfo
};

const char* CommunicationModeTableEntry_dataType::selectionNames[3] = { "videoData"
                                      ,"audioData"
                                      ,"data"};

const CommunicationModeTableEntry_dataType::InfoType CommunicationModeTableEntry_dataType::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    CommunicationModeTableEntry_dataType::selectionInfos,
    3, 3,
    NULL,
    CommunicationModeTableEntry_dataType::selectionNames
};

//
// Capability
//


const void* Capability::selectionInfos[29] = {
         &nonStandard::value_type::theInfo,
         &receiveVideoCapability::value_type::theInfo,
         &transmitVideoCapability::value_type::theInfo,
         &receiveAndTransmitVideoCapability::value_type::theInfo,
         &receiveAudioCapability::value_type::theInfo,
         &transmitAudioCapability::value_type::theInfo,
         &receiveAndTransmitAudioCapability::value_type::theInfo,
         &receiveDataApplicationCapability::value_type::theInfo,
         &transmitDataApplicationCapability::value_type::theInfo,
         &receiveAndTransmitDataApplicationCapability::value_type::theInfo,
         &h233EncryptionTransmitCapability::value_type::theInfo,
         &h233EncryptionReceiveCapability::value_type::theInfo,
         &conferenceCapability::value_type::theInfo,
         &h235SecurityCapability::value_type::theInfo,
         &maxPendingReplacementFor::value_type::theInfo,
         &receiveUserInputCapability::value_type::theInfo,
         &transmitUserInputCapability::value_type::theInfo,
         &receiveAndTransmitUserInputCapability::value_type::theInfo,
         &genericControlCapability::value_type::theInfo,
         &receiveMultiplexedStreamCapability::value_type::theInfo,
         &transmitMultiplexedStreamCapability::value_type::theInfo,
         &receiveAndTransmitMultiplexedStreamCapability::value_type::theInfo,
         &receiveRTPAudioTelephonyEventCapability::value_type::theInfo,
         &receiveRTPAudioToneCapability::value_type::theInfo,
         &depFecCapability::value_type::theInfo,
         &multiplePayloadStreamCapability::value_type::theInfo,
         &fecCapability::value_type::theInfo,
         &redundancyEncodingCap::value_type::theInfo,
         &oneOfCapabilities::value_type::theInfo
};

const char* Capability::selectionNames[29] = { "nonStandard"
                                      ,"receiveVideoCapability"
                                      ,"transmitVideoCapability"
                                      ,"receiveAndTransmitVideoCapability"
                                      ,"receiveAudioCapability"
                                      ,"transmitAudioCapability"
                                      ,"receiveAndTransmitAudioCapability"
                                      ,"receiveDataApplicationCapability"
                                      ,"transmitDataApplicationCapability"
                                      ,"receiveAndTransmitDataApplicationCapability"
                                      ,"h233EncryptionTransmitCapability"
                                      ,"h233EncryptionReceiveCapability"
                                      ,"conferenceCapability"
                                      ,"h235SecurityCapability"
                                      ,"maxPendingReplacementFor"
                                      ,"receiveUserInputCapability"
                                      ,"transmitUserInputCapability"
                                      ,"receiveAndTransmitUserInputCapability"
                                      ,"genericControlCapability"
                                      ,"receiveMultiplexedStreamCapability"
                                      ,"transmitMultiplexedStreamCapability"
                                      ,"receiveAndTransmitMultiplexedStreamCapability"
                                      ,"receiveRTPAudioTelephonyEventCapability"
                                      ,"receiveRTPAudioToneCapability"
                                      ,"depFecCapability"
                                      ,"multiplePayloadStreamCapability"
                                      ,"fecCapability"
                                      ,"redundancyEncodingCap"
                                      ,"oneOfCapabilities"};

const Capability::InfoType Capability::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    Capability::selectionInfos,
    12, 29,
    NULL,
    Capability::selectionNames
};

//
// OpenLogicalChannel
//


const void* OpenLogicalChannel::fieldInfos[6] = {
         &forwardLogicalChannelNumber::value_type::theInfo,
         &forwardLogicalChannelParameters::value_type::theInfo,
         &reverseLogicalChannelParameters::value_type::theInfo,
         &separateStack::value_type::theInfo,
         &encryptionSync::value_type::theInfo,
         &genericInformation::value_type::theInfo
};
int OpenLogicalChannel::fieldIds[6] = {
        -1,
        -1,
        0
    };

const char* OpenLogicalChannel::fieldNames[6] = {
        "forwardLogicalChannelNumber",
        "forwardLogicalChannelParameters",
        "reverseLogicalChannelParameters",
        "separateStack",
        "encryptionSync",
        "genericInformation"
};

const OpenLogicalChannel::InfoType OpenLogicalChannel::theInfo = {
    OpenLogicalChannel::create,
    0x000010,
    true,
    OpenLogicalChannel::fieldInfos,
    OpenLogicalChannel::fieldIds,
    3, 3, 1,
    NULL,
    NULL,
    OpenLogicalChannel::fieldNames
};

//
// RedundancyEncodingDTModeElement
//


const void* RedundancyEncodingDTModeElement::fieldInfos[1] = {
         &type::value_type::theInfo
};
int RedundancyEncodingDTModeElement::fieldIds[1] = {
        -1,
    };

const char* RedundancyEncodingDTModeElement::fieldNames[1] = {
        "type"
};

const RedundancyEncodingDTModeElement::InfoType RedundancyEncodingDTModeElement::theInfo = {
    RedundancyEncodingDTModeElement::create,
    0x000010,
    true,
    RedundancyEncodingDTModeElement::fieldInfos,
    RedundancyEncodingDTModeElement::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    RedundancyEncodingDTModeElement::fieldNames
};

//
// CommunicationModeTableEntry
//


const void* CommunicationModeTableEntry::fieldInfos[13] = {
         &nonStandard::value_type::theInfo,
         &sessionID::value_type::theInfo,
         &associatedSessionID::value_type::theInfo,
         &terminalLabel::value_type::theInfo,
         &sessionDescription::value_type::theInfo,
         &dataType::value_type::theInfo,
         &mediaChannel::value_type::theInfo,
         &mediaGuaranteedDelivery::value_type::theInfo,
         &mediaControlChannel::value_type::theInfo,
         &mediaControlGuaranteedDelivery::value_type::theInfo,
         &redundancyEncoding::value_type::theInfo,
         &sessionDependency::value_type::theInfo,
         &destination::value_type::theInfo
};
int CommunicationModeTableEntry::fieldIds[13] = {
        0,
        -1,
        1,
        2,
        -1,
        -1,
        3,
        4,
        5,
        6
    };

const char* CommunicationModeTableEntry::fieldNames[13] = {
        "nonStandard",
        "sessionID",
        "associatedSessionID",
        "terminalLabel",
        "sessionDescription",
        "dataType",
        "mediaChannel",
        "mediaGuaranteedDelivery",
        "mediaControlChannel",
        "mediaControlGuaranteedDelivery",
        "redundancyEncoding",
        "sessionDependency",
        "destination"
};

const CommunicationModeTableEntry::InfoType CommunicationModeTableEntry::theInfo = {
    CommunicationModeTableEntry::create,
    0x000010,
    true,
    CommunicationModeTableEntry::fieldInfos,
    CommunicationModeTableEntry::fieldIds,
    10, 3, 7,
    NULL,
    NULL,
    CommunicationModeTableEntry::fieldNames
};

//
// CommunicationModeTableEntry::sessionDescription::value_type
//


const CommunicationModeTableEntry::sessionDescription::value_type::InfoType CommunicationModeTableEntry::sessionDescription::value_type::theInfo = {
    ASN1::BMPString::create,
    0x00001e,
    ASN1::FixedConstraint, 1, 128,
    0, 65535,
    16, 16
};

//
// CapabilityTableEntry
//


const void* CapabilityTableEntry::fieldInfos[2] = {
         &capabilityTableEntryNumber::value_type::theInfo,
         &capability::value_type::theInfo
};
int CapabilityTableEntry::fieldIds[2] = {
        -1,
        0
    };

const char* CapabilityTableEntry::fieldNames[2] = {
        "capabilityTableEntryNumber",
        "capability"
};

const CapabilityTableEntry::InfoType CapabilityTableEntry::theInfo = {
    CapabilityTableEntry::create,
    0x000010,
    false,
    CapabilityTableEntry::fieldInfos,
    CapabilityTableEntry::fieldIds,
    2, 0, 1,
    NULL,
    NULL,
    CapabilityTableEntry::fieldNames
};

//
// RedundancyEncodingDTMode
//


const void* RedundancyEncodingDTMode::fieldInfos[3] = {
         &redundancyEncodingMethod::value_type::theInfo,
         &primary::value_type::theInfo,
         &secondary::value_type::theInfo
};
int RedundancyEncodingDTMode::fieldIds[3] = {
        -1,
        -1,
        -1,
    };

const char* RedundancyEncodingDTMode::fieldNames[3] = {
        "redundancyEncodingMethod",
        "primary",
        "secondary"
};

const RedundancyEncodingDTMode::InfoType RedundancyEncodingDTMode::theInfo = {
    RedundancyEncodingDTMode::create,
    0x000010,
    true,
    RedundancyEncodingDTMode::fieldInfos,
    RedundancyEncodingDTMode::fieldIds,
    3, 0, 0,
    NULL,
    NULL,
    RedundancyEncodingDTMode::fieldNames
};

//
// CommunicationModeCommand
//


const void* CommunicationModeCommand::fieldInfos[1] = {
         &communicationModeTable::value_type::theInfo
};
int CommunicationModeCommand::fieldIds[1] = {
        -1,
    };

const char* CommunicationModeCommand::fieldNames[1] = {
        "communicationModeTable"
};

const CommunicationModeCommand::InfoType CommunicationModeCommand::theInfo = {
    CommunicationModeCommand::create,
    0x000010,
    true,
    CommunicationModeCommand::fieldInfos,
    CommunicationModeCommand::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    CommunicationModeCommand::fieldNames
};

//
// CommunicationModeResponse
//


const void* CommunicationModeResponse::selectionInfos[1] = {
         &communicationModeTable::value_type::theInfo
};

const char* CommunicationModeResponse::selectionNames[1] = { "communicationModeTable"};

const CommunicationModeResponse::InfoType CommunicationModeResponse::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    CommunicationModeResponse::selectionInfos,
    1, 1,
    NULL,
    CommunicationModeResponse::selectionNames
};

//
// ResponseMessage
//


const void* ResponseMessage::selectionInfos[25] = {
         &nonStandard::value_type::theInfo,
         &masterSlaveDeterminationAck::value_type::theInfo,
         &masterSlaveDeterminationReject::value_type::theInfo,
         &terminalCapabilitySetAck::value_type::theInfo,
         &terminalCapabilitySetReject::value_type::theInfo,
         &openLogicalChannelAck::value_type::theInfo,
         &openLogicalChannelReject::value_type::theInfo,
         &closeLogicalChannelAck::value_type::theInfo,
         &requestChannelCloseAck::value_type::theInfo,
         &requestChannelCloseReject::value_type::theInfo,
         &multiplexEntrySendAck::value_type::theInfo,
         &multiplexEntrySendReject::value_type::theInfo,
         &requestMultiplexEntryAck::value_type::theInfo,
         &requestMultiplexEntryReject::value_type::theInfo,
         &requestModeAck::value_type::theInfo,
         &requestModeReject::value_type::theInfo,
         &roundTripDelayResponse::value_type::theInfo,
         &maintenanceLoopAck::value_type::theInfo,
         &maintenanceLoopReject::value_type::theInfo,
         &communicationModeResponse::value_type::theInfo,
         &conferenceResponse::value_type::theInfo,
         &multilinkResponse::value_type::theInfo,
         &logicalChannelRateAcknowledge::value_type::theInfo,
         &logicalChannelRateReject::value_type::theInfo,
         &genericResponse::value_type::theInfo
};

const char* ResponseMessage::selectionNames[25] = { "nonStandard"
                                      ,"masterSlaveDeterminationAck"
                                      ,"masterSlaveDeterminationReject"
                                      ,"terminalCapabilitySetAck"
                                      ,"terminalCapabilitySetReject"
                                      ,"openLogicalChannelAck"
                                      ,"openLogicalChannelReject"
                                      ,"closeLogicalChannelAck"
                                      ,"requestChannelCloseAck"
                                      ,"requestChannelCloseReject"
                                      ,"multiplexEntrySendAck"
                                      ,"multiplexEntrySendReject"
                                      ,"requestMultiplexEntryAck"
                                      ,"requestMultiplexEntryReject"
                                      ,"requestModeAck"
                                      ,"requestModeReject"
                                      ,"roundTripDelayResponse"
                                      ,"maintenanceLoopAck"
                                      ,"maintenanceLoopReject"
                                      ,"communicationModeResponse"
                                      ,"conferenceResponse"
                                      ,"multilinkResponse"
                                      ,"logicalChannelRateAcknowledge"
                                      ,"logicalChannelRateReject"
                                      ,"genericResponse"};

const ResponseMessage::InfoType ResponseMessage::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ResponseMessage::selectionInfos,
    19, 25,
    NULL,
    ResponseMessage::selectionNames
};

//
// CommandMessage
//


const void* CommandMessage::selectionInfos[13] = {
         &nonStandard::value_type::theInfo,
         &maintenanceLoopOffCommand::value_type::theInfo,
         &sendTerminalCapabilitySet::value_type::theInfo,
         &encryptionCommand::value_type::theInfo,
         &flowControlCommand::value_type::theInfo,
         &endSessionCommand::value_type::theInfo,
         &miscellaneousCommand::value_type::theInfo,
         &communicationModeCommand::value_type::theInfo,
         &conferenceCommand::value_type::theInfo,
         &h223MultiplexReconfiguration::value_type::theInfo,
         &newATMVCCommand::value_type::theInfo,
         &mobileMultilinkReconfigurationCommand::value_type::theInfo,
         &genericCommand::value_type::theInfo
};

const char* CommandMessage::selectionNames[13] = { "nonStandard"
                                      ,"maintenanceLoopOffCommand"
                                      ,"sendTerminalCapabilitySet"
                                      ,"encryptionCommand"
                                      ,"flowControlCommand"
                                      ,"endSessionCommand"
                                      ,"miscellaneousCommand"
                                      ,"communicationModeCommand"
                                      ,"conferenceCommand"
                                      ,"h223MultiplexReconfiguration"
                                      ,"newATMVCCommand"
                                      ,"mobileMultilinkReconfigurationCommand"
                                      ,"genericCommand"};

const CommandMessage::InfoType CommandMessage::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    CommandMessage::selectionInfos,
    7, 13,
    NULL,
    CommandMessage::selectionNames
};

//
// TerminalCapabilitySet
//


const void* TerminalCapabilitySet::fieldInfos[6] = {
         &sequenceNumber::value_type::theInfo,
         &protocolIdentifier::value_type::theInfo,
         &multiplexCapability::value_type::theInfo,
         &capabilityTable::value_type::theInfo,
         &capabilityDescriptors::value_type::theInfo,
         &genericInformation::value_type::theInfo
};
int TerminalCapabilitySet::fieldIds[6] = {
        -1,
        -1,
        0,
        1,
        2
    };

const char* TerminalCapabilitySet::fieldNames[6] = {
        "sequenceNumber",
        "protocolIdentifier",
        "multiplexCapability",
        "capabilityTable",
        "capabilityDescriptors",
        "genericInformation"
};

const TerminalCapabilitySet::InfoType TerminalCapabilitySet::theInfo = {
    TerminalCapabilitySet::create,
    0x000010,
    true,
    TerminalCapabilitySet::fieldInfos,
    TerminalCapabilitySet::fieldIds,
    5, 1, 3,
    NULL,
    NULL,
    TerminalCapabilitySet::fieldNames
};

//
// ModeElementType
//


const void* ModeElementType::selectionInfos[9] = {
         &nonStandard::value_type::theInfo,
         &videoMode::value_type::theInfo,
         &audioMode::value_type::theInfo,
         &dataMode::value_type::theInfo,
         &encryptionMode::value_type::theInfo,
         &h235Mode::value_type::theInfo,
         &multiplexedStreamMode::value_type::theInfo,
         &redundancyEncodingDTMode::value_type::theInfo,
         &fecMode::value_type::theInfo
};

const char* ModeElementType::selectionNames[9] = { "nonStandard"
                                      ,"videoMode"
                                      ,"audioMode"
                                      ,"dataMode"
                                      ,"encryptionMode"
                                      ,"h235Mode"
                                      ,"multiplexedStreamMode"
                                      ,"redundancyEncodingDTMode"
                                      ,"fecMode"};

const ModeElementType::InfoType ModeElementType::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    ModeElementType::selectionInfos,
    5, 9,
    NULL,
    ModeElementType::selectionNames
};

//
// ModeElement
//


const void* ModeElement::fieldInfos[7] = {
         &type::value_type::theInfo,
         &h223ModeParameters::value_type::theInfo,
         &v76ModeParameters::value_type::theInfo,
         &h2250ModeParameters::value_type::theInfo,
         &genericModeParameters::value_type::theInfo,
         &multiplexedStreamModeParameters::value_type::theInfo,
         &logicalChannelNumber::value_type::theInfo
};
int ModeElement::fieldIds[7] = {
        -1,
        0
    };

const char* ModeElement::fieldNames[7] = {
        "type",
        "h223ModeParameters",
        "v76ModeParameters",
        "h2250ModeParameters",
        "genericModeParameters",
        "multiplexedStreamModeParameters",
        "logicalChannelNumber"
};

const ModeElement::InfoType ModeElement::theInfo = {
    ModeElement::create,
    0x000010,
    true,
    ModeElement::fieldInfos,
    ModeElement::fieldIds,
    2, 5, 1,
    NULL,
    NULL,
    ModeElement::fieldNames
};

//
// MultiplePayloadStreamElementMode
//


const void* MultiplePayloadStreamElementMode::fieldInfos[1] = {
         &type::value_type::theInfo
};
int MultiplePayloadStreamElementMode::fieldIds[1] = {
        -1,
    };

const char* MultiplePayloadStreamElementMode::fieldNames[1] = {
        "type"
};

const MultiplePayloadStreamElementMode::InfoType MultiplePayloadStreamElementMode::theInfo = {
    MultiplePayloadStreamElementMode::create,
    0x000010,
    true,
    MultiplePayloadStreamElementMode::fieldInfos,
    MultiplePayloadStreamElementMode::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MultiplePayloadStreamElementMode::fieldNames
};

//
// MultiplePayloadStreamMode
//


const void* MultiplePayloadStreamMode::fieldInfos[1] = {
         &elements::value_type::theInfo
};
int MultiplePayloadStreamMode::fieldIds[1] = {
        -1,
    };

const char* MultiplePayloadStreamMode::fieldNames[1] = {
        "elements"
};

const MultiplePayloadStreamMode::InfoType MultiplePayloadStreamMode::theInfo = {
    MultiplePayloadStreamMode::create,
    0x000010,
    true,
    MultiplePayloadStreamMode::fieldInfos,
    MultiplePayloadStreamMode::fieldIds,
    1, 0, 0,
    NULL,
    NULL,
    MultiplePayloadStreamMode::fieldNames
};

//
// RequestMode
//


const void* RequestMode::fieldInfos[2] = {
         &sequenceNumber::value_type::theInfo,
         &requestedModes::value_type::theInfo
};
int RequestMode::fieldIds[2] = {
        -1,
        -1,
    };

const char* RequestMode::fieldNames[2] = {
        "sequenceNumber",
        "requestedModes"
};

const RequestMode::InfoType RequestMode::theInfo = {
    RequestMode::create,
    0x000010,
    true,
    RequestMode::fieldInfos,
    RequestMode::fieldIds,
    2, 0, 0,
    NULL,
    NULL,
    RequestMode::fieldNames
};

//
// RequestMessage
//


const void* RequestMessage::selectionInfos[16] = {
         &nonStandard::value_type::theInfo,
         &masterSlaveDetermination::value_type::theInfo,
         &terminalCapabilitySet::value_type::theInfo,
         &openLogicalChannel::value_type::theInfo,
         &closeLogicalChannel::value_type::theInfo,
         &requestChannelClose::value_type::theInfo,
         &multiplexEntrySend::value_type::theInfo,
         &requestMultiplexEntry::value_type::theInfo,
         &requestMode::value_type::theInfo,
         &roundTripDelayRequest::value_type::theInfo,
         &maintenanceLoopRequest::value_type::theInfo,
         &communicationModeRequest::value_type::theInfo,
         &conferenceRequest::value_type::theInfo,
         &multilinkRequest::value_type::theInfo,
         &logicalChannelRateRequest::value_type::theInfo,
         &genericRequest::value_type::theInfo
};

const char* RequestMessage::selectionNames[16] = { "nonStandard"
                                      ,"masterSlaveDetermination"
                                      ,"terminalCapabilitySet"
                                      ,"openLogicalChannel"
                                      ,"closeLogicalChannel"
                                      ,"requestChannelClose"
                                      ,"multiplexEntrySend"
                                      ,"requestMultiplexEntry"
                                      ,"requestMode"
                                      ,"roundTripDelayRequest"
                                      ,"maintenanceLoopRequest"
                                      ,"communicationModeRequest"
                                      ,"conferenceRequest"
                                      ,"multilinkRequest"
                                      ,"logicalChannelRateRequest"
                                      ,"genericRequest"};

const RequestMessage::InfoType RequestMessage::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    RequestMessage::selectionInfos,
    11, 16,
    NULL,
    RequestMessage::selectionNames
};

//
// FunctionNotUnderstood
//


const void* FunctionNotUnderstood::selectionInfos[3] = {
         &request::value_type::theInfo,
         &response::value_type::theInfo,
         &command::value_type::theInfo
};

const char* FunctionNotUnderstood::selectionNames[3] = { "request"
                                      ,"response"
                                      ,"command"};

const FunctionNotUnderstood::InfoType FunctionNotUnderstood::theInfo = {
    CHOICE::create,
    0x000000,
    false,
    FunctionNotUnderstood::selectionInfos,
    3, 3,
    NULL,
    FunctionNotUnderstood::selectionNames
};

//
// IndicationMessage
//


const void* IndicationMessage::selectionInfos[24] = {
         &nonStandard::value_type::theInfo,
         &functionNotUnderstood::value_type::theInfo,
         &masterSlaveDeterminationRelease::value_type::theInfo,
         &terminalCapabilitySetRelease::value_type::theInfo,
         &openLogicalChannelConfirm::value_type::theInfo,
         &requestChannelCloseRelease::value_type::theInfo,
         &multiplexEntrySendRelease::value_type::theInfo,
         &requestMultiplexEntryRelease::value_type::theInfo,
         &requestModeRelease::value_type::theInfo,
         &miscellaneousIndication::value_type::theInfo,
         &jitterIndication::value_type::theInfo,
         &h223SkewIndication::value_type::theInfo,
         &newATMVCIndication::value_type::theInfo,
         &userInput::value_type::theInfo,
         &h2250MaximumSkewIndication::value_type::theInfo,
         &mcLocationIndication::value_type::theInfo,
         &conferenceIndication::value_type::theInfo,
         &vendorIdentification::value_type::theInfo,
         &functionNotSupported::value_type::theInfo,
         &multilinkIndication::value_type::theInfo,
         &logicalChannelRateRelease::value_type::theInfo,
         &flowControlIndication::value_type::theInfo,
         &mobileMultilinkReconfigurationIndication::value_type::theInfo,
         &genericIndication::value_type::theInfo
};

const char* IndicationMessage::selectionNames[24] = { "nonStandard"
                                      ,"functionNotUnderstood"
                                      ,"masterSlaveDeterminationRelease"
                                      ,"terminalCapabilitySetRelease"
                                      ,"openLogicalChannelConfirm"
                                      ,"requestChannelCloseRelease"
                                      ,"multiplexEntrySendRelease"
                                      ,"requestMultiplexEntryRelease"
                                      ,"requestModeRelease"
                                      ,"miscellaneousIndication"
                                      ,"jitterIndication"
                                      ,"h223SkewIndication"
                                      ,"newATMVCIndication"
                                      ,"userInput"
                                      ,"h2250MaximumSkewIndication"
                                      ,"mcLocationIndication"
                                      ,"conferenceIndication"
                                      ,"vendorIdentification"
                                      ,"functionNotSupported"
                                      ,"multilinkIndication"
                                      ,"logicalChannelRateRelease"
                                      ,"flowControlIndication"
                                      ,"mobileMultilinkReconfigurationIndication"
                                      ,"genericIndication"};

const IndicationMessage::InfoType IndicationMessage::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    IndicationMessage::selectionInfos,
    14, 24,
    NULL,
    IndicationMessage::selectionNames
};

//
// MultimediaSystemControlMessage
//


const void* MultimediaSystemControlMessage::selectionInfos[4] = {
         &request::value_type::theInfo,
         &response::value_type::theInfo,
         &command::value_type::theInfo,
         &indication::value_type::theInfo
};

const char* MultimediaSystemControlMessage::selectionNames[4] = { "request"
                                      ,"response"
                                      ,"command"
                                      ,"indication"};

const MultimediaSystemControlMessage::InfoType MultimediaSystemControlMessage::theInfo = {
    CHOICE::create,
    0x000000,
    true,
    MultimediaSystemControlMessage::selectionInfos,
    4, 4,
    NULL,
    MultimediaSystemControlMessage::selectionNames
};

} // namespace MULTIMEDIA_SYSTEM_CONTROL

// End of multimedia_system_control.cxx
