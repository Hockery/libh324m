//
// multimedia_system_control.inl
//
// Code automatically generated by asnparser.
//

#if !defined( MULTIMEDIA_SYSTEM_CONTROL_CXX) && !defined(NO_MULTIMEDIA_SYSTEM_CONTROL_INLINES)
inline MasterSlaveDetermination::terminalType::const_reference MasterSlaveDetermination::get_terminalType () const
{ return *static_cast<terminalType::const_pointer>(fields[0]);}

inline MasterSlaveDetermination::terminalType::reference MasterSlaveDetermination::ref_terminalType ()
{ return *static_cast<terminalType::pointer>(fields[0]);}

inline MasterSlaveDetermination::terminalType::reference MasterSlaveDetermination::set_terminalType ()
{ return *static_cast<terminalType::pointer>(fields[0]);}

inline MasterSlaveDetermination::terminalType::reference MasterSlaveDetermination::set_terminalType (terminalType::value_type::int_type value)
{ return *static_cast<terminalType::pointer>(fields[0]) = value ;}

inline MasterSlaveDetermination::statusDeterminationNumber::const_reference MasterSlaveDetermination::get_statusDeterminationNumber () const
{ return *static_cast<statusDeterminationNumber::const_pointer>(fields[1]);}

inline MasterSlaveDetermination::statusDeterminationNumber::reference MasterSlaveDetermination::ref_statusDeterminationNumber ()
{ return *static_cast<statusDeterminationNumber::pointer>(fields[1]);}

inline MasterSlaveDetermination::statusDeterminationNumber::reference MasterSlaveDetermination::set_statusDeterminationNumber ()
{ return *static_cast<statusDeterminationNumber::pointer>(fields[1]);}

inline MasterSlaveDetermination::statusDeterminationNumber::reference MasterSlaveDetermination::set_statusDeterminationNumber (statusDeterminationNumber::value_type::int_type value)
{ return *static_cast<statusDeterminationNumber::pointer>(fields[1]) = value ;}

inline void MasterSlaveDetermination::swap(MasterSlaveDetermination& other)
{ Inherited::swap(other); }

inline MasterSlaveDetermination* MasterSlaveDetermination::clone() const
{ return static_cast<MasterSlaveDetermination*> (Inherited::clone()); }

inline void MasterSlaveDeterminationRelease::swap(MasterSlaveDeterminationRelease& other)
{ Inherited::swap(other); }

inline MasterSlaveDeterminationRelease* MasterSlaveDeterminationRelease::clone() const
{ return static_cast<MasterSlaveDeterminationRelease*> (Inherited::clone()); }

inline void TerminalCapabilitySetRelease::swap(TerminalCapabilitySetRelease& other)
{ Inherited::swap(other); }

inline TerminalCapabilitySetRelease* TerminalCapabilitySetRelease::clone() const
{ return static_cast<TerminalCapabilitySetRelease*> (Inherited::clone()); }

inline H223AnnexCCapability::videoWithAL1M::const_reference H223AnnexCCapability::get_videoWithAL1M () const
{ return *static_cast<videoWithAL1M::const_pointer>(fields[0]);}

inline H223AnnexCCapability::videoWithAL1M::reference H223AnnexCCapability::ref_videoWithAL1M ()
{ return *static_cast<videoWithAL1M::pointer>(fields[0]);}

inline H223AnnexCCapability::videoWithAL1M::reference H223AnnexCCapability::set_videoWithAL1M ()
{ return *static_cast<videoWithAL1M::pointer>(fields[0]);}

inline H223AnnexCCapability::videoWithAL1M::reference H223AnnexCCapability::set_videoWithAL1M (bool value)
{ return *static_cast<videoWithAL1M::pointer>(fields[0]) = value ;}

inline H223AnnexCCapability::videoWithAL2M::const_reference H223AnnexCCapability::get_videoWithAL2M () const
{ return *static_cast<videoWithAL2M::const_pointer>(fields[1]);}

inline H223AnnexCCapability::videoWithAL2M::reference H223AnnexCCapability::ref_videoWithAL2M ()
{ return *static_cast<videoWithAL2M::pointer>(fields[1]);}

inline H223AnnexCCapability::videoWithAL2M::reference H223AnnexCCapability::set_videoWithAL2M ()
{ return *static_cast<videoWithAL2M::pointer>(fields[1]);}

inline H223AnnexCCapability::videoWithAL2M::reference H223AnnexCCapability::set_videoWithAL2M (bool value)
{ return *static_cast<videoWithAL2M::pointer>(fields[1]) = value ;}

inline H223AnnexCCapability::videoWithAL3M::const_reference H223AnnexCCapability::get_videoWithAL3M () const
{ return *static_cast<videoWithAL3M::const_pointer>(fields[2]);}

inline H223AnnexCCapability::videoWithAL3M::reference H223AnnexCCapability::ref_videoWithAL3M ()
{ return *static_cast<videoWithAL3M::pointer>(fields[2]);}

inline H223AnnexCCapability::videoWithAL3M::reference H223AnnexCCapability::set_videoWithAL3M ()
{ return *static_cast<videoWithAL3M::pointer>(fields[2]);}

inline H223AnnexCCapability::videoWithAL3M::reference H223AnnexCCapability::set_videoWithAL3M (bool value)
{ return *static_cast<videoWithAL3M::pointer>(fields[2]) = value ;}

inline H223AnnexCCapability::audioWithAL1M::const_reference H223AnnexCCapability::get_audioWithAL1M () const
{ return *static_cast<audioWithAL1M::const_pointer>(fields[3]);}

inline H223AnnexCCapability::audioWithAL1M::reference H223AnnexCCapability::ref_audioWithAL1M ()
{ return *static_cast<audioWithAL1M::pointer>(fields[3]);}

inline H223AnnexCCapability::audioWithAL1M::reference H223AnnexCCapability::set_audioWithAL1M ()
{ return *static_cast<audioWithAL1M::pointer>(fields[3]);}

inline H223AnnexCCapability::audioWithAL1M::reference H223AnnexCCapability::set_audioWithAL1M (bool value)
{ return *static_cast<audioWithAL1M::pointer>(fields[3]) = value ;}

inline H223AnnexCCapability::audioWithAL2M::const_reference H223AnnexCCapability::get_audioWithAL2M () const
{ return *static_cast<audioWithAL2M::const_pointer>(fields[4]);}

inline H223AnnexCCapability::audioWithAL2M::reference H223AnnexCCapability::ref_audioWithAL2M ()
{ return *static_cast<audioWithAL2M::pointer>(fields[4]);}

inline H223AnnexCCapability::audioWithAL2M::reference H223AnnexCCapability::set_audioWithAL2M ()
{ return *static_cast<audioWithAL2M::pointer>(fields[4]);}

inline H223AnnexCCapability::audioWithAL2M::reference H223AnnexCCapability::set_audioWithAL2M (bool value)
{ return *static_cast<audioWithAL2M::pointer>(fields[4]) = value ;}

inline H223AnnexCCapability::audioWithAL3M::const_reference H223AnnexCCapability::get_audioWithAL3M () const
{ return *static_cast<audioWithAL3M::const_pointer>(fields[5]);}

inline H223AnnexCCapability::audioWithAL3M::reference H223AnnexCCapability::ref_audioWithAL3M ()
{ return *static_cast<audioWithAL3M::pointer>(fields[5]);}

inline H223AnnexCCapability::audioWithAL3M::reference H223AnnexCCapability::set_audioWithAL3M ()
{ return *static_cast<audioWithAL3M::pointer>(fields[5]);}

inline H223AnnexCCapability::audioWithAL3M::reference H223AnnexCCapability::set_audioWithAL3M (bool value)
{ return *static_cast<audioWithAL3M::pointer>(fields[5]) = value ;}

inline H223AnnexCCapability::dataWithAL1M::const_reference H223AnnexCCapability::get_dataWithAL1M () const
{ return *static_cast<dataWithAL1M::const_pointer>(fields[6]);}

inline H223AnnexCCapability::dataWithAL1M::reference H223AnnexCCapability::ref_dataWithAL1M ()
{ return *static_cast<dataWithAL1M::pointer>(fields[6]);}

inline H223AnnexCCapability::dataWithAL1M::reference H223AnnexCCapability::set_dataWithAL1M ()
{ return *static_cast<dataWithAL1M::pointer>(fields[6]);}

inline H223AnnexCCapability::dataWithAL1M::reference H223AnnexCCapability::set_dataWithAL1M (bool value)
{ return *static_cast<dataWithAL1M::pointer>(fields[6]) = value ;}

inline H223AnnexCCapability::dataWithAL2M::const_reference H223AnnexCCapability::get_dataWithAL2M () const
{ return *static_cast<dataWithAL2M::const_pointer>(fields[7]);}

inline H223AnnexCCapability::dataWithAL2M::reference H223AnnexCCapability::ref_dataWithAL2M ()
{ return *static_cast<dataWithAL2M::pointer>(fields[7]);}

inline H223AnnexCCapability::dataWithAL2M::reference H223AnnexCCapability::set_dataWithAL2M ()
{ return *static_cast<dataWithAL2M::pointer>(fields[7]);}

inline H223AnnexCCapability::dataWithAL2M::reference H223AnnexCCapability::set_dataWithAL2M (bool value)
{ return *static_cast<dataWithAL2M::pointer>(fields[7]) = value ;}

inline H223AnnexCCapability::dataWithAL3M::const_reference H223AnnexCCapability::get_dataWithAL3M () const
{ return *static_cast<dataWithAL3M::const_pointer>(fields[8]);}

inline H223AnnexCCapability::dataWithAL3M::reference H223AnnexCCapability::ref_dataWithAL3M ()
{ return *static_cast<dataWithAL3M::pointer>(fields[8]);}

inline H223AnnexCCapability::dataWithAL3M::reference H223AnnexCCapability::set_dataWithAL3M ()
{ return *static_cast<dataWithAL3M::pointer>(fields[8]);}

inline H223AnnexCCapability::dataWithAL3M::reference H223AnnexCCapability::set_dataWithAL3M (bool value)
{ return *static_cast<dataWithAL3M::pointer>(fields[8]) = value ;}

inline H223AnnexCCapability::alpduInterleaving::const_reference H223AnnexCCapability::get_alpduInterleaving () const
{ return *static_cast<alpduInterleaving::const_pointer>(fields[9]);}

inline H223AnnexCCapability::alpduInterleaving::reference H223AnnexCCapability::ref_alpduInterleaving ()
{ return *static_cast<alpduInterleaving::pointer>(fields[9]);}

inline H223AnnexCCapability::alpduInterleaving::reference H223AnnexCCapability::set_alpduInterleaving ()
{ return *static_cast<alpduInterleaving::pointer>(fields[9]);}

inline H223AnnexCCapability::alpduInterleaving::reference H223AnnexCCapability::set_alpduInterleaving (bool value)
{ return *static_cast<alpduInterleaving::pointer>(fields[9]) = value ;}

inline H223AnnexCCapability::maximumAL1MPDUSize::const_reference H223AnnexCCapability::get_maximumAL1MPDUSize () const
{ return *static_cast<maximumAL1MPDUSize::const_pointer>(fields[10]);}

inline H223AnnexCCapability::maximumAL1MPDUSize::reference H223AnnexCCapability::ref_maximumAL1MPDUSize ()
{ return *static_cast<maximumAL1MPDUSize::pointer>(fields[10]);}

inline H223AnnexCCapability::maximumAL1MPDUSize::reference H223AnnexCCapability::set_maximumAL1MPDUSize ()
{ return *static_cast<maximumAL1MPDUSize::pointer>(fields[10]);}

inline H223AnnexCCapability::maximumAL1MPDUSize::reference H223AnnexCCapability::set_maximumAL1MPDUSize (maximumAL1MPDUSize::value_type::int_type value)
{ return *static_cast<maximumAL1MPDUSize::pointer>(fields[10]) = value ;}

inline H223AnnexCCapability::maximumAL2MSDUSize::const_reference H223AnnexCCapability::get_maximumAL2MSDUSize () const
{ return *static_cast<maximumAL2MSDUSize::const_pointer>(fields[11]);}

inline H223AnnexCCapability::maximumAL2MSDUSize::reference H223AnnexCCapability::ref_maximumAL2MSDUSize ()
{ return *static_cast<maximumAL2MSDUSize::pointer>(fields[11]);}

inline H223AnnexCCapability::maximumAL2MSDUSize::reference H223AnnexCCapability::set_maximumAL2MSDUSize ()
{ return *static_cast<maximumAL2MSDUSize::pointer>(fields[11]);}

inline H223AnnexCCapability::maximumAL2MSDUSize::reference H223AnnexCCapability::set_maximumAL2MSDUSize (maximumAL2MSDUSize::value_type::int_type value)
{ return *static_cast<maximumAL2MSDUSize::pointer>(fields[11]) = value ;}

inline H223AnnexCCapability::maximumAL3MSDUSize::const_reference H223AnnexCCapability::get_maximumAL3MSDUSize () const
{ return *static_cast<maximumAL3MSDUSize::const_pointer>(fields[12]);}

inline H223AnnexCCapability::maximumAL3MSDUSize::reference H223AnnexCCapability::ref_maximumAL3MSDUSize ()
{ return *static_cast<maximumAL3MSDUSize::pointer>(fields[12]);}

inline H223AnnexCCapability::maximumAL3MSDUSize::reference H223AnnexCCapability::set_maximumAL3MSDUSize ()
{ return *static_cast<maximumAL3MSDUSize::pointer>(fields[12]);}

inline H223AnnexCCapability::maximumAL3MSDUSize::reference H223AnnexCCapability::set_maximumAL3MSDUSize (maximumAL3MSDUSize::value_type::int_type value)
{ return *static_cast<maximumAL3MSDUSize::pointer>(fields[12]) = value ;}

inline H223AnnexCCapability::rsCodeCapability::const_reference H223AnnexCCapability::get_rsCodeCapability () const
{
  assert(hasOptionalField(e_rsCodeCapability));
  return *static_cast<rsCodeCapability::const_pointer>(fields[13]);
}

inline H223AnnexCCapability::rsCodeCapability::reference H223AnnexCCapability::ref_rsCodeCapability ()
{
  assert(hasOptionalField(e_rsCodeCapability));
  return *static_cast<rsCodeCapability::pointer>(fields[13]);
}

inline H223AnnexCCapability::rsCodeCapability::reference H223AnnexCCapability::set_rsCodeCapability ()
{
  includeOptionalField( e_rsCodeCapability, 13);
  return *static_cast<rsCodeCapability::pointer>(fields[13]);
}

inline H223AnnexCCapability::rsCodeCapability::reference H223AnnexCCapability::set_rsCodeCapability (bool value)
{
  includeOptionalField( e_rsCodeCapability, 13);
  return *static_cast<rsCodeCapability::pointer>(fields[13]) = value;
}

inline void H223AnnexCCapability::omit_rsCodeCapability ()
{ removeOptionalField( e_rsCodeCapability); }

inline bool H223AnnexCCapability::rsCodeCapability_isPresent () const
{ return hasOptionalField( e_rsCodeCapability); }

inline void H223AnnexCCapability::swap(H223AnnexCCapability& other)
{ Inherited::swap(other); }

inline H223AnnexCCapability* H223AnnexCCapability::clone() const
{ return static_cast<H223AnnexCCapability*> (Inherited::clone()); }

inline V75Capability::audioHeader::const_reference V75Capability::get_audioHeader () const
{ return *static_cast<audioHeader::const_pointer>(fields[0]);}

inline V75Capability::audioHeader::reference V75Capability::ref_audioHeader ()
{ return *static_cast<audioHeader::pointer>(fields[0]);}

inline V75Capability::audioHeader::reference V75Capability::set_audioHeader ()
{ return *static_cast<audioHeader::pointer>(fields[0]);}

inline V75Capability::audioHeader::reference V75Capability::set_audioHeader (bool value)
{ return *static_cast<audioHeader::pointer>(fields[0]) = value ;}

inline void V75Capability::swap(V75Capability& other)
{ Inherited::swap(other); }

inline V75Capability* V75Capability::clone() const
{ return static_cast<V75Capability*> (Inherited::clone()); }

inline QOSMode::guaranteedQOS::reference QOSMode::select_guaranteedQOS ()
{
    return *static_cast<guaranteedQOS::pointer>(setSelection(guaranteedQOS::id_, ASN1::AbstractData::create( &guaranteedQOS::value_type::theInfo)));
}

inline bool QOSMode::guaranteedQOS_isSelected() const
{ 
    return currentSelection() == guaranteedQOS::id_; 
}

inline QOSMode::controlledLoad::reference QOSMode::select_controlledLoad ()
{
    return *static_cast<controlledLoad::pointer>(setSelection(controlledLoad::id_, ASN1::AbstractData::create( &controlledLoad::value_type::theInfo)));
}

inline bool QOSMode::controlledLoad_isSelected() const
{ 
    return currentSelection() == controlledLoad::id_; 
}

inline QOSMode::QOSMode(guaranteedQOS::Id id, guaranteedQOS::const_reference value)
  : Inherited(&theInfo, id, new guaranteedQOS::value_type(value) )
{ }

inline QOSMode::QOSMode(controlledLoad::Id id, controlledLoad::const_reference value)
  : Inherited(&theInfo, id, new controlledLoad::value_type(value) )
{ }


inline void QOSMode::swap(QOSMode & other)
{  Inherited::swap(other); }

inline QOSMode* QOSMode::clone() const
{ return static_cast<QOSMode*> (Inherited::clone()); }

inline bool QOSMode::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ATMParameters::maxNTUSize::const_reference ATMParameters::get_maxNTUSize () const
{ return *static_cast<maxNTUSize::const_pointer>(fields[0]);}

inline ATMParameters::maxNTUSize::reference ATMParameters::ref_maxNTUSize ()
{ return *static_cast<maxNTUSize::pointer>(fields[0]);}

inline ATMParameters::maxNTUSize::reference ATMParameters::set_maxNTUSize ()
{ return *static_cast<maxNTUSize::pointer>(fields[0]);}

inline ATMParameters::maxNTUSize::reference ATMParameters::set_maxNTUSize (maxNTUSize::value_type::int_type value)
{ return *static_cast<maxNTUSize::pointer>(fields[0]) = value ;}

inline ATMParameters::atmUBR::const_reference ATMParameters::get_atmUBR () const
{ return *static_cast<atmUBR::const_pointer>(fields[1]);}

inline ATMParameters::atmUBR::reference ATMParameters::ref_atmUBR ()
{ return *static_cast<atmUBR::pointer>(fields[1]);}

inline ATMParameters::atmUBR::reference ATMParameters::set_atmUBR ()
{ return *static_cast<atmUBR::pointer>(fields[1]);}

inline ATMParameters::atmUBR::reference ATMParameters::set_atmUBR (bool value)
{ return *static_cast<atmUBR::pointer>(fields[1]) = value ;}

inline ATMParameters::atmrtVBR::const_reference ATMParameters::get_atmrtVBR () const
{ return *static_cast<atmrtVBR::const_pointer>(fields[2]);}

inline ATMParameters::atmrtVBR::reference ATMParameters::ref_atmrtVBR ()
{ return *static_cast<atmrtVBR::pointer>(fields[2]);}

inline ATMParameters::atmrtVBR::reference ATMParameters::set_atmrtVBR ()
{ return *static_cast<atmrtVBR::pointer>(fields[2]);}

inline ATMParameters::atmrtVBR::reference ATMParameters::set_atmrtVBR (bool value)
{ return *static_cast<atmrtVBR::pointer>(fields[2]) = value ;}

inline ATMParameters::atmnrtVBR::const_reference ATMParameters::get_atmnrtVBR () const
{ return *static_cast<atmnrtVBR::const_pointer>(fields[3]);}

inline ATMParameters::atmnrtVBR::reference ATMParameters::ref_atmnrtVBR ()
{ return *static_cast<atmnrtVBR::pointer>(fields[3]);}

inline ATMParameters::atmnrtVBR::reference ATMParameters::set_atmnrtVBR ()
{ return *static_cast<atmnrtVBR::pointer>(fields[3]);}

inline ATMParameters::atmnrtVBR::reference ATMParameters::set_atmnrtVBR (bool value)
{ return *static_cast<atmnrtVBR::pointer>(fields[3]) = value ;}

inline ATMParameters::atmABR::const_reference ATMParameters::get_atmABR () const
{ return *static_cast<atmABR::const_pointer>(fields[4]);}

inline ATMParameters::atmABR::reference ATMParameters::ref_atmABR ()
{ return *static_cast<atmABR::pointer>(fields[4]);}

inline ATMParameters::atmABR::reference ATMParameters::set_atmABR ()
{ return *static_cast<atmABR::pointer>(fields[4]);}

inline ATMParameters::atmABR::reference ATMParameters::set_atmABR (bool value)
{ return *static_cast<atmABR::pointer>(fields[4]) = value ;}

inline ATMParameters::atmCBR::const_reference ATMParameters::get_atmCBR () const
{ return *static_cast<atmCBR::const_pointer>(fields[5]);}

inline ATMParameters::atmCBR::reference ATMParameters::ref_atmCBR ()
{ return *static_cast<atmCBR::pointer>(fields[5]);}

inline ATMParameters::atmCBR::reference ATMParameters::set_atmCBR ()
{ return *static_cast<atmCBR::pointer>(fields[5]);}

inline ATMParameters::atmCBR::reference ATMParameters::set_atmCBR (bool value)
{ return *static_cast<atmCBR::pointer>(fields[5]) = value ;}

inline void ATMParameters::swap(ATMParameters& other)
{ Inherited::swap(other); }

inline ATMParameters* ATMParameters::clone() const
{ return static_cast<ATMParameters*> (Inherited::clone()); }

inline H261VideoCapability::qcifMPI::const_reference H261VideoCapability::get_qcifMPI () const
{
  assert(hasOptionalField(e_qcifMPI));
  return *static_cast<qcifMPI::const_pointer>(fields[0]);
}

inline H261VideoCapability::qcifMPI::reference H261VideoCapability::ref_qcifMPI ()
{
  assert(hasOptionalField(e_qcifMPI));
  return *static_cast<qcifMPI::pointer>(fields[0]);
}

inline H261VideoCapability::qcifMPI::reference H261VideoCapability::set_qcifMPI ()
{
  includeOptionalField( e_qcifMPI, 0);
  return *static_cast<qcifMPI::pointer>(fields[0]);
}

inline H261VideoCapability::qcifMPI::reference H261VideoCapability::set_qcifMPI (qcifMPI::value_type::int_type value)
{
  includeOptionalField( e_qcifMPI, 0);
  return *static_cast<qcifMPI::pointer>(fields[0]) = value;
}

inline void H261VideoCapability::omit_qcifMPI ()
{ removeOptionalField( e_qcifMPI); }

inline bool H261VideoCapability::qcifMPI_isPresent () const
{ return hasOptionalField( e_qcifMPI); }

inline H261VideoCapability::cifMPI::const_reference H261VideoCapability::get_cifMPI () const
{
  assert(hasOptionalField(e_cifMPI));
  return *static_cast<cifMPI::const_pointer>(fields[1]);
}

inline H261VideoCapability::cifMPI::reference H261VideoCapability::ref_cifMPI ()
{
  assert(hasOptionalField(e_cifMPI));
  return *static_cast<cifMPI::pointer>(fields[1]);
}

inline H261VideoCapability::cifMPI::reference H261VideoCapability::set_cifMPI ()
{
  includeOptionalField( e_cifMPI, 1);
  return *static_cast<cifMPI::pointer>(fields[1]);
}

inline H261VideoCapability::cifMPI::reference H261VideoCapability::set_cifMPI (cifMPI::value_type::int_type value)
{
  includeOptionalField( e_cifMPI, 1);
  return *static_cast<cifMPI::pointer>(fields[1]) = value;
}

inline void H261VideoCapability::omit_cifMPI ()
{ removeOptionalField( e_cifMPI); }

inline bool H261VideoCapability::cifMPI_isPresent () const
{ return hasOptionalField( e_cifMPI); }

inline H261VideoCapability::temporalSpatialTradeOffCapability::const_reference H261VideoCapability::get_temporalSpatialTradeOffCapability () const
{ return *static_cast<temporalSpatialTradeOffCapability::const_pointer>(fields[2]);}

inline H261VideoCapability::temporalSpatialTradeOffCapability::reference H261VideoCapability::ref_temporalSpatialTradeOffCapability ()
{ return *static_cast<temporalSpatialTradeOffCapability::pointer>(fields[2]);}

inline H261VideoCapability::temporalSpatialTradeOffCapability::reference H261VideoCapability::set_temporalSpatialTradeOffCapability ()
{ return *static_cast<temporalSpatialTradeOffCapability::pointer>(fields[2]);}

inline H261VideoCapability::temporalSpatialTradeOffCapability::reference H261VideoCapability::set_temporalSpatialTradeOffCapability (bool value)
{ return *static_cast<temporalSpatialTradeOffCapability::pointer>(fields[2]) = value ;}

inline H261VideoCapability::maxBitRate::const_reference H261VideoCapability::get_maxBitRate () const
{ return *static_cast<maxBitRate::const_pointer>(fields[3]);}

inline H261VideoCapability::maxBitRate::reference H261VideoCapability::ref_maxBitRate ()
{ return *static_cast<maxBitRate::pointer>(fields[3]);}

inline H261VideoCapability::maxBitRate::reference H261VideoCapability::set_maxBitRate ()
{ return *static_cast<maxBitRate::pointer>(fields[3]);}

inline H261VideoCapability::maxBitRate::reference H261VideoCapability::set_maxBitRate (maxBitRate::value_type::int_type value)
{ return *static_cast<maxBitRate::pointer>(fields[3]) = value ;}

inline H261VideoCapability::stillImageTransmission::const_reference H261VideoCapability::get_stillImageTransmission () const
{ return *static_cast<stillImageTransmission::const_pointer>(fields[4]);}

inline H261VideoCapability::stillImageTransmission::reference H261VideoCapability::ref_stillImageTransmission ()
{ return *static_cast<stillImageTransmission::pointer>(fields[4]);}

inline H261VideoCapability::stillImageTransmission::reference H261VideoCapability::set_stillImageTransmission ()
{ return *static_cast<stillImageTransmission::pointer>(fields[4]);}

inline H261VideoCapability::stillImageTransmission::reference H261VideoCapability::set_stillImageTransmission (bool value)
{ return *static_cast<stillImageTransmission::pointer>(fields[4]) = value ;}

inline H261VideoCapability::videoBadMBsCap::const_reference H261VideoCapability::get_videoBadMBsCap () const
{
  assert(hasOptionalField(e_videoBadMBsCap));
  return *static_cast<videoBadMBsCap::const_pointer>(fields[5]);
}

inline H261VideoCapability::videoBadMBsCap::reference H261VideoCapability::ref_videoBadMBsCap ()
{
  assert(hasOptionalField(e_videoBadMBsCap));
  return *static_cast<videoBadMBsCap::pointer>(fields[5]);
}

inline H261VideoCapability::videoBadMBsCap::reference H261VideoCapability::set_videoBadMBsCap ()
{
  includeOptionalField( e_videoBadMBsCap, 5);
  return *static_cast<videoBadMBsCap::pointer>(fields[5]);
}

inline H261VideoCapability::videoBadMBsCap::reference H261VideoCapability::set_videoBadMBsCap (bool value)
{
  includeOptionalField( e_videoBadMBsCap, 5);
  return *static_cast<videoBadMBsCap::pointer>(fields[5]) = value;
}

inline void H261VideoCapability::omit_videoBadMBsCap ()
{ removeOptionalField( e_videoBadMBsCap); }

inline bool H261VideoCapability::videoBadMBsCap_isPresent () const
{ return hasOptionalField( e_videoBadMBsCap); }

inline void H261VideoCapability::swap(H261VideoCapability& other)
{ Inherited::swap(other); }

inline H261VideoCapability* H261VideoCapability::clone() const
{ return static_cast<H261VideoCapability*> (Inherited::clone()); }

inline H262VideoCapability::profileAndLevel_SPatML::const_reference H262VideoCapability::get_profileAndLevel_SPatML () const
{ return *static_cast<profileAndLevel_SPatML::const_pointer>(fields[0]);}

inline H262VideoCapability::profileAndLevel_SPatML::reference H262VideoCapability::ref_profileAndLevel_SPatML ()
{ return *static_cast<profileAndLevel_SPatML::pointer>(fields[0]);}

inline H262VideoCapability::profileAndLevel_SPatML::reference H262VideoCapability::set_profileAndLevel_SPatML ()
{ return *static_cast<profileAndLevel_SPatML::pointer>(fields[0]);}

inline H262VideoCapability::profileAndLevel_SPatML::reference H262VideoCapability::set_profileAndLevel_SPatML (bool value)
{ return *static_cast<profileAndLevel_SPatML::pointer>(fields[0]) = value ;}

inline H262VideoCapability::profileAndLevel_MPatLL::const_reference H262VideoCapability::get_profileAndLevel_MPatLL () const
{ return *static_cast<profileAndLevel_MPatLL::const_pointer>(fields[1]);}

inline H262VideoCapability::profileAndLevel_MPatLL::reference H262VideoCapability::ref_profileAndLevel_MPatLL ()
{ return *static_cast<profileAndLevel_MPatLL::pointer>(fields[1]);}

inline H262VideoCapability::profileAndLevel_MPatLL::reference H262VideoCapability::set_profileAndLevel_MPatLL ()
{ return *static_cast<profileAndLevel_MPatLL::pointer>(fields[1]);}

inline H262VideoCapability::profileAndLevel_MPatLL::reference H262VideoCapability::set_profileAndLevel_MPatLL (bool value)
{ return *static_cast<profileAndLevel_MPatLL::pointer>(fields[1]) = value ;}

inline H262VideoCapability::profileAndLevel_MPatML::const_reference H262VideoCapability::get_profileAndLevel_MPatML () const
{ return *static_cast<profileAndLevel_MPatML::const_pointer>(fields[2]);}

inline H262VideoCapability::profileAndLevel_MPatML::reference H262VideoCapability::ref_profileAndLevel_MPatML ()
{ return *static_cast<profileAndLevel_MPatML::pointer>(fields[2]);}

inline H262VideoCapability::profileAndLevel_MPatML::reference H262VideoCapability::set_profileAndLevel_MPatML ()
{ return *static_cast<profileAndLevel_MPatML::pointer>(fields[2]);}

inline H262VideoCapability::profileAndLevel_MPatML::reference H262VideoCapability::set_profileAndLevel_MPatML (bool value)
{ return *static_cast<profileAndLevel_MPatML::pointer>(fields[2]) = value ;}

inline H262VideoCapability::profileAndLevel_MPatH_14::const_reference H262VideoCapability::get_profileAndLevel_MPatH_14 () const
{ return *static_cast<profileAndLevel_MPatH_14::const_pointer>(fields[3]);}

inline H262VideoCapability::profileAndLevel_MPatH_14::reference H262VideoCapability::ref_profileAndLevel_MPatH_14 ()
{ return *static_cast<profileAndLevel_MPatH_14::pointer>(fields[3]);}

inline H262VideoCapability::profileAndLevel_MPatH_14::reference H262VideoCapability::set_profileAndLevel_MPatH_14 ()
{ return *static_cast<profileAndLevel_MPatH_14::pointer>(fields[3]);}

inline H262VideoCapability::profileAndLevel_MPatH_14::reference H262VideoCapability::set_profileAndLevel_MPatH_14 (bool value)
{ return *static_cast<profileAndLevel_MPatH_14::pointer>(fields[3]) = value ;}

inline H262VideoCapability::profileAndLevel_MPatHL::const_reference H262VideoCapability::get_profileAndLevel_MPatHL () const
{ return *static_cast<profileAndLevel_MPatHL::const_pointer>(fields[4]);}

inline H262VideoCapability::profileAndLevel_MPatHL::reference H262VideoCapability::ref_profileAndLevel_MPatHL ()
{ return *static_cast<profileAndLevel_MPatHL::pointer>(fields[4]);}

inline H262VideoCapability::profileAndLevel_MPatHL::reference H262VideoCapability::set_profileAndLevel_MPatHL ()
{ return *static_cast<profileAndLevel_MPatHL::pointer>(fields[4]);}

inline H262VideoCapability::profileAndLevel_MPatHL::reference H262VideoCapability::set_profileAndLevel_MPatHL (bool value)
{ return *static_cast<profileAndLevel_MPatHL::pointer>(fields[4]) = value ;}

inline H262VideoCapability::profileAndLevel_SNRatLL::const_reference H262VideoCapability::get_profileAndLevel_SNRatLL () const
{ return *static_cast<profileAndLevel_SNRatLL::const_pointer>(fields[5]);}

inline H262VideoCapability::profileAndLevel_SNRatLL::reference H262VideoCapability::ref_profileAndLevel_SNRatLL ()
{ return *static_cast<profileAndLevel_SNRatLL::pointer>(fields[5]);}

inline H262VideoCapability::profileAndLevel_SNRatLL::reference H262VideoCapability::set_profileAndLevel_SNRatLL ()
{ return *static_cast<profileAndLevel_SNRatLL::pointer>(fields[5]);}

inline H262VideoCapability::profileAndLevel_SNRatLL::reference H262VideoCapability::set_profileAndLevel_SNRatLL (bool value)
{ return *static_cast<profileAndLevel_SNRatLL::pointer>(fields[5]) = value ;}

inline H262VideoCapability::profileAndLevel_SNRatML::const_reference H262VideoCapability::get_profileAndLevel_SNRatML () const
{ return *static_cast<profileAndLevel_SNRatML::const_pointer>(fields[6]);}

inline H262VideoCapability::profileAndLevel_SNRatML::reference H262VideoCapability::ref_profileAndLevel_SNRatML ()
{ return *static_cast<profileAndLevel_SNRatML::pointer>(fields[6]);}

inline H262VideoCapability::profileAndLevel_SNRatML::reference H262VideoCapability::set_profileAndLevel_SNRatML ()
{ return *static_cast<profileAndLevel_SNRatML::pointer>(fields[6]);}

inline H262VideoCapability::profileAndLevel_SNRatML::reference H262VideoCapability::set_profileAndLevel_SNRatML (bool value)
{ return *static_cast<profileAndLevel_SNRatML::pointer>(fields[6]) = value ;}

inline H262VideoCapability::profileAndLevel_SpatialatH_14::const_reference H262VideoCapability::get_profileAndLevel_SpatialatH_14 () const
{ return *static_cast<profileAndLevel_SpatialatH_14::const_pointer>(fields[7]);}

inline H262VideoCapability::profileAndLevel_SpatialatH_14::reference H262VideoCapability::ref_profileAndLevel_SpatialatH_14 ()
{ return *static_cast<profileAndLevel_SpatialatH_14::pointer>(fields[7]);}

inline H262VideoCapability::profileAndLevel_SpatialatH_14::reference H262VideoCapability::set_profileAndLevel_SpatialatH_14 ()
{ return *static_cast<profileAndLevel_SpatialatH_14::pointer>(fields[7]);}

inline H262VideoCapability::profileAndLevel_SpatialatH_14::reference H262VideoCapability::set_profileAndLevel_SpatialatH_14 (bool value)
{ return *static_cast<profileAndLevel_SpatialatH_14::pointer>(fields[7]) = value ;}

inline H262VideoCapability::profileAndLevel_HPatML::const_reference H262VideoCapability::get_profileAndLevel_HPatML () const
{ return *static_cast<profileAndLevel_HPatML::const_pointer>(fields[8]);}

inline H262VideoCapability::profileAndLevel_HPatML::reference H262VideoCapability::ref_profileAndLevel_HPatML ()
{ return *static_cast<profileAndLevel_HPatML::pointer>(fields[8]);}

inline H262VideoCapability::profileAndLevel_HPatML::reference H262VideoCapability::set_profileAndLevel_HPatML ()
{ return *static_cast<profileAndLevel_HPatML::pointer>(fields[8]);}

inline H262VideoCapability::profileAndLevel_HPatML::reference H262VideoCapability::set_profileAndLevel_HPatML (bool value)
{ return *static_cast<profileAndLevel_HPatML::pointer>(fields[8]) = value ;}

inline H262VideoCapability::profileAndLevel_HPatH_14::const_reference H262VideoCapability::get_profileAndLevel_HPatH_14 () const
{ return *static_cast<profileAndLevel_HPatH_14::const_pointer>(fields[9]);}

inline H262VideoCapability::profileAndLevel_HPatH_14::reference H262VideoCapability::ref_profileAndLevel_HPatH_14 ()
{ return *static_cast<profileAndLevel_HPatH_14::pointer>(fields[9]);}

inline H262VideoCapability::profileAndLevel_HPatH_14::reference H262VideoCapability::set_profileAndLevel_HPatH_14 ()
{ return *static_cast<profileAndLevel_HPatH_14::pointer>(fields[9]);}

inline H262VideoCapability::profileAndLevel_HPatH_14::reference H262VideoCapability::set_profileAndLevel_HPatH_14 (bool value)
{ return *static_cast<profileAndLevel_HPatH_14::pointer>(fields[9]) = value ;}

inline H262VideoCapability::profileAndLevel_HPatHL::const_reference H262VideoCapability::get_profileAndLevel_HPatHL () const
{ return *static_cast<profileAndLevel_HPatHL::const_pointer>(fields[10]);}

inline H262VideoCapability::profileAndLevel_HPatHL::reference H262VideoCapability::ref_profileAndLevel_HPatHL ()
{ return *static_cast<profileAndLevel_HPatHL::pointer>(fields[10]);}

inline H262VideoCapability::profileAndLevel_HPatHL::reference H262VideoCapability::set_profileAndLevel_HPatHL ()
{ return *static_cast<profileAndLevel_HPatHL::pointer>(fields[10]);}

inline H262VideoCapability::profileAndLevel_HPatHL::reference H262VideoCapability::set_profileAndLevel_HPatHL (bool value)
{ return *static_cast<profileAndLevel_HPatHL::pointer>(fields[10]) = value ;}

inline H262VideoCapability::videoBitRate::const_reference H262VideoCapability::get_videoBitRate () const
{
  assert(hasOptionalField(e_videoBitRate));
  return *static_cast<videoBitRate::const_pointer>(fields[11]);
}

inline H262VideoCapability::videoBitRate::reference H262VideoCapability::ref_videoBitRate ()
{
  assert(hasOptionalField(e_videoBitRate));
  return *static_cast<videoBitRate::pointer>(fields[11]);
}

inline H262VideoCapability::videoBitRate::reference H262VideoCapability::set_videoBitRate ()
{
  includeOptionalField( e_videoBitRate, 11);
  return *static_cast<videoBitRate::pointer>(fields[11]);
}

inline H262VideoCapability::videoBitRate::reference H262VideoCapability::set_videoBitRate (videoBitRate::value_type::int_type value)
{
  includeOptionalField( e_videoBitRate, 11);
  return *static_cast<videoBitRate::pointer>(fields[11]) = value;
}

inline void H262VideoCapability::omit_videoBitRate ()
{ removeOptionalField( e_videoBitRate); }

inline bool H262VideoCapability::videoBitRate_isPresent () const
{ return hasOptionalField( e_videoBitRate); }

inline H262VideoCapability::vbvBufferSize::const_reference H262VideoCapability::get_vbvBufferSize () const
{
  assert(hasOptionalField(e_vbvBufferSize));
  return *static_cast<vbvBufferSize::const_pointer>(fields[12]);
}

inline H262VideoCapability::vbvBufferSize::reference H262VideoCapability::ref_vbvBufferSize ()
{
  assert(hasOptionalField(e_vbvBufferSize));
  return *static_cast<vbvBufferSize::pointer>(fields[12]);
}

inline H262VideoCapability::vbvBufferSize::reference H262VideoCapability::set_vbvBufferSize ()
{
  includeOptionalField( e_vbvBufferSize, 12);
  return *static_cast<vbvBufferSize::pointer>(fields[12]);
}

inline H262VideoCapability::vbvBufferSize::reference H262VideoCapability::set_vbvBufferSize (vbvBufferSize::value_type::int_type value)
{
  includeOptionalField( e_vbvBufferSize, 12);
  return *static_cast<vbvBufferSize::pointer>(fields[12]) = value;
}

inline void H262VideoCapability::omit_vbvBufferSize ()
{ removeOptionalField( e_vbvBufferSize); }

inline bool H262VideoCapability::vbvBufferSize_isPresent () const
{ return hasOptionalField( e_vbvBufferSize); }

inline H262VideoCapability::samplesPerLine::const_reference H262VideoCapability::get_samplesPerLine () const
{
  assert(hasOptionalField(e_samplesPerLine));
  return *static_cast<samplesPerLine::const_pointer>(fields[13]);
}

inline H262VideoCapability::samplesPerLine::reference H262VideoCapability::ref_samplesPerLine ()
{
  assert(hasOptionalField(e_samplesPerLine));
  return *static_cast<samplesPerLine::pointer>(fields[13]);
}

inline H262VideoCapability::samplesPerLine::reference H262VideoCapability::set_samplesPerLine ()
{
  includeOptionalField( e_samplesPerLine, 13);
  return *static_cast<samplesPerLine::pointer>(fields[13]);
}

inline H262VideoCapability::samplesPerLine::reference H262VideoCapability::set_samplesPerLine (samplesPerLine::value_type::int_type value)
{
  includeOptionalField( e_samplesPerLine, 13);
  return *static_cast<samplesPerLine::pointer>(fields[13]) = value;
}

inline void H262VideoCapability::omit_samplesPerLine ()
{ removeOptionalField( e_samplesPerLine); }

inline bool H262VideoCapability::samplesPerLine_isPresent () const
{ return hasOptionalField( e_samplesPerLine); }

inline H262VideoCapability::linesPerFrame::const_reference H262VideoCapability::get_linesPerFrame () const
{
  assert(hasOptionalField(e_linesPerFrame));
  return *static_cast<linesPerFrame::const_pointer>(fields[14]);
}

inline H262VideoCapability::linesPerFrame::reference H262VideoCapability::ref_linesPerFrame ()
{
  assert(hasOptionalField(e_linesPerFrame));
  return *static_cast<linesPerFrame::pointer>(fields[14]);
}

inline H262VideoCapability::linesPerFrame::reference H262VideoCapability::set_linesPerFrame ()
{
  includeOptionalField( e_linesPerFrame, 14);
  return *static_cast<linesPerFrame::pointer>(fields[14]);
}

inline H262VideoCapability::linesPerFrame::reference H262VideoCapability::set_linesPerFrame (linesPerFrame::value_type::int_type value)
{
  includeOptionalField( e_linesPerFrame, 14);
  return *static_cast<linesPerFrame::pointer>(fields[14]) = value;
}

inline void H262VideoCapability::omit_linesPerFrame ()
{ removeOptionalField( e_linesPerFrame); }

inline bool H262VideoCapability::linesPerFrame_isPresent () const
{ return hasOptionalField( e_linesPerFrame); }

inline H262VideoCapability::framesPerSecond::const_reference H262VideoCapability::get_framesPerSecond () const
{
  assert(hasOptionalField(e_framesPerSecond));
  return *static_cast<framesPerSecond::const_pointer>(fields[15]);
}

inline H262VideoCapability::framesPerSecond::reference H262VideoCapability::ref_framesPerSecond ()
{
  assert(hasOptionalField(e_framesPerSecond));
  return *static_cast<framesPerSecond::pointer>(fields[15]);
}

inline H262VideoCapability::framesPerSecond::reference H262VideoCapability::set_framesPerSecond ()
{
  includeOptionalField( e_framesPerSecond, 15);
  return *static_cast<framesPerSecond::pointer>(fields[15]);
}

inline H262VideoCapability::framesPerSecond::reference H262VideoCapability::set_framesPerSecond (framesPerSecond::value_type::int_type value)
{
  includeOptionalField( e_framesPerSecond, 15);
  return *static_cast<framesPerSecond::pointer>(fields[15]) = value;
}

inline void H262VideoCapability::omit_framesPerSecond ()
{ removeOptionalField( e_framesPerSecond); }

inline bool H262VideoCapability::framesPerSecond_isPresent () const
{ return hasOptionalField( e_framesPerSecond); }

inline H262VideoCapability::luminanceSampleRate::const_reference H262VideoCapability::get_luminanceSampleRate () const
{
  assert(hasOptionalField(e_luminanceSampleRate));
  return *static_cast<luminanceSampleRate::const_pointer>(fields[16]);
}

inline H262VideoCapability::luminanceSampleRate::reference H262VideoCapability::ref_luminanceSampleRate ()
{
  assert(hasOptionalField(e_luminanceSampleRate));
  return *static_cast<luminanceSampleRate::pointer>(fields[16]);
}

inline H262VideoCapability::luminanceSampleRate::reference H262VideoCapability::set_luminanceSampleRate ()
{
  includeOptionalField( e_luminanceSampleRate, 16);
  return *static_cast<luminanceSampleRate::pointer>(fields[16]);
}

inline H262VideoCapability::luminanceSampleRate::reference H262VideoCapability::set_luminanceSampleRate (luminanceSampleRate::value_type::int_type value)
{
  includeOptionalField( e_luminanceSampleRate, 16);
  return *static_cast<luminanceSampleRate::pointer>(fields[16]) = value;
}

inline void H262VideoCapability::omit_luminanceSampleRate ()
{ removeOptionalField( e_luminanceSampleRate); }

inline bool H262VideoCapability::luminanceSampleRate_isPresent () const
{ return hasOptionalField( e_luminanceSampleRate); }

inline H262VideoCapability::videoBadMBsCap::const_reference H262VideoCapability::get_videoBadMBsCap () const
{ return *static_cast<videoBadMBsCap::const_pointer>(fields[17]);}

inline H262VideoCapability::videoBadMBsCap::reference H262VideoCapability::ref_videoBadMBsCap ()
{ return *static_cast<videoBadMBsCap::pointer>(fields[17]);}

inline H262VideoCapability::videoBadMBsCap::reference H262VideoCapability::set_videoBadMBsCap ()
{ return *static_cast<videoBadMBsCap::pointer>(fields[17]);}

inline H262VideoCapability::videoBadMBsCap::reference H262VideoCapability::set_videoBadMBsCap (bool value)
{ return *static_cast<videoBadMBsCap::pointer>(fields[17]) = value ;}

inline void H262VideoCapability::swap(H262VideoCapability& other)
{ Inherited::swap(other); }

inline H262VideoCapability* H262VideoCapability::clone() const
{ return static_cast<H262VideoCapability*> (Inherited::clone()); }

inline TransparencyParameters::presentationOrder::const_reference TransparencyParameters::get_presentationOrder () const
{ return *static_cast<presentationOrder::const_pointer>(fields[0]);}

inline TransparencyParameters::presentationOrder::reference TransparencyParameters::ref_presentationOrder ()
{ return *static_cast<presentationOrder::pointer>(fields[0]);}

inline TransparencyParameters::presentationOrder::reference TransparencyParameters::set_presentationOrder ()
{ return *static_cast<presentationOrder::pointer>(fields[0]);}

inline TransparencyParameters::presentationOrder::reference TransparencyParameters::set_presentationOrder (presentationOrder::value_type::int_type value)
{ return *static_cast<presentationOrder::pointer>(fields[0]) = value ;}

inline TransparencyParameters::offset_x::const_reference TransparencyParameters::get_offset_x () const
{ return *static_cast<offset_x::const_pointer>(fields[1]);}

inline TransparencyParameters::offset_x::reference TransparencyParameters::ref_offset_x ()
{ return *static_cast<offset_x::pointer>(fields[1]);}

inline TransparencyParameters::offset_x::reference TransparencyParameters::set_offset_x ()
{ return *static_cast<offset_x::pointer>(fields[1]);}

inline TransparencyParameters::offset_x::reference TransparencyParameters::set_offset_x (offset_x::value_type::int_type value)
{ return *static_cast<offset_x::pointer>(fields[1]) = value ;}

inline TransparencyParameters::offset_y::const_reference TransparencyParameters::get_offset_y () const
{ return *static_cast<offset_y::const_pointer>(fields[2]);}

inline TransparencyParameters::offset_y::reference TransparencyParameters::ref_offset_y ()
{ return *static_cast<offset_y::pointer>(fields[2]);}

inline TransparencyParameters::offset_y::reference TransparencyParameters::set_offset_y ()
{ return *static_cast<offset_y::pointer>(fields[2]);}

inline TransparencyParameters::offset_y::reference TransparencyParameters::set_offset_y (offset_y::value_type::int_type value)
{ return *static_cast<offset_y::pointer>(fields[2]) = value ;}

inline TransparencyParameters::scale_x::const_reference TransparencyParameters::get_scale_x () const
{ return *static_cast<scale_x::const_pointer>(fields[3]);}

inline TransparencyParameters::scale_x::reference TransparencyParameters::ref_scale_x ()
{ return *static_cast<scale_x::pointer>(fields[3]);}

inline TransparencyParameters::scale_x::reference TransparencyParameters::set_scale_x ()
{ return *static_cast<scale_x::pointer>(fields[3]);}

inline TransparencyParameters::scale_x::reference TransparencyParameters::set_scale_x (scale_x::value_type::int_type value)
{ return *static_cast<scale_x::pointer>(fields[3]) = value ;}

inline TransparencyParameters::scale_y::const_reference TransparencyParameters::get_scale_y () const
{ return *static_cast<scale_y::const_pointer>(fields[4]);}

inline TransparencyParameters::scale_y::reference TransparencyParameters::ref_scale_y ()
{ return *static_cast<scale_y::pointer>(fields[4]);}

inline TransparencyParameters::scale_y::reference TransparencyParameters::set_scale_y ()
{ return *static_cast<scale_y::pointer>(fields[4]);}

inline TransparencyParameters::scale_y::reference TransparencyParameters::set_scale_y (scale_y::value_type::int_type value)
{ return *static_cast<scale_y::pointer>(fields[4]) = value ;}

inline void TransparencyParameters::swap(TransparencyParameters& other)
{ Inherited::swap(other); }

inline TransparencyParameters* TransparencyParameters::clone() const
{ return static_cast<TransparencyParameters*> (Inherited::clone()); }

inline CustomPictureClockFrequency::clockConversionCode::const_reference CustomPictureClockFrequency::get_clockConversionCode () const
{ return *static_cast<clockConversionCode::const_pointer>(fields[0]);}

inline CustomPictureClockFrequency::clockConversionCode::reference CustomPictureClockFrequency::ref_clockConversionCode ()
{ return *static_cast<clockConversionCode::pointer>(fields[0]);}

inline CustomPictureClockFrequency::clockConversionCode::reference CustomPictureClockFrequency::set_clockConversionCode ()
{ return *static_cast<clockConversionCode::pointer>(fields[0]);}

inline CustomPictureClockFrequency::clockConversionCode::reference CustomPictureClockFrequency::set_clockConversionCode (clockConversionCode::value_type::int_type value)
{ return *static_cast<clockConversionCode::pointer>(fields[0]) = value ;}

inline CustomPictureClockFrequency::clockDivisor::const_reference CustomPictureClockFrequency::get_clockDivisor () const
{ return *static_cast<clockDivisor::const_pointer>(fields[1]);}

inline CustomPictureClockFrequency::clockDivisor::reference CustomPictureClockFrequency::ref_clockDivisor ()
{ return *static_cast<clockDivisor::pointer>(fields[1]);}

inline CustomPictureClockFrequency::clockDivisor::reference CustomPictureClockFrequency::set_clockDivisor ()
{ return *static_cast<clockDivisor::pointer>(fields[1]);}

inline CustomPictureClockFrequency::clockDivisor::reference CustomPictureClockFrequency::set_clockDivisor (clockDivisor::value_type::int_type value)
{ return *static_cast<clockDivisor::pointer>(fields[1]) = value ;}

inline CustomPictureClockFrequency::sqcifMPI::const_reference CustomPictureClockFrequency::get_sqcifMPI () const
{
  assert(hasOptionalField(e_sqcifMPI));
  return *static_cast<sqcifMPI::const_pointer>(fields[2]);
}

inline CustomPictureClockFrequency::sqcifMPI::reference CustomPictureClockFrequency::ref_sqcifMPI ()
{
  assert(hasOptionalField(e_sqcifMPI));
  return *static_cast<sqcifMPI::pointer>(fields[2]);
}

inline CustomPictureClockFrequency::sqcifMPI::reference CustomPictureClockFrequency::set_sqcifMPI ()
{
  includeOptionalField( e_sqcifMPI, 2);
  return *static_cast<sqcifMPI::pointer>(fields[2]);
}

inline CustomPictureClockFrequency::sqcifMPI::reference CustomPictureClockFrequency::set_sqcifMPI (sqcifMPI::value_type::int_type value)
{
  includeOptionalField( e_sqcifMPI, 2);
  return *static_cast<sqcifMPI::pointer>(fields[2]) = value;
}

inline void CustomPictureClockFrequency::omit_sqcifMPI ()
{ removeOptionalField( e_sqcifMPI); }

inline bool CustomPictureClockFrequency::sqcifMPI_isPresent () const
{ return hasOptionalField( e_sqcifMPI); }

inline CustomPictureClockFrequency::qcifMPI::const_reference CustomPictureClockFrequency::get_qcifMPI () const
{
  assert(hasOptionalField(e_qcifMPI));
  return *static_cast<qcifMPI::const_pointer>(fields[3]);
}

inline CustomPictureClockFrequency::qcifMPI::reference CustomPictureClockFrequency::ref_qcifMPI ()
{
  assert(hasOptionalField(e_qcifMPI));
  return *static_cast<qcifMPI::pointer>(fields[3]);
}

inline CustomPictureClockFrequency::qcifMPI::reference CustomPictureClockFrequency::set_qcifMPI ()
{
  includeOptionalField( e_qcifMPI, 3);
  return *static_cast<qcifMPI::pointer>(fields[3]);
}

inline CustomPictureClockFrequency::qcifMPI::reference CustomPictureClockFrequency::set_qcifMPI (qcifMPI::value_type::int_type value)
{
  includeOptionalField( e_qcifMPI, 3);
  return *static_cast<qcifMPI::pointer>(fields[3]) = value;
}

inline void CustomPictureClockFrequency::omit_qcifMPI ()
{ removeOptionalField( e_qcifMPI); }

inline bool CustomPictureClockFrequency::qcifMPI_isPresent () const
{ return hasOptionalField( e_qcifMPI); }

inline CustomPictureClockFrequency::cifMPI::const_reference CustomPictureClockFrequency::get_cifMPI () const
{
  assert(hasOptionalField(e_cifMPI));
  return *static_cast<cifMPI::const_pointer>(fields[4]);
}

inline CustomPictureClockFrequency::cifMPI::reference CustomPictureClockFrequency::ref_cifMPI ()
{
  assert(hasOptionalField(e_cifMPI));
  return *static_cast<cifMPI::pointer>(fields[4]);
}

inline CustomPictureClockFrequency::cifMPI::reference CustomPictureClockFrequency::set_cifMPI ()
{
  includeOptionalField( e_cifMPI, 4);
  return *static_cast<cifMPI::pointer>(fields[4]);
}

inline CustomPictureClockFrequency::cifMPI::reference CustomPictureClockFrequency::set_cifMPI (cifMPI::value_type::int_type value)
{
  includeOptionalField( e_cifMPI, 4);
  return *static_cast<cifMPI::pointer>(fields[4]) = value;
}

inline void CustomPictureClockFrequency::omit_cifMPI ()
{ removeOptionalField( e_cifMPI); }

inline bool CustomPictureClockFrequency::cifMPI_isPresent () const
{ return hasOptionalField( e_cifMPI); }

inline CustomPictureClockFrequency::cif4MPI::const_reference CustomPictureClockFrequency::get_cif4MPI () const
{
  assert(hasOptionalField(e_cif4MPI));
  return *static_cast<cif4MPI::const_pointer>(fields[5]);
}

inline CustomPictureClockFrequency::cif4MPI::reference CustomPictureClockFrequency::ref_cif4MPI ()
{
  assert(hasOptionalField(e_cif4MPI));
  return *static_cast<cif4MPI::pointer>(fields[5]);
}

inline CustomPictureClockFrequency::cif4MPI::reference CustomPictureClockFrequency::set_cif4MPI ()
{
  includeOptionalField( e_cif4MPI, 5);
  return *static_cast<cif4MPI::pointer>(fields[5]);
}

inline CustomPictureClockFrequency::cif4MPI::reference CustomPictureClockFrequency::set_cif4MPI (cif4MPI::value_type::int_type value)
{
  includeOptionalField( e_cif4MPI, 5);
  return *static_cast<cif4MPI::pointer>(fields[5]) = value;
}

inline void CustomPictureClockFrequency::omit_cif4MPI ()
{ removeOptionalField( e_cif4MPI); }

inline bool CustomPictureClockFrequency::cif4MPI_isPresent () const
{ return hasOptionalField( e_cif4MPI); }

inline CustomPictureClockFrequency::cif16MPI::const_reference CustomPictureClockFrequency::get_cif16MPI () const
{
  assert(hasOptionalField(e_cif16MPI));
  return *static_cast<cif16MPI::const_pointer>(fields[6]);
}

inline CustomPictureClockFrequency::cif16MPI::reference CustomPictureClockFrequency::ref_cif16MPI ()
{
  assert(hasOptionalField(e_cif16MPI));
  return *static_cast<cif16MPI::pointer>(fields[6]);
}

inline CustomPictureClockFrequency::cif16MPI::reference CustomPictureClockFrequency::set_cif16MPI ()
{
  includeOptionalField( e_cif16MPI, 6);
  return *static_cast<cif16MPI::pointer>(fields[6]);
}

inline CustomPictureClockFrequency::cif16MPI::reference CustomPictureClockFrequency::set_cif16MPI (cif16MPI::value_type::int_type value)
{
  includeOptionalField( e_cif16MPI, 6);
  return *static_cast<cif16MPI::pointer>(fields[6]) = value;
}

inline void CustomPictureClockFrequency::omit_cif16MPI ()
{ removeOptionalField( e_cif16MPI); }

inline bool CustomPictureClockFrequency::cif16MPI_isPresent () const
{ return hasOptionalField( e_cif16MPI); }

inline void CustomPictureClockFrequency::swap(CustomPictureClockFrequency& other)
{ Inherited::swap(other); }

inline CustomPictureClockFrequency* CustomPictureClockFrequency::clone() const
{ return static_cast<CustomPictureClockFrequency*> (Inherited::clone()); }

inline H263Version3Options::dataPartitionedSlices::const_reference H263Version3Options::get_dataPartitionedSlices () const
{ return *static_cast<dataPartitionedSlices::const_pointer>(fields[0]);}

inline H263Version3Options::dataPartitionedSlices::reference H263Version3Options::ref_dataPartitionedSlices ()
{ return *static_cast<dataPartitionedSlices::pointer>(fields[0]);}

inline H263Version3Options::dataPartitionedSlices::reference H263Version3Options::set_dataPartitionedSlices ()
{ return *static_cast<dataPartitionedSlices::pointer>(fields[0]);}

inline H263Version3Options::dataPartitionedSlices::reference H263Version3Options::set_dataPartitionedSlices (bool value)
{ return *static_cast<dataPartitionedSlices::pointer>(fields[0]) = value ;}

inline H263Version3Options::fixedPointIDCT0::const_reference H263Version3Options::get_fixedPointIDCT0 () const
{ return *static_cast<fixedPointIDCT0::const_pointer>(fields[1]);}

inline H263Version3Options::fixedPointIDCT0::reference H263Version3Options::ref_fixedPointIDCT0 ()
{ return *static_cast<fixedPointIDCT0::pointer>(fields[1]);}

inline H263Version3Options::fixedPointIDCT0::reference H263Version3Options::set_fixedPointIDCT0 ()
{ return *static_cast<fixedPointIDCT0::pointer>(fields[1]);}

inline H263Version3Options::fixedPointIDCT0::reference H263Version3Options::set_fixedPointIDCT0 (bool value)
{ return *static_cast<fixedPointIDCT0::pointer>(fields[1]) = value ;}

inline H263Version3Options::interlacedFields::const_reference H263Version3Options::get_interlacedFields () const
{ return *static_cast<interlacedFields::const_pointer>(fields[2]);}

inline H263Version3Options::interlacedFields::reference H263Version3Options::ref_interlacedFields ()
{ return *static_cast<interlacedFields::pointer>(fields[2]);}

inline H263Version3Options::interlacedFields::reference H263Version3Options::set_interlacedFields ()
{ return *static_cast<interlacedFields::pointer>(fields[2]);}

inline H263Version3Options::interlacedFields::reference H263Version3Options::set_interlacedFields (bool value)
{ return *static_cast<interlacedFields::pointer>(fields[2]) = value ;}

inline H263Version3Options::currentPictureHeaderRepetition::const_reference H263Version3Options::get_currentPictureHeaderRepetition () const
{ return *static_cast<currentPictureHeaderRepetition::const_pointer>(fields[3]);}

inline H263Version3Options::currentPictureHeaderRepetition::reference H263Version3Options::ref_currentPictureHeaderRepetition ()
{ return *static_cast<currentPictureHeaderRepetition::pointer>(fields[3]);}

inline H263Version3Options::currentPictureHeaderRepetition::reference H263Version3Options::set_currentPictureHeaderRepetition ()
{ return *static_cast<currentPictureHeaderRepetition::pointer>(fields[3]);}

inline H263Version3Options::currentPictureHeaderRepetition::reference H263Version3Options::set_currentPictureHeaderRepetition (bool value)
{ return *static_cast<currentPictureHeaderRepetition::pointer>(fields[3]) = value ;}

inline H263Version3Options::previousPictureHeaderRepetition::const_reference H263Version3Options::get_previousPictureHeaderRepetition () const
{ return *static_cast<previousPictureHeaderRepetition::const_pointer>(fields[4]);}

inline H263Version3Options::previousPictureHeaderRepetition::reference H263Version3Options::ref_previousPictureHeaderRepetition ()
{ return *static_cast<previousPictureHeaderRepetition::pointer>(fields[4]);}

inline H263Version3Options::previousPictureHeaderRepetition::reference H263Version3Options::set_previousPictureHeaderRepetition ()
{ return *static_cast<previousPictureHeaderRepetition::pointer>(fields[4]);}

inline H263Version3Options::previousPictureHeaderRepetition::reference H263Version3Options::set_previousPictureHeaderRepetition (bool value)
{ return *static_cast<previousPictureHeaderRepetition::pointer>(fields[4]) = value ;}

inline H263Version3Options::nextPictureHeaderRepetition::const_reference H263Version3Options::get_nextPictureHeaderRepetition () const
{ return *static_cast<nextPictureHeaderRepetition::const_pointer>(fields[5]);}

inline H263Version3Options::nextPictureHeaderRepetition::reference H263Version3Options::ref_nextPictureHeaderRepetition ()
{ return *static_cast<nextPictureHeaderRepetition::pointer>(fields[5]);}

inline H263Version3Options::nextPictureHeaderRepetition::reference H263Version3Options::set_nextPictureHeaderRepetition ()
{ return *static_cast<nextPictureHeaderRepetition::pointer>(fields[5]);}

inline H263Version3Options::nextPictureHeaderRepetition::reference H263Version3Options::set_nextPictureHeaderRepetition (bool value)
{ return *static_cast<nextPictureHeaderRepetition::pointer>(fields[5]) = value ;}

inline H263Version3Options::pictureNumber::const_reference H263Version3Options::get_pictureNumber () const
{ return *static_cast<pictureNumber::const_pointer>(fields[6]);}

inline H263Version3Options::pictureNumber::reference H263Version3Options::ref_pictureNumber ()
{ return *static_cast<pictureNumber::pointer>(fields[6]);}

inline H263Version3Options::pictureNumber::reference H263Version3Options::set_pictureNumber ()
{ return *static_cast<pictureNumber::pointer>(fields[6]);}

inline H263Version3Options::pictureNumber::reference H263Version3Options::set_pictureNumber (bool value)
{ return *static_cast<pictureNumber::pointer>(fields[6]) = value ;}

inline H263Version3Options::spareReferencePictures::const_reference H263Version3Options::get_spareReferencePictures () const
{ return *static_cast<spareReferencePictures::const_pointer>(fields[7]);}

inline H263Version3Options::spareReferencePictures::reference H263Version3Options::ref_spareReferencePictures ()
{ return *static_cast<spareReferencePictures::pointer>(fields[7]);}

inline H263Version3Options::spareReferencePictures::reference H263Version3Options::set_spareReferencePictures ()
{ return *static_cast<spareReferencePictures::pointer>(fields[7]);}

inline H263Version3Options::spareReferencePictures::reference H263Version3Options::set_spareReferencePictures (bool value)
{ return *static_cast<spareReferencePictures::pointer>(fields[7]) = value ;}

inline void H263Version3Options::swap(H263Version3Options& other)
{ Inherited::swap(other); }

inline H263Version3Options* H263Version3Options::clone() const
{ return static_cast<H263Version3Options*> (Inherited::clone()); }

inline IS11172VideoCapability::constrainedBitstream::const_reference IS11172VideoCapability::get_constrainedBitstream () const
{ return *static_cast<constrainedBitstream::const_pointer>(fields[0]);}

inline IS11172VideoCapability::constrainedBitstream::reference IS11172VideoCapability::ref_constrainedBitstream ()
{ return *static_cast<constrainedBitstream::pointer>(fields[0]);}

inline IS11172VideoCapability::constrainedBitstream::reference IS11172VideoCapability::set_constrainedBitstream ()
{ return *static_cast<constrainedBitstream::pointer>(fields[0]);}

inline IS11172VideoCapability::constrainedBitstream::reference IS11172VideoCapability::set_constrainedBitstream (bool value)
{ return *static_cast<constrainedBitstream::pointer>(fields[0]) = value ;}

inline IS11172VideoCapability::videoBitRate::const_reference IS11172VideoCapability::get_videoBitRate () const
{
  assert(hasOptionalField(e_videoBitRate));
  return *static_cast<videoBitRate::const_pointer>(fields[1]);
}

inline IS11172VideoCapability::videoBitRate::reference IS11172VideoCapability::ref_videoBitRate ()
{
  assert(hasOptionalField(e_videoBitRate));
  return *static_cast<videoBitRate::pointer>(fields[1]);
}

inline IS11172VideoCapability::videoBitRate::reference IS11172VideoCapability::set_videoBitRate ()
{
  includeOptionalField( e_videoBitRate, 1);
  return *static_cast<videoBitRate::pointer>(fields[1]);
}

inline IS11172VideoCapability::videoBitRate::reference IS11172VideoCapability::set_videoBitRate (videoBitRate::value_type::int_type value)
{
  includeOptionalField( e_videoBitRate, 1);
  return *static_cast<videoBitRate::pointer>(fields[1]) = value;
}

inline void IS11172VideoCapability::omit_videoBitRate ()
{ removeOptionalField( e_videoBitRate); }

inline bool IS11172VideoCapability::videoBitRate_isPresent () const
{ return hasOptionalField( e_videoBitRate); }

inline IS11172VideoCapability::vbvBufferSize::const_reference IS11172VideoCapability::get_vbvBufferSize () const
{
  assert(hasOptionalField(e_vbvBufferSize));
  return *static_cast<vbvBufferSize::const_pointer>(fields[2]);
}

inline IS11172VideoCapability::vbvBufferSize::reference IS11172VideoCapability::ref_vbvBufferSize ()
{
  assert(hasOptionalField(e_vbvBufferSize));
  return *static_cast<vbvBufferSize::pointer>(fields[2]);
}

inline IS11172VideoCapability::vbvBufferSize::reference IS11172VideoCapability::set_vbvBufferSize ()
{
  includeOptionalField( e_vbvBufferSize, 2);
  return *static_cast<vbvBufferSize::pointer>(fields[2]);
}

inline IS11172VideoCapability::vbvBufferSize::reference IS11172VideoCapability::set_vbvBufferSize (vbvBufferSize::value_type::int_type value)
{
  includeOptionalField( e_vbvBufferSize, 2);
  return *static_cast<vbvBufferSize::pointer>(fields[2]) = value;
}

inline void IS11172VideoCapability::omit_vbvBufferSize ()
{ removeOptionalField( e_vbvBufferSize); }

inline bool IS11172VideoCapability::vbvBufferSize_isPresent () const
{ return hasOptionalField( e_vbvBufferSize); }

inline IS11172VideoCapability::samplesPerLine::const_reference IS11172VideoCapability::get_samplesPerLine () const
{
  assert(hasOptionalField(e_samplesPerLine));
  return *static_cast<samplesPerLine::const_pointer>(fields[3]);
}

inline IS11172VideoCapability::samplesPerLine::reference IS11172VideoCapability::ref_samplesPerLine ()
{
  assert(hasOptionalField(e_samplesPerLine));
  return *static_cast<samplesPerLine::pointer>(fields[3]);
}

inline IS11172VideoCapability::samplesPerLine::reference IS11172VideoCapability::set_samplesPerLine ()
{
  includeOptionalField( e_samplesPerLine, 3);
  return *static_cast<samplesPerLine::pointer>(fields[3]);
}

inline IS11172VideoCapability::samplesPerLine::reference IS11172VideoCapability::set_samplesPerLine (samplesPerLine::value_type::int_type value)
{
  includeOptionalField( e_samplesPerLine, 3);
  return *static_cast<samplesPerLine::pointer>(fields[3]) = value;
}

inline void IS11172VideoCapability::omit_samplesPerLine ()
{ removeOptionalField( e_samplesPerLine); }

inline bool IS11172VideoCapability::samplesPerLine_isPresent () const
{ return hasOptionalField( e_samplesPerLine); }

inline IS11172VideoCapability::linesPerFrame::const_reference IS11172VideoCapability::get_linesPerFrame () const
{
  assert(hasOptionalField(e_linesPerFrame));
  return *static_cast<linesPerFrame::const_pointer>(fields[4]);
}

inline IS11172VideoCapability::linesPerFrame::reference IS11172VideoCapability::ref_linesPerFrame ()
{
  assert(hasOptionalField(e_linesPerFrame));
  return *static_cast<linesPerFrame::pointer>(fields[4]);
}

inline IS11172VideoCapability::linesPerFrame::reference IS11172VideoCapability::set_linesPerFrame ()
{
  includeOptionalField( e_linesPerFrame, 4);
  return *static_cast<linesPerFrame::pointer>(fields[4]);
}

inline IS11172VideoCapability::linesPerFrame::reference IS11172VideoCapability::set_linesPerFrame (linesPerFrame::value_type::int_type value)
{
  includeOptionalField( e_linesPerFrame, 4);
  return *static_cast<linesPerFrame::pointer>(fields[4]) = value;
}

inline void IS11172VideoCapability::omit_linesPerFrame ()
{ removeOptionalField( e_linesPerFrame); }

inline bool IS11172VideoCapability::linesPerFrame_isPresent () const
{ return hasOptionalField( e_linesPerFrame); }

inline IS11172VideoCapability::pictureRate::const_reference IS11172VideoCapability::get_pictureRate () const
{
  assert(hasOptionalField(e_pictureRate));
  return *static_cast<pictureRate::const_pointer>(fields[5]);
}

inline IS11172VideoCapability::pictureRate::reference IS11172VideoCapability::ref_pictureRate ()
{
  assert(hasOptionalField(e_pictureRate));
  return *static_cast<pictureRate::pointer>(fields[5]);
}

inline IS11172VideoCapability::pictureRate::reference IS11172VideoCapability::set_pictureRate ()
{
  includeOptionalField( e_pictureRate, 5);
  return *static_cast<pictureRate::pointer>(fields[5]);
}

inline IS11172VideoCapability::pictureRate::reference IS11172VideoCapability::set_pictureRate (pictureRate::value_type::int_type value)
{
  includeOptionalField( e_pictureRate, 5);
  return *static_cast<pictureRate::pointer>(fields[5]) = value;
}

inline void IS11172VideoCapability::omit_pictureRate ()
{ removeOptionalField( e_pictureRate); }

inline bool IS11172VideoCapability::pictureRate_isPresent () const
{ return hasOptionalField( e_pictureRate); }

inline IS11172VideoCapability::luminanceSampleRate::const_reference IS11172VideoCapability::get_luminanceSampleRate () const
{
  assert(hasOptionalField(e_luminanceSampleRate));
  return *static_cast<luminanceSampleRate::const_pointer>(fields[6]);
}

inline IS11172VideoCapability::luminanceSampleRate::reference IS11172VideoCapability::ref_luminanceSampleRate ()
{
  assert(hasOptionalField(e_luminanceSampleRate));
  return *static_cast<luminanceSampleRate::pointer>(fields[6]);
}

inline IS11172VideoCapability::luminanceSampleRate::reference IS11172VideoCapability::set_luminanceSampleRate ()
{
  includeOptionalField( e_luminanceSampleRate, 6);
  return *static_cast<luminanceSampleRate::pointer>(fields[6]);
}

inline IS11172VideoCapability::luminanceSampleRate::reference IS11172VideoCapability::set_luminanceSampleRate (luminanceSampleRate::value_type::int_type value)
{
  includeOptionalField( e_luminanceSampleRate, 6);
  return *static_cast<luminanceSampleRate::pointer>(fields[6]) = value;
}

inline void IS11172VideoCapability::omit_luminanceSampleRate ()
{ removeOptionalField( e_luminanceSampleRate); }

inline bool IS11172VideoCapability::luminanceSampleRate_isPresent () const
{ return hasOptionalField( e_luminanceSampleRate); }

inline IS11172VideoCapability::videoBadMBsCap::const_reference IS11172VideoCapability::get_videoBadMBsCap () const
{
  assert(hasOptionalField(e_videoBadMBsCap));
  return *static_cast<videoBadMBsCap::const_pointer>(fields[7]);
}

inline IS11172VideoCapability::videoBadMBsCap::reference IS11172VideoCapability::ref_videoBadMBsCap ()
{
  assert(hasOptionalField(e_videoBadMBsCap));
  return *static_cast<videoBadMBsCap::pointer>(fields[7]);
}

inline IS11172VideoCapability::videoBadMBsCap::reference IS11172VideoCapability::set_videoBadMBsCap ()
{
  includeOptionalField( e_videoBadMBsCap, 7);
  return *static_cast<videoBadMBsCap::pointer>(fields[7]);
}

inline IS11172VideoCapability::videoBadMBsCap::reference IS11172VideoCapability::set_videoBadMBsCap (bool value)
{
  includeOptionalField( e_videoBadMBsCap, 7);
  return *static_cast<videoBadMBsCap::pointer>(fields[7]) = value;
}

inline void IS11172VideoCapability::omit_videoBadMBsCap ()
{ removeOptionalField( e_videoBadMBsCap); }

inline bool IS11172VideoCapability::videoBadMBsCap_isPresent () const
{ return hasOptionalField( e_videoBadMBsCap); }

inline void IS11172VideoCapability::swap(IS11172VideoCapability& other)
{ Inherited::swap(other); }

inline IS11172VideoCapability* IS11172VideoCapability::clone() const
{ return static_cast<IS11172VideoCapability*> (Inherited::clone()); }

inline G729Extensions::audioUnit::const_reference G729Extensions::get_audioUnit () const
{
  assert(hasOptionalField(e_audioUnit));
  return *static_cast<audioUnit::const_pointer>(fields[0]);
}

inline G729Extensions::audioUnit::reference G729Extensions::ref_audioUnit ()
{
  assert(hasOptionalField(e_audioUnit));
  return *static_cast<audioUnit::pointer>(fields[0]);
}

inline G729Extensions::audioUnit::reference G729Extensions::set_audioUnit ()
{
  includeOptionalField( e_audioUnit, 0);
  return *static_cast<audioUnit::pointer>(fields[0]);
}

inline G729Extensions::audioUnit::reference G729Extensions::set_audioUnit (audioUnit::value_type::int_type value)
{
  includeOptionalField( e_audioUnit, 0);
  return *static_cast<audioUnit::pointer>(fields[0]) = value;
}

inline void G729Extensions::omit_audioUnit ()
{ removeOptionalField( e_audioUnit); }

inline bool G729Extensions::audioUnit_isPresent () const
{ return hasOptionalField( e_audioUnit); }

inline G729Extensions::annexA::const_reference G729Extensions::get_annexA () const
{ return *static_cast<annexA::const_pointer>(fields[1]);}

inline G729Extensions::annexA::reference G729Extensions::ref_annexA ()
{ return *static_cast<annexA::pointer>(fields[1]);}

inline G729Extensions::annexA::reference G729Extensions::set_annexA ()
{ return *static_cast<annexA::pointer>(fields[1]);}

inline G729Extensions::annexA::reference G729Extensions::set_annexA (bool value)
{ return *static_cast<annexA::pointer>(fields[1]) = value ;}

inline G729Extensions::annexB::const_reference G729Extensions::get_annexB () const
{ return *static_cast<annexB::const_pointer>(fields[2]);}

inline G729Extensions::annexB::reference G729Extensions::ref_annexB ()
{ return *static_cast<annexB::pointer>(fields[2]);}

inline G729Extensions::annexB::reference G729Extensions::set_annexB ()
{ return *static_cast<annexB::pointer>(fields[2]);}

inline G729Extensions::annexB::reference G729Extensions::set_annexB (bool value)
{ return *static_cast<annexB::pointer>(fields[2]) = value ;}

inline G729Extensions::annexD::const_reference G729Extensions::get_annexD () const
{ return *static_cast<annexD::const_pointer>(fields[3]);}

inline G729Extensions::annexD::reference G729Extensions::ref_annexD ()
{ return *static_cast<annexD::pointer>(fields[3]);}

inline G729Extensions::annexD::reference G729Extensions::set_annexD ()
{ return *static_cast<annexD::pointer>(fields[3]);}

inline G729Extensions::annexD::reference G729Extensions::set_annexD (bool value)
{ return *static_cast<annexD::pointer>(fields[3]) = value ;}

inline G729Extensions::annexE::const_reference G729Extensions::get_annexE () const
{ return *static_cast<annexE::const_pointer>(fields[4]);}

inline G729Extensions::annexE::reference G729Extensions::ref_annexE ()
{ return *static_cast<annexE::pointer>(fields[4]);}

inline G729Extensions::annexE::reference G729Extensions::set_annexE ()
{ return *static_cast<annexE::pointer>(fields[4]);}

inline G729Extensions::annexE::reference G729Extensions::set_annexE (bool value)
{ return *static_cast<annexE::pointer>(fields[4]) = value ;}

inline G729Extensions::annexF::const_reference G729Extensions::get_annexF () const
{ return *static_cast<annexF::const_pointer>(fields[5]);}

inline G729Extensions::annexF::reference G729Extensions::ref_annexF ()
{ return *static_cast<annexF::pointer>(fields[5]);}

inline G729Extensions::annexF::reference G729Extensions::set_annexF ()
{ return *static_cast<annexF::pointer>(fields[5]);}

inline G729Extensions::annexF::reference G729Extensions::set_annexF (bool value)
{ return *static_cast<annexF::pointer>(fields[5]) = value ;}

inline G729Extensions::annexG::const_reference G729Extensions::get_annexG () const
{ return *static_cast<annexG::const_pointer>(fields[6]);}

inline G729Extensions::annexG::reference G729Extensions::ref_annexG ()
{ return *static_cast<annexG::pointer>(fields[6]);}

inline G729Extensions::annexG::reference G729Extensions::set_annexG ()
{ return *static_cast<annexG::pointer>(fields[6]);}

inline G729Extensions::annexG::reference G729Extensions::set_annexG (bool value)
{ return *static_cast<annexG::pointer>(fields[6]) = value ;}

inline G729Extensions::annexH::const_reference G729Extensions::get_annexH () const
{ return *static_cast<annexH::const_pointer>(fields[7]);}

inline G729Extensions::annexH::reference G729Extensions::ref_annexH ()
{ return *static_cast<annexH::pointer>(fields[7]);}

inline G729Extensions::annexH::reference G729Extensions::set_annexH ()
{ return *static_cast<annexH::pointer>(fields[7]);}

inline G729Extensions::annexH::reference G729Extensions::set_annexH (bool value)
{ return *static_cast<annexH::pointer>(fields[7]) = value ;}

inline void G729Extensions::swap(G729Extensions& other)
{ Inherited::swap(other); }

inline G729Extensions* G729Extensions::clone() const
{ return static_cast<G729Extensions*> (Inherited::clone()); }

inline IS11172AudioCapability::audioLayer1::const_reference IS11172AudioCapability::get_audioLayer1 () const
{ return *static_cast<audioLayer1::const_pointer>(fields[0]);}

inline IS11172AudioCapability::audioLayer1::reference IS11172AudioCapability::ref_audioLayer1 ()
{ return *static_cast<audioLayer1::pointer>(fields[0]);}

inline IS11172AudioCapability::audioLayer1::reference IS11172AudioCapability::set_audioLayer1 ()
{ return *static_cast<audioLayer1::pointer>(fields[0]);}

inline IS11172AudioCapability::audioLayer1::reference IS11172AudioCapability::set_audioLayer1 (bool value)
{ return *static_cast<audioLayer1::pointer>(fields[0]) = value ;}

inline IS11172AudioCapability::audioLayer2::const_reference IS11172AudioCapability::get_audioLayer2 () const
{ return *static_cast<audioLayer2::const_pointer>(fields[1]);}

inline IS11172AudioCapability::audioLayer2::reference IS11172AudioCapability::ref_audioLayer2 ()
{ return *static_cast<audioLayer2::pointer>(fields[1]);}

inline IS11172AudioCapability::audioLayer2::reference IS11172AudioCapability::set_audioLayer2 ()
{ return *static_cast<audioLayer2::pointer>(fields[1]);}

inline IS11172AudioCapability::audioLayer2::reference IS11172AudioCapability::set_audioLayer2 (bool value)
{ return *static_cast<audioLayer2::pointer>(fields[1]) = value ;}

inline IS11172AudioCapability::audioLayer3::const_reference IS11172AudioCapability::get_audioLayer3 () const
{ return *static_cast<audioLayer3::const_pointer>(fields[2]);}

inline IS11172AudioCapability::audioLayer3::reference IS11172AudioCapability::ref_audioLayer3 ()
{ return *static_cast<audioLayer3::pointer>(fields[2]);}

inline IS11172AudioCapability::audioLayer3::reference IS11172AudioCapability::set_audioLayer3 ()
{ return *static_cast<audioLayer3::pointer>(fields[2]);}

inline IS11172AudioCapability::audioLayer3::reference IS11172AudioCapability::set_audioLayer3 (bool value)
{ return *static_cast<audioLayer3::pointer>(fields[2]) = value ;}

inline IS11172AudioCapability::audioSampling32k::const_reference IS11172AudioCapability::get_audioSampling32k () const
{ return *static_cast<audioSampling32k::const_pointer>(fields[3]);}

inline IS11172AudioCapability::audioSampling32k::reference IS11172AudioCapability::ref_audioSampling32k ()
{ return *static_cast<audioSampling32k::pointer>(fields[3]);}

inline IS11172AudioCapability::audioSampling32k::reference IS11172AudioCapability::set_audioSampling32k ()
{ return *static_cast<audioSampling32k::pointer>(fields[3]);}

inline IS11172AudioCapability::audioSampling32k::reference IS11172AudioCapability::set_audioSampling32k (bool value)
{ return *static_cast<audioSampling32k::pointer>(fields[3]) = value ;}

inline IS11172AudioCapability::audioSampling44k1::const_reference IS11172AudioCapability::get_audioSampling44k1 () const
{ return *static_cast<audioSampling44k1::const_pointer>(fields[4]);}

inline IS11172AudioCapability::audioSampling44k1::reference IS11172AudioCapability::ref_audioSampling44k1 ()
{ return *static_cast<audioSampling44k1::pointer>(fields[4]);}

inline IS11172AudioCapability::audioSampling44k1::reference IS11172AudioCapability::set_audioSampling44k1 ()
{ return *static_cast<audioSampling44k1::pointer>(fields[4]);}

inline IS11172AudioCapability::audioSampling44k1::reference IS11172AudioCapability::set_audioSampling44k1 (bool value)
{ return *static_cast<audioSampling44k1::pointer>(fields[4]) = value ;}

inline IS11172AudioCapability::audioSampling48k::const_reference IS11172AudioCapability::get_audioSampling48k () const
{ return *static_cast<audioSampling48k::const_pointer>(fields[5]);}

inline IS11172AudioCapability::audioSampling48k::reference IS11172AudioCapability::ref_audioSampling48k ()
{ return *static_cast<audioSampling48k::pointer>(fields[5]);}

inline IS11172AudioCapability::audioSampling48k::reference IS11172AudioCapability::set_audioSampling48k ()
{ return *static_cast<audioSampling48k::pointer>(fields[5]);}

inline IS11172AudioCapability::audioSampling48k::reference IS11172AudioCapability::set_audioSampling48k (bool value)
{ return *static_cast<audioSampling48k::pointer>(fields[5]) = value ;}

inline IS11172AudioCapability::singleChannel::const_reference IS11172AudioCapability::get_singleChannel () const
{ return *static_cast<singleChannel::const_pointer>(fields[6]);}

inline IS11172AudioCapability::singleChannel::reference IS11172AudioCapability::ref_singleChannel ()
{ return *static_cast<singleChannel::pointer>(fields[6]);}

inline IS11172AudioCapability::singleChannel::reference IS11172AudioCapability::set_singleChannel ()
{ return *static_cast<singleChannel::pointer>(fields[6]);}

inline IS11172AudioCapability::singleChannel::reference IS11172AudioCapability::set_singleChannel (bool value)
{ return *static_cast<singleChannel::pointer>(fields[6]) = value ;}

inline IS11172AudioCapability::twoChannels::const_reference IS11172AudioCapability::get_twoChannels () const
{ return *static_cast<twoChannels::const_pointer>(fields[7]);}

inline IS11172AudioCapability::twoChannels::reference IS11172AudioCapability::ref_twoChannels ()
{ return *static_cast<twoChannels::pointer>(fields[7]);}

inline IS11172AudioCapability::twoChannels::reference IS11172AudioCapability::set_twoChannels ()
{ return *static_cast<twoChannels::pointer>(fields[7]);}

inline IS11172AudioCapability::twoChannels::reference IS11172AudioCapability::set_twoChannels (bool value)
{ return *static_cast<twoChannels::pointer>(fields[7]) = value ;}

inline IS11172AudioCapability::bitRate::const_reference IS11172AudioCapability::get_bitRate () const
{ return *static_cast<bitRate::const_pointer>(fields[8]);}

inline IS11172AudioCapability::bitRate::reference IS11172AudioCapability::ref_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[8]);}

inline IS11172AudioCapability::bitRate::reference IS11172AudioCapability::set_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[8]);}

inline IS11172AudioCapability::bitRate::reference IS11172AudioCapability::set_bitRate (bitRate::value_type::int_type value)
{ return *static_cast<bitRate::pointer>(fields[8]) = value ;}

inline void IS11172AudioCapability::swap(IS11172AudioCapability& other)
{ Inherited::swap(other); }

inline IS11172AudioCapability* IS11172AudioCapability::clone() const
{ return static_cast<IS11172AudioCapability*> (Inherited::clone()); }

inline IS13818AudioCapability::audioLayer1::const_reference IS13818AudioCapability::get_audioLayer1 () const
{ return *static_cast<audioLayer1::const_pointer>(fields[0]);}

inline IS13818AudioCapability::audioLayer1::reference IS13818AudioCapability::ref_audioLayer1 ()
{ return *static_cast<audioLayer1::pointer>(fields[0]);}

inline IS13818AudioCapability::audioLayer1::reference IS13818AudioCapability::set_audioLayer1 ()
{ return *static_cast<audioLayer1::pointer>(fields[0]);}

inline IS13818AudioCapability::audioLayer1::reference IS13818AudioCapability::set_audioLayer1 (bool value)
{ return *static_cast<audioLayer1::pointer>(fields[0]) = value ;}

inline IS13818AudioCapability::audioLayer2::const_reference IS13818AudioCapability::get_audioLayer2 () const
{ return *static_cast<audioLayer2::const_pointer>(fields[1]);}

inline IS13818AudioCapability::audioLayer2::reference IS13818AudioCapability::ref_audioLayer2 ()
{ return *static_cast<audioLayer2::pointer>(fields[1]);}

inline IS13818AudioCapability::audioLayer2::reference IS13818AudioCapability::set_audioLayer2 ()
{ return *static_cast<audioLayer2::pointer>(fields[1]);}

inline IS13818AudioCapability::audioLayer2::reference IS13818AudioCapability::set_audioLayer2 (bool value)
{ return *static_cast<audioLayer2::pointer>(fields[1]) = value ;}

inline IS13818AudioCapability::audioLayer3::const_reference IS13818AudioCapability::get_audioLayer3 () const
{ return *static_cast<audioLayer3::const_pointer>(fields[2]);}

inline IS13818AudioCapability::audioLayer3::reference IS13818AudioCapability::ref_audioLayer3 ()
{ return *static_cast<audioLayer3::pointer>(fields[2]);}

inline IS13818AudioCapability::audioLayer3::reference IS13818AudioCapability::set_audioLayer3 ()
{ return *static_cast<audioLayer3::pointer>(fields[2]);}

inline IS13818AudioCapability::audioLayer3::reference IS13818AudioCapability::set_audioLayer3 (bool value)
{ return *static_cast<audioLayer3::pointer>(fields[2]) = value ;}

inline IS13818AudioCapability::audioSampling16k::const_reference IS13818AudioCapability::get_audioSampling16k () const
{ return *static_cast<audioSampling16k::const_pointer>(fields[3]);}

inline IS13818AudioCapability::audioSampling16k::reference IS13818AudioCapability::ref_audioSampling16k ()
{ return *static_cast<audioSampling16k::pointer>(fields[3]);}

inline IS13818AudioCapability::audioSampling16k::reference IS13818AudioCapability::set_audioSampling16k ()
{ return *static_cast<audioSampling16k::pointer>(fields[3]);}

inline IS13818AudioCapability::audioSampling16k::reference IS13818AudioCapability::set_audioSampling16k (bool value)
{ return *static_cast<audioSampling16k::pointer>(fields[3]) = value ;}

inline IS13818AudioCapability::audioSampling22k05::const_reference IS13818AudioCapability::get_audioSampling22k05 () const
{ return *static_cast<audioSampling22k05::const_pointer>(fields[4]);}

inline IS13818AudioCapability::audioSampling22k05::reference IS13818AudioCapability::ref_audioSampling22k05 ()
{ return *static_cast<audioSampling22k05::pointer>(fields[4]);}

inline IS13818AudioCapability::audioSampling22k05::reference IS13818AudioCapability::set_audioSampling22k05 ()
{ return *static_cast<audioSampling22k05::pointer>(fields[4]);}

inline IS13818AudioCapability::audioSampling22k05::reference IS13818AudioCapability::set_audioSampling22k05 (bool value)
{ return *static_cast<audioSampling22k05::pointer>(fields[4]) = value ;}

inline IS13818AudioCapability::audioSampling24k::const_reference IS13818AudioCapability::get_audioSampling24k () const
{ return *static_cast<audioSampling24k::const_pointer>(fields[5]);}

inline IS13818AudioCapability::audioSampling24k::reference IS13818AudioCapability::ref_audioSampling24k ()
{ return *static_cast<audioSampling24k::pointer>(fields[5]);}

inline IS13818AudioCapability::audioSampling24k::reference IS13818AudioCapability::set_audioSampling24k ()
{ return *static_cast<audioSampling24k::pointer>(fields[5]);}

inline IS13818AudioCapability::audioSampling24k::reference IS13818AudioCapability::set_audioSampling24k (bool value)
{ return *static_cast<audioSampling24k::pointer>(fields[5]) = value ;}

inline IS13818AudioCapability::audioSampling32k::const_reference IS13818AudioCapability::get_audioSampling32k () const
{ return *static_cast<audioSampling32k::const_pointer>(fields[6]);}

inline IS13818AudioCapability::audioSampling32k::reference IS13818AudioCapability::ref_audioSampling32k ()
{ return *static_cast<audioSampling32k::pointer>(fields[6]);}

inline IS13818AudioCapability::audioSampling32k::reference IS13818AudioCapability::set_audioSampling32k ()
{ return *static_cast<audioSampling32k::pointer>(fields[6]);}

inline IS13818AudioCapability::audioSampling32k::reference IS13818AudioCapability::set_audioSampling32k (bool value)
{ return *static_cast<audioSampling32k::pointer>(fields[6]) = value ;}

inline IS13818AudioCapability::audioSampling44k1::const_reference IS13818AudioCapability::get_audioSampling44k1 () const
{ return *static_cast<audioSampling44k1::const_pointer>(fields[7]);}

inline IS13818AudioCapability::audioSampling44k1::reference IS13818AudioCapability::ref_audioSampling44k1 ()
{ return *static_cast<audioSampling44k1::pointer>(fields[7]);}

inline IS13818AudioCapability::audioSampling44k1::reference IS13818AudioCapability::set_audioSampling44k1 ()
{ return *static_cast<audioSampling44k1::pointer>(fields[7]);}

inline IS13818AudioCapability::audioSampling44k1::reference IS13818AudioCapability::set_audioSampling44k1 (bool value)
{ return *static_cast<audioSampling44k1::pointer>(fields[7]) = value ;}

inline IS13818AudioCapability::audioSampling48k::const_reference IS13818AudioCapability::get_audioSampling48k () const
{ return *static_cast<audioSampling48k::const_pointer>(fields[8]);}

inline IS13818AudioCapability::audioSampling48k::reference IS13818AudioCapability::ref_audioSampling48k ()
{ return *static_cast<audioSampling48k::pointer>(fields[8]);}

inline IS13818AudioCapability::audioSampling48k::reference IS13818AudioCapability::set_audioSampling48k ()
{ return *static_cast<audioSampling48k::pointer>(fields[8]);}

inline IS13818AudioCapability::audioSampling48k::reference IS13818AudioCapability::set_audioSampling48k (bool value)
{ return *static_cast<audioSampling48k::pointer>(fields[8]) = value ;}

inline IS13818AudioCapability::singleChannel::const_reference IS13818AudioCapability::get_singleChannel () const
{ return *static_cast<singleChannel::const_pointer>(fields[9]);}

inline IS13818AudioCapability::singleChannel::reference IS13818AudioCapability::ref_singleChannel ()
{ return *static_cast<singleChannel::pointer>(fields[9]);}

inline IS13818AudioCapability::singleChannel::reference IS13818AudioCapability::set_singleChannel ()
{ return *static_cast<singleChannel::pointer>(fields[9]);}

inline IS13818AudioCapability::singleChannel::reference IS13818AudioCapability::set_singleChannel (bool value)
{ return *static_cast<singleChannel::pointer>(fields[9]) = value ;}

inline IS13818AudioCapability::twoChannels::const_reference IS13818AudioCapability::get_twoChannels () const
{ return *static_cast<twoChannels::const_pointer>(fields[10]);}

inline IS13818AudioCapability::twoChannels::reference IS13818AudioCapability::ref_twoChannels ()
{ return *static_cast<twoChannels::pointer>(fields[10]);}

inline IS13818AudioCapability::twoChannels::reference IS13818AudioCapability::set_twoChannels ()
{ return *static_cast<twoChannels::pointer>(fields[10]);}

inline IS13818AudioCapability::twoChannels::reference IS13818AudioCapability::set_twoChannels (bool value)
{ return *static_cast<twoChannels::pointer>(fields[10]) = value ;}

inline IS13818AudioCapability::threeChannels2_1::const_reference IS13818AudioCapability::get_threeChannels2_1 () const
{ return *static_cast<threeChannels2_1::const_pointer>(fields[11]);}

inline IS13818AudioCapability::threeChannels2_1::reference IS13818AudioCapability::ref_threeChannels2_1 ()
{ return *static_cast<threeChannels2_1::pointer>(fields[11]);}

inline IS13818AudioCapability::threeChannels2_1::reference IS13818AudioCapability::set_threeChannels2_1 ()
{ return *static_cast<threeChannels2_1::pointer>(fields[11]);}

inline IS13818AudioCapability::threeChannels2_1::reference IS13818AudioCapability::set_threeChannels2_1 (bool value)
{ return *static_cast<threeChannels2_1::pointer>(fields[11]) = value ;}

inline IS13818AudioCapability::threeChannels3_0::const_reference IS13818AudioCapability::get_threeChannels3_0 () const
{ return *static_cast<threeChannels3_0::const_pointer>(fields[12]);}

inline IS13818AudioCapability::threeChannels3_0::reference IS13818AudioCapability::ref_threeChannels3_0 ()
{ return *static_cast<threeChannels3_0::pointer>(fields[12]);}

inline IS13818AudioCapability::threeChannels3_0::reference IS13818AudioCapability::set_threeChannels3_0 ()
{ return *static_cast<threeChannels3_0::pointer>(fields[12]);}

inline IS13818AudioCapability::threeChannels3_0::reference IS13818AudioCapability::set_threeChannels3_0 (bool value)
{ return *static_cast<threeChannels3_0::pointer>(fields[12]) = value ;}

inline IS13818AudioCapability::fourChannels2_0_2_0::const_reference IS13818AudioCapability::get_fourChannels2_0_2_0 () const
{ return *static_cast<fourChannels2_0_2_0::const_pointer>(fields[13]);}

inline IS13818AudioCapability::fourChannels2_0_2_0::reference IS13818AudioCapability::ref_fourChannels2_0_2_0 ()
{ return *static_cast<fourChannels2_0_2_0::pointer>(fields[13]);}

inline IS13818AudioCapability::fourChannels2_0_2_0::reference IS13818AudioCapability::set_fourChannels2_0_2_0 ()
{ return *static_cast<fourChannels2_0_2_0::pointer>(fields[13]);}

inline IS13818AudioCapability::fourChannels2_0_2_0::reference IS13818AudioCapability::set_fourChannels2_0_2_0 (bool value)
{ return *static_cast<fourChannels2_0_2_0::pointer>(fields[13]) = value ;}

inline IS13818AudioCapability::fourChannels2_2::const_reference IS13818AudioCapability::get_fourChannels2_2 () const
{ return *static_cast<fourChannels2_2::const_pointer>(fields[14]);}

inline IS13818AudioCapability::fourChannels2_2::reference IS13818AudioCapability::ref_fourChannels2_2 ()
{ return *static_cast<fourChannels2_2::pointer>(fields[14]);}

inline IS13818AudioCapability::fourChannels2_2::reference IS13818AudioCapability::set_fourChannels2_2 ()
{ return *static_cast<fourChannels2_2::pointer>(fields[14]);}

inline IS13818AudioCapability::fourChannels2_2::reference IS13818AudioCapability::set_fourChannels2_2 (bool value)
{ return *static_cast<fourChannels2_2::pointer>(fields[14]) = value ;}

inline IS13818AudioCapability::fourChannels3_1::const_reference IS13818AudioCapability::get_fourChannels3_1 () const
{ return *static_cast<fourChannels3_1::const_pointer>(fields[15]);}

inline IS13818AudioCapability::fourChannels3_1::reference IS13818AudioCapability::ref_fourChannels3_1 ()
{ return *static_cast<fourChannels3_1::pointer>(fields[15]);}

inline IS13818AudioCapability::fourChannels3_1::reference IS13818AudioCapability::set_fourChannels3_1 ()
{ return *static_cast<fourChannels3_1::pointer>(fields[15]);}

inline IS13818AudioCapability::fourChannels3_1::reference IS13818AudioCapability::set_fourChannels3_1 (bool value)
{ return *static_cast<fourChannels3_1::pointer>(fields[15]) = value ;}

inline IS13818AudioCapability::fiveChannels3_0_2_0::const_reference IS13818AudioCapability::get_fiveChannels3_0_2_0 () const
{ return *static_cast<fiveChannels3_0_2_0::const_pointer>(fields[16]);}

inline IS13818AudioCapability::fiveChannels3_0_2_0::reference IS13818AudioCapability::ref_fiveChannels3_0_2_0 ()
{ return *static_cast<fiveChannels3_0_2_0::pointer>(fields[16]);}

inline IS13818AudioCapability::fiveChannels3_0_2_0::reference IS13818AudioCapability::set_fiveChannels3_0_2_0 ()
{ return *static_cast<fiveChannels3_0_2_0::pointer>(fields[16]);}

inline IS13818AudioCapability::fiveChannels3_0_2_0::reference IS13818AudioCapability::set_fiveChannels3_0_2_0 (bool value)
{ return *static_cast<fiveChannels3_0_2_0::pointer>(fields[16]) = value ;}

inline IS13818AudioCapability::fiveChannels3_2::const_reference IS13818AudioCapability::get_fiveChannels3_2 () const
{ return *static_cast<fiveChannels3_2::const_pointer>(fields[17]);}

inline IS13818AudioCapability::fiveChannels3_2::reference IS13818AudioCapability::ref_fiveChannels3_2 ()
{ return *static_cast<fiveChannels3_2::pointer>(fields[17]);}

inline IS13818AudioCapability::fiveChannels3_2::reference IS13818AudioCapability::set_fiveChannels3_2 ()
{ return *static_cast<fiveChannels3_2::pointer>(fields[17]);}

inline IS13818AudioCapability::fiveChannels3_2::reference IS13818AudioCapability::set_fiveChannels3_2 (bool value)
{ return *static_cast<fiveChannels3_2::pointer>(fields[17]) = value ;}

inline IS13818AudioCapability::lowFrequencyEnhancement::const_reference IS13818AudioCapability::get_lowFrequencyEnhancement () const
{ return *static_cast<lowFrequencyEnhancement::const_pointer>(fields[18]);}

inline IS13818AudioCapability::lowFrequencyEnhancement::reference IS13818AudioCapability::ref_lowFrequencyEnhancement ()
{ return *static_cast<lowFrequencyEnhancement::pointer>(fields[18]);}

inline IS13818AudioCapability::lowFrequencyEnhancement::reference IS13818AudioCapability::set_lowFrequencyEnhancement ()
{ return *static_cast<lowFrequencyEnhancement::pointer>(fields[18]);}

inline IS13818AudioCapability::lowFrequencyEnhancement::reference IS13818AudioCapability::set_lowFrequencyEnhancement (bool value)
{ return *static_cast<lowFrequencyEnhancement::pointer>(fields[18]) = value ;}

inline IS13818AudioCapability::multilingual::const_reference IS13818AudioCapability::get_multilingual () const
{ return *static_cast<multilingual::const_pointer>(fields[19]);}

inline IS13818AudioCapability::multilingual::reference IS13818AudioCapability::ref_multilingual ()
{ return *static_cast<multilingual::pointer>(fields[19]);}

inline IS13818AudioCapability::multilingual::reference IS13818AudioCapability::set_multilingual ()
{ return *static_cast<multilingual::pointer>(fields[19]);}

inline IS13818AudioCapability::multilingual::reference IS13818AudioCapability::set_multilingual (bool value)
{ return *static_cast<multilingual::pointer>(fields[19]) = value ;}

inline IS13818AudioCapability::bitRate::const_reference IS13818AudioCapability::get_bitRate () const
{ return *static_cast<bitRate::const_pointer>(fields[20]);}

inline IS13818AudioCapability::bitRate::reference IS13818AudioCapability::ref_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[20]);}

inline IS13818AudioCapability::bitRate::reference IS13818AudioCapability::set_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[20]);}

inline IS13818AudioCapability::bitRate::reference IS13818AudioCapability::set_bitRate (bitRate::value_type::int_type value)
{ return *static_cast<bitRate::pointer>(fields[20]) = value ;}

inline void IS13818AudioCapability::swap(IS13818AudioCapability& other)
{ Inherited::swap(other); }

inline IS13818AudioCapability* IS13818AudioCapability::clone() const
{ return static_cast<IS13818AudioCapability*> (Inherited::clone()); }

inline GSMAudioCapability::audioUnitSize::const_reference GSMAudioCapability::get_audioUnitSize () const
{ return *static_cast<audioUnitSize::const_pointer>(fields[0]);}

inline GSMAudioCapability::audioUnitSize::reference GSMAudioCapability::ref_audioUnitSize ()
{ return *static_cast<audioUnitSize::pointer>(fields[0]);}

inline GSMAudioCapability::audioUnitSize::reference GSMAudioCapability::set_audioUnitSize ()
{ return *static_cast<audioUnitSize::pointer>(fields[0]);}

inline GSMAudioCapability::audioUnitSize::reference GSMAudioCapability::set_audioUnitSize (audioUnitSize::value_type::int_type value)
{ return *static_cast<audioUnitSize::pointer>(fields[0]) = value ;}

inline GSMAudioCapability::comfortNoise::const_reference GSMAudioCapability::get_comfortNoise () const
{ return *static_cast<comfortNoise::const_pointer>(fields[1]);}

inline GSMAudioCapability::comfortNoise::reference GSMAudioCapability::ref_comfortNoise ()
{ return *static_cast<comfortNoise::pointer>(fields[1]);}

inline GSMAudioCapability::comfortNoise::reference GSMAudioCapability::set_comfortNoise ()
{ return *static_cast<comfortNoise::pointer>(fields[1]);}

inline GSMAudioCapability::comfortNoise::reference GSMAudioCapability::set_comfortNoise (bool value)
{ return *static_cast<comfortNoise::pointer>(fields[1]) = value ;}

inline GSMAudioCapability::scrambled::const_reference GSMAudioCapability::get_scrambled () const
{ return *static_cast<scrambled::const_pointer>(fields[2]);}

inline GSMAudioCapability::scrambled::reference GSMAudioCapability::ref_scrambled ()
{ return *static_cast<scrambled::pointer>(fields[2]);}

inline GSMAudioCapability::scrambled::reference GSMAudioCapability::set_scrambled ()
{ return *static_cast<scrambled::pointer>(fields[2]);}

inline GSMAudioCapability::scrambled::reference GSMAudioCapability::set_scrambled (bool value)
{ return *static_cast<scrambled::pointer>(fields[2]) = value ;}

inline void GSMAudioCapability::swap(GSMAudioCapability& other)
{ Inherited::swap(other); }

inline GSMAudioCapability* GSMAudioCapability::clone() const
{ return static_cast<GSMAudioCapability*> (Inherited::clone()); }

inline VBDCapability::type::const_reference VBDCapability::get_type () const
{ return *static_cast<type::const_pointer>(fields[0]);}

inline VBDCapability::type::reference VBDCapability::ref_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline VBDCapability::type::reference VBDCapability::set_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline VBDCapability::type::reference VBDCapability::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[0]) = value ;}

inline void VBDCapability::swap(VBDCapability& other)
{ Inherited::swap(other); }

inline VBDCapability* VBDCapability::clone() const
{ return static_cast<VBDCapability*> (Inherited::clone()); }

inline V42bis::numberOfCodewords::const_reference V42bis::get_numberOfCodewords () const
{ return *static_cast<numberOfCodewords::const_pointer>(fields[0]);}

inline V42bis::numberOfCodewords::reference V42bis::ref_numberOfCodewords ()
{ return *static_cast<numberOfCodewords::pointer>(fields[0]);}

inline V42bis::numberOfCodewords::reference V42bis::set_numberOfCodewords ()
{ return *static_cast<numberOfCodewords::pointer>(fields[0]);}

inline V42bis::numberOfCodewords::reference V42bis::set_numberOfCodewords (numberOfCodewords::value_type::int_type value)
{ return *static_cast<numberOfCodewords::pointer>(fields[0]) = value ;}

inline V42bis::maximumStringLength::const_reference V42bis::get_maximumStringLength () const
{ return *static_cast<maximumStringLength::const_pointer>(fields[1]);}

inline V42bis::maximumStringLength::reference V42bis::ref_maximumStringLength ()
{ return *static_cast<maximumStringLength::pointer>(fields[1]);}

inline V42bis::maximumStringLength::reference V42bis::set_maximumStringLength ()
{ return *static_cast<maximumStringLength::pointer>(fields[1]);}

inline V42bis::maximumStringLength::reference V42bis::set_maximumStringLength (maximumStringLength::value_type::int_type value)
{ return *static_cast<maximumStringLength::pointer>(fields[1]) = value ;}

inline void V42bis::swap(V42bis& other)
{ Inherited::swap(other); }

inline V42bis* V42bis::clone() const
{ return static_cast<V42bis*> (Inherited::clone()); }

inline T38FaxRateManagement::localTCF::reference T38FaxRateManagement::select_localTCF ()
{
    return *static_cast<localTCF::pointer>(setSelection(localTCF::id_, ASN1::AbstractData::create( &localTCF::value_type::theInfo)));
}

inline bool T38FaxRateManagement::localTCF_isSelected() const
{ 
    return currentSelection() == localTCF::id_; 
}

inline T38FaxRateManagement::transferredTCF::reference T38FaxRateManagement::select_transferredTCF ()
{
    return *static_cast<transferredTCF::pointer>(setSelection(transferredTCF::id_, ASN1::AbstractData::create( &transferredTCF::value_type::theInfo)));
}

inline bool T38FaxRateManagement::transferredTCF_isSelected() const
{ 
    return currentSelection() == transferredTCF::id_; 
}

inline T38FaxRateManagement::T38FaxRateManagement(localTCF::Id id, localTCF::const_reference value)
  : Inherited(&theInfo, id, new localTCF::value_type(value) )
{ }

inline T38FaxRateManagement::T38FaxRateManagement(transferredTCF::Id id, transferredTCF::const_reference value)
  : Inherited(&theInfo, id, new transferredTCF::value_type(value) )
{ }


inline void T38FaxRateManagement::swap(T38FaxRateManagement & other)
{  Inherited::swap(other); }

inline T38FaxRateManagement* T38FaxRateManagement::clone() const
{ return static_cast<T38FaxRateManagement*> (Inherited::clone()); }

inline bool T38FaxRateManagement::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline T38FaxTcpOptions::t38TCPBidirectionalMode::const_reference T38FaxTcpOptions::get_t38TCPBidirectionalMode () const
{ return *static_cast<t38TCPBidirectionalMode::const_pointer>(fields[0]);}

inline T38FaxTcpOptions::t38TCPBidirectionalMode::reference T38FaxTcpOptions::ref_t38TCPBidirectionalMode ()
{ return *static_cast<t38TCPBidirectionalMode::pointer>(fields[0]);}

inline T38FaxTcpOptions::t38TCPBidirectionalMode::reference T38FaxTcpOptions::set_t38TCPBidirectionalMode ()
{ return *static_cast<t38TCPBidirectionalMode::pointer>(fields[0]);}

inline T38FaxTcpOptions::t38TCPBidirectionalMode::reference T38FaxTcpOptions::set_t38TCPBidirectionalMode (bool value)
{ return *static_cast<t38TCPBidirectionalMode::pointer>(fields[0]) = value ;}

inline void T38FaxTcpOptions::swap(T38FaxTcpOptions& other)
{ Inherited::swap(other); }

inline T38FaxTcpOptions* T38FaxTcpOptions::clone() const
{ return static_cast<T38FaxTcpOptions*> (Inherited::clone()); }

inline AudioTelephonyEventCapability::dynamicRTPPayloadType::const_reference AudioTelephonyEventCapability::get_dynamicRTPPayloadType () const
{ return *static_cast<dynamicRTPPayloadType::const_pointer>(fields[0]);}

inline AudioTelephonyEventCapability::dynamicRTPPayloadType::reference AudioTelephonyEventCapability::ref_dynamicRTPPayloadType ()
{ return *static_cast<dynamicRTPPayloadType::pointer>(fields[0]);}

inline AudioTelephonyEventCapability::dynamicRTPPayloadType::reference AudioTelephonyEventCapability::set_dynamicRTPPayloadType ()
{ return *static_cast<dynamicRTPPayloadType::pointer>(fields[0]);}

inline AudioTelephonyEventCapability::dynamicRTPPayloadType::reference AudioTelephonyEventCapability::set_dynamicRTPPayloadType (dynamicRTPPayloadType::value_type::int_type value)
{ return *static_cast<dynamicRTPPayloadType::pointer>(fields[0]) = value ;}

inline AudioTelephonyEventCapability::audioTelephoneEvent::const_reference AudioTelephonyEventCapability::get_audioTelephoneEvent () const
{ return *static_cast<audioTelephoneEvent::const_pointer>(fields[1]);}

inline AudioTelephonyEventCapability::audioTelephoneEvent::reference AudioTelephonyEventCapability::ref_audioTelephoneEvent ()
{ return *static_cast<audioTelephoneEvent::pointer>(fields[1]);}

inline AudioTelephonyEventCapability::audioTelephoneEvent::reference AudioTelephonyEventCapability::set_audioTelephoneEvent ()
{ return *static_cast<audioTelephoneEvent::pointer>(fields[1]);}

inline AudioTelephonyEventCapability::audioTelephoneEvent::reference AudioTelephonyEventCapability::set_audioTelephoneEvent (const std::string& value)
{ return *static_cast<audioTelephoneEvent::pointer>(fields[1]) = value ;}

inline void AudioTelephonyEventCapability::swap(AudioTelephonyEventCapability& other)
{ Inherited::swap(other); }

inline AudioTelephonyEventCapability* AudioTelephonyEventCapability::clone() const
{ return static_cast<AudioTelephonyEventCapability*> (Inherited::clone()); }

inline AudioToneCapability::dynamicRTPPayloadType::const_reference AudioToneCapability::get_dynamicRTPPayloadType () const
{ return *static_cast<dynamicRTPPayloadType::const_pointer>(fields[0]);}

inline AudioToneCapability::dynamicRTPPayloadType::reference AudioToneCapability::ref_dynamicRTPPayloadType ()
{ return *static_cast<dynamicRTPPayloadType::pointer>(fields[0]);}

inline AudioToneCapability::dynamicRTPPayloadType::reference AudioToneCapability::set_dynamicRTPPayloadType ()
{ return *static_cast<dynamicRTPPayloadType::pointer>(fields[0]);}

inline AudioToneCapability::dynamicRTPPayloadType::reference AudioToneCapability::set_dynamicRTPPayloadType (dynamicRTPPayloadType::value_type::int_type value)
{ return *static_cast<dynamicRTPPayloadType::pointer>(fields[0]) = value ;}

inline void AudioToneCapability::swap(AudioToneCapability& other)
{ Inherited::swap(other); }

inline AudioToneCapability* AudioToneCapability::clone() const
{ return static_cast<AudioToneCapability*> (Inherited::clone()); }

inline NoPTAudioTelephonyEventCapability::audioTelephoneEvent::const_reference NoPTAudioTelephonyEventCapability::get_audioTelephoneEvent () const
{ return *static_cast<audioTelephoneEvent::const_pointer>(fields[0]);}

inline NoPTAudioTelephonyEventCapability::audioTelephoneEvent::reference NoPTAudioTelephonyEventCapability::ref_audioTelephoneEvent ()
{ return *static_cast<audioTelephoneEvent::pointer>(fields[0]);}

inline NoPTAudioTelephonyEventCapability::audioTelephoneEvent::reference NoPTAudioTelephonyEventCapability::set_audioTelephoneEvent ()
{ return *static_cast<audioTelephoneEvent::pointer>(fields[0]);}

inline NoPTAudioTelephonyEventCapability::audioTelephoneEvent::reference NoPTAudioTelephonyEventCapability::set_audioTelephoneEvent (const std::string& value)
{ return *static_cast<audioTelephoneEvent::pointer>(fields[0]) = value ;}

inline void NoPTAudioTelephonyEventCapability::swap(NoPTAudioTelephonyEventCapability& other)
{ Inherited::swap(other); }

inline NoPTAudioTelephonyEventCapability* NoPTAudioTelephonyEventCapability::clone() const
{ return static_cast<NoPTAudioTelephonyEventCapability*> (Inherited::clone()); }

inline void NoPTAudioToneCapability::swap(NoPTAudioToneCapability& other)
{ Inherited::swap(other); }

inline NoPTAudioToneCapability* NoPTAudioToneCapability::clone() const
{ return static_cast<NoPTAudioToneCapability*> (Inherited::clone()); }

inline V75Parameters::audioHeaderPresent::const_reference V75Parameters::get_audioHeaderPresent () const
{ return *static_cast<audioHeaderPresent::const_pointer>(fields[0]);}

inline V75Parameters::audioHeaderPresent::reference V75Parameters::ref_audioHeaderPresent ()
{ return *static_cast<audioHeaderPresent::pointer>(fields[0]);}

inline V75Parameters::audioHeaderPresent::reference V75Parameters::set_audioHeaderPresent ()
{ return *static_cast<audioHeaderPresent::pointer>(fields[0]);}

inline V75Parameters::audioHeaderPresent::reference V75Parameters::set_audioHeaderPresent (bool value)
{ return *static_cast<audioHeaderPresent::pointer>(fields[0]) = value ;}

inline void V75Parameters::swap(V75Parameters& other)
{ Inherited::swap(other); }

inline V75Parameters* V75Parameters::clone() const
{ return static_cast<V75Parameters*> (Inherited::clone()); }

inline H222LogicalChannelParameters::resourceID::const_reference H222LogicalChannelParameters::get_resourceID () const
{ return *static_cast<resourceID::const_pointer>(fields[0]);}

inline H222LogicalChannelParameters::resourceID::reference H222LogicalChannelParameters::ref_resourceID ()
{ return *static_cast<resourceID::pointer>(fields[0]);}

inline H222LogicalChannelParameters::resourceID::reference H222LogicalChannelParameters::set_resourceID ()
{ return *static_cast<resourceID::pointer>(fields[0]);}

inline H222LogicalChannelParameters::resourceID::reference H222LogicalChannelParameters::set_resourceID (resourceID::value_type::int_type value)
{ return *static_cast<resourceID::pointer>(fields[0]) = value ;}

inline H222LogicalChannelParameters::subChannelID::const_reference H222LogicalChannelParameters::get_subChannelID () const
{ return *static_cast<subChannelID::const_pointer>(fields[1]);}

inline H222LogicalChannelParameters::subChannelID::reference H222LogicalChannelParameters::ref_subChannelID ()
{ return *static_cast<subChannelID::pointer>(fields[1]);}

inline H222LogicalChannelParameters::subChannelID::reference H222LogicalChannelParameters::set_subChannelID ()
{ return *static_cast<subChannelID::pointer>(fields[1]);}

inline H222LogicalChannelParameters::subChannelID::reference H222LogicalChannelParameters::set_subChannelID (subChannelID::value_type::int_type value)
{ return *static_cast<subChannelID::pointer>(fields[1]) = value ;}

inline H222LogicalChannelParameters::pcr_pid::const_reference H222LogicalChannelParameters::get_pcr_pid () const
{
  assert(hasOptionalField(e_pcr_pid));
  return *static_cast<pcr_pid::const_pointer>(fields[2]);
}

inline H222LogicalChannelParameters::pcr_pid::reference H222LogicalChannelParameters::ref_pcr_pid ()
{
  assert(hasOptionalField(e_pcr_pid));
  return *static_cast<pcr_pid::pointer>(fields[2]);
}

inline H222LogicalChannelParameters::pcr_pid::reference H222LogicalChannelParameters::set_pcr_pid ()
{
  includeOptionalField( e_pcr_pid, 2);
  return *static_cast<pcr_pid::pointer>(fields[2]);
}

inline H222LogicalChannelParameters::pcr_pid::reference H222LogicalChannelParameters::set_pcr_pid (pcr_pid::value_type::int_type value)
{
  includeOptionalField( e_pcr_pid, 2);
  return *static_cast<pcr_pid::pointer>(fields[2]) = value;
}

inline void H222LogicalChannelParameters::omit_pcr_pid ()
{ removeOptionalField( e_pcr_pid); }

inline bool H222LogicalChannelParameters::pcr_pid_isPresent () const
{ return hasOptionalField( e_pcr_pid); }

inline H222LogicalChannelParameters::programDescriptors::const_reference H222LogicalChannelParameters::get_programDescriptors () const
{
  assert(hasOptionalField(e_programDescriptors));
  return *static_cast<programDescriptors::const_pointer>(fields[3]);
}

inline H222LogicalChannelParameters::programDescriptors::reference H222LogicalChannelParameters::ref_programDescriptors ()
{
  assert(hasOptionalField(e_programDescriptors));
  return *static_cast<programDescriptors::pointer>(fields[3]);
}

inline H222LogicalChannelParameters::programDescriptors::reference H222LogicalChannelParameters::set_programDescriptors ()
{
  includeOptionalField( e_programDescriptors, 3);
  return *static_cast<programDescriptors::pointer>(fields[3]);
}

inline H222LogicalChannelParameters::programDescriptors::reference H222LogicalChannelParameters::set_programDescriptors (const std::vector<char>& value)
{
  includeOptionalField( e_programDescriptors, 3);
  return *static_cast<programDescriptors::pointer>(fields[3]) = value;
}

inline void H222LogicalChannelParameters::omit_programDescriptors ()
{ removeOptionalField( e_programDescriptors); }

inline bool H222LogicalChannelParameters::programDescriptors_isPresent () const
{ return hasOptionalField( e_programDescriptors); }

inline H222LogicalChannelParameters::streamDescriptors::const_reference H222LogicalChannelParameters::get_streamDescriptors () const
{
  assert(hasOptionalField(e_streamDescriptors));
  return *static_cast<streamDescriptors::const_pointer>(fields[4]);
}

inline H222LogicalChannelParameters::streamDescriptors::reference H222LogicalChannelParameters::ref_streamDescriptors ()
{
  assert(hasOptionalField(e_streamDescriptors));
  return *static_cast<streamDescriptors::pointer>(fields[4]);
}

inline H222LogicalChannelParameters::streamDescriptors::reference H222LogicalChannelParameters::set_streamDescriptors ()
{
  includeOptionalField( e_streamDescriptors, 4);
  return *static_cast<streamDescriptors::pointer>(fields[4]);
}

inline H222LogicalChannelParameters::streamDescriptors::reference H222LogicalChannelParameters::set_streamDescriptors (const std::vector<char>& value)
{
  includeOptionalField( e_streamDescriptors, 4);
  return *static_cast<streamDescriptors::pointer>(fields[4]) = value;
}

inline void H222LogicalChannelParameters::omit_streamDescriptors ()
{ removeOptionalField( e_streamDescriptors); }

inline bool H222LogicalChannelParameters::streamDescriptors_isPresent () const
{ return hasOptionalField( e_streamDescriptors); }

inline void H222LogicalChannelParameters::swap(H222LogicalChannelParameters& other)
{ Inherited::swap(other); }

inline H222LogicalChannelParameters* H222LogicalChannelParameters::clone() const
{ return static_cast<H222LogicalChannelParameters*> (Inherited::clone()); }

inline CRCLength::crc8bit::reference CRCLength::select_crc8bit ()
{
    return *static_cast<crc8bit::pointer>(setSelection(crc8bit::id_, ASN1::AbstractData::create( &crc8bit::value_type::theInfo)));
}

inline bool CRCLength::crc8bit_isSelected() const
{ 
    return currentSelection() == crc8bit::id_; 
}

inline CRCLength::crc16bit::reference CRCLength::select_crc16bit ()
{
    return *static_cast<crc16bit::pointer>(setSelection(crc16bit::id_, ASN1::AbstractData::create( &crc16bit::value_type::theInfo)));
}

inline bool CRCLength::crc16bit_isSelected() const
{ 
    return currentSelection() == crc16bit::id_; 
}

inline CRCLength::crc32bit::reference CRCLength::select_crc32bit ()
{
    return *static_cast<crc32bit::pointer>(setSelection(crc32bit::id_, ASN1::AbstractData::create( &crc32bit::value_type::theInfo)));
}

inline bool CRCLength::crc32bit_isSelected() const
{ 
    return currentSelection() == crc32bit::id_; 
}

inline CRCLength::CRCLength(crc8bit::Id id, crc8bit::const_reference value)
  : Inherited(&theInfo, id, new crc8bit::value_type(value) )
{ }

inline CRCLength::CRCLength(crc16bit::Id id, crc16bit::const_reference value)
  : Inherited(&theInfo, id, new crc16bit::value_type(value) )
{ }

inline CRCLength::CRCLength(crc32bit::Id id, crc32bit::const_reference value)
  : Inherited(&theInfo, id, new crc32bit::value_type(value) )
{ }


inline void CRCLength::swap(CRCLength & other)
{  Inherited::swap(other); }

inline CRCLength* CRCLength::clone() const
{ return static_cast<CRCLength*> (Inherited::clone()); }

inline bool CRCLength::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RedundancyEncodingElement::payloadType::const_reference RedundancyEncodingElement::get_payloadType () const
{
  assert(hasOptionalField(e_payloadType));
  return *static_cast<payloadType::const_pointer>(fields[0]);
}

inline RedundancyEncodingElement::payloadType::reference RedundancyEncodingElement::ref_payloadType ()
{
  assert(hasOptionalField(e_payloadType));
  return *static_cast<payloadType::pointer>(fields[0]);
}

inline RedundancyEncodingElement::payloadType::reference RedundancyEncodingElement::set_payloadType ()
{
  includeOptionalField( e_payloadType, 0);
  return *static_cast<payloadType::pointer>(fields[0]);
}

inline RedundancyEncodingElement::payloadType::reference RedundancyEncodingElement::set_payloadType (payloadType::value_type::int_type value)
{
  includeOptionalField( e_payloadType, 0);
  return *static_cast<payloadType::pointer>(fields[0]) = value;
}

inline void RedundancyEncodingElement::omit_payloadType ()
{ removeOptionalField( e_payloadType); }

inline bool RedundancyEncodingElement::payloadType_isPresent () const
{ return hasOptionalField( e_payloadType); }

inline void RedundancyEncodingElement::swap(RedundancyEncodingElement& other)
{ Inherited::swap(other); }

inline RedundancyEncodingElement* RedundancyEncodingElement::clone() const
{ return static_cast<RedundancyEncodingElement*> (Inherited::clone()); }

inline void MultiplePayloadStream::swap(MultiplePayloadStream& other)
{ Inherited::swap(other); }

inline MultiplePayloadStream* MultiplePayloadStream::clone() const
{ return static_cast<MultiplePayloadStream*> (Inherited::clone()); }

inline EscrowData::escrowID::const_reference EscrowData::get_escrowID () const
{ return *static_cast<escrowID::const_pointer>(fields[0]);}

inline EscrowData::escrowID::reference EscrowData::ref_escrowID ()
{ return *static_cast<escrowID::pointer>(fields[0]);}

inline EscrowData::escrowID::reference EscrowData::set_escrowID ()
{ return *static_cast<escrowID::pointer>(fields[0]);}

inline EscrowData::escrowID::reference EscrowData::set_escrowID (escrowID::const_reference value)
{ return *static_cast<escrowID::pointer>(fields[0]) = value ;}

inline EscrowData::escrowValue::const_reference EscrowData::get_escrowValue () const
{ return *static_cast<escrowValue::const_pointer>(fields[1]);}

inline EscrowData::escrowValue::reference EscrowData::ref_escrowValue ()
{ return *static_cast<escrowValue::pointer>(fields[1]);}

inline EscrowData::escrowValue::reference EscrowData::set_escrowValue ()
{ return *static_cast<escrowValue::pointer>(fields[1]);}

inline EscrowData::escrowValue::reference EscrowData::set_escrowValue (escrowValue::const_reference value)
{ return *static_cast<escrowValue::pointer>(fields[1]) = value ;}

inline void EscrowData::swap(EscrowData& other)
{ Inherited::swap(other); }

inline EscrowData* EscrowData::clone() const
{ return static_cast<EscrowData*> (Inherited::clone()); }

inline CloseLogicalChannelAck::forwardLogicalChannelNumber::const_reference CloseLogicalChannelAck::get_forwardLogicalChannelNumber () const
{ return *static_cast<forwardLogicalChannelNumber::const_pointer>(fields[0]);}

inline CloseLogicalChannelAck::forwardLogicalChannelNumber::reference CloseLogicalChannelAck::ref_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline CloseLogicalChannelAck::forwardLogicalChannelNumber::reference CloseLogicalChannelAck::set_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline CloseLogicalChannelAck::forwardLogicalChannelNumber::reference CloseLogicalChannelAck::set_forwardLogicalChannelNumber (forwardLogicalChannelNumber::value_type::int_type value)
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]) = value ;}

inline void CloseLogicalChannelAck::swap(CloseLogicalChannelAck& other)
{ Inherited::swap(other); }

inline CloseLogicalChannelAck* CloseLogicalChannelAck::clone() const
{ return static_cast<CloseLogicalChannelAck*> (Inherited::clone()); }

inline RequestChannelCloseAck::forwardLogicalChannelNumber::const_reference RequestChannelCloseAck::get_forwardLogicalChannelNumber () const
{ return *static_cast<forwardLogicalChannelNumber::const_pointer>(fields[0]);}

inline RequestChannelCloseAck::forwardLogicalChannelNumber::reference RequestChannelCloseAck::ref_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline RequestChannelCloseAck::forwardLogicalChannelNumber::reference RequestChannelCloseAck::set_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline RequestChannelCloseAck::forwardLogicalChannelNumber::reference RequestChannelCloseAck::set_forwardLogicalChannelNumber (forwardLogicalChannelNumber::value_type::int_type value)
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]) = value ;}

inline void RequestChannelCloseAck::swap(RequestChannelCloseAck& other)
{ Inherited::swap(other); }

inline RequestChannelCloseAck* RequestChannelCloseAck::clone() const
{ return static_cast<RequestChannelCloseAck*> (Inherited::clone()); }

inline RequestChannelCloseRelease::forwardLogicalChannelNumber::const_reference RequestChannelCloseRelease::get_forwardLogicalChannelNumber () const
{ return *static_cast<forwardLogicalChannelNumber::const_pointer>(fields[0]);}

inline RequestChannelCloseRelease::forwardLogicalChannelNumber::reference RequestChannelCloseRelease::ref_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline RequestChannelCloseRelease::forwardLogicalChannelNumber::reference RequestChannelCloseRelease::set_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline RequestChannelCloseRelease::forwardLogicalChannelNumber::reference RequestChannelCloseRelease::set_forwardLogicalChannelNumber (forwardLogicalChannelNumber::value_type::int_type value)
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]) = value ;}

inline void RequestChannelCloseRelease::swap(RequestChannelCloseRelease& other)
{ Inherited::swap(other); }

inline RequestChannelCloseRelease* RequestChannelCloseRelease::clone() const
{ return static_cast<RequestChannelCloseRelease*> (Inherited::clone()); }

inline MultiplexEntrySendAck::sequenceNumber::const_reference MultiplexEntrySendAck::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline MultiplexEntrySendAck::sequenceNumber::reference MultiplexEntrySendAck::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline MultiplexEntrySendAck::sequenceNumber::reference MultiplexEntrySendAck::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline MultiplexEntrySendAck::sequenceNumber::reference MultiplexEntrySendAck::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline MultiplexEntrySendAck::multiplexTableEntryNumber::const_reference MultiplexEntrySendAck::get_multiplexTableEntryNumber () const
{ return *static_cast<multiplexTableEntryNumber::const_pointer>(fields[1]);}

inline MultiplexEntrySendAck::multiplexTableEntryNumber::reference MultiplexEntrySendAck::ref_multiplexTableEntryNumber ()
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[1]);}

inline MultiplexEntrySendAck::multiplexTableEntryNumber::reference MultiplexEntrySendAck::set_multiplexTableEntryNumber ()
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[1]);}

inline MultiplexEntrySendAck::multiplexTableEntryNumber::reference MultiplexEntrySendAck::set_multiplexTableEntryNumber (multiplexTableEntryNumber::const_reference value)
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[1]) = value ;}

inline void MultiplexEntrySendAck::swap(MultiplexEntrySendAck& other)
{ Inherited::swap(other); }

inline MultiplexEntrySendAck* MultiplexEntrySendAck::clone() const
{ return static_cast<MultiplexEntrySendAck*> (Inherited::clone()); }

inline MultiplexEntrySendRelease::multiplexTableEntryNumber::const_reference MultiplexEntrySendRelease::get_multiplexTableEntryNumber () const
{ return *static_cast<multiplexTableEntryNumber::const_pointer>(fields[0]);}

inline MultiplexEntrySendRelease::multiplexTableEntryNumber::reference MultiplexEntrySendRelease::ref_multiplexTableEntryNumber ()
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]);}

inline MultiplexEntrySendRelease::multiplexTableEntryNumber::reference MultiplexEntrySendRelease::set_multiplexTableEntryNumber ()
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]);}

inline MultiplexEntrySendRelease::multiplexTableEntryNumber::reference MultiplexEntrySendRelease::set_multiplexTableEntryNumber (multiplexTableEntryNumber::const_reference value)
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]) = value ;}

inline void MultiplexEntrySendRelease::swap(MultiplexEntrySendRelease& other)
{ Inherited::swap(other); }

inline MultiplexEntrySendRelease* MultiplexEntrySendRelease::clone() const
{ return static_cast<MultiplexEntrySendRelease*> (Inherited::clone()); }

inline RequestMultiplexEntry::entryNumbers::const_reference RequestMultiplexEntry::get_entryNumbers () const
{ return *static_cast<entryNumbers::const_pointer>(fields[0]);}

inline RequestMultiplexEntry::entryNumbers::reference RequestMultiplexEntry::ref_entryNumbers ()
{ return *static_cast<entryNumbers::pointer>(fields[0]);}

inline RequestMultiplexEntry::entryNumbers::reference RequestMultiplexEntry::set_entryNumbers ()
{ return *static_cast<entryNumbers::pointer>(fields[0]);}

inline RequestMultiplexEntry::entryNumbers::reference RequestMultiplexEntry::set_entryNumbers (entryNumbers::const_reference value)
{ return *static_cast<entryNumbers::pointer>(fields[0]) = value ;}

inline void RequestMultiplexEntry::swap(RequestMultiplexEntry& other)
{ Inherited::swap(other); }

inline RequestMultiplexEntry* RequestMultiplexEntry::clone() const
{ return static_cast<RequestMultiplexEntry*> (Inherited::clone()); }

inline RequestMultiplexEntryAck::entryNumbers::const_reference RequestMultiplexEntryAck::get_entryNumbers () const
{ return *static_cast<entryNumbers::const_pointer>(fields[0]);}

inline RequestMultiplexEntryAck::entryNumbers::reference RequestMultiplexEntryAck::ref_entryNumbers ()
{ return *static_cast<entryNumbers::pointer>(fields[0]);}

inline RequestMultiplexEntryAck::entryNumbers::reference RequestMultiplexEntryAck::set_entryNumbers ()
{ return *static_cast<entryNumbers::pointer>(fields[0]);}

inline RequestMultiplexEntryAck::entryNumbers::reference RequestMultiplexEntryAck::set_entryNumbers (entryNumbers::const_reference value)
{ return *static_cast<entryNumbers::pointer>(fields[0]) = value ;}

inline void RequestMultiplexEntryAck::swap(RequestMultiplexEntryAck& other)
{ Inherited::swap(other); }

inline RequestMultiplexEntryAck* RequestMultiplexEntryAck::clone() const
{ return static_cast<RequestMultiplexEntryAck*> (Inherited::clone()); }

inline RequestMultiplexEntryRelease::entryNumbers::const_reference RequestMultiplexEntryRelease::get_entryNumbers () const
{ return *static_cast<entryNumbers::const_pointer>(fields[0]);}

inline RequestMultiplexEntryRelease::entryNumbers::reference RequestMultiplexEntryRelease::ref_entryNumbers ()
{ return *static_cast<entryNumbers::pointer>(fields[0]);}

inline RequestMultiplexEntryRelease::entryNumbers::reference RequestMultiplexEntryRelease::set_entryNumbers ()
{ return *static_cast<entryNumbers::pointer>(fields[0]);}

inline RequestMultiplexEntryRelease::entryNumbers::reference RequestMultiplexEntryRelease::set_entryNumbers (entryNumbers::const_reference value)
{ return *static_cast<entryNumbers::pointer>(fields[0]) = value ;}

inline void RequestMultiplexEntryRelease::swap(RequestMultiplexEntryRelease& other)
{ Inherited::swap(other); }

inline RequestMultiplexEntryRelease* RequestMultiplexEntryRelease::clone() const
{ return static_cast<RequestMultiplexEntryRelease*> (Inherited::clone()); }

inline void RequestModeRelease::swap(RequestModeRelease& other)
{ Inherited::swap(other); }

inline RequestModeRelease* RequestModeRelease::clone() const
{ return static_cast<RequestModeRelease*> (Inherited::clone()); }

inline MultiplexedStreamModeParameters::logicalChannelNumber::const_reference MultiplexedStreamModeParameters::get_logicalChannelNumber () const
{ return *static_cast<logicalChannelNumber::const_pointer>(fields[0]);}

inline MultiplexedStreamModeParameters::logicalChannelNumber::reference MultiplexedStreamModeParameters::ref_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]);}

inline MultiplexedStreamModeParameters::logicalChannelNumber::reference MultiplexedStreamModeParameters::set_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]);}

inline MultiplexedStreamModeParameters::logicalChannelNumber::reference MultiplexedStreamModeParameters::set_logicalChannelNumber (logicalChannelNumber::value_type::int_type value)
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]) = value ;}

inline void MultiplexedStreamModeParameters::swap(MultiplexedStreamModeParameters& other)
{ Inherited::swap(other); }

inline MultiplexedStreamModeParameters* MultiplexedStreamModeParameters::clone() const
{ return static_cast<MultiplexedStreamModeParameters*> (Inherited::clone()); }

inline V76ModeParameters::suspendResumewAddress::reference V76ModeParameters::select_suspendResumewAddress ()
{
    return *static_cast<suspendResumewAddress::pointer>(setSelection(suspendResumewAddress::id_, ASN1::AbstractData::create( &suspendResumewAddress::value_type::theInfo)));
}

inline bool V76ModeParameters::suspendResumewAddress_isSelected() const
{ 
    return currentSelection() == suspendResumewAddress::id_; 
}

inline V76ModeParameters::suspendResumewoAddress::reference V76ModeParameters::select_suspendResumewoAddress ()
{
    return *static_cast<suspendResumewoAddress::pointer>(setSelection(suspendResumewoAddress::id_, ASN1::AbstractData::create( &suspendResumewoAddress::value_type::theInfo)));
}

inline bool V76ModeParameters::suspendResumewoAddress_isSelected() const
{ 
    return currentSelection() == suspendResumewoAddress::id_; 
}

inline V76ModeParameters::V76ModeParameters(suspendResumewAddress::Id id, suspendResumewAddress::const_reference value)
  : Inherited(&theInfo, id, new suspendResumewAddress::value_type(value) )
{ }

inline V76ModeParameters::V76ModeParameters(suspendResumewoAddress::Id id, suspendResumewoAddress::const_reference value)
  : Inherited(&theInfo, id, new suspendResumewoAddress::value_type(value) )
{ }


inline void V76ModeParameters::swap(V76ModeParameters & other)
{  Inherited::swap(other); }

inline V76ModeParameters* V76ModeParameters::clone() const
{ return static_cast<V76ModeParameters*> (Inherited::clone()); }

inline bool V76ModeParameters::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline IS11172VideoMode::constrainedBitstream::const_reference IS11172VideoMode::get_constrainedBitstream () const
{ return *static_cast<constrainedBitstream::const_pointer>(fields[0]);}

inline IS11172VideoMode::constrainedBitstream::reference IS11172VideoMode::ref_constrainedBitstream ()
{ return *static_cast<constrainedBitstream::pointer>(fields[0]);}

inline IS11172VideoMode::constrainedBitstream::reference IS11172VideoMode::set_constrainedBitstream ()
{ return *static_cast<constrainedBitstream::pointer>(fields[0]);}

inline IS11172VideoMode::constrainedBitstream::reference IS11172VideoMode::set_constrainedBitstream (bool value)
{ return *static_cast<constrainedBitstream::pointer>(fields[0]) = value ;}

inline IS11172VideoMode::videoBitRate::const_reference IS11172VideoMode::get_videoBitRate () const
{
  assert(hasOptionalField(e_videoBitRate));
  return *static_cast<videoBitRate::const_pointer>(fields[1]);
}

inline IS11172VideoMode::videoBitRate::reference IS11172VideoMode::ref_videoBitRate ()
{
  assert(hasOptionalField(e_videoBitRate));
  return *static_cast<videoBitRate::pointer>(fields[1]);
}

inline IS11172VideoMode::videoBitRate::reference IS11172VideoMode::set_videoBitRate ()
{
  includeOptionalField( e_videoBitRate, 1);
  return *static_cast<videoBitRate::pointer>(fields[1]);
}

inline IS11172VideoMode::videoBitRate::reference IS11172VideoMode::set_videoBitRate (videoBitRate::value_type::int_type value)
{
  includeOptionalField( e_videoBitRate, 1);
  return *static_cast<videoBitRate::pointer>(fields[1]) = value;
}

inline void IS11172VideoMode::omit_videoBitRate ()
{ removeOptionalField( e_videoBitRate); }

inline bool IS11172VideoMode::videoBitRate_isPresent () const
{ return hasOptionalField( e_videoBitRate); }

inline IS11172VideoMode::vbvBufferSize::const_reference IS11172VideoMode::get_vbvBufferSize () const
{
  assert(hasOptionalField(e_vbvBufferSize));
  return *static_cast<vbvBufferSize::const_pointer>(fields[2]);
}

inline IS11172VideoMode::vbvBufferSize::reference IS11172VideoMode::ref_vbvBufferSize ()
{
  assert(hasOptionalField(e_vbvBufferSize));
  return *static_cast<vbvBufferSize::pointer>(fields[2]);
}

inline IS11172VideoMode::vbvBufferSize::reference IS11172VideoMode::set_vbvBufferSize ()
{
  includeOptionalField( e_vbvBufferSize, 2);
  return *static_cast<vbvBufferSize::pointer>(fields[2]);
}

inline IS11172VideoMode::vbvBufferSize::reference IS11172VideoMode::set_vbvBufferSize (vbvBufferSize::value_type::int_type value)
{
  includeOptionalField( e_vbvBufferSize, 2);
  return *static_cast<vbvBufferSize::pointer>(fields[2]) = value;
}

inline void IS11172VideoMode::omit_vbvBufferSize ()
{ removeOptionalField( e_vbvBufferSize); }

inline bool IS11172VideoMode::vbvBufferSize_isPresent () const
{ return hasOptionalField( e_vbvBufferSize); }

inline IS11172VideoMode::samplesPerLine::const_reference IS11172VideoMode::get_samplesPerLine () const
{
  assert(hasOptionalField(e_samplesPerLine));
  return *static_cast<samplesPerLine::const_pointer>(fields[3]);
}

inline IS11172VideoMode::samplesPerLine::reference IS11172VideoMode::ref_samplesPerLine ()
{
  assert(hasOptionalField(e_samplesPerLine));
  return *static_cast<samplesPerLine::pointer>(fields[3]);
}

inline IS11172VideoMode::samplesPerLine::reference IS11172VideoMode::set_samplesPerLine ()
{
  includeOptionalField( e_samplesPerLine, 3);
  return *static_cast<samplesPerLine::pointer>(fields[3]);
}

inline IS11172VideoMode::samplesPerLine::reference IS11172VideoMode::set_samplesPerLine (samplesPerLine::value_type::int_type value)
{
  includeOptionalField( e_samplesPerLine, 3);
  return *static_cast<samplesPerLine::pointer>(fields[3]) = value;
}

inline void IS11172VideoMode::omit_samplesPerLine ()
{ removeOptionalField( e_samplesPerLine); }

inline bool IS11172VideoMode::samplesPerLine_isPresent () const
{ return hasOptionalField( e_samplesPerLine); }

inline IS11172VideoMode::linesPerFrame::const_reference IS11172VideoMode::get_linesPerFrame () const
{
  assert(hasOptionalField(e_linesPerFrame));
  return *static_cast<linesPerFrame::const_pointer>(fields[4]);
}

inline IS11172VideoMode::linesPerFrame::reference IS11172VideoMode::ref_linesPerFrame ()
{
  assert(hasOptionalField(e_linesPerFrame));
  return *static_cast<linesPerFrame::pointer>(fields[4]);
}

inline IS11172VideoMode::linesPerFrame::reference IS11172VideoMode::set_linesPerFrame ()
{
  includeOptionalField( e_linesPerFrame, 4);
  return *static_cast<linesPerFrame::pointer>(fields[4]);
}

inline IS11172VideoMode::linesPerFrame::reference IS11172VideoMode::set_linesPerFrame (linesPerFrame::value_type::int_type value)
{
  includeOptionalField( e_linesPerFrame, 4);
  return *static_cast<linesPerFrame::pointer>(fields[4]) = value;
}

inline void IS11172VideoMode::omit_linesPerFrame ()
{ removeOptionalField( e_linesPerFrame); }

inline bool IS11172VideoMode::linesPerFrame_isPresent () const
{ return hasOptionalField( e_linesPerFrame); }

inline IS11172VideoMode::pictureRate::const_reference IS11172VideoMode::get_pictureRate () const
{
  assert(hasOptionalField(e_pictureRate));
  return *static_cast<pictureRate::const_pointer>(fields[5]);
}

inline IS11172VideoMode::pictureRate::reference IS11172VideoMode::ref_pictureRate ()
{
  assert(hasOptionalField(e_pictureRate));
  return *static_cast<pictureRate::pointer>(fields[5]);
}

inline IS11172VideoMode::pictureRate::reference IS11172VideoMode::set_pictureRate ()
{
  includeOptionalField( e_pictureRate, 5);
  return *static_cast<pictureRate::pointer>(fields[5]);
}

inline IS11172VideoMode::pictureRate::reference IS11172VideoMode::set_pictureRate (pictureRate::value_type::int_type value)
{
  includeOptionalField( e_pictureRate, 5);
  return *static_cast<pictureRate::pointer>(fields[5]) = value;
}

inline void IS11172VideoMode::omit_pictureRate ()
{ removeOptionalField( e_pictureRate); }

inline bool IS11172VideoMode::pictureRate_isPresent () const
{ return hasOptionalField( e_pictureRate); }

inline IS11172VideoMode::luminanceSampleRate::const_reference IS11172VideoMode::get_luminanceSampleRate () const
{
  assert(hasOptionalField(e_luminanceSampleRate));
  return *static_cast<luminanceSampleRate::const_pointer>(fields[6]);
}

inline IS11172VideoMode::luminanceSampleRate::reference IS11172VideoMode::ref_luminanceSampleRate ()
{
  assert(hasOptionalField(e_luminanceSampleRate));
  return *static_cast<luminanceSampleRate::pointer>(fields[6]);
}

inline IS11172VideoMode::luminanceSampleRate::reference IS11172VideoMode::set_luminanceSampleRate ()
{
  includeOptionalField( e_luminanceSampleRate, 6);
  return *static_cast<luminanceSampleRate::pointer>(fields[6]);
}

inline IS11172VideoMode::luminanceSampleRate::reference IS11172VideoMode::set_luminanceSampleRate (luminanceSampleRate::value_type::int_type value)
{
  includeOptionalField( e_luminanceSampleRate, 6);
  return *static_cast<luminanceSampleRate::pointer>(fields[6]) = value;
}

inline void IS11172VideoMode::omit_luminanceSampleRate ()
{ removeOptionalField( e_luminanceSampleRate); }

inline bool IS11172VideoMode::luminanceSampleRate_isPresent () const
{ return hasOptionalField( e_luminanceSampleRate); }

inline void IS11172VideoMode::swap(IS11172VideoMode& other)
{ Inherited::swap(other); }

inline IS11172VideoMode* IS11172VideoMode::clone() const
{ return static_cast<IS11172VideoMode*> (Inherited::clone()); }

inline VBDMode::type::const_reference VBDMode::get_type () const
{ return *static_cast<type::const_pointer>(fields[0]);}

inline VBDMode::type::reference VBDMode::ref_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline VBDMode::type::reference VBDMode::set_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline VBDMode::type::reference VBDMode::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[0]) = value ;}

inline void VBDMode::swap(VBDMode& other)
{ Inherited::swap(other); }

inline VBDMode* VBDMode::clone() const
{ return static_cast<VBDMode*> (Inherited::clone()); }

inline RoundTripDelayRequest::sequenceNumber::const_reference RoundTripDelayRequest::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline RoundTripDelayRequest::sequenceNumber::reference RoundTripDelayRequest::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline RoundTripDelayRequest::sequenceNumber::reference RoundTripDelayRequest::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline RoundTripDelayRequest::sequenceNumber::reference RoundTripDelayRequest::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline void RoundTripDelayRequest::swap(RoundTripDelayRequest& other)
{ Inherited::swap(other); }

inline RoundTripDelayRequest* RoundTripDelayRequest::clone() const
{ return static_cast<RoundTripDelayRequest*> (Inherited::clone()); }

inline RoundTripDelayResponse::sequenceNumber::const_reference RoundTripDelayResponse::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline RoundTripDelayResponse::sequenceNumber::reference RoundTripDelayResponse::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline RoundTripDelayResponse::sequenceNumber::reference RoundTripDelayResponse::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline RoundTripDelayResponse::sequenceNumber::reference RoundTripDelayResponse::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline void RoundTripDelayResponse::swap(RoundTripDelayResponse& other)
{ Inherited::swap(other); }

inline RoundTripDelayResponse* RoundTripDelayResponse::clone() const
{ return static_cast<RoundTripDelayResponse*> (Inherited::clone()); }

inline void MaintenanceLoopOffCommand::swap(MaintenanceLoopOffCommand& other)
{ Inherited::swap(other); }

inline MaintenanceLoopOffCommand* MaintenanceLoopOffCommand::clone() const
{ return static_cast<MaintenanceLoopOffCommand*> (Inherited::clone()); }

inline void CommunicationModeRequest::swap(CommunicationModeRequest& other)
{ Inherited::swap(other); }

inline CommunicationModeRequest* CommunicationModeRequest::clone() const
{ return static_cast<CommunicationModeRequest*> (Inherited::clone()); }

inline Criteria::field::const_reference Criteria::get_field () const
{ return *static_cast<field::const_pointer>(fields[0]);}

inline Criteria::field::reference Criteria::ref_field ()
{ return *static_cast<field::pointer>(fields[0]);}

inline Criteria::field::reference Criteria::set_field ()
{ return *static_cast<field::pointer>(fields[0]);}

inline Criteria::field::reference Criteria::set_field (field::const_reference value)
{ return *static_cast<field::pointer>(fields[0]) = value ;}

inline Criteria::value::const_reference Criteria::get_value () const
{ return *static_cast<value::const_pointer>(fields[1]);}

inline Criteria::value::reference Criteria::ref_value ()
{ return *static_cast<value::pointer>(fields[1]);}

inline Criteria::value::reference Criteria::set_value ()
{ return *static_cast<value::pointer>(fields[1]);}

inline Criteria::value::reference Criteria::set_value (const std::vector<char>& value)
{ return *static_cast<value::pointer>(fields[1]) = value ;}

inline void Criteria::swap(Criteria& other)
{ Inherited::swap(other); }

inline Criteria* Criteria::clone() const
{ return static_cast<Criteria*> (Inherited::clone()); }

inline RemoteMCRequest::masterActivate::reference RemoteMCRequest::select_masterActivate ()
{
    return *static_cast<masterActivate::pointer>(setSelection(masterActivate::id_, ASN1::AbstractData::create( &masterActivate::value_type::theInfo)));
}

inline bool RemoteMCRequest::masterActivate_isSelected() const
{ 
    return currentSelection() == masterActivate::id_; 
}

inline RemoteMCRequest::slaveActivate::reference RemoteMCRequest::select_slaveActivate ()
{
    return *static_cast<slaveActivate::pointer>(setSelection(slaveActivate::id_, ASN1::AbstractData::create( &slaveActivate::value_type::theInfo)));
}

inline bool RemoteMCRequest::slaveActivate_isSelected() const
{ 
    return currentSelection() == slaveActivate::id_; 
}

inline RemoteMCRequest::deActivate::reference RemoteMCRequest::select_deActivate ()
{
    return *static_cast<deActivate::pointer>(setSelection(deActivate::id_, ASN1::AbstractData::create( &deActivate::value_type::theInfo)));
}

inline bool RemoteMCRequest::deActivate_isSelected() const
{ 
    return currentSelection() == deActivate::id_; 
}

inline RemoteMCRequest::RemoteMCRequest(masterActivate::Id id, masterActivate::const_reference value)
  : Inherited(&theInfo, id, new masterActivate::value_type(value) )
{ }

inline RemoteMCRequest::RemoteMCRequest(slaveActivate::Id id, slaveActivate::const_reference value)
  : Inherited(&theInfo, id, new slaveActivate::value_type(value) )
{ }

inline RemoteMCRequest::RemoteMCRequest(deActivate::Id id, deActivate::const_reference value)
  : Inherited(&theInfo, id, new deActivate::value_type(value) )
{ }


inline void RemoteMCRequest::swap(RemoteMCRequest & other)
{  Inherited::swap(other); }

inline RemoteMCRequest* RemoteMCRequest::clone() const
{ return static_cast<RemoteMCRequest*> (Inherited::clone()); }

inline bool RemoteMCRequest::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ConnectionIdentifier::channelTag::const_reference ConnectionIdentifier::get_channelTag () const
{ return *static_cast<channelTag::const_pointer>(fields[0]);}

inline ConnectionIdentifier::channelTag::reference ConnectionIdentifier::ref_channelTag ()
{ return *static_cast<channelTag::pointer>(fields[0]);}

inline ConnectionIdentifier::channelTag::reference ConnectionIdentifier::set_channelTag ()
{ return *static_cast<channelTag::pointer>(fields[0]);}

inline ConnectionIdentifier::channelTag::reference ConnectionIdentifier::set_channelTag (channelTag::value_type::int_type value)
{ return *static_cast<channelTag::pointer>(fields[0]) = value ;}

inline ConnectionIdentifier::sequenceNumber::const_reference ConnectionIdentifier::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[1]);}

inline ConnectionIdentifier::sequenceNumber::reference ConnectionIdentifier::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[1]);}

inline ConnectionIdentifier::sequenceNumber::reference ConnectionIdentifier::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[1]);}

inline ConnectionIdentifier::sequenceNumber::reference ConnectionIdentifier::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[1]) = value ;}

inline void ConnectionIdentifier::swap(ConnectionIdentifier& other)
{ Inherited::swap(other); }

inline ConnectionIdentifier* ConnectionIdentifier::clone() const
{ return static_cast<ConnectionIdentifier*> (Inherited::clone()); }

inline LogicalChannelRateRequest::sequenceNumber::const_reference LogicalChannelRateRequest::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline LogicalChannelRateRequest::sequenceNumber::reference LogicalChannelRateRequest::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline LogicalChannelRateRequest::sequenceNumber::reference LogicalChannelRateRequest::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline LogicalChannelRateRequest::sequenceNumber::reference LogicalChannelRateRequest::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline LogicalChannelRateRequest::logicalChannelNumber::const_reference LogicalChannelRateRequest::get_logicalChannelNumber () const
{ return *static_cast<logicalChannelNumber::const_pointer>(fields[1]);}

inline LogicalChannelRateRequest::logicalChannelNumber::reference LogicalChannelRateRequest::ref_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[1]);}

inline LogicalChannelRateRequest::logicalChannelNumber::reference LogicalChannelRateRequest::set_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[1]);}

inline LogicalChannelRateRequest::logicalChannelNumber::reference LogicalChannelRateRequest::set_logicalChannelNumber (logicalChannelNumber::value_type::int_type value)
{ return *static_cast<logicalChannelNumber::pointer>(fields[1]) = value ;}

inline LogicalChannelRateRequest::maximumBitRate::const_reference LogicalChannelRateRequest::get_maximumBitRate () const
{ return *static_cast<maximumBitRate::const_pointer>(fields[2]);}

inline LogicalChannelRateRequest::maximumBitRate::reference LogicalChannelRateRequest::ref_maximumBitRate ()
{ return *static_cast<maximumBitRate::pointer>(fields[2]);}

inline LogicalChannelRateRequest::maximumBitRate::reference LogicalChannelRateRequest::set_maximumBitRate ()
{ return *static_cast<maximumBitRate::pointer>(fields[2]);}

inline LogicalChannelRateRequest::maximumBitRate::reference LogicalChannelRateRequest::set_maximumBitRate (maximumBitRate::value_type::int_type value)
{ return *static_cast<maximumBitRate::pointer>(fields[2]) = value ;}

inline void LogicalChannelRateRequest::swap(LogicalChannelRateRequest& other)
{ Inherited::swap(other); }

inline LogicalChannelRateRequest* LogicalChannelRateRequest::clone() const
{ return static_cast<LogicalChannelRateRequest*> (Inherited::clone()); }

inline LogicalChannelRateAcknowledge::sequenceNumber::const_reference LogicalChannelRateAcknowledge::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline LogicalChannelRateAcknowledge::sequenceNumber::reference LogicalChannelRateAcknowledge::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline LogicalChannelRateAcknowledge::sequenceNumber::reference LogicalChannelRateAcknowledge::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline LogicalChannelRateAcknowledge::sequenceNumber::reference LogicalChannelRateAcknowledge::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline LogicalChannelRateAcknowledge::logicalChannelNumber::const_reference LogicalChannelRateAcknowledge::get_logicalChannelNumber () const
{ return *static_cast<logicalChannelNumber::const_pointer>(fields[1]);}

inline LogicalChannelRateAcknowledge::logicalChannelNumber::reference LogicalChannelRateAcknowledge::ref_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[1]);}

inline LogicalChannelRateAcknowledge::logicalChannelNumber::reference LogicalChannelRateAcknowledge::set_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[1]);}

inline LogicalChannelRateAcknowledge::logicalChannelNumber::reference LogicalChannelRateAcknowledge::set_logicalChannelNumber (logicalChannelNumber::value_type::int_type value)
{ return *static_cast<logicalChannelNumber::pointer>(fields[1]) = value ;}

inline LogicalChannelRateAcknowledge::maximumBitRate::const_reference LogicalChannelRateAcknowledge::get_maximumBitRate () const
{ return *static_cast<maximumBitRate::const_pointer>(fields[2]);}

inline LogicalChannelRateAcknowledge::maximumBitRate::reference LogicalChannelRateAcknowledge::ref_maximumBitRate ()
{ return *static_cast<maximumBitRate::pointer>(fields[2]);}

inline LogicalChannelRateAcknowledge::maximumBitRate::reference LogicalChannelRateAcknowledge::set_maximumBitRate ()
{ return *static_cast<maximumBitRate::pointer>(fields[2]);}

inline LogicalChannelRateAcknowledge::maximumBitRate::reference LogicalChannelRateAcknowledge::set_maximumBitRate (maximumBitRate::value_type::int_type value)
{ return *static_cast<maximumBitRate::pointer>(fields[2]) = value ;}

inline void LogicalChannelRateAcknowledge::swap(LogicalChannelRateAcknowledge& other)
{ Inherited::swap(other); }

inline LogicalChannelRateAcknowledge* LogicalChannelRateAcknowledge::clone() const
{ return static_cast<LogicalChannelRateAcknowledge*> (Inherited::clone()); }

inline LogicalChannelRateRejectReason::undefinedReason::reference LogicalChannelRateRejectReason::select_undefinedReason ()
{
    return *static_cast<undefinedReason::pointer>(setSelection(undefinedReason::id_, ASN1::AbstractData::create( &undefinedReason::value_type::theInfo)));
}

inline bool LogicalChannelRateRejectReason::undefinedReason_isSelected() const
{ 
    return currentSelection() == undefinedReason::id_; 
}

inline LogicalChannelRateRejectReason::insufficientResources::reference LogicalChannelRateRejectReason::select_insufficientResources ()
{
    return *static_cast<insufficientResources::pointer>(setSelection(insufficientResources::id_, ASN1::AbstractData::create( &insufficientResources::value_type::theInfo)));
}

inline bool LogicalChannelRateRejectReason::insufficientResources_isSelected() const
{ 
    return currentSelection() == insufficientResources::id_; 
}

inline LogicalChannelRateRejectReason::LogicalChannelRateRejectReason(undefinedReason::Id id, undefinedReason::const_reference value)
  : Inherited(&theInfo, id, new undefinedReason::value_type(value) )
{ }

inline LogicalChannelRateRejectReason::LogicalChannelRateRejectReason(insufficientResources::Id id, insufficientResources::const_reference value)
  : Inherited(&theInfo, id, new insufficientResources::value_type(value) )
{ }


inline void LogicalChannelRateRejectReason::swap(LogicalChannelRateRejectReason & other)
{  Inherited::swap(other); }

inline LogicalChannelRateRejectReason* LogicalChannelRateRejectReason::clone() const
{ return static_cast<LogicalChannelRateRejectReason*> (Inherited::clone()); }

inline bool LogicalChannelRateRejectReason::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline void LogicalChannelRateRelease::swap(LogicalChannelRateRelease& other)
{ Inherited::swap(other); }

inline LogicalChannelRateRelease* LogicalChannelRateRelease::clone() const
{ return static_cast<LogicalChannelRateRelease*> (Inherited::clone()); }

inline SubstituteConferenceIDCommand::conferenceIdentifier::const_reference SubstituteConferenceIDCommand::get_conferenceIdentifier () const
{ return *static_cast<conferenceIdentifier::const_pointer>(fields[0]);}

inline SubstituteConferenceIDCommand::conferenceIdentifier::reference SubstituteConferenceIDCommand::ref_conferenceIdentifier ()
{ return *static_cast<conferenceIdentifier::pointer>(fields[0]);}

inline SubstituteConferenceIDCommand::conferenceIdentifier::reference SubstituteConferenceIDCommand::set_conferenceIdentifier ()
{ return *static_cast<conferenceIdentifier::pointer>(fields[0]);}

inline SubstituteConferenceIDCommand::conferenceIdentifier::reference SubstituteConferenceIDCommand::set_conferenceIdentifier (const std::vector<char>& value)
{ return *static_cast<conferenceIdentifier::pointer>(fields[0]) = value ;}

inline void SubstituteConferenceIDCommand::swap(SubstituteConferenceIDCommand& other)
{ Inherited::swap(other); }

inline SubstituteConferenceIDCommand* SubstituteConferenceIDCommand::clone() const
{ return static_cast<SubstituteConferenceIDCommand*> (Inherited::clone()); }

inline EncryptionUpdateDirection::masterToSlave::reference EncryptionUpdateDirection::select_masterToSlave ()
{
    return *static_cast<masterToSlave::pointer>(setSelection(masterToSlave::id_, ASN1::AbstractData::create( &masterToSlave::value_type::theInfo)));
}

inline bool EncryptionUpdateDirection::masterToSlave_isSelected() const
{ 
    return currentSelection() == masterToSlave::id_; 
}

inline EncryptionUpdateDirection::slaveToMaster::reference EncryptionUpdateDirection::select_slaveToMaster ()
{
    return *static_cast<slaveToMaster::pointer>(setSelection(slaveToMaster::id_, ASN1::AbstractData::create( &slaveToMaster::value_type::theInfo)));
}

inline bool EncryptionUpdateDirection::slaveToMaster_isSelected() const
{ 
    return currentSelection() == slaveToMaster::id_; 
}

inline EncryptionUpdateDirection::EncryptionUpdateDirection(masterToSlave::Id id, masterToSlave::const_reference value)
  : Inherited(&theInfo, id, new masterToSlave::value_type(value) )
{ }

inline EncryptionUpdateDirection::EncryptionUpdateDirection(slaveToMaster::Id id, slaveToMaster::const_reference value)
  : Inherited(&theInfo, id, new slaveToMaster::value_type(value) )
{ }


inline void EncryptionUpdateDirection::swap(EncryptionUpdateDirection & other)
{  Inherited::swap(other); }

inline EncryptionUpdateDirection* EncryptionUpdateDirection::clone() const
{ return static_cast<EncryptionUpdateDirection*> (Inherited::clone()); }

inline bool EncryptionUpdateDirection::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline KeyProtectionMethod::secureChannel::const_reference KeyProtectionMethod::get_secureChannel () const
{ return *static_cast<secureChannel::const_pointer>(fields[0]);}

inline KeyProtectionMethod::secureChannel::reference KeyProtectionMethod::ref_secureChannel ()
{ return *static_cast<secureChannel::pointer>(fields[0]);}

inline KeyProtectionMethod::secureChannel::reference KeyProtectionMethod::set_secureChannel ()
{ return *static_cast<secureChannel::pointer>(fields[0]);}

inline KeyProtectionMethod::secureChannel::reference KeyProtectionMethod::set_secureChannel (bool value)
{ return *static_cast<secureChannel::pointer>(fields[0]) = value ;}

inline KeyProtectionMethod::sharedSecret::const_reference KeyProtectionMethod::get_sharedSecret () const
{ return *static_cast<sharedSecret::const_pointer>(fields[1]);}

inline KeyProtectionMethod::sharedSecret::reference KeyProtectionMethod::ref_sharedSecret ()
{ return *static_cast<sharedSecret::pointer>(fields[1]);}

inline KeyProtectionMethod::sharedSecret::reference KeyProtectionMethod::set_sharedSecret ()
{ return *static_cast<sharedSecret::pointer>(fields[1]);}

inline KeyProtectionMethod::sharedSecret::reference KeyProtectionMethod::set_sharedSecret (bool value)
{ return *static_cast<sharedSecret::pointer>(fields[1]) = value ;}

inline KeyProtectionMethod::certProtectedKey::const_reference KeyProtectionMethod::get_certProtectedKey () const
{ return *static_cast<certProtectedKey::const_pointer>(fields[2]);}

inline KeyProtectionMethod::certProtectedKey::reference KeyProtectionMethod::ref_certProtectedKey ()
{ return *static_cast<certProtectedKey::pointer>(fields[2]);}

inline KeyProtectionMethod::certProtectedKey::reference KeyProtectionMethod::set_certProtectedKey ()
{ return *static_cast<certProtectedKey::pointer>(fields[2]);}

inline KeyProtectionMethod::certProtectedKey::reference KeyProtectionMethod::set_certProtectedKey (bool value)
{ return *static_cast<certProtectedKey::pointer>(fields[2]) = value ;}

inline void KeyProtectionMethod::swap(KeyProtectionMethod& other)
{ Inherited::swap(other); }

inline KeyProtectionMethod* KeyProtectionMethod::clone() const
{ return static_cast<KeyProtectionMethod*> (Inherited::clone()); }

inline EncryptionUpdateRequest::keyProtectionMethod::const_reference EncryptionUpdateRequest::get_keyProtectionMethod () const
{
  assert(hasOptionalField(e_keyProtectionMethod));
  return *static_cast<keyProtectionMethod::const_pointer>(fields[0]);
}

inline EncryptionUpdateRequest::keyProtectionMethod::reference EncryptionUpdateRequest::ref_keyProtectionMethod ()
{
  assert(hasOptionalField(e_keyProtectionMethod));
  return *static_cast<keyProtectionMethod::pointer>(fields[0]);
}

inline EncryptionUpdateRequest::keyProtectionMethod::reference EncryptionUpdateRequest::set_keyProtectionMethod ()
{
  includeOptionalField( e_keyProtectionMethod, 0);
  return *static_cast<keyProtectionMethod::pointer>(fields[0]);
}

inline EncryptionUpdateRequest::keyProtectionMethod::reference EncryptionUpdateRequest::set_keyProtectionMethod (keyProtectionMethod::const_reference value)
{
  includeOptionalField( e_keyProtectionMethod, 0);
  return *static_cast<keyProtectionMethod::pointer>(fields[0]) = value;
}

inline void EncryptionUpdateRequest::omit_keyProtectionMethod ()
{ removeOptionalField( e_keyProtectionMethod); }

inline bool EncryptionUpdateRequest::keyProtectionMethod_isPresent () const
{ return hasOptionalField( e_keyProtectionMethod); }

inline EncryptionUpdateRequest::synchFlag::const_reference EncryptionUpdateRequest::get_synchFlag () const
{
  assert(hasOptionalField(e_synchFlag));
  return *static_cast<synchFlag::const_pointer>(fields[1]);
}

inline EncryptionUpdateRequest::synchFlag::reference EncryptionUpdateRequest::ref_synchFlag ()
{
  assert(hasOptionalField(e_synchFlag));
  return *static_cast<synchFlag::pointer>(fields[1]);
}

inline EncryptionUpdateRequest::synchFlag::reference EncryptionUpdateRequest::set_synchFlag ()
{
  includeOptionalField( e_synchFlag, 1);
  return *static_cast<synchFlag::pointer>(fields[1]);
}

inline EncryptionUpdateRequest::synchFlag::reference EncryptionUpdateRequest::set_synchFlag (synchFlag::value_type::int_type value)
{
  includeOptionalField( e_synchFlag, 1);
  return *static_cast<synchFlag::pointer>(fields[1]) = value;
}

inline void EncryptionUpdateRequest::omit_synchFlag ()
{ removeOptionalField( e_synchFlag); }

inline bool EncryptionUpdateRequest::synchFlag_isPresent () const
{ return hasOptionalField( e_synchFlag); }

inline void EncryptionUpdateRequest::swap(EncryptionUpdateRequest& other)
{ Inherited::swap(other); }

inline EncryptionUpdateRequest* EncryptionUpdateRequest::clone() const
{ return static_cast<EncryptionUpdateRequest*> (Inherited::clone()); }

inline PictureReference::pictureNumber::const_reference PictureReference::get_pictureNumber () const
{
    assert(currentSelection() ==pictureNumber::id_);
    return *static_cast<pictureNumber::const_pointer>(choice.get());
}

inline PictureReference::pictureNumber::reference PictureReference::ref_pictureNumber ()
{
    assert(currentSelection() ==pictureNumber::id_);
    return *static_cast<pictureNumber::pointer>(choice.get());
}

inline PictureReference::pictureNumber::reference PictureReference::select_pictureNumber ()
{
    return *static_cast<pictureNumber::pointer>(setSelection(pictureNumber::id_, ASN1::AbstractData::create( &pictureNumber::value_type::theInfo)));
}

inline PictureReference::pictureNumber::reference PictureReference::select_pictureNumber (PictureReference::pictureNumber::value_type::int_type value)
{
    return select_pictureNumber() = value;
}

inline bool PictureReference::pictureNumber_isSelected() const
{ 
    return currentSelection() == pictureNumber::id_; 
}

inline PictureReference::longTermPictureIndex::const_reference PictureReference::get_longTermPictureIndex () const
{
    assert(currentSelection() ==longTermPictureIndex::id_);
    return *static_cast<longTermPictureIndex::const_pointer>(choice.get());
}

inline PictureReference::longTermPictureIndex::reference PictureReference::ref_longTermPictureIndex ()
{
    assert(currentSelection() ==longTermPictureIndex::id_);
    return *static_cast<longTermPictureIndex::pointer>(choice.get());
}

inline PictureReference::longTermPictureIndex::reference PictureReference::select_longTermPictureIndex ()
{
    return *static_cast<longTermPictureIndex::pointer>(setSelection(longTermPictureIndex::id_, ASN1::AbstractData::create( &longTermPictureIndex::value_type::theInfo)));
}

inline PictureReference::longTermPictureIndex::reference PictureReference::select_longTermPictureIndex (PictureReference::longTermPictureIndex::value_type::int_type value)
{
    return select_longTermPictureIndex() = value;
}

inline bool PictureReference::longTermPictureIndex_isSelected() const
{ 
    return currentSelection() == longTermPictureIndex::id_; 
}

inline PictureReference::PictureReference(pictureNumber::Id id, pictureNumber::value_type::int_type value)
  : Inherited(&theInfo, id, new pictureNumber::value_type(value) )
{ }

inline PictureReference::PictureReference(longTermPictureIndex::Id id, longTermPictureIndex::value_type::int_type value)
  : Inherited(&theInfo, id, new longTermPictureIndex::value_type(value) )
{ }


inline void PictureReference::swap(PictureReference & other)
{  Inherited::swap(other); }

inline PictureReference* PictureReference::clone() const
{ return static_cast<PictureReference*> (Inherited::clone()); }

inline bool PictureReference::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline TerminalYouAreSeeingInSubPictureNumber::terminalNumber::const_reference TerminalYouAreSeeingInSubPictureNumber::get_terminalNumber () const
{ return *static_cast<terminalNumber::const_pointer>(fields[0]);}

inline TerminalYouAreSeeingInSubPictureNumber::terminalNumber::reference TerminalYouAreSeeingInSubPictureNumber::ref_terminalNumber ()
{ return *static_cast<terminalNumber::pointer>(fields[0]);}

inline TerminalYouAreSeeingInSubPictureNumber::terminalNumber::reference TerminalYouAreSeeingInSubPictureNumber::set_terminalNumber ()
{ return *static_cast<terminalNumber::pointer>(fields[0]);}

inline TerminalYouAreSeeingInSubPictureNumber::terminalNumber::reference TerminalYouAreSeeingInSubPictureNumber::set_terminalNumber (terminalNumber::value_type::int_type value)
{ return *static_cast<terminalNumber::pointer>(fields[0]) = value ;}

inline TerminalYouAreSeeingInSubPictureNumber::subPictureNumber::const_reference TerminalYouAreSeeingInSubPictureNumber::get_subPictureNumber () const
{ return *static_cast<subPictureNumber::const_pointer>(fields[1]);}

inline TerminalYouAreSeeingInSubPictureNumber::subPictureNumber::reference TerminalYouAreSeeingInSubPictureNumber::ref_subPictureNumber ()
{ return *static_cast<subPictureNumber::pointer>(fields[1]);}

inline TerminalYouAreSeeingInSubPictureNumber::subPictureNumber::reference TerminalYouAreSeeingInSubPictureNumber::set_subPictureNumber ()
{ return *static_cast<subPictureNumber::pointer>(fields[1]);}

inline TerminalYouAreSeeingInSubPictureNumber::subPictureNumber::reference TerminalYouAreSeeingInSubPictureNumber::set_subPictureNumber (subPictureNumber::value_type::int_type value)
{ return *static_cast<subPictureNumber::pointer>(fields[1]) = value ;}

inline void TerminalYouAreSeeingInSubPictureNumber::swap(TerminalYouAreSeeingInSubPictureNumber& other)
{ Inherited::swap(other); }

inline TerminalYouAreSeeingInSubPictureNumber* TerminalYouAreSeeingInSubPictureNumber::clone() const
{ return static_cast<TerminalYouAreSeeingInSubPictureNumber*> (Inherited::clone()); }

inline VideoIndicateCompose::compositionNumber::const_reference VideoIndicateCompose::get_compositionNumber () const
{ return *static_cast<compositionNumber::const_pointer>(fields[0]);}

inline VideoIndicateCompose::compositionNumber::reference VideoIndicateCompose::ref_compositionNumber ()
{ return *static_cast<compositionNumber::pointer>(fields[0]);}

inline VideoIndicateCompose::compositionNumber::reference VideoIndicateCompose::set_compositionNumber ()
{ return *static_cast<compositionNumber::pointer>(fields[0]);}

inline VideoIndicateCompose::compositionNumber::reference VideoIndicateCompose::set_compositionNumber (compositionNumber::value_type::int_type value)
{ return *static_cast<compositionNumber::pointer>(fields[0]) = value ;}

inline void VideoIndicateCompose::swap(VideoIndicateCompose& other)
{ Inherited::swap(other); }

inline VideoIndicateCompose* VideoIndicateCompose::clone() const
{ return static_cast<VideoIndicateCompose*> (Inherited::clone()); }

inline H223SkewIndication::logicalChannelNumber1::const_reference H223SkewIndication::get_logicalChannelNumber1 () const
{ return *static_cast<logicalChannelNumber1::const_pointer>(fields[0]);}

inline H223SkewIndication::logicalChannelNumber1::reference H223SkewIndication::ref_logicalChannelNumber1 ()
{ return *static_cast<logicalChannelNumber1::pointer>(fields[0]);}

inline H223SkewIndication::logicalChannelNumber1::reference H223SkewIndication::set_logicalChannelNumber1 ()
{ return *static_cast<logicalChannelNumber1::pointer>(fields[0]);}

inline H223SkewIndication::logicalChannelNumber1::reference H223SkewIndication::set_logicalChannelNumber1 (logicalChannelNumber1::value_type::int_type value)
{ return *static_cast<logicalChannelNumber1::pointer>(fields[0]) = value ;}

inline H223SkewIndication::logicalChannelNumber2::const_reference H223SkewIndication::get_logicalChannelNumber2 () const
{ return *static_cast<logicalChannelNumber2::const_pointer>(fields[1]);}

inline H223SkewIndication::logicalChannelNumber2::reference H223SkewIndication::ref_logicalChannelNumber2 ()
{ return *static_cast<logicalChannelNumber2::pointer>(fields[1]);}

inline H223SkewIndication::logicalChannelNumber2::reference H223SkewIndication::set_logicalChannelNumber2 ()
{ return *static_cast<logicalChannelNumber2::pointer>(fields[1]);}

inline H223SkewIndication::logicalChannelNumber2::reference H223SkewIndication::set_logicalChannelNumber2 (logicalChannelNumber2::value_type::int_type value)
{ return *static_cast<logicalChannelNumber2::pointer>(fields[1]) = value ;}

inline H223SkewIndication::skew::const_reference H223SkewIndication::get_skew () const
{ return *static_cast<skew::const_pointer>(fields[2]);}

inline H223SkewIndication::skew::reference H223SkewIndication::ref_skew ()
{ return *static_cast<skew::pointer>(fields[2]);}

inline H223SkewIndication::skew::reference H223SkewIndication::set_skew ()
{ return *static_cast<skew::pointer>(fields[2]);}

inline H223SkewIndication::skew::reference H223SkewIndication::set_skew (skew::value_type::int_type value)
{ return *static_cast<skew::pointer>(fields[2]) = value ;}

inline void H223SkewIndication::swap(H223SkewIndication& other)
{ Inherited::swap(other); }

inline H223SkewIndication* H223SkewIndication::clone() const
{ return static_cast<H223SkewIndication*> (Inherited::clone()); }

inline H2250MaximumSkewIndication::logicalChannelNumber1::const_reference H2250MaximumSkewIndication::get_logicalChannelNumber1 () const
{ return *static_cast<logicalChannelNumber1::const_pointer>(fields[0]);}

inline H2250MaximumSkewIndication::logicalChannelNumber1::reference H2250MaximumSkewIndication::ref_logicalChannelNumber1 ()
{ return *static_cast<logicalChannelNumber1::pointer>(fields[0]);}

inline H2250MaximumSkewIndication::logicalChannelNumber1::reference H2250MaximumSkewIndication::set_logicalChannelNumber1 ()
{ return *static_cast<logicalChannelNumber1::pointer>(fields[0]);}

inline H2250MaximumSkewIndication::logicalChannelNumber1::reference H2250MaximumSkewIndication::set_logicalChannelNumber1 (logicalChannelNumber1::value_type::int_type value)
{ return *static_cast<logicalChannelNumber1::pointer>(fields[0]) = value ;}

inline H2250MaximumSkewIndication::logicalChannelNumber2::const_reference H2250MaximumSkewIndication::get_logicalChannelNumber2 () const
{ return *static_cast<logicalChannelNumber2::const_pointer>(fields[1]);}

inline H2250MaximumSkewIndication::logicalChannelNumber2::reference H2250MaximumSkewIndication::ref_logicalChannelNumber2 ()
{ return *static_cast<logicalChannelNumber2::pointer>(fields[1]);}

inline H2250MaximumSkewIndication::logicalChannelNumber2::reference H2250MaximumSkewIndication::set_logicalChannelNumber2 ()
{ return *static_cast<logicalChannelNumber2::pointer>(fields[1]);}

inline H2250MaximumSkewIndication::logicalChannelNumber2::reference H2250MaximumSkewIndication::set_logicalChannelNumber2 (logicalChannelNumber2::value_type::int_type value)
{ return *static_cast<logicalChannelNumber2::pointer>(fields[1]) = value ;}

inline H2250MaximumSkewIndication::maximumSkew::const_reference H2250MaximumSkewIndication::get_maximumSkew () const
{ return *static_cast<maximumSkew::const_pointer>(fields[2]);}

inline H2250MaximumSkewIndication::maximumSkew::reference H2250MaximumSkewIndication::ref_maximumSkew ()
{ return *static_cast<maximumSkew::pointer>(fields[2]);}

inline H2250MaximumSkewIndication::maximumSkew::reference H2250MaximumSkewIndication::set_maximumSkew ()
{ return *static_cast<maximumSkew::pointer>(fields[2]);}

inline H2250MaximumSkewIndication::maximumSkew::reference H2250MaximumSkewIndication::set_maximumSkew (maximumSkew::value_type::int_type value)
{ return *static_cast<maximumSkew::pointer>(fields[2]) = value ;}

inline void H2250MaximumSkewIndication::swap(H2250MaximumSkewIndication& other)
{ Inherited::swap(other); }

inline H2250MaximumSkewIndication* H2250MaximumSkewIndication::clone() const
{ return static_cast<H2250MaximumSkewIndication*> (Inherited::clone()); }

inline Params::iv8::const_reference Params::get_iv8 () const
{
  assert(hasOptionalField(e_iv8));
  return *static_cast<iv8::const_pointer>(fields[0]);
}

inline Params::iv8::reference Params::ref_iv8 ()
{
  assert(hasOptionalField(e_iv8));
  return *static_cast<iv8::pointer>(fields[0]);
}

inline Params::iv8::reference Params::set_iv8 ()
{
  includeOptionalField( e_iv8, 0);
  return *static_cast<iv8::pointer>(fields[0]);
}

inline Params::iv8::reference Params::set_iv8 (const std::vector<char>& value)
{
  includeOptionalField( e_iv8, 0);
  return *static_cast<iv8::pointer>(fields[0]) = value;
}

inline void Params::omit_iv8 ()
{ removeOptionalField( e_iv8); }

inline bool Params::iv8_isPresent () const
{ return hasOptionalField( e_iv8); }

inline Params::iv16::const_reference Params::get_iv16 () const
{
  assert(hasOptionalField(e_iv16));
  return *static_cast<iv16::const_pointer>(fields[1]);
}

inline Params::iv16::reference Params::ref_iv16 ()
{
  assert(hasOptionalField(e_iv16));
  return *static_cast<iv16::pointer>(fields[1]);
}

inline Params::iv16::reference Params::set_iv16 ()
{
  includeOptionalField( e_iv16, 1);
  return *static_cast<iv16::pointer>(fields[1]);
}

inline Params::iv16::reference Params::set_iv16 (const std::vector<char>& value)
{
  includeOptionalField( e_iv16, 1);
  return *static_cast<iv16::pointer>(fields[1]) = value;
}

inline void Params::omit_iv16 ()
{ removeOptionalField( e_iv16); }

inline bool Params::iv16_isPresent () const
{ return hasOptionalField( e_iv16); }

inline Params::iv::const_reference Params::get_iv () const
{
  assert(hasOptionalField(e_iv));
  return *static_cast<iv::const_pointer>(fields[2]);
}

inline Params::iv::reference Params::ref_iv ()
{
  assert(hasOptionalField(e_iv));
  return *static_cast<iv::pointer>(fields[2]);
}

inline Params::iv::reference Params::set_iv ()
{
  includeOptionalField( e_iv, 2);
  return *static_cast<iv::pointer>(fields[2]);
}

inline Params::iv::reference Params::set_iv (const std::vector<char>& value)
{
  includeOptionalField( e_iv, 2);
  return *static_cast<iv::pointer>(fields[2]) = value;
}

inline void Params::omit_iv ()
{ removeOptionalField( e_iv); }

inline bool Params::iv_isPresent () const
{ return hasOptionalField( e_iv); }

inline void Params::swap(Params& other)
{ Inherited::swap(other); }

inline Params* Params::clone() const
{ return static_cast<Params*> (Inherited::clone()); }

inline MobileMultilinkReconfigurationIndication::sampleSize::const_reference MobileMultilinkReconfigurationIndication::get_sampleSize () const
{ return *static_cast<sampleSize::const_pointer>(fields[0]);}

inline MobileMultilinkReconfigurationIndication::sampleSize::reference MobileMultilinkReconfigurationIndication::ref_sampleSize ()
{ return *static_cast<sampleSize::pointer>(fields[0]);}

inline MobileMultilinkReconfigurationIndication::sampleSize::reference MobileMultilinkReconfigurationIndication::set_sampleSize ()
{ return *static_cast<sampleSize::pointer>(fields[0]);}

inline MobileMultilinkReconfigurationIndication::sampleSize::reference MobileMultilinkReconfigurationIndication::set_sampleSize (sampleSize::value_type::int_type value)
{ return *static_cast<sampleSize::pointer>(fields[0]) = value ;}

inline MobileMultilinkReconfigurationIndication::samplesPerFrame::const_reference MobileMultilinkReconfigurationIndication::get_samplesPerFrame () const
{ return *static_cast<samplesPerFrame::const_pointer>(fields[1]);}

inline MobileMultilinkReconfigurationIndication::samplesPerFrame::reference MobileMultilinkReconfigurationIndication::ref_samplesPerFrame ()
{ return *static_cast<samplesPerFrame::pointer>(fields[1]);}

inline MobileMultilinkReconfigurationIndication::samplesPerFrame::reference MobileMultilinkReconfigurationIndication::set_samplesPerFrame ()
{ return *static_cast<samplesPerFrame::pointer>(fields[1]);}

inline MobileMultilinkReconfigurationIndication::samplesPerFrame::reference MobileMultilinkReconfigurationIndication::set_samplesPerFrame (samplesPerFrame::value_type::int_type value)
{ return *static_cast<samplesPerFrame::pointer>(fields[1]) = value ;}

inline void MobileMultilinkReconfigurationIndication::swap(MobileMultilinkReconfigurationIndication& other)
{ Inherited::swap(other); }

inline MobileMultilinkReconfigurationIndication* MobileMultilinkReconfigurationIndication::clone() const
{ return static_cast<MobileMultilinkReconfigurationIndication*> (Inherited::clone()); }

inline NonStandardIdentifier_h221NonStandard::t35CountryCode::const_reference NonStandardIdentifier_h221NonStandard::get_t35CountryCode () const
{ return *static_cast<t35CountryCode::const_pointer>(fields[0]);}

inline NonStandardIdentifier_h221NonStandard::t35CountryCode::reference NonStandardIdentifier_h221NonStandard::ref_t35CountryCode ()
{ return *static_cast<t35CountryCode::pointer>(fields[0]);}

inline NonStandardIdentifier_h221NonStandard::t35CountryCode::reference NonStandardIdentifier_h221NonStandard::set_t35CountryCode ()
{ return *static_cast<t35CountryCode::pointer>(fields[0]);}

inline NonStandardIdentifier_h221NonStandard::t35CountryCode::reference NonStandardIdentifier_h221NonStandard::set_t35CountryCode (t35CountryCode::value_type::int_type value)
{ return *static_cast<t35CountryCode::pointer>(fields[0]) = value ;}

inline NonStandardIdentifier_h221NonStandard::t35Extension::const_reference NonStandardIdentifier_h221NonStandard::get_t35Extension () const
{ return *static_cast<t35Extension::const_pointer>(fields[1]);}

inline NonStandardIdentifier_h221NonStandard::t35Extension::reference NonStandardIdentifier_h221NonStandard::ref_t35Extension ()
{ return *static_cast<t35Extension::pointer>(fields[1]);}

inline NonStandardIdentifier_h221NonStandard::t35Extension::reference NonStandardIdentifier_h221NonStandard::set_t35Extension ()
{ return *static_cast<t35Extension::pointer>(fields[1]);}

inline NonStandardIdentifier_h221NonStandard::t35Extension::reference NonStandardIdentifier_h221NonStandard::set_t35Extension (t35Extension::value_type::int_type value)
{ return *static_cast<t35Extension::pointer>(fields[1]) = value ;}

inline NonStandardIdentifier_h221NonStandard::manufacturerCode::const_reference NonStandardIdentifier_h221NonStandard::get_manufacturerCode () const
{ return *static_cast<manufacturerCode::const_pointer>(fields[2]);}

inline NonStandardIdentifier_h221NonStandard::manufacturerCode::reference NonStandardIdentifier_h221NonStandard::ref_manufacturerCode ()
{ return *static_cast<manufacturerCode::pointer>(fields[2]);}

inline NonStandardIdentifier_h221NonStandard::manufacturerCode::reference NonStandardIdentifier_h221NonStandard::set_manufacturerCode ()
{ return *static_cast<manufacturerCode::pointer>(fields[2]);}

inline NonStandardIdentifier_h221NonStandard::manufacturerCode::reference NonStandardIdentifier_h221NonStandard::set_manufacturerCode (manufacturerCode::value_type::int_type value)
{ return *static_cast<manufacturerCode::pointer>(fields[2]) = value ;}

inline void NonStandardIdentifier_h221NonStandard::swap(NonStandardIdentifier_h221NonStandard& other)
{ Inherited::swap(other); }

inline NonStandardIdentifier_h221NonStandard* NonStandardIdentifier_h221NonStandard::clone() const
{ return static_cast<NonStandardIdentifier_h221NonStandard*> (Inherited::clone()); }

inline MasterSlaveDeterminationAck_decision::master::reference MasterSlaveDeterminationAck_decision::select_master ()
{
    return *static_cast<master::pointer>(setSelection(master::id_, ASN1::AbstractData::create( &master::value_type::theInfo)));
}

inline bool MasterSlaveDeterminationAck_decision::master_isSelected() const
{ 
    return currentSelection() == master::id_; 
}

inline MasterSlaveDeterminationAck_decision::slave::reference MasterSlaveDeterminationAck_decision::select_slave ()
{
    return *static_cast<slave::pointer>(setSelection(slave::id_, ASN1::AbstractData::create( &slave::value_type::theInfo)));
}

inline bool MasterSlaveDeterminationAck_decision::slave_isSelected() const
{ 
    return currentSelection() == slave::id_; 
}

inline MasterSlaveDeterminationAck_decision::MasterSlaveDeterminationAck_decision(master::Id id, master::const_reference value)
  : Inherited(&theInfo, id, new master::value_type(value) )
{ }

inline MasterSlaveDeterminationAck_decision::MasterSlaveDeterminationAck_decision(slave::Id id, slave::const_reference value)
  : Inherited(&theInfo, id, new slave::value_type(value) )
{ }


inline void MasterSlaveDeterminationAck_decision::swap(MasterSlaveDeterminationAck_decision & other)
{  Inherited::swap(other); }

inline MasterSlaveDeterminationAck_decision* MasterSlaveDeterminationAck_decision::clone() const
{ return static_cast<MasterSlaveDeterminationAck_decision*> (Inherited::clone()); }

inline bool MasterSlaveDeterminationAck_decision::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MasterSlaveDeterminationReject_cause::identicalNumbers::reference MasterSlaveDeterminationReject_cause::select_identicalNumbers ()
{
    return *static_cast<identicalNumbers::pointer>(setSelection(identicalNumbers::id_, ASN1::AbstractData::create( &identicalNumbers::value_type::theInfo)));
}

inline bool MasterSlaveDeterminationReject_cause::identicalNumbers_isSelected() const
{ 
    return currentSelection() == identicalNumbers::id_; 
}

inline MasterSlaveDeterminationReject_cause::MasterSlaveDeterminationReject_cause(identicalNumbers::Id id, identicalNumbers::const_reference value)
  : Inherited(&theInfo, id, new identicalNumbers::value_type(value) )
{ }


inline void MasterSlaveDeterminationReject_cause::swap(MasterSlaveDeterminationReject_cause & other)
{  Inherited::swap(other); }

inline MasterSlaveDeterminationReject_cause* MasterSlaveDeterminationReject_cause::clone() const
{ return static_cast<MasterSlaveDeterminationReject_cause*> (Inherited::clone()); }

inline bool MasterSlaveDeterminationReject_cause::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline Capability_h233EncryptionReceiveCapability::h233IVResponseTime::const_reference Capability_h233EncryptionReceiveCapability::get_h233IVResponseTime () const
{ return *static_cast<h233IVResponseTime::const_pointer>(fields[0]);}

inline Capability_h233EncryptionReceiveCapability::h233IVResponseTime::reference Capability_h233EncryptionReceiveCapability::ref_h233IVResponseTime ()
{ return *static_cast<h233IVResponseTime::pointer>(fields[0]);}

inline Capability_h233EncryptionReceiveCapability::h233IVResponseTime::reference Capability_h233EncryptionReceiveCapability::set_h233IVResponseTime ()
{ return *static_cast<h233IVResponseTime::pointer>(fields[0]);}

inline Capability_h233EncryptionReceiveCapability::h233IVResponseTime::reference Capability_h233EncryptionReceiveCapability::set_h233IVResponseTime (h233IVResponseTime::value_type::int_type value)
{ return *static_cast<h233IVResponseTime::pointer>(fields[0]) = value ;}

inline void Capability_h233EncryptionReceiveCapability::swap(Capability_h233EncryptionReceiveCapability& other)
{ Inherited::swap(other); }

inline Capability_h233EncryptionReceiveCapability* Capability_h233EncryptionReceiveCapability::clone() const
{ return static_cast<Capability_h233EncryptionReceiveCapability*> (Inherited::clone()); }

inline VCCapability_aal1::nullClockRecovery::const_reference VCCapability_aal1::get_nullClockRecovery () const
{ return *static_cast<nullClockRecovery::const_pointer>(fields[0]);}

inline VCCapability_aal1::nullClockRecovery::reference VCCapability_aal1::ref_nullClockRecovery ()
{ return *static_cast<nullClockRecovery::pointer>(fields[0]);}

inline VCCapability_aal1::nullClockRecovery::reference VCCapability_aal1::set_nullClockRecovery ()
{ return *static_cast<nullClockRecovery::pointer>(fields[0]);}

inline VCCapability_aal1::nullClockRecovery::reference VCCapability_aal1::set_nullClockRecovery (bool value)
{ return *static_cast<nullClockRecovery::pointer>(fields[0]) = value ;}

inline VCCapability_aal1::srtsClockRecovery::const_reference VCCapability_aal1::get_srtsClockRecovery () const
{ return *static_cast<srtsClockRecovery::const_pointer>(fields[1]);}

inline VCCapability_aal1::srtsClockRecovery::reference VCCapability_aal1::ref_srtsClockRecovery ()
{ return *static_cast<srtsClockRecovery::pointer>(fields[1]);}

inline VCCapability_aal1::srtsClockRecovery::reference VCCapability_aal1::set_srtsClockRecovery ()
{ return *static_cast<srtsClockRecovery::pointer>(fields[1]);}

inline VCCapability_aal1::srtsClockRecovery::reference VCCapability_aal1::set_srtsClockRecovery (bool value)
{ return *static_cast<srtsClockRecovery::pointer>(fields[1]) = value ;}

inline VCCapability_aal1::adaptiveClockRecovery::const_reference VCCapability_aal1::get_adaptiveClockRecovery () const
{ return *static_cast<adaptiveClockRecovery::const_pointer>(fields[2]);}

inline VCCapability_aal1::adaptiveClockRecovery::reference VCCapability_aal1::ref_adaptiveClockRecovery ()
{ return *static_cast<adaptiveClockRecovery::pointer>(fields[2]);}

inline VCCapability_aal1::adaptiveClockRecovery::reference VCCapability_aal1::set_adaptiveClockRecovery ()
{ return *static_cast<adaptiveClockRecovery::pointer>(fields[2]);}

inline VCCapability_aal1::adaptiveClockRecovery::reference VCCapability_aal1::set_adaptiveClockRecovery (bool value)
{ return *static_cast<adaptiveClockRecovery::pointer>(fields[2]) = value ;}

inline VCCapability_aal1::nullErrorCorrection::const_reference VCCapability_aal1::get_nullErrorCorrection () const
{ return *static_cast<nullErrorCorrection::const_pointer>(fields[3]);}

inline VCCapability_aal1::nullErrorCorrection::reference VCCapability_aal1::ref_nullErrorCorrection ()
{ return *static_cast<nullErrorCorrection::pointer>(fields[3]);}

inline VCCapability_aal1::nullErrorCorrection::reference VCCapability_aal1::set_nullErrorCorrection ()
{ return *static_cast<nullErrorCorrection::pointer>(fields[3]);}

inline VCCapability_aal1::nullErrorCorrection::reference VCCapability_aal1::set_nullErrorCorrection (bool value)
{ return *static_cast<nullErrorCorrection::pointer>(fields[3]) = value ;}

inline VCCapability_aal1::longInterleaver::const_reference VCCapability_aal1::get_longInterleaver () const
{ return *static_cast<longInterleaver::const_pointer>(fields[4]);}

inline VCCapability_aal1::longInterleaver::reference VCCapability_aal1::ref_longInterleaver ()
{ return *static_cast<longInterleaver::pointer>(fields[4]);}

inline VCCapability_aal1::longInterleaver::reference VCCapability_aal1::set_longInterleaver ()
{ return *static_cast<longInterleaver::pointer>(fields[4]);}

inline VCCapability_aal1::longInterleaver::reference VCCapability_aal1::set_longInterleaver (bool value)
{ return *static_cast<longInterleaver::pointer>(fields[4]) = value ;}

inline VCCapability_aal1::shortInterleaver::const_reference VCCapability_aal1::get_shortInterleaver () const
{ return *static_cast<shortInterleaver::const_pointer>(fields[5]);}

inline VCCapability_aal1::shortInterleaver::reference VCCapability_aal1::ref_shortInterleaver ()
{ return *static_cast<shortInterleaver::pointer>(fields[5]);}

inline VCCapability_aal1::shortInterleaver::reference VCCapability_aal1::set_shortInterleaver ()
{ return *static_cast<shortInterleaver::pointer>(fields[5]);}

inline VCCapability_aal1::shortInterleaver::reference VCCapability_aal1::set_shortInterleaver (bool value)
{ return *static_cast<shortInterleaver::pointer>(fields[5]) = value ;}

inline VCCapability_aal1::errorCorrectionOnly::const_reference VCCapability_aal1::get_errorCorrectionOnly () const
{ return *static_cast<errorCorrectionOnly::const_pointer>(fields[6]);}

inline VCCapability_aal1::errorCorrectionOnly::reference VCCapability_aal1::ref_errorCorrectionOnly ()
{ return *static_cast<errorCorrectionOnly::pointer>(fields[6]);}

inline VCCapability_aal1::errorCorrectionOnly::reference VCCapability_aal1::set_errorCorrectionOnly ()
{ return *static_cast<errorCorrectionOnly::pointer>(fields[6]);}

inline VCCapability_aal1::errorCorrectionOnly::reference VCCapability_aal1::set_errorCorrectionOnly (bool value)
{ return *static_cast<errorCorrectionOnly::pointer>(fields[6]) = value ;}

inline VCCapability_aal1::structuredDataTransfer::const_reference VCCapability_aal1::get_structuredDataTransfer () const
{ return *static_cast<structuredDataTransfer::const_pointer>(fields[7]);}

inline VCCapability_aal1::structuredDataTransfer::reference VCCapability_aal1::ref_structuredDataTransfer ()
{ return *static_cast<structuredDataTransfer::pointer>(fields[7]);}

inline VCCapability_aal1::structuredDataTransfer::reference VCCapability_aal1::set_structuredDataTransfer ()
{ return *static_cast<structuredDataTransfer::pointer>(fields[7]);}

inline VCCapability_aal1::structuredDataTransfer::reference VCCapability_aal1::set_structuredDataTransfer (bool value)
{ return *static_cast<structuredDataTransfer::pointer>(fields[7]) = value ;}

inline VCCapability_aal1::partiallyFilledCells::const_reference VCCapability_aal1::get_partiallyFilledCells () const
{ return *static_cast<partiallyFilledCells::const_pointer>(fields[8]);}

inline VCCapability_aal1::partiallyFilledCells::reference VCCapability_aal1::ref_partiallyFilledCells ()
{ return *static_cast<partiallyFilledCells::pointer>(fields[8]);}

inline VCCapability_aal1::partiallyFilledCells::reference VCCapability_aal1::set_partiallyFilledCells ()
{ return *static_cast<partiallyFilledCells::pointer>(fields[8]);}

inline VCCapability_aal1::partiallyFilledCells::reference VCCapability_aal1::set_partiallyFilledCells (bool value)
{ return *static_cast<partiallyFilledCells::pointer>(fields[8]) = value ;}

inline void VCCapability_aal1::swap(VCCapability_aal1& other)
{ Inherited::swap(other); }

inline VCCapability_aal1* VCCapability_aal1::clone() const
{ return static_cast<VCCapability_aal1*> (Inherited::clone()); }

inline VCCapability_aal5::forwardMaximumSDUSize::const_reference VCCapability_aal5::get_forwardMaximumSDUSize () const
{ return *static_cast<forwardMaximumSDUSize::const_pointer>(fields[0]);}

inline VCCapability_aal5::forwardMaximumSDUSize::reference VCCapability_aal5::ref_forwardMaximumSDUSize ()
{ return *static_cast<forwardMaximumSDUSize::pointer>(fields[0]);}

inline VCCapability_aal5::forwardMaximumSDUSize::reference VCCapability_aal5::set_forwardMaximumSDUSize ()
{ return *static_cast<forwardMaximumSDUSize::pointer>(fields[0]);}

inline VCCapability_aal5::forwardMaximumSDUSize::reference VCCapability_aal5::set_forwardMaximumSDUSize (forwardMaximumSDUSize::value_type::int_type value)
{ return *static_cast<forwardMaximumSDUSize::pointer>(fields[0]) = value ;}

inline VCCapability_aal5::backwardMaximumSDUSize::const_reference VCCapability_aal5::get_backwardMaximumSDUSize () const
{ return *static_cast<backwardMaximumSDUSize::const_pointer>(fields[1]);}

inline VCCapability_aal5::backwardMaximumSDUSize::reference VCCapability_aal5::ref_backwardMaximumSDUSize ()
{ return *static_cast<backwardMaximumSDUSize::pointer>(fields[1]);}

inline VCCapability_aal5::backwardMaximumSDUSize::reference VCCapability_aal5::set_backwardMaximumSDUSize ()
{ return *static_cast<backwardMaximumSDUSize::pointer>(fields[1]);}

inline VCCapability_aal5::backwardMaximumSDUSize::reference VCCapability_aal5::set_backwardMaximumSDUSize (backwardMaximumSDUSize::value_type::int_type value)
{ return *static_cast<backwardMaximumSDUSize::pointer>(fields[1]) = value ;}

inline void VCCapability_aal5::swap(VCCapability_aal5& other)
{ Inherited::swap(other); }

inline VCCapability_aal5* VCCapability_aal5::clone() const
{ return static_cast<VCCapability_aal5*> (Inherited::clone()); }

inline H223Capability_mobileOperationTransmitCapability::modeChangeCapability::const_reference H223Capability_mobileOperationTransmitCapability::get_modeChangeCapability () const
{ return *static_cast<modeChangeCapability::const_pointer>(fields[0]);}

inline H223Capability_mobileOperationTransmitCapability::modeChangeCapability::reference H223Capability_mobileOperationTransmitCapability::ref_modeChangeCapability ()
{ return *static_cast<modeChangeCapability::pointer>(fields[0]);}

inline H223Capability_mobileOperationTransmitCapability::modeChangeCapability::reference H223Capability_mobileOperationTransmitCapability::set_modeChangeCapability ()
{ return *static_cast<modeChangeCapability::pointer>(fields[0]);}

inline H223Capability_mobileOperationTransmitCapability::modeChangeCapability::reference H223Capability_mobileOperationTransmitCapability::set_modeChangeCapability (bool value)
{ return *static_cast<modeChangeCapability::pointer>(fields[0]) = value ;}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexA::const_reference H223Capability_mobileOperationTransmitCapability::get_h223AnnexA () const
{ return *static_cast<h223AnnexA::const_pointer>(fields[1]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexA::reference H223Capability_mobileOperationTransmitCapability::ref_h223AnnexA ()
{ return *static_cast<h223AnnexA::pointer>(fields[1]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexA::reference H223Capability_mobileOperationTransmitCapability::set_h223AnnexA ()
{ return *static_cast<h223AnnexA::pointer>(fields[1]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexA::reference H223Capability_mobileOperationTransmitCapability::set_h223AnnexA (bool value)
{ return *static_cast<h223AnnexA::pointer>(fields[1]) = value ;}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexADoubleFlag::const_reference H223Capability_mobileOperationTransmitCapability::get_h223AnnexADoubleFlag () const
{ return *static_cast<h223AnnexADoubleFlag::const_pointer>(fields[2]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexADoubleFlag::reference H223Capability_mobileOperationTransmitCapability::ref_h223AnnexADoubleFlag ()
{ return *static_cast<h223AnnexADoubleFlag::pointer>(fields[2]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexADoubleFlag::reference H223Capability_mobileOperationTransmitCapability::set_h223AnnexADoubleFlag ()
{ return *static_cast<h223AnnexADoubleFlag::pointer>(fields[2]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexADoubleFlag::reference H223Capability_mobileOperationTransmitCapability::set_h223AnnexADoubleFlag (bool value)
{ return *static_cast<h223AnnexADoubleFlag::pointer>(fields[2]) = value ;}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexB::const_reference H223Capability_mobileOperationTransmitCapability::get_h223AnnexB () const
{ return *static_cast<h223AnnexB::const_pointer>(fields[3]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexB::reference H223Capability_mobileOperationTransmitCapability::ref_h223AnnexB ()
{ return *static_cast<h223AnnexB::pointer>(fields[3]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexB::reference H223Capability_mobileOperationTransmitCapability::set_h223AnnexB ()
{ return *static_cast<h223AnnexB::pointer>(fields[3]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexB::reference H223Capability_mobileOperationTransmitCapability::set_h223AnnexB (bool value)
{ return *static_cast<h223AnnexB::pointer>(fields[3]) = value ;}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexBwithHeader::const_reference H223Capability_mobileOperationTransmitCapability::get_h223AnnexBwithHeader () const
{ return *static_cast<h223AnnexBwithHeader::const_pointer>(fields[4]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexBwithHeader::reference H223Capability_mobileOperationTransmitCapability::ref_h223AnnexBwithHeader ()
{ return *static_cast<h223AnnexBwithHeader::pointer>(fields[4]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexBwithHeader::reference H223Capability_mobileOperationTransmitCapability::set_h223AnnexBwithHeader ()
{ return *static_cast<h223AnnexBwithHeader::pointer>(fields[4]);}

inline H223Capability_mobileOperationTransmitCapability::h223AnnexBwithHeader::reference H223Capability_mobileOperationTransmitCapability::set_h223AnnexBwithHeader (bool value)
{ return *static_cast<h223AnnexBwithHeader::pointer>(fields[4]) = value ;}

inline void H223Capability_mobileOperationTransmitCapability::swap(H223Capability_mobileOperationTransmitCapability& other)
{ Inherited::swap(other); }

inline H223Capability_mobileOperationTransmitCapability* H223Capability_mobileOperationTransmitCapability::clone() const
{ return static_cast<H223Capability_mobileOperationTransmitCapability*> (Inherited::clone()); }

inline H223Capability_mobileMultilinkFrameCapability::maximumSampleSize::const_reference H223Capability_mobileMultilinkFrameCapability::get_maximumSampleSize () const
{ return *static_cast<maximumSampleSize::const_pointer>(fields[0]);}

inline H223Capability_mobileMultilinkFrameCapability::maximumSampleSize::reference H223Capability_mobileMultilinkFrameCapability::ref_maximumSampleSize ()
{ return *static_cast<maximumSampleSize::pointer>(fields[0]);}

inline H223Capability_mobileMultilinkFrameCapability::maximumSampleSize::reference H223Capability_mobileMultilinkFrameCapability::set_maximumSampleSize ()
{ return *static_cast<maximumSampleSize::pointer>(fields[0]);}

inline H223Capability_mobileMultilinkFrameCapability::maximumSampleSize::reference H223Capability_mobileMultilinkFrameCapability::set_maximumSampleSize (maximumSampleSize::value_type::int_type value)
{ return *static_cast<maximumSampleSize::pointer>(fields[0]) = value ;}

inline H223Capability_mobileMultilinkFrameCapability::maximumPayloadLength::const_reference H223Capability_mobileMultilinkFrameCapability::get_maximumPayloadLength () const
{ return *static_cast<maximumPayloadLength::const_pointer>(fields[1]);}

inline H223Capability_mobileMultilinkFrameCapability::maximumPayloadLength::reference H223Capability_mobileMultilinkFrameCapability::ref_maximumPayloadLength ()
{ return *static_cast<maximumPayloadLength::pointer>(fields[1]);}

inline H223Capability_mobileMultilinkFrameCapability::maximumPayloadLength::reference H223Capability_mobileMultilinkFrameCapability::set_maximumPayloadLength ()
{ return *static_cast<maximumPayloadLength::pointer>(fields[1]);}

inline H223Capability_mobileMultilinkFrameCapability::maximumPayloadLength::reference H223Capability_mobileMultilinkFrameCapability::set_maximumPayloadLength (maximumPayloadLength::value_type::int_type value)
{ return *static_cast<maximumPayloadLength::pointer>(fields[1]) = value ;}

inline void H223Capability_mobileMultilinkFrameCapability::swap(H223Capability_mobileMultilinkFrameCapability& other)
{ Inherited::swap(other); }

inline H223Capability_mobileMultilinkFrameCapability* H223Capability_mobileMultilinkFrameCapability::clone() const
{ return static_cast<H223Capability_mobileMultilinkFrameCapability*> (Inherited::clone()); }

inline H2250Capability_mcCapability::centralizedConferenceMC::const_reference H2250Capability_mcCapability::get_centralizedConferenceMC () const
{ return *static_cast<centralizedConferenceMC::const_pointer>(fields[0]);}

inline H2250Capability_mcCapability::centralizedConferenceMC::reference H2250Capability_mcCapability::ref_centralizedConferenceMC ()
{ return *static_cast<centralizedConferenceMC::pointer>(fields[0]);}

inline H2250Capability_mcCapability::centralizedConferenceMC::reference H2250Capability_mcCapability::set_centralizedConferenceMC ()
{ return *static_cast<centralizedConferenceMC::pointer>(fields[0]);}

inline H2250Capability_mcCapability::centralizedConferenceMC::reference H2250Capability_mcCapability::set_centralizedConferenceMC (bool value)
{ return *static_cast<centralizedConferenceMC::pointer>(fields[0]) = value ;}

inline H2250Capability_mcCapability::decentralizedConferenceMC::const_reference H2250Capability_mcCapability::get_decentralizedConferenceMC () const
{ return *static_cast<decentralizedConferenceMC::const_pointer>(fields[1]);}

inline H2250Capability_mcCapability::decentralizedConferenceMC::reference H2250Capability_mcCapability::ref_decentralizedConferenceMC ()
{ return *static_cast<decentralizedConferenceMC::pointer>(fields[1]);}

inline H2250Capability_mcCapability::decentralizedConferenceMC::reference H2250Capability_mcCapability::set_decentralizedConferenceMC ()
{ return *static_cast<decentralizedConferenceMC::pointer>(fields[1]);}

inline H2250Capability_mcCapability::decentralizedConferenceMC::reference H2250Capability_mcCapability::set_decentralizedConferenceMC (bool value)
{ return *static_cast<decentralizedConferenceMC::pointer>(fields[1]) = value ;}

inline void H2250Capability_mcCapability::swap(H2250Capability_mcCapability& other)
{ Inherited::swap(other); }

inline H2250Capability_mcCapability* H2250Capability_mcCapability::clone() const
{ return static_cast<H2250Capability_mcCapability*> (Inherited::clone()); }

inline MediaTransportType_atm_AAL5_compressed::variable_delta::const_reference MediaTransportType_atm_AAL5_compressed::get_variable_delta () const
{ return *static_cast<variable_delta::const_pointer>(fields[0]);}

inline MediaTransportType_atm_AAL5_compressed::variable_delta::reference MediaTransportType_atm_AAL5_compressed::ref_variable_delta ()
{ return *static_cast<variable_delta::pointer>(fields[0]);}

inline MediaTransportType_atm_AAL5_compressed::variable_delta::reference MediaTransportType_atm_AAL5_compressed::set_variable_delta ()
{ return *static_cast<variable_delta::pointer>(fields[0]);}

inline MediaTransportType_atm_AAL5_compressed::variable_delta::reference MediaTransportType_atm_AAL5_compressed::set_variable_delta (bool value)
{ return *static_cast<variable_delta::pointer>(fields[0]) = value ;}

inline void MediaTransportType_atm_AAL5_compressed::swap(MediaTransportType_atm_AAL5_compressed& other)
{ Inherited::swap(other); }

inline MediaTransportType_atm_AAL5_compressed* MediaTransportType_atm_AAL5_compressed::clone() const
{ return static_cast<MediaTransportType_atm_AAL5_compressed*> (Inherited::clone()); }

inline RefPictureSelection_additionalPictureMemory::sqcifAdditionalPictureMemory::const_reference RefPictureSelection_additionalPictureMemory::get_sqcifAdditionalPictureMemory () const
{
  assert(hasOptionalField(e_sqcifAdditionalPictureMemory));
  return *static_cast<sqcifAdditionalPictureMemory::const_pointer>(fields[0]);
}

inline RefPictureSelection_additionalPictureMemory::sqcifAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::ref_sqcifAdditionalPictureMemory ()
{
  assert(hasOptionalField(e_sqcifAdditionalPictureMemory));
  return *static_cast<sqcifAdditionalPictureMemory::pointer>(fields[0]);
}

inline RefPictureSelection_additionalPictureMemory::sqcifAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_sqcifAdditionalPictureMemory ()
{
  includeOptionalField( e_sqcifAdditionalPictureMemory, 0);
  return *static_cast<sqcifAdditionalPictureMemory::pointer>(fields[0]);
}

inline RefPictureSelection_additionalPictureMemory::sqcifAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_sqcifAdditionalPictureMemory (sqcifAdditionalPictureMemory::value_type::int_type value)
{
  includeOptionalField( e_sqcifAdditionalPictureMemory, 0);
  return *static_cast<sqcifAdditionalPictureMemory::pointer>(fields[0]) = value;
}

inline void RefPictureSelection_additionalPictureMemory::omit_sqcifAdditionalPictureMemory ()
{ removeOptionalField( e_sqcifAdditionalPictureMemory); }

inline bool RefPictureSelection_additionalPictureMemory::sqcifAdditionalPictureMemory_isPresent () const
{ return hasOptionalField( e_sqcifAdditionalPictureMemory); }

inline RefPictureSelection_additionalPictureMemory::qcifAdditionalPictureMemory::const_reference RefPictureSelection_additionalPictureMemory::get_qcifAdditionalPictureMemory () const
{
  assert(hasOptionalField(e_qcifAdditionalPictureMemory));
  return *static_cast<qcifAdditionalPictureMemory::const_pointer>(fields[1]);
}

inline RefPictureSelection_additionalPictureMemory::qcifAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::ref_qcifAdditionalPictureMemory ()
{
  assert(hasOptionalField(e_qcifAdditionalPictureMemory));
  return *static_cast<qcifAdditionalPictureMemory::pointer>(fields[1]);
}

inline RefPictureSelection_additionalPictureMemory::qcifAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_qcifAdditionalPictureMemory ()
{
  includeOptionalField( e_qcifAdditionalPictureMemory, 1);
  return *static_cast<qcifAdditionalPictureMemory::pointer>(fields[1]);
}

inline RefPictureSelection_additionalPictureMemory::qcifAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_qcifAdditionalPictureMemory (qcifAdditionalPictureMemory::value_type::int_type value)
{
  includeOptionalField( e_qcifAdditionalPictureMemory, 1);
  return *static_cast<qcifAdditionalPictureMemory::pointer>(fields[1]) = value;
}

inline void RefPictureSelection_additionalPictureMemory::omit_qcifAdditionalPictureMemory ()
{ removeOptionalField( e_qcifAdditionalPictureMemory); }

inline bool RefPictureSelection_additionalPictureMemory::qcifAdditionalPictureMemory_isPresent () const
{ return hasOptionalField( e_qcifAdditionalPictureMemory); }

inline RefPictureSelection_additionalPictureMemory::cifAdditionalPictureMemory::const_reference RefPictureSelection_additionalPictureMemory::get_cifAdditionalPictureMemory () const
{
  assert(hasOptionalField(e_cifAdditionalPictureMemory));
  return *static_cast<cifAdditionalPictureMemory::const_pointer>(fields[2]);
}

inline RefPictureSelection_additionalPictureMemory::cifAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::ref_cifAdditionalPictureMemory ()
{
  assert(hasOptionalField(e_cifAdditionalPictureMemory));
  return *static_cast<cifAdditionalPictureMemory::pointer>(fields[2]);
}

inline RefPictureSelection_additionalPictureMemory::cifAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_cifAdditionalPictureMemory ()
{
  includeOptionalField( e_cifAdditionalPictureMemory, 2);
  return *static_cast<cifAdditionalPictureMemory::pointer>(fields[2]);
}

inline RefPictureSelection_additionalPictureMemory::cifAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_cifAdditionalPictureMemory (cifAdditionalPictureMemory::value_type::int_type value)
{
  includeOptionalField( e_cifAdditionalPictureMemory, 2);
  return *static_cast<cifAdditionalPictureMemory::pointer>(fields[2]) = value;
}

inline void RefPictureSelection_additionalPictureMemory::omit_cifAdditionalPictureMemory ()
{ removeOptionalField( e_cifAdditionalPictureMemory); }

inline bool RefPictureSelection_additionalPictureMemory::cifAdditionalPictureMemory_isPresent () const
{ return hasOptionalField( e_cifAdditionalPictureMemory); }

inline RefPictureSelection_additionalPictureMemory::cif4AdditionalPictureMemory::const_reference RefPictureSelection_additionalPictureMemory::get_cif4AdditionalPictureMemory () const
{
  assert(hasOptionalField(e_cif4AdditionalPictureMemory));
  return *static_cast<cif4AdditionalPictureMemory::const_pointer>(fields[3]);
}

inline RefPictureSelection_additionalPictureMemory::cif4AdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::ref_cif4AdditionalPictureMemory ()
{
  assert(hasOptionalField(e_cif4AdditionalPictureMemory));
  return *static_cast<cif4AdditionalPictureMemory::pointer>(fields[3]);
}

inline RefPictureSelection_additionalPictureMemory::cif4AdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_cif4AdditionalPictureMemory ()
{
  includeOptionalField( e_cif4AdditionalPictureMemory, 3);
  return *static_cast<cif4AdditionalPictureMemory::pointer>(fields[3]);
}

inline RefPictureSelection_additionalPictureMemory::cif4AdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_cif4AdditionalPictureMemory (cif4AdditionalPictureMemory::value_type::int_type value)
{
  includeOptionalField( e_cif4AdditionalPictureMemory, 3);
  return *static_cast<cif4AdditionalPictureMemory::pointer>(fields[3]) = value;
}

inline void RefPictureSelection_additionalPictureMemory::omit_cif4AdditionalPictureMemory ()
{ removeOptionalField( e_cif4AdditionalPictureMemory); }

inline bool RefPictureSelection_additionalPictureMemory::cif4AdditionalPictureMemory_isPresent () const
{ return hasOptionalField( e_cif4AdditionalPictureMemory); }

inline RefPictureSelection_additionalPictureMemory::cif16AdditionalPictureMemory::const_reference RefPictureSelection_additionalPictureMemory::get_cif16AdditionalPictureMemory () const
{
  assert(hasOptionalField(e_cif16AdditionalPictureMemory));
  return *static_cast<cif16AdditionalPictureMemory::const_pointer>(fields[4]);
}

inline RefPictureSelection_additionalPictureMemory::cif16AdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::ref_cif16AdditionalPictureMemory ()
{
  assert(hasOptionalField(e_cif16AdditionalPictureMemory));
  return *static_cast<cif16AdditionalPictureMemory::pointer>(fields[4]);
}

inline RefPictureSelection_additionalPictureMemory::cif16AdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_cif16AdditionalPictureMemory ()
{
  includeOptionalField( e_cif16AdditionalPictureMemory, 4);
  return *static_cast<cif16AdditionalPictureMemory::pointer>(fields[4]);
}

inline RefPictureSelection_additionalPictureMemory::cif16AdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_cif16AdditionalPictureMemory (cif16AdditionalPictureMemory::value_type::int_type value)
{
  includeOptionalField( e_cif16AdditionalPictureMemory, 4);
  return *static_cast<cif16AdditionalPictureMemory::pointer>(fields[4]) = value;
}

inline void RefPictureSelection_additionalPictureMemory::omit_cif16AdditionalPictureMemory ()
{ removeOptionalField( e_cif16AdditionalPictureMemory); }

inline bool RefPictureSelection_additionalPictureMemory::cif16AdditionalPictureMemory_isPresent () const
{ return hasOptionalField( e_cif16AdditionalPictureMemory); }

inline RefPictureSelection_additionalPictureMemory::bigCpfAdditionalPictureMemory::const_reference RefPictureSelection_additionalPictureMemory::get_bigCpfAdditionalPictureMemory () const
{
  assert(hasOptionalField(e_bigCpfAdditionalPictureMemory));
  return *static_cast<bigCpfAdditionalPictureMemory::const_pointer>(fields[5]);
}

inline RefPictureSelection_additionalPictureMemory::bigCpfAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::ref_bigCpfAdditionalPictureMemory ()
{
  assert(hasOptionalField(e_bigCpfAdditionalPictureMemory));
  return *static_cast<bigCpfAdditionalPictureMemory::pointer>(fields[5]);
}

inline RefPictureSelection_additionalPictureMemory::bigCpfAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_bigCpfAdditionalPictureMemory ()
{
  includeOptionalField( e_bigCpfAdditionalPictureMemory, 5);
  return *static_cast<bigCpfAdditionalPictureMemory::pointer>(fields[5]);
}

inline RefPictureSelection_additionalPictureMemory::bigCpfAdditionalPictureMemory::reference RefPictureSelection_additionalPictureMemory::set_bigCpfAdditionalPictureMemory (bigCpfAdditionalPictureMemory::value_type::int_type value)
{
  includeOptionalField( e_bigCpfAdditionalPictureMemory, 5);
  return *static_cast<bigCpfAdditionalPictureMemory::pointer>(fields[5]) = value;
}

inline void RefPictureSelection_additionalPictureMemory::omit_bigCpfAdditionalPictureMemory ()
{ removeOptionalField( e_bigCpfAdditionalPictureMemory); }

inline bool RefPictureSelection_additionalPictureMemory::bigCpfAdditionalPictureMemory_isPresent () const
{ return hasOptionalField( e_bigCpfAdditionalPictureMemory); }

inline void RefPictureSelection_additionalPictureMemory::swap(RefPictureSelection_additionalPictureMemory& other)
{ Inherited::swap(other); }

inline RefPictureSelection_additionalPictureMemory* RefPictureSelection_additionalPictureMemory::clone() const
{ return static_cast<RefPictureSelection_additionalPictureMemory*> (Inherited::clone()); }

inline RefPictureSelection_videoBackChannelSend::none::reference RefPictureSelection_videoBackChannelSend::select_none ()
{
    return *static_cast<none::pointer>(setSelection(none::id_, ASN1::AbstractData::create( &none::value_type::theInfo)));
}

inline bool RefPictureSelection_videoBackChannelSend::none_isSelected() const
{ 
    return currentSelection() == none::id_; 
}

inline RefPictureSelection_videoBackChannelSend::ackMessageOnly::reference RefPictureSelection_videoBackChannelSend::select_ackMessageOnly ()
{
    return *static_cast<ackMessageOnly::pointer>(setSelection(ackMessageOnly::id_, ASN1::AbstractData::create( &ackMessageOnly::value_type::theInfo)));
}

inline bool RefPictureSelection_videoBackChannelSend::ackMessageOnly_isSelected() const
{ 
    return currentSelection() == ackMessageOnly::id_; 
}

inline RefPictureSelection_videoBackChannelSend::nackMessageOnly::reference RefPictureSelection_videoBackChannelSend::select_nackMessageOnly ()
{
    return *static_cast<nackMessageOnly::pointer>(setSelection(nackMessageOnly::id_, ASN1::AbstractData::create( &nackMessageOnly::value_type::theInfo)));
}

inline bool RefPictureSelection_videoBackChannelSend::nackMessageOnly_isSelected() const
{ 
    return currentSelection() == nackMessageOnly::id_; 
}

inline RefPictureSelection_videoBackChannelSend::ackOrNackMessageOnly::reference RefPictureSelection_videoBackChannelSend::select_ackOrNackMessageOnly ()
{
    return *static_cast<ackOrNackMessageOnly::pointer>(setSelection(ackOrNackMessageOnly::id_, ASN1::AbstractData::create( &ackOrNackMessageOnly::value_type::theInfo)));
}

inline bool RefPictureSelection_videoBackChannelSend::ackOrNackMessageOnly_isSelected() const
{ 
    return currentSelection() == ackOrNackMessageOnly::id_; 
}

inline RefPictureSelection_videoBackChannelSend::ackAndNackMessage::reference RefPictureSelection_videoBackChannelSend::select_ackAndNackMessage ()
{
    return *static_cast<ackAndNackMessage::pointer>(setSelection(ackAndNackMessage::id_, ASN1::AbstractData::create( &ackAndNackMessage::value_type::theInfo)));
}

inline bool RefPictureSelection_videoBackChannelSend::ackAndNackMessage_isSelected() const
{ 
    return currentSelection() == ackAndNackMessage::id_; 
}

inline RefPictureSelection_videoBackChannelSend::RefPictureSelection_videoBackChannelSend(none::Id id, none::const_reference value)
  : Inherited(&theInfo, id, new none::value_type(value) )
{ }

inline RefPictureSelection_videoBackChannelSend::RefPictureSelection_videoBackChannelSend(ackMessageOnly::Id id, ackMessageOnly::const_reference value)
  : Inherited(&theInfo, id, new ackMessageOnly::value_type(value) )
{ }

inline RefPictureSelection_videoBackChannelSend::RefPictureSelection_videoBackChannelSend(nackMessageOnly::Id id, nackMessageOnly::const_reference value)
  : Inherited(&theInfo, id, new nackMessageOnly::value_type(value) )
{ }

inline RefPictureSelection_videoBackChannelSend::RefPictureSelection_videoBackChannelSend(ackOrNackMessageOnly::Id id, ackOrNackMessageOnly::const_reference value)
  : Inherited(&theInfo, id, new ackOrNackMessageOnly::value_type(value) )
{ }

inline RefPictureSelection_videoBackChannelSend::RefPictureSelection_videoBackChannelSend(ackAndNackMessage::Id id, ackAndNackMessage::const_reference value)
  : Inherited(&theInfo, id, new ackAndNackMessage::value_type(value) )
{ }


inline void RefPictureSelection_videoBackChannelSend::swap(RefPictureSelection_videoBackChannelSend & other)
{  Inherited::swap(other); }

inline RefPictureSelection_videoBackChannelSend* RefPictureSelection_videoBackChannelSend::clone() const
{ return static_cast<RefPictureSelection_videoBackChannelSend*> (Inherited::clone()); }

inline bool RefPictureSelection_videoBackChannelSend::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline AudioCapability_g7231::maxAl_sduAudioFrames::const_reference AudioCapability_g7231::get_maxAl_sduAudioFrames () const
{ return *static_cast<maxAl_sduAudioFrames::const_pointer>(fields[0]);}

inline AudioCapability_g7231::maxAl_sduAudioFrames::reference AudioCapability_g7231::ref_maxAl_sduAudioFrames ()
{ return *static_cast<maxAl_sduAudioFrames::pointer>(fields[0]);}

inline AudioCapability_g7231::maxAl_sduAudioFrames::reference AudioCapability_g7231::set_maxAl_sduAudioFrames ()
{ return *static_cast<maxAl_sduAudioFrames::pointer>(fields[0]);}

inline AudioCapability_g7231::maxAl_sduAudioFrames::reference AudioCapability_g7231::set_maxAl_sduAudioFrames (maxAl_sduAudioFrames::value_type::int_type value)
{ return *static_cast<maxAl_sduAudioFrames::pointer>(fields[0]) = value ;}

inline AudioCapability_g7231::silenceSuppression::const_reference AudioCapability_g7231::get_silenceSuppression () const
{ return *static_cast<silenceSuppression::const_pointer>(fields[1]);}

inline AudioCapability_g7231::silenceSuppression::reference AudioCapability_g7231::ref_silenceSuppression ()
{ return *static_cast<silenceSuppression::pointer>(fields[1]);}

inline AudioCapability_g7231::silenceSuppression::reference AudioCapability_g7231::set_silenceSuppression ()
{ return *static_cast<silenceSuppression::pointer>(fields[1]);}

inline AudioCapability_g7231::silenceSuppression::reference AudioCapability_g7231::set_silenceSuppression (bool value)
{ return *static_cast<silenceSuppression::pointer>(fields[1]) = value ;}

inline void AudioCapability_g7231::swap(AudioCapability_g7231& other)
{ Inherited::swap(other); }

inline AudioCapability_g7231* AudioCapability_g7231::clone() const
{ return static_cast<AudioCapability_g7231*> (Inherited::clone()); }

inline G7231AnnexCCapability_g723AnnexCAudioMode::highRateMode0::const_reference G7231AnnexCCapability_g723AnnexCAudioMode::get_highRateMode0 () const
{ return *static_cast<highRateMode0::const_pointer>(fields[0]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::highRateMode0::reference G7231AnnexCCapability_g723AnnexCAudioMode::ref_highRateMode0 ()
{ return *static_cast<highRateMode0::pointer>(fields[0]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::highRateMode0::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_highRateMode0 ()
{ return *static_cast<highRateMode0::pointer>(fields[0]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::highRateMode0::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_highRateMode0 (highRateMode0::value_type::int_type value)
{ return *static_cast<highRateMode0::pointer>(fields[0]) = value ;}

inline G7231AnnexCCapability_g723AnnexCAudioMode::highRateMode1::const_reference G7231AnnexCCapability_g723AnnexCAudioMode::get_highRateMode1 () const
{ return *static_cast<highRateMode1::const_pointer>(fields[1]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::highRateMode1::reference G7231AnnexCCapability_g723AnnexCAudioMode::ref_highRateMode1 ()
{ return *static_cast<highRateMode1::pointer>(fields[1]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::highRateMode1::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_highRateMode1 ()
{ return *static_cast<highRateMode1::pointer>(fields[1]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::highRateMode1::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_highRateMode1 (highRateMode1::value_type::int_type value)
{ return *static_cast<highRateMode1::pointer>(fields[1]) = value ;}

inline G7231AnnexCCapability_g723AnnexCAudioMode::lowRateMode0::const_reference G7231AnnexCCapability_g723AnnexCAudioMode::get_lowRateMode0 () const
{ return *static_cast<lowRateMode0::const_pointer>(fields[2]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::lowRateMode0::reference G7231AnnexCCapability_g723AnnexCAudioMode::ref_lowRateMode0 ()
{ return *static_cast<lowRateMode0::pointer>(fields[2]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::lowRateMode0::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_lowRateMode0 ()
{ return *static_cast<lowRateMode0::pointer>(fields[2]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::lowRateMode0::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_lowRateMode0 (lowRateMode0::value_type::int_type value)
{ return *static_cast<lowRateMode0::pointer>(fields[2]) = value ;}

inline G7231AnnexCCapability_g723AnnexCAudioMode::lowRateMode1::const_reference G7231AnnexCCapability_g723AnnexCAudioMode::get_lowRateMode1 () const
{ return *static_cast<lowRateMode1::const_pointer>(fields[3]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::lowRateMode1::reference G7231AnnexCCapability_g723AnnexCAudioMode::ref_lowRateMode1 ()
{ return *static_cast<lowRateMode1::pointer>(fields[3]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::lowRateMode1::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_lowRateMode1 ()
{ return *static_cast<lowRateMode1::pointer>(fields[3]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::lowRateMode1::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_lowRateMode1 (lowRateMode1::value_type::int_type value)
{ return *static_cast<lowRateMode1::pointer>(fields[3]) = value ;}

inline G7231AnnexCCapability_g723AnnexCAudioMode::sidMode0::const_reference G7231AnnexCCapability_g723AnnexCAudioMode::get_sidMode0 () const
{ return *static_cast<sidMode0::const_pointer>(fields[4]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::sidMode0::reference G7231AnnexCCapability_g723AnnexCAudioMode::ref_sidMode0 ()
{ return *static_cast<sidMode0::pointer>(fields[4]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::sidMode0::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_sidMode0 ()
{ return *static_cast<sidMode0::pointer>(fields[4]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::sidMode0::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_sidMode0 (sidMode0::value_type::int_type value)
{ return *static_cast<sidMode0::pointer>(fields[4]) = value ;}

inline G7231AnnexCCapability_g723AnnexCAudioMode::sidMode1::const_reference G7231AnnexCCapability_g723AnnexCAudioMode::get_sidMode1 () const
{ return *static_cast<sidMode1::const_pointer>(fields[5]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::sidMode1::reference G7231AnnexCCapability_g723AnnexCAudioMode::ref_sidMode1 ()
{ return *static_cast<sidMode1::pointer>(fields[5]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::sidMode1::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_sidMode1 ()
{ return *static_cast<sidMode1::pointer>(fields[5]);}

inline G7231AnnexCCapability_g723AnnexCAudioMode::sidMode1::reference G7231AnnexCCapability_g723AnnexCAudioMode::set_sidMode1 (sidMode1::value_type::int_type value)
{ return *static_cast<sidMode1::pointer>(fields[5]) = value ;}

inline void G7231AnnexCCapability_g723AnnexCAudioMode::swap(G7231AnnexCCapability_g723AnnexCAudioMode& other)
{ Inherited::swap(other); }

inline G7231AnnexCCapability_g723AnnexCAudioMode* G7231AnnexCCapability_g723AnnexCAudioMode::clone() const
{ return static_cast<G7231AnnexCCapability_g723AnnexCAudioMode*> (Inherited::clone()); }

inline T84Profile_t84Restricted::qcif::const_reference T84Profile_t84Restricted::get_qcif () const
{ return *static_cast<qcif::const_pointer>(fields[0]);}

inline T84Profile_t84Restricted::qcif::reference T84Profile_t84Restricted::ref_qcif ()
{ return *static_cast<qcif::pointer>(fields[0]);}

inline T84Profile_t84Restricted::qcif::reference T84Profile_t84Restricted::set_qcif ()
{ return *static_cast<qcif::pointer>(fields[0]);}

inline T84Profile_t84Restricted::qcif::reference T84Profile_t84Restricted::set_qcif (bool value)
{ return *static_cast<qcif::pointer>(fields[0]) = value ;}

inline T84Profile_t84Restricted::cif::const_reference T84Profile_t84Restricted::get_cif () const
{ return *static_cast<cif::const_pointer>(fields[1]);}

inline T84Profile_t84Restricted::cif::reference T84Profile_t84Restricted::ref_cif ()
{ return *static_cast<cif::pointer>(fields[1]);}

inline T84Profile_t84Restricted::cif::reference T84Profile_t84Restricted::set_cif ()
{ return *static_cast<cif::pointer>(fields[1]);}

inline T84Profile_t84Restricted::cif::reference T84Profile_t84Restricted::set_cif (bool value)
{ return *static_cast<cif::pointer>(fields[1]) = value ;}

inline T84Profile_t84Restricted::ccir601Seq::const_reference T84Profile_t84Restricted::get_ccir601Seq () const
{ return *static_cast<ccir601Seq::const_pointer>(fields[2]);}

inline T84Profile_t84Restricted::ccir601Seq::reference T84Profile_t84Restricted::ref_ccir601Seq ()
{ return *static_cast<ccir601Seq::pointer>(fields[2]);}

inline T84Profile_t84Restricted::ccir601Seq::reference T84Profile_t84Restricted::set_ccir601Seq ()
{ return *static_cast<ccir601Seq::pointer>(fields[2]);}

inline T84Profile_t84Restricted::ccir601Seq::reference T84Profile_t84Restricted::set_ccir601Seq (bool value)
{ return *static_cast<ccir601Seq::pointer>(fields[2]) = value ;}

inline T84Profile_t84Restricted::ccir601Prog::const_reference T84Profile_t84Restricted::get_ccir601Prog () const
{ return *static_cast<ccir601Prog::const_pointer>(fields[3]);}

inline T84Profile_t84Restricted::ccir601Prog::reference T84Profile_t84Restricted::ref_ccir601Prog ()
{ return *static_cast<ccir601Prog::pointer>(fields[3]);}

inline T84Profile_t84Restricted::ccir601Prog::reference T84Profile_t84Restricted::set_ccir601Prog ()
{ return *static_cast<ccir601Prog::pointer>(fields[3]);}

inline T84Profile_t84Restricted::ccir601Prog::reference T84Profile_t84Restricted::set_ccir601Prog (bool value)
{ return *static_cast<ccir601Prog::pointer>(fields[3]) = value ;}

inline T84Profile_t84Restricted::hdtvSeq::const_reference T84Profile_t84Restricted::get_hdtvSeq () const
{ return *static_cast<hdtvSeq::const_pointer>(fields[4]);}

inline T84Profile_t84Restricted::hdtvSeq::reference T84Profile_t84Restricted::ref_hdtvSeq ()
{ return *static_cast<hdtvSeq::pointer>(fields[4]);}

inline T84Profile_t84Restricted::hdtvSeq::reference T84Profile_t84Restricted::set_hdtvSeq ()
{ return *static_cast<hdtvSeq::pointer>(fields[4]);}

inline T84Profile_t84Restricted::hdtvSeq::reference T84Profile_t84Restricted::set_hdtvSeq (bool value)
{ return *static_cast<hdtvSeq::pointer>(fields[4]) = value ;}

inline T84Profile_t84Restricted::hdtvProg::const_reference T84Profile_t84Restricted::get_hdtvProg () const
{ return *static_cast<hdtvProg::const_pointer>(fields[5]);}

inline T84Profile_t84Restricted::hdtvProg::reference T84Profile_t84Restricted::ref_hdtvProg ()
{ return *static_cast<hdtvProg::pointer>(fields[5]);}

inline T84Profile_t84Restricted::hdtvProg::reference T84Profile_t84Restricted::set_hdtvProg ()
{ return *static_cast<hdtvProg::pointer>(fields[5]);}

inline T84Profile_t84Restricted::hdtvProg::reference T84Profile_t84Restricted::set_hdtvProg (bool value)
{ return *static_cast<hdtvProg::pointer>(fields[5]) = value ;}

inline T84Profile_t84Restricted::g3FacsMH200x100::const_reference T84Profile_t84Restricted::get_g3FacsMH200x100 () const
{ return *static_cast<g3FacsMH200x100::const_pointer>(fields[6]);}

inline T84Profile_t84Restricted::g3FacsMH200x100::reference T84Profile_t84Restricted::ref_g3FacsMH200x100 ()
{ return *static_cast<g3FacsMH200x100::pointer>(fields[6]);}

inline T84Profile_t84Restricted::g3FacsMH200x100::reference T84Profile_t84Restricted::set_g3FacsMH200x100 ()
{ return *static_cast<g3FacsMH200x100::pointer>(fields[6]);}

inline T84Profile_t84Restricted::g3FacsMH200x100::reference T84Profile_t84Restricted::set_g3FacsMH200x100 (bool value)
{ return *static_cast<g3FacsMH200x100::pointer>(fields[6]) = value ;}

inline T84Profile_t84Restricted::g3FacsMH200x200::const_reference T84Profile_t84Restricted::get_g3FacsMH200x200 () const
{ return *static_cast<g3FacsMH200x200::const_pointer>(fields[7]);}

inline T84Profile_t84Restricted::g3FacsMH200x200::reference T84Profile_t84Restricted::ref_g3FacsMH200x200 ()
{ return *static_cast<g3FacsMH200x200::pointer>(fields[7]);}

inline T84Profile_t84Restricted::g3FacsMH200x200::reference T84Profile_t84Restricted::set_g3FacsMH200x200 ()
{ return *static_cast<g3FacsMH200x200::pointer>(fields[7]);}

inline T84Profile_t84Restricted::g3FacsMH200x200::reference T84Profile_t84Restricted::set_g3FacsMH200x200 (bool value)
{ return *static_cast<g3FacsMH200x200::pointer>(fields[7]) = value ;}

inline T84Profile_t84Restricted::g4FacsMMR200x100::const_reference T84Profile_t84Restricted::get_g4FacsMMR200x100 () const
{ return *static_cast<g4FacsMMR200x100::const_pointer>(fields[8]);}

inline T84Profile_t84Restricted::g4FacsMMR200x100::reference T84Profile_t84Restricted::ref_g4FacsMMR200x100 ()
{ return *static_cast<g4FacsMMR200x100::pointer>(fields[8]);}

inline T84Profile_t84Restricted::g4FacsMMR200x100::reference T84Profile_t84Restricted::set_g4FacsMMR200x100 ()
{ return *static_cast<g4FacsMMR200x100::pointer>(fields[8]);}

inline T84Profile_t84Restricted::g4FacsMMR200x100::reference T84Profile_t84Restricted::set_g4FacsMMR200x100 (bool value)
{ return *static_cast<g4FacsMMR200x100::pointer>(fields[8]) = value ;}

inline T84Profile_t84Restricted::g4FacsMMR200x200::const_reference T84Profile_t84Restricted::get_g4FacsMMR200x200 () const
{ return *static_cast<g4FacsMMR200x200::const_pointer>(fields[9]);}

inline T84Profile_t84Restricted::g4FacsMMR200x200::reference T84Profile_t84Restricted::ref_g4FacsMMR200x200 ()
{ return *static_cast<g4FacsMMR200x200::pointer>(fields[9]);}

inline T84Profile_t84Restricted::g4FacsMMR200x200::reference T84Profile_t84Restricted::set_g4FacsMMR200x200 ()
{ return *static_cast<g4FacsMMR200x200::pointer>(fields[9]);}

inline T84Profile_t84Restricted::g4FacsMMR200x200::reference T84Profile_t84Restricted::set_g4FacsMMR200x200 (bool value)
{ return *static_cast<g4FacsMMR200x200::pointer>(fields[9]) = value ;}

inline T84Profile_t84Restricted::jbig200x200Seq::const_reference T84Profile_t84Restricted::get_jbig200x200Seq () const
{ return *static_cast<jbig200x200Seq::const_pointer>(fields[10]);}

inline T84Profile_t84Restricted::jbig200x200Seq::reference T84Profile_t84Restricted::ref_jbig200x200Seq ()
{ return *static_cast<jbig200x200Seq::pointer>(fields[10]);}

inline T84Profile_t84Restricted::jbig200x200Seq::reference T84Profile_t84Restricted::set_jbig200x200Seq ()
{ return *static_cast<jbig200x200Seq::pointer>(fields[10]);}

inline T84Profile_t84Restricted::jbig200x200Seq::reference T84Profile_t84Restricted::set_jbig200x200Seq (bool value)
{ return *static_cast<jbig200x200Seq::pointer>(fields[10]) = value ;}

inline T84Profile_t84Restricted::jbig200x200Prog::const_reference T84Profile_t84Restricted::get_jbig200x200Prog () const
{ return *static_cast<jbig200x200Prog::const_pointer>(fields[11]);}

inline T84Profile_t84Restricted::jbig200x200Prog::reference T84Profile_t84Restricted::ref_jbig200x200Prog ()
{ return *static_cast<jbig200x200Prog::pointer>(fields[11]);}

inline T84Profile_t84Restricted::jbig200x200Prog::reference T84Profile_t84Restricted::set_jbig200x200Prog ()
{ return *static_cast<jbig200x200Prog::pointer>(fields[11]);}

inline T84Profile_t84Restricted::jbig200x200Prog::reference T84Profile_t84Restricted::set_jbig200x200Prog (bool value)
{ return *static_cast<jbig200x200Prog::pointer>(fields[11]) = value ;}

inline T84Profile_t84Restricted::jbig300x300Seq::const_reference T84Profile_t84Restricted::get_jbig300x300Seq () const
{ return *static_cast<jbig300x300Seq::const_pointer>(fields[12]);}

inline T84Profile_t84Restricted::jbig300x300Seq::reference T84Profile_t84Restricted::ref_jbig300x300Seq ()
{ return *static_cast<jbig300x300Seq::pointer>(fields[12]);}

inline T84Profile_t84Restricted::jbig300x300Seq::reference T84Profile_t84Restricted::set_jbig300x300Seq ()
{ return *static_cast<jbig300x300Seq::pointer>(fields[12]);}

inline T84Profile_t84Restricted::jbig300x300Seq::reference T84Profile_t84Restricted::set_jbig300x300Seq (bool value)
{ return *static_cast<jbig300x300Seq::pointer>(fields[12]) = value ;}

inline T84Profile_t84Restricted::jbig300x300Prog::const_reference T84Profile_t84Restricted::get_jbig300x300Prog () const
{ return *static_cast<jbig300x300Prog::const_pointer>(fields[13]);}

inline T84Profile_t84Restricted::jbig300x300Prog::reference T84Profile_t84Restricted::ref_jbig300x300Prog ()
{ return *static_cast<jbig300x300Prog::pointer>(fields[13]);}

inline T84Profile_t84Restricted::jbig300x300Prog::reference T84Profile_t84Restricted::set_jbig300x300Prog ()
{ return *static_cast<jbig300x300Prog::pointer>(fields[13]);}

inline T84Profile_t84Restricted::jbig300x300Prog::reference T84Profile_t84Restricted::set_jbig300x300Prog (bool value)
{ return *static_cast<jbig300x300Prog::pointer>(fields[13]) = value ;}

inline T84Profile_t84Restricted::digPhotoLow::const_reference T84Profile_t84Restricted::get_digPhotoLow () const
{ return *static_cast<digPhotoLow::const_pointer>(fields[14]);}

inline T84Profile_t84Restricted::digPhotoLow::reference T84Profile_t84Restricted::ref_digPhotoLow ()
{ return *static_cast<digPhotoLow::pointer>(fields[14]);}

inline T84Profile_t84Restricted::digPhotoLow::reference T84Profile_t84Restricted::set_digPhotoLow ()
{ return *static_cast<digPhotoLow::pointer>(fields[14]);}

inline T84Profile_t84Restricted::digPhotoLow::reference T84Profile_t84Restricted::set_digPhotoLow (bool value)
{ return *static_cast<digPhotoLow::pointer>(fields[14]) = value ;}

inline T84Profile_t84Restricted::digPhotoMedSeq::const_reference T84Profile_t84Restricted::get_digPhotoMedSeq () const
{ return *static_cast<digPhotoMedSeq::const_pointer>(fields[15]);}

inline T84Profile_t84Restricted::digPhotoMedSeq::reference T84Profile_t84Restricted::ref_digPhotoMedSeq ()
{ return *static_cast<digPhotoMedSeq::pointer>(fields[15]);}

inline T84Profile_t84Restricted::digPhotoMedSeq::reference T84Profile_t84Restricted::set_digPhotoMedSeq ()
{ return *static_cast<digPhotoMedSeq::pointer>(fields[15]);}

inline T84Profile_t84Restricted::digPhotoMedSeq::reference T84Profile_t84Restricted::set_digPhotoMedSeq (bool value)
{ return *static_cast<digPhotoMedSeq::pointer>(fields[15]) = value ;}

inline T84Profile_t84Restricted::digPhotoMedProg::const_reference T84Profile_t84Restricted::get_digPhotoMedProg () const
{ return *static_cast<digPhotoMedProg::const_pointer>(fields[16]);}

inline T84Profile_t84Restricted::digPhotoMedProg::reference T84Profile_t84Restricted::ref_digPhotoMedProg ()
{ return *static_cast<digPhotoMedProg::pointer>(fields[16]);}

inline T84Profile_t84Restricted::digPhotoMedProg::reference T84Profile_t84Restricted::set_digPhotoMedProg ()
{ return *static_cast<digPhotoMedProg::pointer>(fields[16]);}

inline T84Profile_t84Restricted::digPhotoMedProg::reference T84Profile_t84Restricted::set_digPhotoMedProg (bool value)
{ return *static_cast<digPhotoMedProg::pointer>(fields[16]) = value ;}

inline T84Profile_t84Restricted::digPhotoHighSeq::const_reference T84Profile_t84Restricted::get_digPhotoHighSeq () const
{ return *static_cast<digPhotoHighSeq::const_pointer>(fields[17]);}

inline T84Profile_t84Restricted::digPhotoHighSeq::reference T84Profile_t84Restricted::ref_digPhotoHighSeq ()
{ return *static_cast<digPhotoHighSeq::pointer>(fields[17]);}

inline T84Profile_t84Restricted::digPhotoHighSeq::reference T84Profile_t84Restricted::set_digPhotoHighSeq ()
{ return *static_cast<digPhotoHighSeq::pointer>(fields[17]);}

inline T84Profile_t84Restricted::digPhotoHighSeq::reference T84Profile_t84Restricted::set_digPhotoHighSeq (bool value)
{ return *static_cast<digPhotoHighSeq::pointer>(fields[17]) = value ;}

inline T84Profile_t84Restricted::digPhotoHighProg::const_reference T84Profile_t84Restricted::get_digPhotoHighProg () const
{ return *static_cast<digPhotoHighProg::const_pointer>(fields[18]);}

inline T84Profile_t84Restricted::digPhotoHighProg::reference T84Profile_t84Restricted::ref_digPhotoHighProg ()
{ return *static_cast<digPhotoHighProg::pointer>(fields[18]);}

inline T84Profile_t84Restricted::digPhotoHighProg::reference T84Profile_t84Restricted::set_digPhotoHighProg ()
{ return *static_cast<digPhotoHighProg::pointer>(fields[18]);}

inline T84Profile_t84Restricted::digPhotoHighProg::reference T84Profile_t84Restricted::set_digPhotoHighProg (bool value)
{ return *static_cast<digPhotoHighProg::pointer>(fields[18]) = value ;}

inline void T84Profile_t84Restricted::swap(T84Profile_t84Restricted& other)
{ Inherited::swap(other); }

inline T84Profile_t84Restricted* T84Profile_t84Restricted::clone() const
{ return static_cast<T84Profile_t84Restricted*> (Inherited::clone()); }

inline T38FaxUdpOptions_t38FaxUdpEC::t38UDPFEC::reference T38FaxUdpOptions_t38FaxUdpEC::select_t38UDPFEC ()
{
    return *static_cast<t38UDPFEC::pointer>(setSelection(t38UDPFEC::id_, ASN1::AbstractData::create( &t38UDPFEC::value_type::theInfo)));
}

inline bool T38FaxUdpOptions_t38FaxUdpEC::t38UDPFEC_isSelected() const
{ 
    return currentSelection() == t38UDPFEC::id_; 
}

inline T38FaxUdpOptions_t38FaxUdpEC::t38UDPRedundancy::reference T38FaxUdpOptions_t38FaxUdpEC::select_t38UDPRedundancy ()
{
    return *static_cast<t38UDPRedundancy::pointer>(setSelection(t38UDPRedundancy::id_, ASN1::AbstractData::create( &t38UDPRedundancy::value_type::theInfo)));
}

inline bool T38FaxUdpOptions_t38FaxUdpEC::t38UDPRedundancy_isSelected() const
{ 
    return currentSelection() == t38UDPRedundancy::id_; 
}

inline T38FaxUdpOptions_t38FaxUdpEC::T38FaxUdpOptions_t38FaxUdpEC(t38UDPFEC::Id id, t38UDPFEC::const_reference value)
  : Inherited(&theInfo, id, new t38UDPFEC::value_type(value) )
{ }

inline T38FaxUdpOptions_t38FaxUdpEC::T38FaxUdpOptions_t38FaxUdpEC(t38UDPRedundancy::Id id, t38UDPRedundancy::const_reference value)
  : Inherited(&theInfo, id, new t38UDPRedundancy::value_type(value) )
{ }


inline void T38FaxUdpOptions_t38FaxUdpEC::swap(T38FaxUdpOptions_t38FaxUdpEC & other)
{  Inherited::swap(other); }

inline T38FaxUdpOptions_t38FaxUdpEC* T38FaxUdpOptions_t38FaxUdpEC::clone() const
{ return static_cast<T38FaxUdpOptions_t38FaxUdpEC*> (Inherited::clone()); }

inline bool T38FaxUdpOptions_t38FaxUdpEC::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline FECCapability_rfc2733Format::rfc2733rfc2198::const_reference FECCapability_rfc2733Format::get_rfc2733rfc2198 () const
{
    assert(currentSelection() ==rfc2733rfc2198::id_);
    return *static_cast<rfc2733rfc2198::const_pointer>(choice.get());
}

inline FECCapability_rfc2733Format::rfc2733rfc2198::reference FECCapability_rfc2733Format::ref_rfc2733rfc2198 ()
{
    assert(currentSelection() ==rfc2733rfc2198::id_);
    return *static_cast<rfc2733rfc2198::pointer>(choice.get());
}

inline FECCapability_rfc2733Format::rfc2733rfc2198::reference FECCapability_rfc2733Format::select_rfc2733rfc2198 ()
{
    return *static_cast<rfc2733rfc2198::pointer>(setSelection(rfc2733rfc2198::id_, ASN1::AbstractData::create( &rfc2733rfc2198::value_type::theInfo)));
}

inline FECCapability_rfc2733Format::rfc2733rfc2198::reference FECCapability_rfc2733Format::select_rfc2733rfc2198 (FECCapability_rfc2733Format::rfc2733rfc2198::value_type::int_type value)
{
    return select_rfc2733rfc2198() = value;
}

inline bool FECCapability_rfc2733Format::rfc2733rfc2198_isSelected() const
{ 
    return currentSelection() == rfc2733rfc2198::id_; 
}

inline FECCapability_rfc2733Format::rfc2733sameport::const_reference FECCapability_rfc2733Format::get_rfc2733sameport () const
{
    assert(currentSelection() ==rfc2733sameport::id_);
    return *static_cast<rfc2733sameport::const_pointer>(choice.get());
}

inline FECCapability_rfc2733Format::rfc2733sameport::reference FECCapability_rfc2733Format::ref_rfc2733sameport ()
{
    assert(currentSelection() ==rfc2733sameport::id_);
    return *static_cast<rfc2733sameport::pointer>(choice.get());
}

inline FECCapability_rfc2733Format::rfc2733sameport::reference FECCapability_rfc2733Format::select_rfc2733sameport ()
{
    return *static_cast<rfc2733sameport::pointer>(setSelection(rfc2733sameport::id_, ASN1::AbstractData::create( &rfc2733sameport::value_type::theInfo)));
}

inline FECCapability_rfc2733Format::rfc2733sameport::reference FECCapability_rfc2733Format::select_rfc2733sameport (FECCapability_rfc2733Format::rfc2733sameport::value_type::int_type value)
{
    return select_rfc2733sameport() = value;
}

inline bool FECCapability_rfc2733Format::rfc2733sameport_isSelected() const
{ 
    return currentSelection() == rfc2733sameport::id_; 
}

inline FECCapability_rfc2733Format::rfc2733diffport::const_reference FECCapability_rfc2733Format::get_rfc2733diffport () const
{
    assert(currentSelection() ==rfc2733diffport::id_);
    return *static_cast<rfc2733diffport::const_pointer>(choice.get());
}

inline FECCapability_rfc2733Format::rfc2733diffport::reference FECCapability_rfc2733Format::ref_rfc2733diffport ()
{
    assert(currentSelection() ==rfc2733diffport::id_);
    return *static_cast<rfc2733diffport::pointer>(choice.get());
}

inline FECCapability_rfc2733Format::rfc2733diffport::reference FECCapability_rfc2733Format::select_rfc2733diffport ()
{
    return *static_cast<rfc2733diffport::pointer>(setSelection(rfc2733diffport::id_, ASN1::AbstractData::create( &rfc2733diffport::value_type::theInfo)));
}

inline FECCapability_rfc2733Format::rfc2733diffport::reference FECCapability_rfc2733Format::select_rfc2733diffport (FECCapability_rfc2733Format::rfc2733diffport::value_type::int_type value)
{
    return select_rfc2733diffport() = value;
}

inline bool FECCapability_rfc2733Format::rfc2733diffport_isSelected() const
{ 
    return currentSelection() == rfc2733diffport::id_; 
}

inline FECCapability_rfc2733Format::FECCapability_rfc2733Format(rfc2733rfc2198::Id id, rfc2733rfc2198::value_type::int_type value)
  : Inherited(&theInfo, id, new rfc2733rfc2198::value_type(value) )
{ }

inline FECCapability_rfc2733Format::FECCapability_rfc2733Format(rfc2733sameport::Id id, rfc2733sameport::value_type::int_type value)
  : Inherited(&theInfo, id, new rfc2733sameport::value_type(value) )
{ }

inline FECCapability_rfc2733Format::FECCapability_rfc2733Format(rfc2733diffport::Id id, rfc2733diffport::value_type::int_type value)
  : Inherited(&theInfo, id, new rfc2733diffport::value_type(value) )
{ }


inline void FECCapability_rfc2733Format::swap(FECCapability_rfc2733Format & other)
{  Inherited::swap(other); }

inline FECCapability_rfc2733Format* FECCapability_rfc2733Format::clone() const
{ return static_cast<FECCapability_rfc2733Format*> (Inherited::clone()); }

inline bool FECCapability_rfc2733Format::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NetworkAccessParameters_distribution::unicast::reference NetworkAccessParameters_distribution::select_unicast ()
{
    return *static_cast<unicast::pointer>(setSelection(unicast::id_, ASN1::AbstractData::create( &unicast::value_type::theInfo)));
}

inline bool NetworkAccessParameters_distribution::unicast_isSelected() const
{ 
    return currentSelection() == unicast::id_; 
}

inline NetworkAccessParameters_distribution::multicast::reference NetworkAccessParameters_distribution::select_multicast ()
{
    return *static_cast<multicast::pointer>(setSelection(multicast::id_, ASN1::AbstractData::create( &multicast::value_type::theInfo)));
}

inline bool NetworkAccessParameters_distribution::multicast_isSelected() const
{ 
    return currentSelection() == multicast::id_; 
}

inline NetworkAccessParameters_distribution::NetworkAccessParameters_distribution(unicast::Id id, unicast::const_reference value)
  : Inherited(&theInfo, id, new unicast::value_type(value) )
{ }

inline NetworkAccessParameters_distribution::NetworkAccessParameters_distribution(multicast::Id id, multicast::const_reference value)
  : Inherited(&theInfo, id, new multicast::value_type(value) )
{ }


inline void NetworkAccessParameters_distribution::swap(NetworkAccessParameters_distribution & other)
{  Inherited::swap(other); }

inline NetworkAccessParameters_distribution* NetworkAccessParameters_distribution::clone() const
{ return static_cast<NetworkAccessParameters_distribution*> (Inherited::clone()); }

inline bool NetworkAccessParameters_distribution::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NetworkAccessParameters_t120SetupProcedure::originateCall::reference NetworkAccessParameters_t120SetupProcedure::select_originateCall ()
{
    return *static_cast<originateCall::pointer>(setSelection(originateCall::id_, ASN1::AbstractData::create( &originateCall::value_type::theInfo)));
}

inline bool NetworkAccessParameters_t120SetupProcedure::originateCall_isSelected() const
{ 
    return currentSelection() == originateCall::id_; 
}

inline NetworkAccessParameters_t120SetupProcedure::waitForCall::reference NetworkAccessParameters_t120SetupProcedure::select_waitForCall ()
{
    return *static_cast<waitForCall::pointer>(setSelection(waitForCall::id_, ASN1::AbstractData::create( &waitForCall::value_type::theInfo)));
}

inline bool NetworkAccessParameters_t120SetupProcedure::waitForCall_isSelected() const
{ 
    return currentSelection() == waitForCall::id_; 
}

inline NetworkAccessParameters_t120SetupProcedure::issueQuery::reference NetworkAccessParameters_t120SetupProcedure::select_issueQuery ()
{
    return *static_cast<issueQuery::pointer>(setSelection(issueQuery::id_, ASN1::AbstractData::create( &issueQuery::value_type::theInfo)));
}

inline bool NetworkAccessParameters_t120SetupProcedure::issueQuery_isSelected() const
{ 
    return currentSelection() == issueQuery::id_; 
}

inline NetworkAccessParameters_t120SetupProcedure::NetworkAccessParameters_t120SetupProcedure(originateCall::Id id, originateCall::const_reference value)
  : Inherited(&theInfo, id, new originateCall::value_type(value) )
{ }

inline NetworkAccessParameters_t120SetupProcedure::NetworkAccessParameters_t120SetupProcedure(waitForCall::Id id, waitForCall::const_reference value)
  : Inherited(&theInfo, id, new waitForCall::value_type(value) )
{ }

inline NetworkAccessParameters_t120SetupProcedure::NetworkAccessParameters_t120SetupProcedure(issueQuery::Id id, issueQuery::const_reference value)
  : Inherited(&theInfo, id, new issueQuery::value_type(value) )
{ }


inline void NetworkAccessParameters_t120SetupProcedure::swap(NetworkAccessParameters_t120SetupProcedure & other)
{  Inherited::swap(other); }

inline NetworkAccessParameters_t120SetupProcedure* NetworkAccessParameters_t120SetupProcedure::clone() const
{ return static_cast<NetworkAccessParameters_t120SetupProcedure*> (Inherited::clone()); }

inline bool NetworkAccessParameters_t120SetupProcedure::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline Q2931Address_address::internationalNumber::value_type* Q2931Address_address::internationalNumber::value_type::clone() const
{ return static_cast<value_type*> (Inherited::clone()); }

inline bool Q2931Address_address::internationalNumber::value_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline Q2931Address_address::internationalNumber::const_reference Q2931Address_address::get_internationalNumber () const
{
    assert(currentSelection() ==internationalNumber::id_);
    return *static_cast<internationalNumber::const_pointer>(choice.get());
}

inline Q2931Address_address::internationalNumber::reference Q2931Address_address::ref_internationalNumber ()
{
    assert(currentSelection() ==internationalNumber::id_);
    return *static_cast<internationalNumber::pointer>(choice.get());
}

inline Q2931Address_address::internationalNumber::reference Q2931Address_address::select_internationalNumber ()
{
    return *static_cast<internationalNumber::pointer>(setSelection(internationalNumber::id_, ASN1::AbstractData::create( &internationalNumber::value_type::theInfo)));
}

inline Q2931Address_address::internationalNumber::reference Q2931Address_address::select_internationalNumber (const std::string& value)
{
    return select_internationalNumber() = value;
}

inline bool Q2931Address_address::internationalNumber_isSelected() const
{ 
    return currentSelection() == internationalNumber::id_; 
}

inline Q2931Address_address::nsapAddress::const_reference Q2931Address_address::get_nsapAddress () const
{
    assert(currentSelection() ==nsapAddress::id_);
    return *static_cast<nsapAddress::const_pointer>(choice.get());
}

inline Q2931Address_address::nsapAddress::reference Q2931Address_address::ref_nsapAddress ()
{
    assert(currentSelection() ==nsapAddress::id_);
    return *static_cast<nsapAddress::pointer>(choice.get());
}

inline Q2931Address_address::nsapAddress::reference Q2931Address_address::select_nsapAddress ()
{
    return *static_cast<nsapAddress::pointer>(setSelection(nsapAddress::id_, ASN1::AbstractData::create( &nsapAddress::value_type::theInfo)));
}

inline Q2931Address_address::nsapAddress::reference Q2931Address_address::select_nsapAddress (const std::vector<char>& value)
{
    return select_nsapAddress() = value;
}

inline bool Q2931Address_address::nsapAddress_isSelected() const
{ 
    return currentSelection() == nsapAddress::id_; 
}

inline Q2931Address_address::Q2931Address_address(internationalNumber::Id id, const std::string& value)
  : Inherited(&theInfo, id, new internationalNumber::value_type(value) )
{ }

inline Q2931Address_address::Q2931Address_address(nsapAddress::Id id, const std::vector<char>& value)
  : Inherited(&theInfo, id, new nsapAddress::value_type(value) )
{ }


inline void Q2931Address_address::swap(Q2931Address_address & other)
{  Inherited::swap(other); }

inline Q2931Address_address* Q2931Address_address::clone() const
{ return static_cast<Q2931Address_address*> (Inherited::clone()); }

inline bool Q2931Address_address::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223AL1MParameters_transferMode::framed::reference H223AL1MParameters_transferMode::select_framed ()
{
    return *static_cast<framed::pointer>(setSelection(framed::id_, ASN1::AbstractData::create( &framed::value_type::theInfo)));
}

inline bool H223AL1MParameters_transferMode::framed_isSelected() const
{ 
    return currentSelection() == framed::id_; 
}

inline H223AL1MParameters_transferMode::unframed::reference H223AL1MParameters_transferMode::select_unframed ()
{
    return *static_cast<unframed::pointer>(setSelection(unframed::id_, ASN1::AbstractData::create( &unframed::value_type::theInfo)));
}

inline bool H223AL1MParameters_transferMode::unframed_isSelected() const
{ 
    return currentSelection() == unframed::id_; 
}

inline H223AL1MParameters_transferMode::H223AL1MParameters_transferMode(framed::Id id, framed::const_reference value)
  : Inherited(&theInfo, id, new framed::value_type(value) )
{ }

inline H223AL1MParameters_transferMode::H223AL1MParameters_transferMode(unframed::Id id, unframed::const_reference value)
  : Inherited(&theInfo, id, new unframed::value_type(value) )
{ }


inline void H223AL1MParameters_transferMode::swap(H223AL1MParameters_transferMode & other)
{  Inherited::swap(other); }

inline H223AL1MParameters_transferMode* H223AL1MParameters_transferMode::clone() const
{ return static_cast<H223AL1MParameters_transferMode*> (Inherited::clone()); }

inline bool H223AL1MParameters_transferMode::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223AL1MParameters_headerFEC::sebch16_7::reference H223AL1MParameters_headerFEC::select_sebch16_7 ()
{
    return *static_cast<sebch16_7::pointer>(setSelection(sebch16_7::id_, ASN1::AbstractData::create( &sebch16_7::value_type::theInfo)));
}

inline bool H223AL1MParameters_headerFEC::sebch16_7_isSelected() const
{ 
    return currentSelection() == sebch16_7::id_; 
}

inline H223AL1MParameters_headerFEC::golay24_12::reference H223AL1MParameters_headerFEC::select_golay24_12 ()
{
    return *static_cast<golay24_12::pointer>(setSelection(golay24_12::id_, ASN1::AbstractData::create( &golay24_12::value_type::theInfo)));
}

inline bool H223AL1MParameters_headerFEC::golay24_12_isSelected() const
{ 
    return currentSelection() == golay24_12::id_; 
}

inline H223AL1MParameters_headerFEC::H223AL1MParameters_headerFEC(sebch16_7::Id id, sebch16_7::const_reference value)
  : Inherited(&theInfo, id, new sebch16_7::value_type(value) )
{ }

inline H223AL1MParameters_headerFEC::H223AL1MParameters_headerFEC(golay24_12::Id id, golay24_12::const_reference value)
  : Inherited(&theInfo, id, new golay24_12::value_type(value) )
{ }


inline void H223AL1MParameters_headerFEC::swap(H223AL1MParameters_headerFEC & other)
{  Inherited::swap(other); }

inline H223AL1MParameters_headerFEC* H223AL1MParameters_headerFEC::clone() const
{ return static_cast<H223AL1MParameters_headerFEC*> (Inherited::clone()); }

inline bool H223AL1MParameters_headerFEC::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223AL1MParameters_crcLength::crc4bit::reference H223AL1MParameters_crcLength::select_crc4bit ()
{
    return *static_cast<crc4bit::pointer>(setSelection(crc4bit::id_, ASN1::AbstractData::create( &crc4bit::value_type::theInfo)));
}

inline bool H223AL1MParameters_crcLength::crc4bit_isSelected() const
{ 
    return currentSelection() == crc4bit::id_; 
}

inline H223AL1MParameters_crcLength::crc12bit::reference H223AL1MParameters_crcLength::select_crc12bit ()
{
    return *static_cast<crc12bit::pointer>(setSelection(crc12bit::id_, ASN1::AbstractData::create( &crc12bit::value_type::theInfo)));
}

inline bool H223AL1MParameters_crcLength::crc12bit_isSelected() const
{ 
    return currentSelection() == crc12bit::id_; 
}

inline H223AL1MParameters_crcLength::crc20bit::reference H223AL1MParameters_crcLength::select_crc20bit ()
{
    return *static_cast<crc20bit::pointer>(setSelection(crc20bit::id_, ASN1::AbstractData::create( &crc20bit::value_type::theInfo)));
}

inline bool H223AL1MParameters_crcLength::crc20bit_isSelected() const
{ 
    return currentSelection() == crc20bit::id_; 
}

inline H223AL1MParameters_crcLength::crc28bit::reference H223AL1MParameters_crcLength::select_crc28bit ()
{
    return *static_cast<crc28bit::pointer>(setSelection(crc28bit::id_, ASN1::AbstractData::create( &crc28bit::value_type::theInfo)));
}

inline bool H223AL1MParameters_crcLength::crc28bit_isSelected() const
{ 
    return currentSelection() == crc28bit::id_; 
}

inline H223AL1MParameters_crcLength::crc8bit::reference H223AL1MParameters_crcLength::select_crc8bit ()
{
    return *static_cast<crc8bit::pointer>(setSelection(crc8bit::id_, ASN1::AbstractData::create( &crc8bit::value_type::theInfo)));
}

inline bool H223AL1MParameters_crcLength::crc8bit_isSelected() const
{ 
    return currentSelection() == crc8bit::id_; 
}

inline H223AL1MParameters_crcLength::crc16bit::reference H223AL1MParameters_crcLength::select_crc16bit ()
{
    return *static_cast<crc16bit::pointer>(setSelection(crc16bit::id_, ASN1::AbstractData::create( &crc16bit::value_type::theInfo)));
}

inline bool H223AL1MParameters_crcLength::crc16bit_isSelected() const
{ 
    return currentSelection() == crc16bit::id_; 
}

inline H223AL1MParameters_crcLength::crc32bit::reference H223AL1MParameters_crcLength::select_crc32bit ()
{
    return *static_cast<crc32bit::pointer>(setSelection(crc32bit::id_, ASN1::AbstractData::create( &crc32bit::value_type::theInfo)));
}

inline bool H223AL1MParameters_crcLength::crc32bit_isSelected() const
{ 
    return currentSelection() == crc32bit::id_; 
}

inline H223AL1MParameters_crcLength::crcNotUsed::reference H223AL1MParameters_crcLength::select_crcNotUsed ()
{
    return *static_cast<crcNotUsed::pointer>(setSelection(crcNotUsed::id_, ASN1::AbstractData::create( &crcNotUsed::value_type::theInfo)));
}

inline bool H223AL1MParameters_crcLength::crcNotUsed_isSelected() const
{ 
    return currentSelection() == crcNotUsed::id_; 
}

inline H223AL1MParameters_crcLength::H223AL1MParameters_crcLength(crc4bit::Id id, crc4bit::const_reference value)
  : Inherited(&theInfo, id, new crc4bit::value_type(value) )
{ }

inline H223AL1MParameters_crcLength::H223AL1MParameters_crcLength(crc12bit::Id id, crc12bit::const_reference value)
  : Inherited(&theInfo, id, new crc12bit::value_type(value) )
{ }

inline H223AL1MParameters_crcLength::H223AL1MParameters_crcLength(crc20bit::Id id, crc20bit::const_reference value)
  : Inherited(&theInfo, id, new crc20bit::value_type(value) )
{ }

inline H223AL1MParameters_crcLength::H223AL1MParameters_crcLength(crc28bit::Id id, crc28bit::const_reference value)
  : Inherited(&theInfo, id, new crc28bit::value_type(value) )
{ }

inline H223AL1MParameters_crcLength::H223AL1MParameters_crcLength(crc8bit::Id id, crc8bit::const_reference value)
  : Inherited(&theInfo, id, new crc8bit::value_type(value) )
{ }

inline H223AL1MParameters_crcLength::H223AL1MParameters_crcLength(crc16bit::Id id, crc16bit::const_reference value)
  : Inherited(&theInfo, id, new crc16bit::value_type(value) )
{ }

inline H223AL1MParameters_crcLength::H223AL1MParameters_crcLength(crc32bit::Id id, crc32bit::const_reference value)
  : Inherited(&theInfo, id, new crc32bit::value_type(value) )
{ }

inline H223AL1MParameters_crcLength::H223AL1MParameters_crcLength(crcNotUsed::Id id, crcNotUsed::const_reference value)
  : Inherited(&theInfo, id, new crcNotUsed::value_type(value) )
{ }


inline void H223AL1MParameters_crcLength::swap(H223AL1MParameters_crcLength & other)
{  Inherited::swap(other); }

inline H223AL1MParameters_crcLength* H223AL1MParameters_crcLength::clone() const
{ return static_cast<H223AL1MParameters_crcLength*> (Inherited::clone()); }

inline bool H223AL1MParameters_crcLength::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223AL2MParameters_headerFEC::sebch16_5::reference H223AL2MParameters_headerFEC::select_sebch16_5 ()
{
    return *static_cast<sebch16_5::pointer>(setSelection(sebch16_5::id_, ASN1::AbstractData::create( &sebch16_5::value_type::theInfo)));
}

inline bool H223AL2MParameters_headerFEC::sebch16_5_isSelected() const
{ 
    return currentSelection() == sebch16_5::id_; 
}

inline H223AL2MParameters_headerFEC::golay24_12::reference H223AL2MParameters_headerFEC::select_golay24_12 ()
{
    return *static_cast<golay24_12::pointer>(setSelection(golay24_12::id_, ASN1::AbstractData::create( &golay24_12::value_type::theInfo)));
}

inline bool H223AL2MParameters_headerFEC::golay24_12_isSelected() const
{ 
    return currentSelection() == golay24_12::id_; 
}

inline H223AL2MParameters_headerFEC::H223AL2MParameters_headerFEC(sebch16_5::Id id, sebch16_5::const_reference value)
  : Inherited(&theInfo, id, new sebch16_5::value_type(value) )
{ }

inline H223AL2MParameters_headerFEC::H223AL2MParameters_headerFEC(golay24_12::Id id, golay24_12::const_reference value)
  : Inherited(&theInfo, id, new golay24_12::value_type(value) )
{ }


inline void H223AL2MParameters_headerFEC::swap(H223AL2MParameters_headerFEC & other)
{  Inherited::swap(other); }

inline H223AL2MParameters_headerFEC* H223AL2MParameters_headerFEC::clone() const
{ return static_cast<H223AL2MParameters_headerFEC*> (Inherited::clone()); }

inline bool H223AL2MParameters_headerFEC::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223AL3MParameters_headerFormat::sebch16_7::reference H223AL3MParameters_headerFormat::select_sebch16_7 ()
{
    return *static_cast<sebch16_7::pointer>(setSelection(sebch16_7::id_, ASN1::AbstractData::create( &sebch16_7::value_type::theInfo)));
}

inline bool H223AL3MParameters_headerFormat::sebch16_7_isSelected() const
{ 
    return currentSelection() == sebch16_7::id_; 
}

inline H223AL3MParameters_headerFormat::golay24_12::reference H223AL3MParameters_headerFormat::select_golay24_12 ()
{
    return *static_cast<golay24_12::pointer>(setSelection(golay24_12::id_, ASN1::AbstractData::create( &golay24_12::value_type::theInfo)));
}

inline bool H223AL3MParameters_headerFormat::golay24_12_isSelected() const
{ 
    return currentSelection() == golay24_12::id_; 
}

inline H223AL3MParameters_headerFormat::H223AL3MParameters_headerFormat(sebch16_7::Id id, sebch16_7::const_reference value)
  : Inherited(&theInfo, id, new sebch16_7::value_type(value) )
{ }

inline H223AL3MParameters_headerFormat::H223AL3MParameters_headerFormat(golay24_12::Id id, golay24_12::const_reference value)
  : Inherited(&theInfo, id, new golay24_12::value_type(value) )
{ }


inline void H223AL3MParameters_headerFormat::swap(H223AL3MParameters_headerFormat & other)
{  Inherited::swap(other); }

inline H223AL3MParameters_headerFormat* H223AL3MParameters_headerFormat::clone() const
{ return static_cast<H223AL3MParameters_headerFormat*> (Inherited::clone()); }

inline bool H223AL3MParameters_headerFormat::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223AL3MParameters_crcLength::crc4bit::reference H223AL3MParameters_crcLength::select_crc4bit ()
{
    return *static_cast<crc4bit::pointer>(setSelection(crc4bit::id_, ASN1::AbstractData::create( &crc4bit::value_type::theInfo)));
}

inline bool H223AL3MParameters_crcLength::crc4bit_isSelected() const
{ 
    return currentSelection() == crc4bit::id_; 
}

inline H223AL3MParameters_crcLength::crc12bit::reference H223AL3MParameters_crcLength::select_crc12bit ()
{
    return *static_cast<crc12bit::pointer>(setSelection(crc12bit::id_, ASN1::AbstractData::create( &crc12bit::value_type::theInfo)));
}

inline bool H223AL3MParameters_crcLength::crc12bit_isSelected() const
{ 
    return currentSelection() == crc12bit::id_; 
}

inline H223AL3MParameters_crcLength::crc20bit::reference H223AL3MParameters_crcLength::select_crc20bit ()
{
    return *static_cast<crc20bit::pointer>(setSelection(crc20bit::id_, ASN1::AbstractData::create( &crc20bit::value_type::theInfo)));
}

inline bool H223AL3MParameters_crcLength::crc20bit_isSelected() const
{ 
    return currentSelection() == crc20bit::id_; 
}

inline H223AL3MParameters_crcLength::crc28bit::reference H223AL3MParameters_crcLength::select_crc28bit ()
{
    return *static_cast<crc28bit::pointer>(setSelection(crc28bit::id_, ASN1::AbstractData::create( &crc28bit::value_type::theInfo)));
}

inline bool H223AL3MParameters_crcLength::crc28bit_isSelected() const
{ 
    return currentSelection() == crc28bit::id_; 
}

inline H223AL3MParameters_crcLength::crc8bit::reference H223AL3MParameters_crcLength::select_crc8bit ()
{
    return *static_cast<crc8bit::pointer>(setSelection(crc8bit::id_, ASN1::AbstractData::create( &crc8bit::value_type::theInfo)));
}

inline bool H223AL3MParameters_crcLength::crc8bit_isSelected() const
{ 
    return currentSelection() == crc8bit::id_; 
}

inline H223AL3MParameters_crcLength::crc16bit::reference H223AL3MParameters_crcLength::select_crc16bit ()
{
    return *static_cast<crc16bit::pointer>(setSelection(crc16bit::id_, ASN1::AbstractData::create( &crc16bit::value_type::theInfo)));
}

inline bool H223AL3MParameters_crcLength::crc16bit_isSelected() const
{ 
    return currentSelection() == crc16bit::id_; 
}

inline H223AL3MParameters_crcLength::crc32bit::reference H223AL3MParameters_crcLength::select_crc32bit ()
{
    return *static_cast<crc32bit::pointer>(setSelection(crc32bit::id_, ASN1::AbstractData::create( &crc32bit::value_type::theInfo)));
}

inline bool H223AL3MParameters_crcLength::crc32bit_isSelected() const
{ 
    return currentSelection() == crc32bit::id_; 
}

inline H223AL3MParameters_crcLength::crcNotUsed::reference H223AL3MParameters_crcLength::select_crcNotUsed ()
{
    return *static_cast<crcNotUsed::pointer>(setSelection(crcNotUsed::id_, ASN1::AbstractData::create( &crcNotUsed::value_type::theInfo)));
}

inline bool H223AL3MParameters_crcLength::crcNotUsed_isSelected() const
{ 
    return currentSelection() == crcNotUsed::id_; 
}

inline H223AL3MParameters_crcLength::H223AL3MParameters_crcLength(crc4bit::Id id, crc4bit::const_reference value)
  : Inherited(&theInfo, id, new crc4bit::value_type(value) )
{ }

inline H223AL3MParameters_crcLength::H223AL3MParameters_crcLength(crc12bit::Id id, crc12bit::const_reference value)
  : Inherited(&theInfo, id, new crc12bit::value_type(value) )
{ }

inline H223AL3MParameters_crcLength::H223AL3MParameters_crcLength(crc20bit::Id id, crc20bit::const_reference value)
  : Inherited(&theInfo, id, new crc20bit::value_type(value) )
{ }

inline H223AL3MParameters_crcLength::H223AL3MParameters_crcLength(crc28bit::Id id, crc28bit::const_reference value)
  : Inherited(&theInfo, id, new crc28bit::value_type(value) )
{ }

inline H223AL3MParameters_crcLength::H223AL3MParameters_crcLength(crc8bit::Id id, crc8bit::const_reference value)
  : Inherited(&theInfo, id, new crc8bit::value_type(value) )
{ }

inline H223AL3MParameters_crcLength::H223AL3MParameters_crcLength(crc16bit::Id id, crc16bit::const_reference value)
  : Inherited(&theInfo, id, new crc16bit::value_type(value) )
{ }

inline H223AL3MParameters_crcLength::H223AL3MParameters_crcLength(crc32bit::Id id, crc32bit::const_reference value)
  : Inherited(&theInfo, id, new crc32bit::value_type(value) )
{ }

inline H223AL3MParameters_crcLength::H223AL3MParameters_crcLength(crcNotUsed::Id id, crcNotUsed::const_reference value)
  : Inherited(&theInfo, id, new crcNotUsed::value_type(value) )
{ }


inline void H223AL3MParameters_crcLength::swap(H223AL3MParameters_crcLength & other)
{  Inherited::swap(other); }

inline H223AL3MParameters_crcLength* H223AL3MParameters_crcLength::clone() const
{ return static_cast<H223AL3MParameters_crcLength*> (Inherited::clone()); }

inline bool H223AL3MParameters_crcLength::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223AnnexCArqParameters_numberOfRetransmissions::finite::const_reference H223AnnexCArqParameters_numberOfRetransmissions::get_finite () const
{
    assert(currentSelection() ==finite::id_);
    return *static_cast<finite::const_pointer>(choice.get());
}

inline H223AnnexCArqParameters_numberOfRetransmissions::finite::reference H223AnnexCArqParameters_numberOfRetransmissions::ref_finite ()
{
    assert(currentSelection() ==finite::id_);
    return *static_cast<finite::pointer>(choice.get());
}

inline H223AnnexCArqParameters_numberOfRetransmissions::finite::reference H223AnnexCArqParameters_numberOfRetransmissions::select_finite ()
{
    return *static_cast<finite::pointer>(setSelection(finite::id_, ASN1::AbstractData::create( &finite::value_type::theInfo)));
}

inline H223AnnexCArqParameters_numberOfRetransmissions::finite::reference H223AnnexCArqParameters_numberOfRetransmissions::select_finite (H223AnnexCArqParameters_numberOfRetransmissions::finite::value_type::int_type value)
{
    return select_finite() = value;
}

inline bool H223AnnexCArqParameters_numberOfRetransmissions::finite_isSelected() const
{ 
    return currentSelection() == finite::id_; 
}

inline H223AnnexCArqParameters_numberOfRetransmissions::infinite::reference H223AnnexCArqParameters_numberOfRetransmissions::select_infinite ()
{
    return *static_cast<infinite::pointer>(setSelection(infinite::id_, ASN1::AbstractData::create( &infinite::value_type::theInfo)));
}

inline bool H223AnnexCArqParameters_numberOfRetransmissions::infinite_isSelected() const
{ 
    return currentSelection() == infinite::id_; 
}

inline H223AnnexCArqParameters_numberOfRetransmissions::H223AnnexCArqParameters_numberOfRetransmissions(finite::Id id, finite::value_type::int_type value)
  : Inherited(&theInfo, id, new finite::value_type(value) )
{ }

inline H223AnnexCArqParameters_numberOfRetransmissions::H223AnnexCArqParameters_numberOfRetransmissions(infinite::Id id, infinite::const_reference value)
  : Inherited(&theInfo, id, new infinite::value_type(value) )
{ }


inline void H223AnnexCArqParameters_numberOfRetransmissions::swap(H223AnnexCArqParameters_numberOfRetransmissions & other)
{  Inherited::swap(other); }

inline H223AnnexCArqParameters_numberOfRetransmissions* H223AnnexCArqParameters_numberOfRetransmissions::clone() const
{ return static_cast<H223AnnexCArqParameters_numberOfRetransmissions*> (Inherited::clone()); }

inline bool H223AnnexCArqParameters_numberOfRetransmissions::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline V76LogicalChannelParameters_suspendResume::noSuspendResume::reference V76LogicalChannelParameters_suspendResume::select_noSuspendResume ()
{
    return *static_cast<noSuspendResume::pointer>(setSelection(noSuspendResume::id_, ASN1::AbstractData::create( &noSuspendResume::value_type::theInfo)));
}

inline bool V76LogicalChannelParameters_suspendResume::noSuspendResume_isSelected() const
{ 
    return currentSelection() == noSuspendResume::id_; 
}

inline V76LogicalChannelParameters_suspendResume::suspendResumewAddress::reference V76LogicalChannelParameters_suspendResume::select_suspendResumewAddress ()
{
    return *static_cast<suspendResumewAddress::pointer>(setSelection(suspendResumewAddress::id_, ASN1::AbstractData::create( &suspendResumewAddress::value_type::theInfo)));
}

inline bool V76LogicalChannelParameters_suspendResume::suspendResumewAddress_isSelected() const
{ 
    return currentSelection() == suspendResumewAddress::id_; 
}

inline V76LogicalChannelParameters_suspendResume::suspendResumewoAddress::reference V76LogicalChannelParameters_suspendResume::select_suspendResumewoAddress ()
{
    return *static_cast<suspendResumewoAddress::pointer>(setSelection(suspendResumewoAddress::id_, ASN1::AbstractData::create( &suspendResumewoAddress::value_type::theInfo)));
}

inline bool V76LogicalChannelParameters_suspendResume::suspendResumewoAddress_isSelected() const
{ 
    return currentSelection() == suspendResumewoAddress::id_; 
}

inline V76LogicalChannelParameters_suspendResume::V76LogicalChannelParameters_suspendResume(noSuspendResume::Id id, noSuspendResume::const_reference value)
  : Inherited(&theInfo, id, new noSuspendResume::value_type(value) )
{ }

inline V76LogicalChannelParameters_suspendResume::V76LogicalChannelParameters_suspendResume(suspendResumewAddress::Id id, suspendResumewAddress::const_reference value)
  : Inherited(&theInfo, id, new suspendResumewAddress::value_type(value) )
{ }

inline V76LogicalChannelParameters_suspendResume::V76LogicalChannelParameters_suspendResume(suspendResumewoAddress::Id id, suspendResumewoAddress::const_reference value)
  : Inherited(&theInfo, id, new suspendResumewoAddress::value_type(value) )
{ }


inline void V76LogicalChannelParameters_suspendResume::swap(V76LogicalChannelParameters_suspendResume & other)
{  Inherited::swap(other); }

inline V76LogicalChannelParameters_suspendResume* V76LogicalChannelParameters_suspendResume::clone() const
{ return static_cast<V76LogicalChannelParameters_suspendResume*> (Inherited::clone()); }

inline bool V76LogicalChannelParameters_suspendResume::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline UnicastAddress_iPAddress::network::const_reference UnicastAddress_iPAddress::get_network () const
{ return *static_cast<network::const_pointer>(fields[0]);}

inline UnicastAddress_iPAddress::network::reference UnicastAddress_iPAddress::ref_network ()
{ return *static_cast<network::pointer>(fields[0]);}

inline UnicastAddress_iPAddress::network::reference UnicastAddress_iPAddress::set_network ()
{ return *static_cast<network::pointer>(fields[0]);}

inline UnicastAddress_iPAddress::network::reference UnicastAddress_iPAddress::set_network (const std::vector<char>& value)
{ return *static_cast<network::pointer>(fields[0]) = value ;}

inline UnicastAddress_iPAddress::tsapIdentifier::const_reference UnicastAddress_iPAddress::get_tsapIdentifier () const
{ return *static_cast<tsapIdentifier::const_pointer>(fields[1]);}

inline UnicastAddress_iPAddress::tsapIdentifier::reference UnicastAddress_iPAddress::ref_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[1]);}

inline UnicastAddress_iPAddress::tsapIdentifier::reference UnicastAddress_iPAddress::set_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[1]);}

inline UnicastAddress_iPAddress::tsapIdentifier::reference UnicastAddress_iPAddress::set_tsapIdentifier (tsapIdentifier::value_type::int_type value)
{ return *static_cast<tsapIdentifier::pointer>(fields[1]) = value ;}

inline void UnicastAddress_iPAddress::swap(UnicastAddress_iPAddress& other)
{ Inherited::swap(other); }

inline UnicastAddress_iPAddress* UnicastAddress_iPAddress::clone() const
{ return static_cast<UnicastAddress_iPAddress*> (Inherited::clone()); }

inline UnicastAddress_iPXAddress::node::const_reference UnicastAddress_iPXAddress::get_node () const
{ return *static_cast<node::const_pointer>(fields[0]);}

inline UnicastAddress_iPXAddress::node::reference UnicastAddress_iPXAddress::ref_node ()
{ return *static_cast<node::pointer>(fields[0]);}

inline UnicastAddress_iPXAddress::node::reference UnicastAddress_iPXAddress::set_node ()
{ return *static_cast<node::pointer>(fields[0]);}

inline UnicastAddress_iPXAddress::node::reference UnicastAddress_iPXAddress::set_node (const std::vector<char>& value)
{ return *static_cast<node::pointer>(fields[0]) = value ;}

inline UnicastAddress_iPXAddress::netnum::const_reference UnicastAddress_iPXAddress::get_netnum () const
{ return *static_cast<netnum::const_pointer>(fields[1]);}

inline UnicastAddress_iPXAddress::netnum::reference UnicastAddress_iPXAddress::ref_netnum ()
{ return *static_cast<netnum::pointer>(fields[1]);}

inline UnicastAddress_iPXAddress::netnum::reference UnicastAddress_iPXAddress::set_netnum ()
{ return *static_cast<netnum::pointer>(fields[1]);}

inline UnicastAddress_iPXAddress::netnum::reference UnicastAddress_iPXAddress::set_netnum (const std::vector<char>& value)
{ return *static_cast<netnum::pointer>(fields[1]) = value ;}

inline UnicastAddress_iPXAddress::tsapIdentifier::const_reference UnicastAddress_iPXAddress::get_tsapIdentifier () const
{ return *static_cast<tsapIdentifier::const_pointer>(fields[2]);}

inline UnicastAddress_iPXAddress::tsapIdentifier::reference UnicastAddress_iPXAddress::ref_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[2]);}

inline UnicastAddress_iPXAddress::tsapIdentifier::reference UnicastAddress_iPXAddress::set_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[2]);}

inline UnicastAddress_iPXAddress::tsapIdentifier::reference UnicastAddress_iPXAddress::set_tsapIdentifier (const std::vector<char>& value)
{ return *static_cast<tsapIdentifier::pointer>(fields[2]) = value ;}

inline void UnicastAddress_iPXAddress::swap(UnicastAddress_iPXAddress& other)
{ Inherited::swap(other); }

inline UnicastAddress_iPXAddress* UnicastAddress_iPXAddress::clone() const
{ return static_cast<UnicastAddress_iPXAddress*> (Inherited::clone()); }

inline UnicastAddress_iP6Address::network::const_reference UnicastAddress_iP6Address::get_network () const
{ return *static_cast<network::const_pointer>(fields[0]);}

inline UnicastAddress_iP6Address::network::reference UnicastAddress_iP6Address::ref_network ()
{ return *static_cast<network::pointer>(fields[0]);}

inline UnicastAddress_iP6Address::network::reference UnicastAddress_iP6Address::set_network ()
{ return *static_cast<network::pointer>(fields[0]);}

inline UnicastAddress_iP6Address::network::reference UnicastAddress_iP6Address::set_network (const std::vector<char>& value)
{ return *static_cast<network::pointer>(fields[0]) = value ;}

inline UnicastAddress_iP6Address::tsapIdentifier::const_reference UnicastAddress_iP6Address::get_tsapIdentifier () const
{ return *static_cast<tsapIdentifier::const_pointer>(fields[1]);}

inline UnicastAddress_iP6Address::tsapIdentifier::reference UnicastAddress_iP6Address::ref_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[1]);}

inline UnicastAddress_iP6Address::tsapIdentifier::reference UnicastAddress_iP6Address::set_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[1]);}

inline UnicastAddress_iP6Address::tsapIdentifier::reference UnicastAddress_iP6Address::set_tsapIdentifier (tsapIdentifier::value_type::int_type value)
{ return *static_cast<tsapIdentifier::pointer>(fields[1]) = value ;}

inline void UnicastAddress_iP6Address::swap(UnicastAddress_iP6Address& other)
{ Inherited::swap(other); }

inline UnicastAddress_iP6Address* UnicastAddress_iP6Address::clone() const
{ return static_cast<UnicastAddress_iP6Address*> (Inherited::clone()); }

inline MulticastAddress_iPAddress::network::const_reference MulticastAddress_iPAddress::get_network () const
{ return *static_cast<network::const_pointer>(fields[0]);}

inline MulticastAddress_iPAddress::network::reference MulticastAddress_iPAddress::ref_network ()
{ return *static_cast<network::pointer>(fields[0]);}

inline MulticastAddress_iPAddress::network::reference MulticastAddress_iPAddress::set_network ()
{ return *static_cast<network::pointer>(fields[0]);}

inline MulticastAddress_iPAddress::network::reference MulticastAddress_iPAddress::set_network (const std::vector<char>& value)
{ return *static_cast<network::pointer>(fields[0]) = value ;}

inline MulticastAddress_iPAddress::tsapIdentifier::const_reference MulticastAddress_iPAddress::get_tsapIdentifier () const
{ return *static_cast<tsapIdentifier::const_pointer>(fields[1]);}

inline MulticastAddress_iPAddress::tsapIdentifier::reference MulticastAddress_iPAddress::ref_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[1]);}

inline MulticastAddress_iPAddress::tsapIdentifier::reference MulticastAddress_iPAddress::set_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[1]);}

inline MulticastAddress_iPAddress::tsapIdentifier::reference MulticastAddress_iPAddress::set_tsapIdentifier (tsapIdentifier::value_type::int_type value)
{ return *static_cast<tsapIdentifier::pointer>(fields[1]) = value ;}

inline void MulticastAddress_iPAddress::swap(MulticastAddress_iPAddress& other)
{ Inherited::swap(other); }

inline MulticastAddress_iPAddress* MulticastAddress_iPAddress::clone() const
{ return static_cast<MulticastAddress_iPAddress*> (Inherited::clone()); }

inline MulticastAddress_iP6Address::network::const_reference MulticastAddress_iP6Address::get_network () const
{ return *static_cast<network::const_pointer>(fields[0]);}

inline MulticastAddress_iP6Address::network::reference MulticastAddress_iP6Address::ref_network ()
{ return *static_cast<network::pointer>(fields[0]);}

inline MulticastAddress_iP6Address::network::reference MulticastAddress_iP6Address::set_network ()
{ return *static_cast<network::pointer>(fields[0]);}

inline MulticastAddress_iP6Address::network::reference MulticastAddress_iP6Address::set_network (const std::vector<char>& value)
{ return *static_cast<network::pointer>(fields[0]) = value ;}

inline MulticastAddress_iP6Address::tsapIdentifier::const_reference MulticastAddress_iP6Address::get_tsapIdentifier () const
{ return *static_cast<tsapIdentifier::const_pointer>(fields[1]);}

inline MulticastAddress_iP6Address::tsapIdentifier::reference MulticastAddress_iP6Address::ref_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[1]);}

inline MulticastAddress_iP6Address::tsapIdentifier::reference MulticastAddress_iP6Address::set_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[1]);}

inline MulticastAddress_iP6Address::tsapIdentifier::reference MulticastAddress_iP6Address::set_tsapIdentifier (tsapIdentifier::value_type::int_type value)
{ return *static_cast<tsapIdentifier::pointer>(fields[1]) = value ;}

inline void MulticastAddress_iP6Address::swap(MulticastAddress_iP6Address& other)
{ Inherited::swap(other); }

inline MulticastAddress_iP6Address* MulticastAddress_iP6Address::clone() const
{ return static_cast<MulticastAddress_iP6Address*> (Inherited::clone()); }

inline OpenLogicalChannelReject_cause::unspecified::reference OpenLogicalChannelReject_cause::select_unspecified ()
{
    return *static_cast<unspecified::pointer>(setSelection(unspecified::id_, ASN1::AbstractData::create( &unspecified::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::unspecified_isSelected() const
{ 
    return currentSelection() == unspecified::id_; 
}

inline OpenLogicalChannelReject_cause::unsuitableReverseParameters::reference OpenLogicalChannelReject_cause::select_unsuitableReverseParameters ()
{
    return *static_cast<unsuitableReverseParameters::pointer>(setSelection(unsuitableReverseParameters::id_, ASN1::AbstractData::create( &unsuitableReverseParameters::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::unsuitableReverseParameters_isSelected() const
{ 
    return currentSelection() == unsuitableReverseParameters::id_; 
}

inline OpenLogicalChannelReject_cause::dataTypeNotSupported::reference OpenLogicalChannelReject_cause::select_dataTypeNotSupported ()
{
    return *static_cast<dataTypeNotSupported::pointer>(setSelection(dataTypeNotSupported::id_, ASN1::AbstractData::create( &dataTypeNotSupported::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::dataTypeNotSupported_isSelected() const
{ 
    return currentSelection() == dataTypeNotSupported::id_; 
}

inline OpenLogicalChannelReject_cause::dataTypeNotAvailable::reference OpenLogicalChannelReject_cause::select_dataTypeNotAvailable ()
{
    return *static_cast<dataTypeNotAvailable::pointer>(setSelection(dataTypeNotAvailable::id_, ASN1::AbstractData::create( &dataTypeNotAvailable::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::dataTypeNotAvailable_isSelected() const
{ 
    return currentSelection() == dataTypeNotAvailable::id_; 
}

inline OpenLogicalChannelReject_cause::unknownDataType::reference OpenLogicalChannelReject_cause::select_unknownDataType ()
{
    return *static_cast<unknownDataType::pointer>(setSelection(unknownDataType::id_, ASN1::AbstractData::create( &unknownDataType::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::unknownDataType_isSelected() const
{ 
    return currentSelection() == unknownDataType::id_; 
}

inline OpenLogicalChannelReject_cause::dataTypeALCombinationNotSupported::reference OpenLogicalChannelReject_cause::select_dataTypeALCombinationNotSupported ()
{
    return *static_cast<dataTypeALCombinationNotSupported::pointer>(setSelection(dataTypeALCombinationNotSupported::id_, ASN1::AbstractData::create( &dataTypeALCombinationNotSupported::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::dataTypeALCombinationNotSupported_isSelected() const
{ 
    return currentSelection() == dataTypeALCombinationNotSupported::id_; 
}

inline OpenLogicalChannelReject_cause::multicastChannelNotAllowed::reference OpenLogicalChannelReject_cause::select_multicastChannelNotAllowed ()
{
    return *static_cast<multicastChannelNotAllowed::pointer>(setSelection(multicastChannelNotAllowed::id_, ASN1::AbstractData::create( &multicastChannelNotAllowed::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::multicastChannelNotAllowed_isSelected() const
{ 
    return currentSelection() == multicastChannelNotAllowed::id_; 
}

inline OpenLogicalChannelReject_cause::insufficientBandwidth::reference OpenLogicalChannelReject_cause::select_insufficientBandwidth ()
{
    return *static_cast<insufficientBandwidth::pointer>(setSelection(insufficientBandwidth::id_, ASN1::AbstractData::create( &insufficientBandwidth::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::insufficientBandwidth_isSelected() const
{ 
    return currentSelection() == insufficientBandwidth::id_; 
}

inline OpenLogicalChannelReject_cause::separateStackEstablishmentFailed::reference OpenLogicalChannelReject_cause::select_separateStackEstablishmentFailed ()
{
    return *static_cast<separateStackEstablishmentFailed::pointer>(setSelection(separateStackEstablishmentFailed::id_, ASN1::AbstractData::create( &separateStackEstablishmentFailed::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::separateStackEstablishmentFailed_isSelected() const
{ 
    return currentSelection() == separateStackEstablishmentFailed::id_; 
}

inline OpenLogicalChannelReject_cause::invalidSessionID::reference OpenLogicalChannelReject_cause::select_invalidSessionID ()
{
    return *static_cast<invalidSessionID::pointer>(setSelection(invalidSessionID::id_, ASN1::AbstractData::create( &invalidSessionID::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::invalidSessionID_isSelected() const
{ 
    return currentSelection() == invalidSessionID::id_; 
}

inline OpenLogicalChannelReject_cause::masterSlaveConflict::reference OpenLogicalChannelReject_cause::select_masterSlaveConflict ()
{
    return *static_cast<masterSlaveConflict::pointer>(setSelection(masterSlaveConflict::id_, ASN1::AbstractData::create( &masterSlaveConflict::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::masterSlaveConflict_isSelected() const
{ 
    return currentSelection() == masterSlaveConflict::id_; 
}

inline OpenLogicalChannelReject_cause::waitForCommunicationMode::reference OpenLogicalChannelReject_cause::select_waitForCommunicationMode ()
{
    return *static_cast<waitForCommunicationMode::pointer>(setSelection(waitForCommunicationMode::id_, ASN1::AbstractData::create( &waitForCommunicationMode::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::waitForCommunicationMode_isSelected() const
{ 
    return currentSelection() == waitForCommunicationMode::id_; 
}

inline OpenLogicalChannelReject_cause::invalidDependentChannel::reference OpenLogicalChannelReject_cause::select_invalidDependentChannel ()
{
    return *static_cast<invalidDependentChannel::pointer>(setSelection(invalidDependentChannel::id_, ASN1::AbstractData::create( &invalidDependentChannel::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::invalidDependentChannel_isSelected() const
{ 
    return currentSelection() == invalidDependentChannel::id_; 
}

inline OpenLogicalChannelReject_cause::replacementForRejected::reference OpenLogicalChannelReject_cause::select_replacementForRejected ()
{
    return *static_cast<replacementForRejected::pointer>(setSelection(replacementForRejected::id_, ASN1::AbstractData::create( &replacementForRejected::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::replacementForRejected_isSelected() const
{ 
    return currentSelection() == replacementForRejected::id_; 
}

inline OpenLogicalChannelReject_cause::securityDenied::reference OpenLogicalChannelReject_cause::select_securityDenied ()
{
    return *static_cast<securityDenied::pointer>(setSelection(securityDenied::id_, ASN1::AbstractData::create( &securityDenied::value_type::theInfo)));
}

inline bool OpenLogicalChannelReject_cause::securityDenied_isSelected() const
{ 
    return currentSelection() == securityDenied::id_; 
}

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(unspecified::Id id, unspecified::const_reference value)
  : Inherited(&theInfo, id, new unspecified::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(unsuitableReverseParameters::Id id, unsuitableReverseParameters::const_reference value)
  : Inherited(&theInfo, id, new unsuitableReverseParameters::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(dataTypeNotSupported::Id id, dataTypeNotSupported::const_reference value)
  : Inherited(&theInfo, id, new dataTypeNotSupported::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(dataTypeNotAvailable::Id id, dataTypeNotAvailable::const_reference value)
  : Inherited(&theInfo, id, new dataTypeNotAvailable::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(unknownDataType::Id id, unknownDataType::const_reference value)
  : Inherited(&theInfo, id, new unknownDataType::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(dataTypeALCombinationNotSupported::Id id, dataTypeALCombinationNotSupported::const_reference value)
  : Inherited(&theInfo, id, new dataTypeALCombinationNotSupported::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(multicastChannelNotAllowed::Id id, multicastChannelNotAllowed::const_reference value)
  : Inherited(&theInfo, id, new multicastChannelNotAllowed::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(insufficientBandwidth::Id id, insufficientBandwidth::const_reference value)
  : Inherited(&theInfo, id, new insufficientBandwidth::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(separateStackEstablishmentFailed::Id id, separateStackEstablishmentFailed::const_reference value)
  : Inherited(&theInfo, id, new separateStackEstablishmentFailed::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(invalidSessionID::Id id, invalidSessionID::const_reference value)
  : Inherited(&theInfo, id, new invalidSessionID::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(masterSlaveConflict::Id id, masterSlaveConflict::const_reference value)
  : Inherited(&theInfo, id, new masterSlaveConflict::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(waitForCommunicationMode::Id id, waitForCommunicationMode::const_reference value)
  : Inherited(&theInfo, id, new waitForCommunicationMode::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(invalidDependentChannel::Id id, invalidDependentChannel::const_reference value)
  : Inherited(&theInfo, id, new invalidDependentChannel::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(replacementForRejected::Id id, replacementForRejected::const_reference value)
  : Inherited(&theInfo, id, new replacementForRejected::value_type(value) )
{ }

inline OpenLogicalChannelReject_cause::OpenLogicalChannelReject_cause(securityDenied::Id id, securityDenied::const_reference value)
  : Inherited(&theInfo, id, new securityDenied::value_type(value) )
{ }


inline void OpenLogicalChannelReject_cause::swap(OpenLogicalChannelReject_cause & other)
{  Inherited::swap(other); }

inline OpenLogicalChannelReject_cause* OpenLogicalChannelReject_cause::clone() const
{ return static_cast<OpenLogicalChannelReject_cause*> (Inherited::clone()); }

inline bool OpenLogicalChannelReject_cause::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline CloseLogicalChannel_source::user::reference CloseLogicalChannel_source::select_user ()
{
    return *static_cast<user::pointer>(setSelection(user::id_, ASN1::AbstractData::create( &user::value_type::theInfo)));
}

inline bool CloseLogicalChannel_source::user_isSelected() const
{ 
    return currentSelection() == user::id_; 
}

inline CloseLogicalChannel_source::lcse::reference CloseLogicalChannel_source::select_lcse ()
{
    return *static_cast<lcse::pointer>(setSelection(lcse::id_, ASN1::AbstractData::create( &lcse::value_type::theInfo)));
}

inline bool CloseLogicalChannel_source::lcse_isSelected() const
{ 
    return currentSelection() == lcse::id_; 
}

inline CloseLogicalChannel_source::CloseLogicalChannel_source(user::Id id, user::const_reference value)
  : Inherited(&theInfo, id, new user::value_type(value) )
{ }

inline CloseLogicalChannel_source::CloseLogicalChannel_source(lcse::Id id, lcse::const_reference value)
  : Inherited(&theInfo, id, new lcse::value_type(value) )
{ }


inline void CloseLogicalChannel_source::swap(CloseLogicalChannel_source & other)
{  Inherited::swap(other); }

inline CloseLogicalChannel_source* CloseLogicalChannel_source::clone() const
{ return static_cast<CloseLogicalChannel_source*> (Inherited::clone()); }

inline bool CloseLogicalChannel_source::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline CloseLogicalChannel_reason::unknown::reference CloseLogicalChannel_reason::select_unknown ()
{
    return *static_cast<unknown::pointer>(setSelection(unknown::id_, ASN1::AbstractData::create( &unknown::value_type::theInfo)));
}

inline bool CloseLogicalChannel_reason::unknown_isSelected() const
{ 
    return currentSelection() == unknown::id_; 
}

inline CloseLogicalChannel_reason::reopen::reference CloseLogicalChannel_reason::select_reopen ()
{
    return *static_cast<reopen::pointer>(setSelection(reopen::id_, ASN1::AbstractData::create( &reopen::value_type::theInfo)));
}

inline bool CloseLogicalChannel_reason::reopen_isSelected() const
{ 
    return currentSelection() == reopen::id_; 
}

inline CloseLogicalChannel_reason::reservationFailure::reference CloseLogicalChannel_reason::select_reservationFailure ()
{
    return *static_cast<reservationFailure::pointer>(setSelection(reservationFailure::id_, ASN1::AbstractData::create( &reservationFailure::value_type::theInfo)));
}

inline bool CloseLogicalChannel_reason::reservationFailure_isSelected() const
{ 
    return currentSelection() == reservationFailure::id_; 
}

inline CloseLogicalChannel_reason::CloseLogicalChannel_reason(unknown::Id id, unknown::const_reference value)
  : Inherited(&theInfo, id, new unknown::value_type(value) )
{ }

inline CloseLogicalChannel_reason::CloseLogicalChannel_reason(reopen::Id id, reopen::const_reference value)
  : Inherited(&theInfo, id, new reopen::value_type(value) )
{ }

inline CloseLogicalChannel_reason::CloseLogicalChannel_reason(reservationFailure::Id id, reservationFailure::const_reference value)
  : Inherited(&theInfo, id, new reservationFailure::value_type(value) )
{ }


inline void CloseLogicalChannel_reason::swap(CloseLogicalChannel_reason & other)
{  Inherited::swap(other); }

inline CloseLogicalChannel_reason* CloseLogicalChannel_reason::clone() const
{ return static_cast<CloseLogicalChannel_reason*> (Inherited::clone()); }

inline bool CloseLogicalChannel_reason::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RequestChannelClose_reason::unknown::reference RequestChannelClose_reason::select_unknown ()
{
    return *static_cast<unknown::pointer>(setSelection(unknown::id_, ASN1::AbstractData::create( &unknown::value_type::theInfo)));
}

inline bool RequestChannelClose_reason::unknown_isSelected() const
{ 
    return currentSelection() == unknown::id_; 
}

inline RequestChannelClose_reason::normal::reference RequestChannelClose_reason::select_normal ()
{
    return *static_cast<normal::pointer>(setSelection(normal::id_, ASN1::AbstractData::create( &normal::value_type::theInfo)));
}

inline bool RequestChannelClose_reason::normal_isSelected() const
{ 
    return currentSelection() == normal::id_; 
}

inline RequestChannelClose_reason::reopen::reference RequestChannelClose_reason::select_reopen ()
{
    return *static_cast<reopen::pointer>(setSelection(reopen::id_, ASN1::AbstractData::create( &reopen::value_type::theInfo)));
}

inline bool RequestChannelClose_reason::reopen_isSelected() const
{ 
    return currentSelection() == reopen::id_; 
}

inline RequestChannelClose_reason::reservationFailure::reference RequestChannelClose_reason::select_reservationFailure ()
{
    return *static_cast<reservationFailure::pointer>(setSelection(reservationFailure::id_, ASN1::AbstractData::create( &reservationFailure::value_type::theInfo)));
}

inline bool RequestChannelClose_reason::reservationFailure_isSelected() const
{ 
    return currentSelection() == reservationFailure::id_; 
}

inline RequestChannelClose_reason::RequestChannelClose_reason(unknown::Id id, unknown::const_reference value)
  : Inherited(&theInfo, id, new unknown::value_type(value) )
{ }

inline RequestChannelClose_reason::RequestChannelClose_reason(normal::Id id, normal::const_reference value)
  : Inherited(&theInfo, id, new normal::value_type(value) )
{ }

inline RequestChannelClose_reason::RequestChannelClose_reason(reopen::Id id, reopen::const_reference value)
  : Inherited(&theInfo, id, new reopen::value_type(value) )
{ }

inline RequestChannelClose_reason::RequestChannelClose_reason(reservationFailure::Id id, reservationFailure::const_reference value)
  : Inherited(&theInfo, id, new reservationFailure::value_type(value) )
{ }


inline void RequestChannelClose_reason::swap(RequestChannelClose_reason & other)
{  Inherited::swap(other); }

inline RequestChannelClose_reason* RequestChannelClose_reason::clone() const
{ return static_cast<RequestChannelClose_reason*> (Inherited::clone()); }

inline bool RequestChannelClose_reason::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RequestChannelCloseReject_cause::unspecified::reference RequestChannelCloseReject_cause::select_unspecified ()
{
    return *static_cast<unspecified::pointer>(setSelection(unspecified::id_, ASN1::AbstractData::create( &unspecified::value_type::theInfo)));
}

inline bool RequestChannelCloseReject_cause::unspecified_isSelected() const
{ 
    return currentSelection() == unspecified::id_; 
}

inline RequestChannelCloseReject_cause::RequestChannelCloseReject_cause(unspecified::Id id, unspecified::const_reference value)
  : Inherited(&theInfo, id, new unspecified::value_type(value) )
{ }


inline void RequestChannelCloseReject_cause::swap(RequestChannelCloseReject_cause & other)
{  Inherited::swap(other); }

inline RequestChannelCloseReject_cause* RequestChannelCloseReject_cause::clone() const
{ return static_cast<RequestChannelCloseReject_cause*> (Inherited::clone()); }

inline bool RequestChannelCloseReject_cause::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MultiplexElement_repeatCount::finite::const_reference MultiplexElement_repeatCount::get_finite () const
{
    assert(currentSelection() ==finite::id_);
    return *static_cast<finite::const_pointer>(choice.get());
}

inline MultiplexElement_repeatCount::finite::reference MultiplexElement_repeatCount::ref_finite ()
{
    assert(currentSelection() ==finite::id_);
    return *static_cast<finite::pointer>(choice.get());
}

inline MultiplexElement_repeatCount::finite::reference MultiplexElement_repeatCount::select_finite ()
{
    return *static_cast<finite::pointer>(setSelection(finite::id_, ASN1::AbstractData::create( &finite::value_type::theInfo)));
}

inline MultiplexElement_repeatCount::finite::reference MultiplexElement_repeatCount::select_finite (MultiplexElement_repeatCount::finite::value_type::int_type value)
{
    return select_finite() = value;
}

inline bool MultiplexElement_repeatCount::finite_isSelected() const
{ 
    return currentSelection() == finite::id_; 
}

inline MultiplexElement_repeatCount::untilClosingFlag::reference MultiplexElement_repeatCount::select_untilClosingFlag ()
{
    return *static_cast<untilClosingFlag::pointer>(setSelection(untilClosingFlag::id_, ASN1::AbstractData::create( &untilClosingFlag::value_type::theInfo)));
}

inline bool MultiplexElement_repeatCount::untilClosingFlag_isSelected() const
{ 
    return currentSelection() == untilClosingFlag::id_; 
}

inline MultiplexElement_repeatCount::MultiplexElement_repeatCount(finite::Id id, finite::value_type::int_type value)
  : Inherited(&theInfo, id, new finite::value_type(value) )
{ }

inline MultiplexElement_repeatCount::MultiplexElement_repeatCount(untilClosingFlag::Id id, untilClosingFlag::const_reference value)
  : Inherited(&theInfo, id, new untilClosingFlag::value_type(value) )
{ }


inline void MultiplexElement_repeatCount::swap(MultiplexElement_repeatCount & other)
{  Inherited::swap(other); }

inline MultiplexElement_repeatCount* MultiplexElement_repeatCount::clone() const
{ return static_cast<MultiplexElement_repeatCount*> (Inherited::clone()); }

inline bool MultiplexElement_repeatCount::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MultiplexEntryRejectionDescriptions_cause::unspecifiedCause::reference MultiplexEntryRejectionDescriptions_cause::select_unspecifiedCause ()
{
    return *static_cast<unspecifiedCause::pointer>(setSelection(unspecifiedCause::id_, ASN1::AbstractData::create( &unspecifiedCause::value_type::theInfo)));
}

inline bool MultiplexEntryRejectionDescriptions_cause::unspecifiedCause_isSelected() const
{ 
    return currentSelection() == unspecifiedCause::id_; 
}

inline MultiplexEntryRejectionDescriptions_cause::descriptorTooComplex::reference MultiplexEntryRejectionDescriptions_cause::select_descriptorTooComplex ()
{
    return *static_cast<descriptorTooComplex::pointer>(setSelection(descriptorTooComplex::id_, ASN1::AbstractData::create( &descriptorTooComplex::value_type::theInfo)));
}

inline bool MultiplexEntryRejectionDescriptions_cause::descriptorTooComplex_isSelected() const
{ 
    return currentSelection() == descriptorTooComplex::id_; 
}

inline MultiplexEntryRejectionDescriptions_cause::MultiplexEntryRejectionDescriptions_cause(unspecifiedCause::Id id, unspecifiedCause::const_reference value)
  : Inherited(&theInfo, id, new unspecifiedCause::value_type(value) )
{ }

inline MultiplexEntryRejectionDescriptions_cause::MultiplexEntryRejectionDescriptions_cause(descriptorTooComplex::Id id, descriptorTooComplex::const_reference value)
  : Inherited(&theInfo, id, new descriptorTooComplex::value_type(value) )
{ }


inline void MultiplexEntryRejectionDescriptions_cause::swap(MultiplexEntryRejectionDescriptions_cause & other)
{  Inherited::swap(other); }

inline MultiplexEntryRejectionDescriptions_cause* MultiplexEntryRejectionDescriptions_cause::clone() const
{ return static_cast<MultiplexEntryRejectionDescriptions_cause*> (Inherited::clone()); }

inline bool MultiplexEntryRejectionDescriptions_cause::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RequestMultiplexEntryRejectionDescriptions_cause::unspecifiedCause::reference RequestMultiplexEntryRejectionDescriptions_cause::select_unspecifiedCause ()
{
    return *static_cast<unspecifiedCause::pointer>(setSelection(unspecifiedCause::id_, ASN1::AbstractData::create( &unspecifiedCause::value_type::theInfo)));
}

inline bool RequestMultiplexEntryRejectionDescriptions_cause::unspecifiedCause_isSelected() const
{ 
    return currentSelection() == unspecifiedCause::id_; 
}

inline RequestMultiplexEntryRejectionDescriptions_cause::RequestMultiplexEntryRejectionDescriptions_cause(unspecifiedCause::Id id, unspecifiedCause::const_reference value)
  : Inherited(&theInfo, id, new unspecifiedCause::value_type(value) )
{ }


inline void RequestMultiplexEntryRejectionDescriptions_cause::swap(RequestMultiplexEntryRejectionDescriptions_cause & other)
{  Inherited::swap(other); }

inline RequestMultiplexEntryRejectionDescriptions_cause* RequestMultiplexEntryRejectionDescriptions_cause::clone() const
{ return static_cast<RequestMultiplexEntryRejectionDescriptions_cause*> (Inherited::clone()); }

inline bool RequestMultiplexEntryRejectionDescriptions_cause::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RequestModeAck_response::willTransmitMostPreferredMode::reference RequestModeAck_response::select_willTransmitMostPreferredMode ()
{
    return *static_cast<willTransmitMostPreferredMode::pointer>(setSelection(willTransmitMostPreferredMode::id_, ASN1::AbstractData::create( &willTransmitMostPreferredMode::value_type::theInfo)));
}

inline bool RequestModeAck_response::willTransmitMostPreferredMode_isSelected() const
{ 
    return currentSelection() == willTransmitMostPreferredMode::id_; 
}

inline RequestModeAck_response::willTransmitLessPreferredMode::reference RequestModeAck_response::select_willTransmitLessPreferredMode ()
{
    return *static_cast<willTransmitLessPreferredMode::pointer>(setSelection(willTransmitLessPreferredMode::id_, ASN1::AbstractData::create( &willTransmitLessPreferredMode::value_type::theInfo)));
}

inline bool RequestModeAck_response::willTransmitLessPreferredMode_isSelected() const
{ 
    return currentSelection() == willTransmitLessPreferredMode::id_; 
}

inline RequestModeAck_response::RequestModeAck_response(willTransmitMostPreferredMode::Id id, willTransmitMostPreferredMode::const_reference value)
  : Inherited(&theInfo, id, new willTransmitMostPreferredMode::value_type(value) )
{ }

inline RequestModeAck_response::RequestModeAck_response(willTransmitLessPreferredMode::Id id, willTransmitLessPreferredMode::const_reference value)
  : Inherited(&theInfo, id, new willTransmitLessPreferredMode::value_type(value) )
{ }


inline void RequestModeAck_response::swap(RequestModeAck_response & other)
{  Inherited::swap(other); }

inline RequestModeAck_response* RequestModeAck_response::clone() const
{ return static_cast<RequestModeAck_response*> (Inherited::clone()); }

inline bool RequestModeAck_response::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RequestModeReject_cause::modeUnavailable::reference RequestModeReject_cause::select_modeUnavailable ()
{
    return *static_cast<modeUnavailable::pointer>(setSelection(modeUnavailable::id_, ASN1::AbstractData::create( &modeUnavailable::value_type::theInfo)));
}

inline bool RequestModeReject_cause::modeUnavailable_isSelected() const
{ 
    return currentSelection() == modeUnavailable::id_; 
}

inline RequestModeReject_cause::multipointConstraint::reference RequestModeReject_cause::select_multipointConstraint ()
{
    return *static_cast<multipointConstraint::pointer>(setSelection(multipointConstraint::id_, ASN1::AbstractData::create( &multipointConstraint::value_type::theInfo)));
}

inline bool RequestModeReject_cause::multipointConstraint_isSelected() const
{ 
    return currentSelection() == multipointConstraint::id_; 
}

inline RequestModeReject_cause::requestDenied::reference RequestModeReject_cause::select_requestDenied ()
{
    return *static_cast<requestDenied::pointer>(setSelection(requestDenied::id_, ASN1::AbstractData::create( &requestDenied::value_type::theInfo)));
}

inline bool RequestModeReject_cause::requestDenied_isSelected() const
{ 
    return currentSelection() == requestDenied::id_; 
}

inline RequestModeReject_cause::RequestModeReject_cause(modeUnavailable::Id id, modeUnavailable::const_reference value)
  : Inherited(&theInfo, id, new modeUnavailable::value_type(value) )
{ }

inline RequestModeReject_cause::RequestModeReject_cause(multipointConstraint::Id id, multipointConstraint::const_reference value)
  : Inherited(&theInfo, id, new multipointConstraint::value_type(value) )
{ }

inline RequestModeReject_cause::RequestModeReject_cause(requestDenied::Id id, requestDenied::const_reference value)
  : Inherited(&theInfo, id, new requestDenied::value_type(value) )
{ }


inline void RequestModeReject_cause::swap(RequestModeReject_cause & other)
{  Inherited::swap(other); }

inline RequestModeReject_cause* RequestModeReject_cause::clone() const
{ return static_cast<RequestModeReject_cause*> (Inherited::clone()); }

inline bool RequestModeReject_cause::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline FECMode_rfc2733Format::rfc2733rfc2198::const_reference FECMode_rfc2733Format::get_rfc2733rfc2198 () const
{
    assert(currentSelection() ==rfc2733rfc2198::id_);
    return *static_cast<rfc2733rfc2198::const_pointer>(choice.get());
}

inline FECMode_rfc2733Format::rfc2733rfc2198::reference FECMode_rfc2733Format::ref_rfc2733rfc2198 ()
{
    assert(currentSelection() ==rfc2733rfc2198::id_);
    return *static_cast<rfc2733rfc2198::pointer>(choice.get());
}

inline FECMode_rfc2733Format::rfc2733rfc2198::reference FECMode_rfc2733Format::select_rfc2733rfc2198 ()
{
    return *static_cast<rfc2733rfc2198::pointer>(setSelection(rfc2733rfc2198::id_, ASN1::AbstractData::create( &rfc2733rfc2198::value_type::theInfo)));
}

inline FECMode_rfc2733Format::rfc2733rfc2198::reference FECMode_rfc2733Format::select_rfc2733rfc2198 (FECMode_rfc2733Format::rfc2733rfc2198::value_type::int_type value)
{
    return select_rfc2733rfc2198() = value;
}

inline bool FECMode_rfc2733Format::rfc2733rfc2198_isSelected() const
{ 
    return currentSelection() == rfc2733rfc2198::id_; 
}

inline FECMode_rfc2733Format::rfc2733sameport::const_reference FECMode_rfc2733Format::get_rfc2733sameport () const
{
    assert(currentSelection() ==rfc2733sameport::id_);
    return *static_cast<rfc2733sameport::const_pointer>(choice.get());
}

inline FECMode_rfc2733Format::rfc2733sameport::reference FECMode_rfc2733Format::ref_rfc2733sameport ()
{
    assert(currentSelection() ==rfc2733sameport::id_);
    return *static_cast<rfc2733sameport::pointer>(choice.get());
}

inline FECMode_rfc2733Format::rfc2733sameport::reference FECMode_rfc2733Format::select_rfc2733sameport ()
{
    return *static_cast<rfc2733sameport::pointer>(setSelection(rfc2733sameport::id_, ASN1::AbstractData::create( &rfc2733sameport::value_type::theInfo)));
}

inline FECMode_rfc2733Format::rfc2733sameport::reference FECMode_rfc2733Format::select_rfc2733sameport (FECMode_rfc2733Format::rfc2733sameport::value_type::int_type value)
{
    return select_rfc2733sameport() = value;
}

inline bool FECMode_rfc2733Format::rfc2733sameport_isSelected() const
{ 
    return currentSelection() == rfc2733sameport::id_; 
}

inline FECMode_rfc2733Format::rfc2733diffport::const_reference FECMode_rfc2733Format::get_rfc2733diffport () const
{
    assert(currentSelection() ==rfc2733diffport::id_);
    return *static_cast<rfc2733diffport::const_pointer>(choice.get());
}

inline FECMode_rfc2733Format::rfc2733diffport::reference FECMode_rfc2733Format::ref_rfc2733diffport ()
{
    assert(currentSelection() ==rfc2733diffport::id_);
    return *static_cast<rfc2733diffport::pointer>(choice.get());
}

inline FECMode_rfc2733Format::rfc2733diffport::reference FECMode_rfc2733Format::select_rfc2733diffport ()
{
    return *static_cast<rfc2733diffport::pointer>(setSelection(rfc2733diffport::id_, ASN1::AbstractData::create( &rfc2733diffport::value_type::theInfo)));
}

inline FECMode_rfc2733Format::rfc2733diffport::reference FECMode_rfc2733Format::select_rfc2733diffport (FECMode_rfc2733Format::rfc2733diffport::value_type::int_type value)
{
    return select_rfc2733diffport() = value;
}

inline bool FECMode_rfc2733Format::rfc2733diffport_isSelected() const
{ 
    return currentSelection() == rfc2733diffport::id_; 
}

inline FECMode_rfc2733Format::FECMode_rfc2733Format(rfc2733rfc2198::Id id, rfc2733rfc2198::value_type::int_type value)
  : Inherited(&theInfo, id, new rfc2733rfc2198::value_type(value) )
{ }

inline FECMode_rfc2733Format::FECMode_rfc2733Format(rfc2733sameport::Id id, rfc2733sameport::value_type::int_type value)
  : Inherited(&theInfo, id, new rfc2733sameport::value_type(value) )
{ }

inline FECMode_rfc2733Format::FECMode_rfc2733Format(rfc2733diffport::Id id, rfc2733diffport::value_type::int_type value)
  : Inherited(&theInfo, id, new rfc2733diffport::value_type(value) )
{ }


inline void FECMode_rfc2733Format::swap(FECMode_rfc2733Format & other)
{  Inherited::swap(other); }

inline FECMode_rfc2733Format* FECMode_rfc2733Format::clone() const
{ return static_cast<FECMode_rfc2733Format*> (Inherited::clone()); }

inline bool FECMode_rfc2733Format::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H261VideoMode_resolution::qcif::reference H261VideoMode_resolution::select_qcif ()
{
    return *static_cast<qcif::pointer>(setSelection(qcif::id_, ASN1::AbstractData::create( &qcif::value_type::theInfo)));
}

inline bool H261VideoMode_resolution::qcif_isSelected() const
{ 
    return currentSelection() == qcif::id_; 
}

inline H261VideoMode_resolution::cif::reference H261VideoMode_resolution::select_cif ()
{
    return *static_cast<cif::pointer>(setSelection(cif::id_, ASN1::AbstractData::create( &cif::value_type::theInfo)));
}

inline bool H261VideoMode_resolution::cif_isSelected() const
{ 
    return currentSelection() == cif::id_; 
}

inline H261VideoMode_resolution::H261VideoMode_resolution(qcif::Id id, qcif::const_reference value)
  : Inherited(&theInfo, id, new qcif::value_type(value) )
{ }

inline H261VideoMode_resolution::H261VideoMode_resolution(cif::Id id, cif::const_reference value)
  : Inherited(&theInfo, id, new cif::value_type(value) )
{ }


inline void H261VideoMode_resolution::swap(H261VideoMode_resolution & other)
{  Inherited::swap(other); }

inline H261VideoMode_resolution* H261VideoMode_resolution::clone() const
{ return static_cast<H261VideoMode_resolution*> (Inherited::clone()); }

inline bool H261VideoMode_resolution::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H262VideoMode_profileAndLevel::profileAndLevel_SPatML::reference H262VideoMode_profileAndLevel::select_profileAndLevel_SPatML ()
{
    return *static_cast<profileAndLevel_SPatML::pointer>(setSelection(profileAndLevel_SPatML::id_, ASN1::AbstractData::create( &profileAndLevel_SPatML::value_type::theInfo)));
}

inline bool H262VideoMode_profileAndLevel::profileAndLevel_SPatML_isSelected() const
{ 
    return currentSelection() == profileAndLevel_SPatML::id_; 
}

inline H262VideoMode_profileAndLevel::profileAndLevel_MPatLL::reference H262VideoMode_profileAndLevel::select_profileAndLevel_MPatLL ()
{
    return *static_cast<profileAndLevel_MPatLL::pointer>(setSelection(profileAndLevel_MPatLL::id_, ASN1::AbstractData::create( &profileAndLevel_MPatLL::value_type::theInfo)));
}

inline bool H262VideoMode_profileAndLevel::profileAndLevel_MPatLL_isSelected() const
{ 
    return currentSelection() == profileAndLevel_MPatLL::id_; 
}

inline H262VideoMode_profileAndLevel::profileAndLevel_MPatML::reference H262VideoMode_profileAndLevel::select_profileAndLevel_MPatML ()
{
    return *static_cast<profileAndLevel_MPatML::pointer>(setSelection(profileAndLevel_MPatML::id_, ASN1::AbstractData::create( &profileAndLevel_MPatML::value_type::theInfo)));
}

inline bool H262VideoMode_profileAndLevel::profileAndLevel_MPatML_isSelected() const
{ 
    return currentSelection() == profileAndLevel_MPatML::id_; 
}

inline H262VideoMode_profileAndLevel::profileAndLevel_MPatH_14::reference H262VideoMode_profileAndLevel::select_profileAndLevel_MPatH_14 ()
{
    return *static_cast<profileAndLevel_MPatH_14::pointer>(setSelection(profileAndLevel_MPatH_14::id_, ASN1::AbstractData::create( &profileAndLevel_MPatH_14::value_type::theInfo)));
}

inline bool H262VideoMode_profileAndLevel::profileAndLevel_MPatH_14_isSelected() const
{ 
    return currentSelection() == profileAndLevel_MPatH_14::id_; 
}

inline H262VideoMode_profileAndLevel::profileAndLevel_MPatHL::reference H262VideoMode_profileAndLevel::select_profileAndLevel_MPatHL ()
{
    return *static_cast<profileAndLevel_MPatHL::pointer>(setSelection(profileAndLevel_MPatHL::id_, ASN1::AbstractData::create( &profileAndLevel_MPatHL::value_type::theInfo)));
}

inline bool H262VideoMode_profileAndLevel::profileAndLevel_MPatHL_isSelected() const
{ 
    return currentSelection() == profileAndLevel_MPatHL::id_; 
}

inline H262VideoMode_profileAndLevel::profileAndLevel_SNRatLL::reference H262VideoMode_profileAndLevel::select_profileAndLevel_SNRatLL ()
{
    return *static_cast<profileAndLevel_SNRatLL::pointer>(setSelection(profileAndLevel_SNRatLL::id_, ASN1::AbstractData::create( &profileAndLevel_SNRatLL::value_type::theInfo)));
}

inline bool H262VideoMode_profileAndLevel::profileAndLevel_SNRatLL_isSelected() const
{ 
    return currentSelection() == profileAndLevel_SNRatLL::id_; 
}

inline H262VideoMode_profileAndLevel::profileAndLevel_SNRatML::reference H262VideoMode_profileAndLevel::select_profileAndLevel_SNRatML ()
{
    return *static_cast<profileAndLevel_SNRatML::pointer>(setSelection(profileAndLevel_SNRatML::id_, ASN1::AbstractData::create( &profileAndLevel_SNRatML::value_type::theInfo)));
}

inline bool H262VideoMode_profileAndLevel::profileAndLevel_SNRatML_isSelected() const
{ 
    return currentSelection() == profileAndLevel_SNRatML::id_; 
}

inline H262VideoMode_profileAndLevel::profileAndLevel_SpatialatH_14::reference H262VideoMode_profileAndLevel::select_profileAndLevel_SpatialatH_14 ()
{
    return *static_cast<profileAndLevel_SpatialatH_14::pointer>(setSelection(profileAndLevel_SpatialatH_14::id_, ASN1::AbstractData::create( &profileAndLevel_SpatialatH_14::value_type::theInfo)));
}

inline bool H262VideoMode_profileAndLevel::profileAndLevel_SpatialatH_14_isSelected() const
{ 
    return currentSelection() == profileAndLevel_SpatialatH_14::id_; 
}

inline H262VideoMode_profileAndLevel::profileAndLevel_HPatML::reference H262VideoMode_profileAndLevel::select_profileAndLevel_HPatML ()
{
    return *static_cast<profileAndLevel_HPatML::pointer>(setSelection(profileAndLevel_HPatML::id_, ASN1::AbstractData::create( &profileAndLevel_HPatML::value_type::theInfo)));
}

inline bool H262VideoMode_profileAndLevel::profileAndLevel_HPatML_isSelected() const
{ 
    return currentSelection() == profileAndLevel_HPatML::id_; 
}

inline H262VideoMode_profileAndLevel::profileAndLevel_HPatH_14::reference H262VideoMode_profileAndLevel::select_profileAndLevel_HPatH_14 ()
{
    return *static_cast<profileAndLevel_HPatH_14::pointer>(setSelection(profileAndLevel_HPatH_14::id_, ASN1::AbstractData::create( &profileAndLevel_HPatH_14::value_type::theInfo)));
}

inline bool H262VideoMode_profileAndLevel::profileAndLevel_HPatH_14_isSelected() const
{ 
    return currentSelection() == profileAndLevel_HPatH_14::id_; 
}

inline H262VideoMode_profileAndLevel::profileAndLevel_HPatHL::reference H262VideoMode_profileAndLevel::select_profileAndLevel_HPatHL ()
{
    return *static_cast<profileAndLevel_HPatHL::pointer>(setSelection(profileAndLevel_HPatHL::id_, ASN1::AbstractData::create( &profileAndLevel_HPatHL::value_type::theInfo)));
}

inline bool H262VideoMode_profileAndLevel::profileAndLevel_HPatHL_isSelected() const
{ 
    return currentSelection() == profileAndLevel_HPatHL::id_; 
}

inline H262VideoMode_profileAndLevel::H262VideoMode_profileAndLevel(profileAndLevel_SPatML::Id id, profileAndLevel_SPatML::const_reference value)
  : Inherited(&theInfo, id, new profileAndLevel_SPatML::value_type(value) )
{ }

inline H262VideoMode_profileAndLevel::H262VideoMode_profileAndLevel(profileAndLevel_MPatLL::Id id, profileAndLevel_MPatLL::const_reference value)
  : Inherited(&theInfo, id, new profileAndLevel_MPatLL::value_type(value) )
{ }

inline H262VideoMode_profileAndLevel::H262VideoMode_profileAndLevel(profileAndLevel_MPatML::Id id, profileAndLevel_MPatML::const_reference value)
  : Inherited(&theInfo, id, new profileAndLevel_MPatML::value_type(value) )
{ }

inline H262VideoMode_profileAndLevel::H262VideoMode_profileAndLevel(profileAndLevel_MPatH_14::Id id, profileAndLevel_MPatH_14::const_reference value)
  : Inherited(&theInfo, id, new profileAndLevel_MPatH_14::value_type(value) )
{ }

inline H262VideoMode_profileAndLevel::H262VideoMode_profileAndLevel(profileAndLevel_MPatHL::Id id, profileAndLevel_MPatHL::const_reference value)
  : Inherited(&theInfo, id, new profileAndLevel_MPatHL::value_type(value) )
{ }

inline H262VideoMode_profileAndLevel::H262VideoMode_profileAndLevel(profileAndLevel_SNRatLL::Id id, profileAndLevel_SNRatLL::const_reference value)
  : Inherited(&theInfo, id, new profileAndLevel_SNRatLL::value_type(value) )
{ }

inline H262VideoMode_profileAndLevel::H262VideoMode_profileAndLevel(profileAndLevel_SNRatML::Id id, profileAndLevel_SNRatML::const_reference value)
  : Inherited(&theInfo, id, new profileAndLevel_SNRatML::value_type(value) )
{ }

inline H262VideoMode_profileAndLevel::H262VideoMode_profileAndLevel(profileAndLevel_SpatialatH_14::Id id, profileAndLevel_SpatialatH_14::const_reference value)
  : Inherited(&theInfo, id, new profileAndLevel_SpatialatH_14::value_type(value) )
{ }

inline H262VideoMode_profileAndLevel::H262VideoMode_profileAndLevel(profileAndLevel_HPatML::Id id, profileAndLevel_HPatML::const_reference value)
  : Inherited(&theInfo, id, new profileAndLevel_HPatML::value_type(value) )
{ }

inline H262VideoMode_profileAndLevel::H262VideoMode_profileAndLevel(profileAndLevel_HPatH_14::Id id, profileAndLevel_HPatH_14::const_reference value)
  : Inherited(&theInfo, id, new profileAndLevel_HPatH_14::value_type(value) )
{ }

inline H262VideoMode_profileAndLevel::H262VideoMode_profileAndLevel(profileAndLevel_HPatHL::Id id, profileAndLevel_HPatHL::const_reference value)
  : Inherited(&theInfo, id, new profileAndLevel_HPatHL::value_type(value) )
{ }


inline void H262VideoMode_profileAndLevel::swap(H262VideoMode_profileAndLevel & other)
{  Inherited::swap(other); }

inline H262VideoMode_profileAndLevel* H262VideoMode_profileAndLevel::clone() const
{ return static_cast<H262VideoMode_profileAndLevel*> (Inherited::clone()); }

inline bool H262VideoMode_profileAndLevel::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H263VideoMode_resolution::sqcif::reference H263VideoMode_resolution::select_sqcif ()
{
    return *static_cast<sqcif::pointer>(setSelection(sqcif::id_, ASN1::AbstractData::create( &sqcif::value_type::theInfo)));
}

inline bool H263VideoMode_resolution::sqcif_isSelected() const
{ 
    return currentSelection() == sqcif::id_; 
}

inline H263VideoMode_resolution::qcif::reference H263VideoMode_resolution::select_qcif ()
{
    return *static_cast<qcif::pointer>(setSelection(qcif::id_, ASN1::AbstractData::create( &qcif::value_type::theInfo)));
}

inline bool H263VideoMode_resolution::qcif_isSelected() const
{ 
    return currentSelection() == qcif::id_; 
}

inline H263VideoMode_resolution::cif::reference H263VideoMode_resolution::select_cif ()
{
    return *static_cast<cif::pointer>(setSelection(cif::id_, ASN1::AbstractData::create( &cif::value_type::theInfo)));
}

inline bool H263VideoMode_resolution::cif_isSelected() const
{ 
    return currentSelection() == cif::id_; 
}

inline H263VideoMode_resolution::cif4::reference H263VideoMode_resolution::select_cif4 ()
{
    return *static_cast<cif4::pointer>(setSelection(cif4::id_, ASN1::AbstractData::create( &cif4::value_type::theInfo)));
}

inline bool H263VideoMode_resolution::cif4_isSelected() const
{ 
    return currentSelection() == cif4::id_; 
}

inline H263VideoMode_resolution::cif16::reference H263VideoMode_resolution::select_cif16 ()
{
    return *static_cast<cif16::pointer>(setSelection(cif16::id_, ASN1::AbstractData::create( &cif16::value_type::theInfo)));
}

inline bool H263VideoMode_resolution::cif16_isSelected() const
{ 
    return currentSelection() == cif16::id_; 
}

inline H263VideoMode_resolution::custom::reference H263VideoMode_resolution::select_custom ()
{
    return *static_cast<custom::pointer>(setSelection(custom::id_, ASN1::AbstractData::create( &custom::value_type::theInfo)));
}

inline bool H263VideoMode_resolution::custom_isSelected() const
{ 
    return currentSelection() == custom::id_; 
}

inline H263VideoMode_resolution::H263VideoMode_resolution(sqcif::Id id, sqcif::const_reference value)
  : Inherited(&theInfo, id, new sqcif::value_type(value) )
{ }

inline H263VideoMode_resolution::H263VideoMode_resolution(qcif::Id id, qcif::const_reference value)
  : Inherited(&theInfo, id, new qcif::value_type(value) )
{ }

inline H263VideoMode_resolution::H263VideoMode_resolution(cif::Id id, cif::const_reference value)
  : Inherited(&theInfo, id, new cif::value_type(value) )
{ }

inline H263VideoMode_resolution::H263VideoMode_resolution(cif4::Id id, cif4::const_reference value)
  : Inherited(&theInfo, id, new cif4::value_type(value) )
{ }

inline H263VideoMode_resolution::H263VideoMode_resolution(cif16::Id id, cif16::const_reference value)
  : Inherited(&theInfo, id, new cif16::value_type(value) )
{ }

inline H263VideoMode_resolution::H263VideoMode_resolution(custom::Id id, custom::const_reference value)
  : Inherited(&theInfo, id, new custom::value_type(value) )
{ }


inline void H263VideoMode_resolution::swap(H263VideoMode_resolution & other)
{  Inherited::swap(other); }

inline H263VideoMode_resolution* H263VideoMode_resolution::clone() const
{ return static_cast<H263VideoMode_resolution*> (Inherited::clone()); }

inline bool H263VideoMode_resolution::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline AudioMode_g7231::noSilenceSuppressionLowRate::reference AudioMode_g7231::select_noSilenceSuppressionLowRate ()
{
    return *static_cast<noSilenceSuppressionLowRate::pointer>(setSelection(noSilenceSuppressionLowRate::id_, ASN1::AbstractData::create( &noSilenceSuppressionLowRate::value_type::theInfo)));
}

inline bool AudioMode_g7231::noSilenceSuppressionLowRate_isSelected() const
{ 
    return currentSelection() == noSilenceSuppressionLowRate::id_; 
}

inline AudioMode_g7231::noSilenceSuppressionHighRate::reference AudioMode_g7231::select_noSilenceSuppressionHighRate ()
{
    return *static_cast<noSilenceSuppressionHighRate::pointer>(setSelection(noSilenceSuppressionHighRate::id_, ASN1::AbstractData::create( &noSilenceSuppressionHighRate::value_type::theInfo)));
}

inline bool AudioMode_g7231::noSilenceSuppressionHighRate_isSelected() const
{ 
    return currentSelection() == noSilenceSuppressionHighRate::id_; 
}

inline AudioMode_g7231::silenceSuppressionLowRate::reference AudioMode_g7231::select_silenceSuppressionLowRate ()
{
    return *static_cast<silenceSuppressionLowRate::pointer>(setSelection(silenceSuppressionLowRate::id_, ASN1::AbstractData::create( &silenceSuppressionLowRate::value_type::theInfo)));
}

inline bool AudioMode_g7231::silenceSuppressionLowRate_isSelected() const
{ 
    return currentSelection() == silenceSuppressionLowRate::id_; 
}

inline AudioMode_g7231::silenceSuppressionHighRate::reference AudioMode_g7231::select_silenceSuppressionHighRate ()
{
    return *static_cast<silenceSuppressionHighRate::pointer>(setSelection(silenceSuppressionHighRate::id_, ASN1::AbstractData::create( &silenceSuppressionHighRate::value_type::theInfo)));
}

inline bool AudioMode_g7231::silenceSuppressionHighRate_isSelected() const
{ 
    return currentSelection() == silenceSuppressionHighRate::id_; 
}

inline AudioMode_g7231::AudioMode_g7231(noSilenceSuppressionLowRate::Id id, noSilenceSuppressionLowRate::const_reference value)
  : Inherited(&theInfo, id, new noSilenceSuppressionLowRate::value_type(value) )
{ }

inline AudioMode_g7231::AudioMode_g7231(noSilenceSuppressionHighRate::Id id, noSilenceSuppressionHighRate::const_reference value)
  : Inherited(&theInfo, id, new noSilenceSuppressionHighRate::value_type(value) )
{ }

inline AudioMode_g7231::AudioMode_g7231(silenceSuppressionLowRate::Id id, silenceSuppressionLowRate::const_reference value)
  : Inherited(&theInfo, id, new silenceSuppressionLowRate::value_type(value) )
{ }

inline AudioMode_g7231::AudioMode_g7231(silenceSuppressionHighRate::Id id, silenceSuppressionHighRate::const_reference value)
  : Inherited(&theInfo, id, new silenceSuppressionHighRate::value_type(value) )
{ }


inline void AudioMode_g7231::swap(AudioMode_g7231 & other)
{  Inherited::swap(other); }

inline AudioMode_g7231* AudioMode_g7231::clone() const
{ return static_cast<AudioMode_g7231*> (Inherited::clone()); }

inline bool AudioMode_g7231::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline IS11172AudioMode_audioLayer::audioLayer1::reference IS11172AudioMode_audioLayer::select_audioLayer1 ()
{
    return *static_cast<audioLayer1::pointer>(setSelection(audioLayer1::id_, ASN1::AbstractData::create( &audioLayer1::value_type::theInfo)));
}

inline bool IS11172AudioMode_audioLayer::audioLayer1_isSelected() const
{ 
    return currentSelection() == audioLayer1::id_; 
}

inline IS11172AudioMode_audioLayer::audioLayer2::reference IS11172AudioMode_audioLayer::select_audioLayer2 ()
{
    return *static_cast<audioLayer2::pointer>(setSelection(audioLayer2::id_, ASN1::AbstractData::create( &audioLayer2::value_type::theInfo)));
}

inline bool IS11172AudioMode_audioLayer::audioLayer2_isSelected() const
{ 
    return currentSelection() == audioLayer2::id_; 
}

inline IS11172AudioMode_audioLayer::audioLayer3::reference IS11172AudioMode_audioLayer::select_audioLayer3 ()
{
    return *static_cast<audioLayer3::pointer>(setSelection(audioLayer3::id_, ASN1::AbstractData::create( &audioLayer3::value_type::theInfo)));
}

inline bool IS11172AudioMode_audioLayer::audioLayer3_isSelected() const
{ 
    return currentSelection() == audioLayer3::id_; 
}

inline IS11172AudioMode_audioLayer::IS11172AudioMode_audioLayer(audioLayer1::Id id, audioLayer1::const_reference value)
  : Inherited(&theInfo, id, new audioLayer1::value_type(value) )
{ }

inline IS11172AudioMode_audioLayer::IS11172AudioMode_audioLayer(audioLayer2::Id id, audioLayer2::const_reference value)
  : Inherited(&theInfo, id, new audioLayer2::value_type(value) )
{ }

inline IS11172AudioMode_audioLayer::IS11172AudioMode_audioLayer(audioLayer3::Id id, audioLayer3::const_reference value)
  : Inherited(&theInfo, id, new audioLayer3::value_type(value) )
{ }


inline void IS11172AudioMode_audioLayer::swap(IS11172AudioMode_audioLayer & other)
{  Inherited::swap(other); }

inline IS11172AudioMode_audioLayer* IS11172AudioMode_audioLayer::clone() const
{ return static_cast<IS11172AudioMode_audioLayer*> (Inherited::clone()); }

inline bool IS11172AudioMode_audioLayer::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline IS11172AudioMode_audioSampling::audioSampling32k::reference IS11172AudioMode_audioSampling::select_audioSampling32k ()
{
    return *static_cast<audioSampling32k::pointer>(setSelection(audioSampling32k::id_, ASN1::AbstractData::create( &audioSampling32k::value_type::theInfo)));
}

inline bool IS11172AudioMode_audioSampling::audioSampling32k_isSelected() const
{ 
    return currentSelection() == audioSampling32k::id_; 
}

inline IS11172AudioMode_audioSampling::audioSampling44k1::reference IS11172AudioMode_audioSampling::select_audioSampling44k1 ()
{
    return *static_cast<audioSampling44k1::pointer>(setSelection(audioSampling44k1::id_, ASN1::AbstractData::create( &audioSampling44k1::value_type::theInfo)));
}

inline bool IS11172AudioMode_audioSampling::audioSampling44k1_isSelected() const
{ 
    return currentSelection() == audioSampling44k1::id_; 
}

inline IS11172AudioMode_audioSampling::audioSampling48k::reference IS11172AudioMode_audioSampling::select_audioSampling48k ()
{
    return *static_cast<audioSampling48k::pointer>(setSelection(audioSampling48k::id_, ASN1::AbstractData::create( &audioSampling48k::value_type::theInfo)));
}

inline bool IS11172AudioMode_audioSampling::audioSampling48k_isSelected() const
{ 
    return currentSelection() == audioSampling48k::id_; 
}

inline IS11172AudioMode_audioSampling::IS11172AudioMode_audioSampling(audioSampling32k::Id id, audioSampling32k::const_reference value)
  : Inherited(&theInfo, id, new audioSampling32k::value_type(value) )
{ }

inline IS11172AudioMode_audioSampling::IS11172AudioMode_audioSampling(audioSampling44k1::Id id, audioSampling44k1::const_reference value)
  : Inherited(&theInfo, id, new audioSampling44k1::value_type(value) )
{ }

inline IS11172AudioMode_audioSampling::IS11172AudioMode_audioSampling(audioSampling48k::Id id, audioSampling48k::const_reference value)
  : Inherited(&theInfo, id, new audioSampling48k::value_type(value) )
{ }


inline void IS11172AudioMode_audioSampling::swap(IS11172AudioMode_audioSampling & other)
{  Inherited::swap(other); }

inline IS11172AudioMode_audioSampling* IS11172AudioMode_audioSampling::clone() const
{ return static_cast<IS11172AudioMode_audioSampling*> (Inherited::clone()); }

inline bool IS11172AudioMode_audioSampling::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline IS11172AudioMode_multichannelType::singleChannel::reference IS11172AudioMode_multichannelType::select_singleChannel ()
{
    return *static_cast<singleChannel::pointer>(setSelection(singleChannel::id_, ASN1::AbstractData::create( &singleChannel::value_type::theInfo)));
}

inline bool IS11172AudioMode_multichannelType::singleChannel_isSelected() const
{ 
    return currentSelection() == singleChannel::id_; 
}

inline IS11172AudioMode_multichannelType::twoChannelStereo::reference IS11172AudioMode_multichannelType::select_twoChannelStereo ()
{
    return *static_cast<twoChannelStereo::pointer>(setSelection(twoChannelStereo::id_, ASN1::AbstractData::create( &twoChannelStereo::value_type::theInfo)));
}

inline bool IS11172AudioMode_multichannelType::twoChannelStereo_isSelected() const
{ 
    return currentSelection() == twoChannelStereo::id_; 
}

inline IS11172AudioMode_multichannelType::twoChannelDual::reference IS11172AudioMode_multichannelType::select_twoChannelDual ()
{
    return *static_cast<twoChannelDual::pointer>(setSelection(twoChannelDual::id_, ASN1::AbstractData::create( &twoChannelDual::value_type::theInfo)));
}

inline bool IS11172AudioMode_multichannelType::twoChannelDual_isSelected() const
{ 
    return currentSelection() == twoChannelDual::id_; 
}

inline IS11172AudioMode_multichannelType::IS11172AudioMode_multichannelType(singleChannel::Id id, singleChannel::const_reference value)
  : Inherited(&theInfo, id, new singleChannel::value_type(value) )
{ }

inline IS11172AudioMode_multichannelType::IS11172AudioMode_multichannelType(twoChannelStereo::Id id, twoChannelStereo::const_reference value)
  : Inherited(&theInfo, id, new twoChannelStereo::value_type(value) )
{ }

inline IS11172AudioMode_multichannelType::IS11172AudioMode_multichannelType(twoChannelDual::Id id, twoChannelDual::const_reference value)
  : Inherited(&theInfo, id, new twoChannelDual::value_type(value) )
{ }


inline void IS11172AudioMode_multichannelType::swap(IS11172AudioMode_multichannelType & other)
{  Inherited::swap(other); }

inline IS11172AudioMode_multichannelType* IS11172AudioMode_multichannelType::clone() const
{ return static_cast<IS11172AudioMode_multichannelType*> (Inherited::clone()); }

inline bool IS11172AudioMode_multichannelType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline IS13818AudioMode_audioLayer::audioLayer1::reference IS13818AudioMode_audioLayer::select_audioLayer1 ()
{
    return *static_cast<audioLayer1::pointer>(setSelection(audioLayer1::id_, ASN1::AbstractData::create( &audioLayer1::value_type::theInfo)));
}

inline bool IS13818AudioMode_audioLayer::audioLayer1_isSelected() const
{ 
    return currentSelection() == audioLayer1::id_; 
}

inline IS13818AudioMode_audioLayer::audioLayer2::reference IS13818AudioMode_audioLayer::select_audioLayer2 ()
{
    return *static_cast<audioLayer2::pointer>(setSelection(audioLayer2::id_, ASN1::AbstractData::create( &audioLayer2::value_type::theInfo)));
}

inline bool IS13818AudioMode_audioLayer::audioLayer2_isSelected() const
{ 
    return currentSelection() == audioLayer2::id_; 
}

inline IS13818AudioMode_audioLayer::audioLayer3::reference IS13818AudioMode_audioLayer::select_audioLayer3 ()
{
    return *static_cast<audioLayer3::pointer>(setSelection(audioLayer3::id_, ASN1::AbstractData::create( &audioLayer3::value_type::theInfo)));
}

inline bool IS13818AudioMode_audioLayer::audioLayer3_isSelected() const
{ 
    return currentSelection() == audioLayer3::id_; 
}

inline IS13818AudioMode_audioLayer::IS13818AudioMode_audioLayer(audioLayer1::Id id, audioLayer1::const_reference value)
  : Inherited(&theInfo, id, new audioLayer1::value_type(value) )
{ }

inline IS13818AudioMode_audioLayer::IS13818AudioMode_audioLayer(audioLayer2::Id id, audioLayer2::const_reference value)
  : Inherited(&theInfo, id, new audioLayer2::value_type(value) )
{ }

inline IS13818AudioMode_audioLayer::IS13818AudioMode_audioLayer(audioLayer3::Id id, audioLayer3::const_reference value)
  : Inherited(&theInfo, id, new audioLayer3::value_type(value) )
{ }


inline void IS13818AudioMode_audioLayer::swap(IS13818AudioMode_audioLayer & other)
{  Inherited::swap(other); }

inline IS13818AudioMode_audioLayer* IS13818AudioMode_audioLayer::clone() const
{ return static_cast<IS13818AudioMode_audioLayer*> (Inherited::clone()); }

inline bool IS13818AudioMode_audioLayer::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline IS13818AudioMode_audioSampling::audioSampling16k::reference IS13818AudioMode_audioSampling::select_audioSampling16k ()
{
    return *static_cast<audioSampling16k::pointer>(setSelection(audioSampling16k::id_, ASN1::AbstractData::create( &audioSampling16k::value_type::theInfo)));
}

inline bool IS13818AudioMode_audioSampling::audioSampling16k_isSelected() const
{ 
    return currentSelection() == audioSampling16k::id_; 
}

inline IS13818AudioMode_audioSampling::audioSampling22k05::reference IS13818AudioMode_audioSampling::select_audioSampling22k05 ()
{
    return *static_cast<audioSampling22k05::pointer>(setSelection(audioSampling22k05::id_, ASN1::AbstractData::create( &audioSampling22k05::value_type::theInfo)));
}

inline bool IS13818AudioMode_audioSampling::audioSampling22k05_isSelected() const
{ 
    return currentSelection() == audioSampling22k05::id_; 
}

inline IS13818AudioMode_audioSampling::audioSampling24k::reference IS13818AudioMode_audioSampling::select_audioSampling24k ()
{
    return *static_cast<audioSampling24k::pointer>(setSelection(audioSampling24k::id_, ASN1::AbstractData::create( &audioSampling24k::value_type::theInfo)));
}

inline bool IS13818AudioMode_audioSampling::audioSampling24k_isSelected() const
{ 
    return currentSelection() == audioSampling24k::id_; 
}

inline IS13818AudioMode_audioSampling::audioSampling32k::reference IS13818AudioMode_audioSampling::select_audioSampling32k ()
{
    return *static_cast<audioSampling32k::pointer>(setSelection(audioSampling32k::id_, ASN1::AbstractData::create( &audioSampling32k::value_type::theInfo)));
}

inline bool IS13818AudioMode_audioSampling::audioSampling32k_isSelected() const
{ 
    return currentSelection() == audioSampling32k::id_; 
}

inline IS13818AudioMode_audioSampling::audioSampling44k1::reference IS13818AudioMode_audioSampling::select_audioSampling44k1 ()
{
    return *static_cast<audioSampling44k1::pointer>(setSelection(audioSampling44k1::id_, ASN1::AbstractData::create( &audioSampling44k1::value_type::theInfo)));
}

inline bool IS13818AudioMode_audioSampling::audioSampling44k1_isSelected() const
{ 
    return currentSelection() == audioSampling44k1::id_; 
}

inline IS13818AudioMode_audioSampling::audioSampling48k::reference IS13818AudioMode_audioSampling::select_audioSampling48k ()
{
    return *static_cast<audioSampling48k::pointer>(setSelection(audioSampling48k::id_, ASN1::AbstractData::create( &audioSampling48k::value_type::theInfo)));
}

inline bool IS13818AudioMode_audioSampling::audioSampling48k_isSelected() const
{ 
    return currentSelection() == audioSampling48k::id_; 
}

inline IS13818AudioMode_audioSampling::IS13818AudioMode_audioSampling(audioSampling16k::Id id, audioSampling16k::const_reference value)
  : Inherited(&theInfo, id, new audioSampling16k::value_type(value) )
{ }

inline IS13818AudioMode_audioSampling::IS13818AudioMode_audioSampling(audioSampling22k05::Id id, audioSampling22k05::const_reference value)
  : Inherited(&theInfo, id, new audioSampling22k05::value_type(value) )
{ }

inline IS13818AudioMode_audioSampling::IS13818AudioMode_audioSampling(audioSampling24k::Id id, audioSampling24k::const_reference value)
  : Inherited(&theInfo, id, new audioSampling24k::value_type(value) )
{ }

inline IS13818AudioMode_audioSampling::IS13818AudioMode_audioSampling(audioSampling32k::Id id, audioSampling32k::const_reference value)
  : Inherited(&theInfo, id, new audioSampling32k::value_type(value) )
{ }

inline IS13818AudioMode_audioSampling::IS13818AudioMode_audioSampling(audioSampling44k1::Id id, audioSampling44k1::const_reference value)
  : Inherited(&theInfo, id, new audioSampling44k1::value_type(value) )
{ }

inline IS13818AudioMode_audioSampling::IS13818AudioMode_audioSampling(audioSampling48k::Id id, audioSampling48k::const_reference value)
  : Inherited(&theInfo, id, new audioSampling48k::value_type(value) )
{ }


inline void IS13818AudioMode_audioSampling::swap(IS13818AudioMode_audioSampling & other)
{  Inherited::swap(other); }

inline IS13818AudioMode_audioSampling* IS13818AudioMode_audioSampling::clone() const
{ return static_cast<IS13818AudioMode_audioSampling*> (Inherited::clone()); }

inline bool IS13818AudioMode_audioSampling::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline IS13818AudioMode_multichannelType::singleChannel::reference IS13818AudioMode_multichannelType::select_singleChannel ()
{
    return *static_cast<singleChannel::pointer>(setSelection(singleChannel::id_, ASN1::AbstractData::create( &singleChannel::value_type::theInfo)));
}

inline bool IS13818AudioMode_multichannelType::singleChannel_isSelected() const
{ 
    return currentSelection() == singleChannel::id_; 
}

inline IS13818AudioMode_multichannelType::twoChannelStereo::reference IS13818AudioMode_multichannelType::select_twoChannelStereo ()
{
    return *static_cast<twoChannelStereo::pointer>(setSelection(twoChannelStereo::id_, ASN1::AbstractData::create( &twoChannelStereo::value_type::theInfo)));
}

inline bool IS13818AudioMode_multichannelType::twoChannelStereo_isSelected() const
{ 
    return currentSelection() == twoChannelStereo::id_; 
}

inline IS13818AudioMode_multichannelType::twoChannelDual::reference IS13818AudioMode_multichannelType::select_twoChannelDual ()
{
    return *static_cast<twoChannelDual::pointer>(setSelection(twoChannelDual::id_, ASN1::AbstractData::create( &twoChannelDual::value_type::theInfo)));
}

inline bool IS13818AudioMode_multichannelType::twoChannelDual_isSelected() const
{ 
    return currentSelection() == twoChannelDual::id_; 
}

inline IS13818AudioMode_multichannelType::threeChannels2_1::reference IS13818AudioMode_multichannelType::select_threeChannels2_1 ()
{
    return *static_cast<threeChannels2_1::pointer>(setSelection(threeChannels2_1::id_, ASN1::AbstractData::create( &threeChannels2_1::value_type::theInfo)));
}

inline bool IS13818AudioMode_multichannelType::threeChannels2_1_isSelected() const
{ 
    return currentSelection() == threeChannels2_1::id_; 
}

inline IS13818AudioMode_multichannelType::threeChannels3_0::reference IS13818AudioMode_multichannelType::select_threeChannels3_0 ()
{
    return *static_cast<threeChannels3_0::pointer>(setSelection(threeChannels3_0::id_, ASN1::AbstractData::create( &threeChannels3_0::value_type::theInfo)));
}

inline bool IS13818AudioMode_multichannelType::threeChannels3_0_isSelected() const
{ 
    return currentSelection() == threeChannels3_0::id_; 
}

inline IS13818AudioMode_multichannelType::fourChannels2_0_2_0::reference IS13818AudioMode_multichannelType::select_fourChannels2_0_2_0 ()
{
    return *static_cast<fourChannels2_0_2_0::pointer>(setSelection(fourChannels2_0_2_0::id_, ASN1::AbstractData::create( &fourChannels2_0_2_0::value_type::theInfo)));
}

inline bool IS13818AudioMode_multichannelType::fourChannels2_0_2_0_isSelected() const
{ 
    return currentSelection() == fourChannels2_0_2_0::id_; 
}

inline IS13818AudioMode_multichannelType::fourChannels2_2::reference IS13818AudioMode_multichannelType::select_fourChannels2_2 ()
{
    return *static_cast<fourChannels2_2::pointer>(setSelection(fourChannels2_2::id_, ASN1::AbstractData::create( &fourChannels2_2::value_type::theInfo)));
}

inline bool IS13818AudioMode_multichannelType::fourChannels2_2_isSelected() const
{ 
    return currentSelection() == fourChannels2_2::id_; 
}

inline IS13818AudioMode_multichannelType::fourChannels3_1::reference IS13818AudioMode_multichannelType::select_fourChannels3_1 ()
{
    return *static_cast<fourChannels3_1::pointer>(setSelection(fourChannels3_1::id_, ASN1::AbstractData::create( &fourChannels3_1::value_type::theInfo)));
}

inline bool IS13818AudioMode_multichannelType::fourChannels3_1_isSelected() const
{ 
    return currentSelection() == fourChannels3_1::id_; 
}

inline IS13818AudioMode_multichannelType::fiveChannels3_0_2_0::reference IS13818AudioMode_multichannelType::select_fiveChannels3_0_2_0 ()
{
    return *static_cast<fiveChannels3_0_2_0::pointer>(setSelection(fiveChannels3_0_2_0::id_, ASN1::AbstractData::create( &fiveChannels3_0_2_0::value_type::theInfo)));
}

inline bool IS13818AudioMode_multichannelType::fiveChannels3_0_2_0_isSelected() const
{ 
    return currentSelection() == fiveChannels3_0_2_0::id_; 
}

inline IS13818AudioMode_multichannelType::fiveChannels3_2::reference IS13818AudioMode_multichannelType::select_fiveChannels3_2 ()
{
    return *static_cast<fiveChannels3_2::pointer>(setSelection(fiveChannels3_2::id_, ASN1::AbstractData::create( &fiveChannels3_2::value_type::theInfo)));
}

inline bool IS13818AudioMode_multichannelType::fiveChannels3_2_isSelected() const
{ 
    return currentSelection() == fiveChannels3_2::id_; 
}

inline IS13818AudioMode_multichannelType::IS13818AudioMode_multichannelType(singleChannel::Id id, singleChannel::const_reference value)
  : Inherited(&theInfo, id, new singleChannel::value_type(value) )
{ }

inline IS13818AudioMode_multichannelType::IS13818AudioMode_multichannelType(twoChannelStereo::Id id, twoChannelStereo::const_reference value)
  : Inherited(&theInfo, id, new twoChannelStereo::value_type(value) )
{ }

inline IS13818AudioMode_multichannelType::IS13818AudioMode_multichannelType(twoChannelDual::Id id, twoChannelDual::const_reference value)
  : Inherited(&theInfo, id, new twoChannelDual::value_type(value) )
{ }

inline IS13818AudioMode_multichannelType::IS13818AudioMode_multichannelType(threeChannels2_1::Id id, threeChannels2_1::const_reference value)
  : Inherited(&theInfo, id, new threeChannels2_1::value_type(value) )
{ }

inline IS13818AudioMode_multichannelType::IS13818AudioMode_multichannelType(threeChannels3_0::Id id, threeChannels3_0::const_reference value)
  : Inherited(&theInfo, id, new threeChannels3_0::value_type(value) )
{ }

inline IS13818AudioMode_multichannelType::IS13818AudioMode_multichannelType(fourChannels2_0_2_0::Id id, fourChannels2_0_2_0::const_reference value)
  : Inherited(&theInfo, id, new fourChannels2_0_2_0::value_type(value) )
{ }

inline IS13818AudioMode_multichannelType::IS13818AudioMode_multichannelType(fourChannels2_2::Id id, fourChannels2_2::const_reference value)
  : Inherited(&theInfo, id, new fourChannels2_2::value_type(value) )
{ }

inline IS13818AudioMode_multichannelType::IS13818AudioMode_multichannelType(fourChannels3_1::Id id, fourChannels3_1::const_reference value)
  : Inherited(&theInfo, id, new fourChannels3_1::value_type(value) )
{ }

inline IS13818AudioMode_multichannelType::IS13818AudioMode_multichannelType(fiveChannels3_0_2_0::Id id, fiveChannels3_0_2_0::const_reference value)
  : Inherited(&theInfo, id, new fiveChannels3_0_2_0::value_type(value) )
{ }

inline IS13818AudioMode_multichannelType::IS13818AudioMode_multichannelType(fiveChannels3_2::Id id, fiveChannels3_2::const_reference value)
  : Inherited(&theInfo, id, new fiveChannels3_2::value_type(value) )
{ }


inline void IS13818AudioMode_multichannelType::swap(IS13818AudioMode_multichannelType & other)
{  Inherited::swap(other); }

inline IS13818AudioMode_multichannelType* IS13818AudioMode_multichannelType::clone() const
{ return static_cast<IS13818AudioMode_multichannelType*> (Inherited::clone()); }

inline bool IS13818AudioMode_multichannelType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline G7231AnnexCMode_g723AnnexCAudioMode::highRateMode0::const_reference G7231AnnexCMode_g723AnnexCAudioMode::get_highRateMode0 () const
{ return *static_cast<highRateMode0::const_pointer>(fields[0]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::highRateMode0::reference G7231AnnexCMode_g723AnnexCAudioMode::ref_highRateMode0 ()
{ return *static_cast<highRateMode0::pointer>(fields[0]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::highRateMode0::reference G7231AnnexCMode_g723AnnexCAudioMode::set_highRateMode0 ()
{ return *static_cast<highRateMode0::pointer>(fields[0]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::highRateMode0::reference G7231AnnexCMode_g723AnnexCAudioMode::set_highRateMode0 (highRateMode0::value_type::int_type value)
{ return *static_cast<highRateMode0::pointer>(fields[0]) = value ;}

inline G7231AnnexCMode_g723AnnexCAudioMode::highRateMode1::const_reference G7231AnnexCMode_g723AnnexCAudioMode::get_highRateMode1 () const
{ return *static_cast<highRateMode1::const_pointer>(fields[1]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::highRateMode1::reference G7231AnnexCMode_g723AnnexCAudioMode::ref_highRateMode1 ()
{ return *static_cast<highRateMode1::pointer>(fields[1]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::highRateMode1::reference G7231AnnexCMode_g723AnnexCAudioMode::set_highRateMode1 ()
{ return *static_cast<highRateMode1::pointer>(fields[1]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::highRateMode1::reference G7231AnnexCMode_g723AnnexCAudioMode::set_highRateMode1 (highRateMode1::value_type::int_type value)
{ return *static_cast<highRateMode1::pointer>(fields[1]) = value ;}

inline G7231AnnexCMode_g723AnnexCAudioMode::lowRateMode0::const_reference G7231AnnexCMode_g723AnnexCAudioMode::get_lowRateMode0 () const
{ return *static_cast<lowRateMode0::const_pointer>(fields[2]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::lowRateMode0::reference G7231AnnexCMode_g723AnnexCAudioMode::ref_lowRateMode0 ()
{ return *static_cast<lowRateMode0::pointer>(fields[2]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::lowRateMode0::reference G7231AnnexCMode_g723AnnexCAudioMode::set_lowRateMode0 ()
{ return *static_cast<lowRateMode0::pointer>(fields[2]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::lowRateMode0::reference G7231AnnexCMode_g723AnnexCAudioMode::set_lowRateMode0 (lowRateMode0::value_type::int_type value)
{ return *static_cast<lowRateMode0::pointer>(fields[2]) = value ;}

inline G7231AnnexCMode_g723AnnexCAudioMode::lowRateMode1::const_reference G7231AnnexCMode_g723AnnexCAudioMode::get_lowRateMode1 () const
{ return *static_cast<lowRateMode1::const_pointer>(fields[3]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::lowRateMode1::reference G7231AnnexCMode_g723AnnexCAudioMode::ref_lowRateMode1 ()
{ return *static_cast<lowRateMode1::pointer>(fields[3]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::lowRateMode1::reference G7231AnnexCMode_g723AnnexCAudioMode::set_lowRateMode1 ()
{ return *static_cast<lowRateMode1::pointer>(fields[3]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::lowRateMode1::reference G7231AnnexCMode_g723AnnexCAudioMode::set_lowRateMode1 (lowRateMode1::value_type::int_type value)
{ return *static_cast<lowRateMode1::pointer>(fields[3]) = value ;}

inline G7231AnnexCMode_g723AnnexCAudioMode::sidMode0::const_reference G7231AnnexCMode_g723AnnexCAudioMode::get_sidMode0 () const
{ return *static_cast<sidMode0::const_pointer>(fields[4]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::sidMode0::reference G7231AnnexCMode_g723AnnexCAudioMode::ref_sidMode0 ()
{ return *static_cast<sidMode0::pointer>(fields[4]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::sidMode0::reference G7231AnnexCMode_g723AnnexCAudioMode::set_sidMode0 ()
{ return *static_cast<sidMode0::pointer>(fields[4]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::sidMode0::reference G7231AnnexCMode_g723AnnexCAudioMode::set_sidMode0 (sidMode0::value_type::int_type value)
{ return *static_cast<sidMode0::pointer>(fields[4]) = value ;}

inline G7231AnnexCMode_g723AnnexCAudioMode::sidMode1::const_reference G7231AnnexCMode_g723AnnexCAudioMode::get_sidMode1 () const
{ return *static_cast<sidMode1::const_pointer>(fields[5]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::sidMode1::reference G7231AnnexCMode_g723AnnexCAudioMode::ref_sidMode1 ()
{ return *static_cast<sidMode1::pointer>(fields[5]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::sidMode1::reference G7231AnnexCMode_g723AnnexCAudioMode::set_sidMode1 ()
{ return *static_cast<sidMode1::pointer>(fields[5]);}

inline G7231AnnexCMode_g723AnnexCAudioMode::sidMode1::reference G7231AnnexCMode_g723AnnexCAudioMode::set_sidMode1 (sidMode1::value_type::int_type value)
{ return *static_cast<sidMode1::pointer>(fields[5]) = value ;}

inline void G7231AnnexCMode_g723AnnexCAudioMode::swap(G7231AnnexCMode_g723AnnexCAudioMode& other)
{ Inherited::swap(other); }

inline G7231AnnexCMode_g723AnnexCAudioMode* G7231AnnexCMode_g723AnnexCAudioMode::clone() const
{ return static_cast<G7231AnnexCMode_g723AnnexCAudioMode*> (Inherited::clone()); }

inline MaintenanceLoopRequest_type::systemLoop::reference MaintenanceLoopRequest_type::select_systemLoop ()
{
    return *static_cast<systemLoop::pointer>(setSelection(systemLoop::id_, ASN1::AbstractData::create( &systemLoop::value_type::theInfo)));
}

inline bool MaintenanceLoopRequest_type::systemLoop_isSelected() const
{ 
    return currentSelection() == systemLoop::id_; 
}

inline MaintenanceLoopRequest_type::mediaLoop::const_reference MaintenanceLoopRequest_type::get_mediaLoop () const
{
    assert(currentSelection() ==mediaLoop::id_);
    return *static_cast<mediaLoop::const_pointer>(choice.get());
}

inline MaintenanceLoopRequest_type::mediaLoop::reference MaintenanceLoopRequest_type::ref_mediaLoop ()
{
    assert(currentSelection() ==mediaLoop::id_);
    return *static_cast<mediaLoop::pointer>(choice.get());
}

inline MaintenanceLoopRequest_type::mediaLoop::reference MaintenanceLoopRequest_type::select_mediaLoop ()
{
    return *static_cast<mediaLoop::pointer>(setSelection(mediaLoop::id_, ASN1::AbstractData::create( &mediaLoop::value_type::theInfo)));
}

inline MaintenanceLoopRequest_type::mediaLoop::reference MaintenanceLoopRequest_type::select_mediaLoop (MaintenanceLoopRequest_type::mediaLoop::value_type::int_type value)
{
    return select_mediaLoop() = value;
}

inline bool MaintenanceLoopRequest_type::mediaLoop_isSelected() const
{ 
    return currentSelection() == mediaLoop::id_; 
}

inline MaintenanceLoopRequest_type::logicalChannelLoop::const_reference MaintenanceLoopRequest_type::get_logicalChannelLoop () const
{
    assert(currentSelection() ==logicalChannelLoop::id_);
    return *static_cast<logicalChannelLoop::const_pointer>(choice.get());
}

inline MaintenanceLoopRequest_type::logicalChannelLoop::reference MaintenanceLoopRequest_type::ref_logicalChannelLoop ()
{
    assert(currentSelection() ==logicalChannelLoop::id_);
    return *static_cast<logicalChannelLoop::pointer>(choice.get());
}

inline MaintenanceLoopRequest_type::logicalChannelLoop::reference MaintenanceLoopRequest_type::select_logicalChannelLoop ()
{
    return *static_cast<logicalChannelLoop::pointer>(setSelection(logicalChannelLoop::id_, ASN1::AbstractData::create( &logicalChannelLoop::value_type::theInfo)));
}

inline MaintenanceLoopRequest_type::logicalChannelLoop::reference MaintenanceLoopRequest_type::select_logicalChannelLoop (MaintenanceLoopRequest_type::logicalChannelLoop::value_type::int_type value)
{
    return select_logicalChannelLoop() = value;
}

inline bool MaintenanceLoopRequest_type::logicalChannelLoop_isSelected() const
{ 
    return currentSelection() == logicalChannelLoop::id_; 
}

inline MaintenanceLoopRequest_type::MaintenanceLoopRequest_type(systemLoop::Id id, systemLoop::const_reference value)
  : Inherited(&theInfo, id, new systemLoop::value_type(value) )
{ }

inline MaintenanceLoopRequest_type::MaintenanceLoopRequest_type(mediaLoop::Id id, mediaLoop::value_type::int_type value)
  : Inherited(&theInfo, id, new mediaLoop::value_type(value) )
{ }

inline MaintenanceLoopRequest_type::MaintenanceLoopRequest_type(logicalChannelLoop::Id id, logicalChannelLoop::value_type::int_type value)
  : Inherited(&theInfo, id, new logicalChannelLoop::value_type(value) )
{ }


inline void MaintenanceLoopRequest_type::swap(MaintenanceLoopRequest_type & other)
{  Inherited::swap(other); }

inline MaintenanceLoopRequest_type* MaintenanceLoopRequest_type::clone() const
{ return static_cast<MaintenanceLoopRequest_type*> (Inherited::clone()); }

inline bool MaintenanceLoopRequest_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MaintenanceLoopAck_type::systemLoop::reference MaintenanceLoopAck_type::select_systemLoop ()
{
    return *static_cast<systemLoop::pointer>(setSelection(systemLoop::id_, ASN1::AbstractData::create( &systemLoop::value_type::theInfo)));
}

inline bool MaintenanceLoopAck_type::systemLoop_isSelected() const
{ 
    return currentSelection() == systemLoop::id_; 
}

inline MaintenanceLoopAck_type::mediaLoop::const_reference MaintenanceLoopAck_type::get_mediaLoop () const
{
    assert(currentSelection() ==mediaLoop::id_);
    return *static_cast<mediaLoop::const_pointer>(choice.get());
}

inline MaintenanceLoopAck_type::mediaLoop::reference MaintenanceLoopAck_type::ref_mediaLoop ()
{
    assert(currentSelection() ==mediaLoop::id_);
    return *static_cast<mediaLoop::pointer>(choice.get());
}

inline MaintenanceLoopAck_type::mediaLoop::reference MaintenanceLoopAck_type::select_mediaLoop ()
{
    return *static_cast<mediaLoop::pointer>(setSelection(mediaLoop::id_, ASN1::AbstractData::create( &mediaLoop::value_type::theInfo)));
}

inline MaintenanceLoopAck_type::mediaLoop::reference MaintenanceLoopAck_type::select_mediaLoop (MaintenanceLoopAck_type::mediaLoop::value_type::int_type value)
{
    return select_mediaLoop() = value;
}

inline bool MaintenanceLoopAck_type::mediaLoop_isSelected() const
{ 
    return currentSelection() == mediaLoop::id_; 
}

inline MaintenanceLoopAck_type::logicalChannelLoop::const_reference MaintenanceLoopAck_type::get_logicalChannelLoop () const
{
    assert(currentSelection() ==logicalChannelLoop::id_);
    return *static_cast<logicalChannelLoop::const_pointer>(choice.get());
}

inline MaintenanceLoopAck_type::logicalChannelLoop::reference MaintenanceLoopAck_type::ref_logicalChannelLoop ()
{
    assert(currentSelection() ==logicalChannelLoop::id_);
    return *static_cast<logicalChannelLoop::pointer>(choice.get());
}

inline MaintenanceLoopAck_type::logicalChannelLoop::reference MaintenanceLoopAck_type::select_logicalChannelLoop ()
{
    return *static_cast<logicalChannelLoop::pointer>(setSelection(logicalChannelLoop::id_, ASN1::AbstractData::create( &logicalChannelLoop::value_type::theInfo)));
}

inline MaintenanceLoopAck_type::logicalChannelLoop::reference MaintenanceLoopAck_type::select_logicalChannelLoop (MaintenanceLoopAck_type::logicalChannelLoop::value_type::int_type value)
{
    return select_logicalChannelLoop() = value;
}

inline bool MaintenanceLoopAck_type::logicalChannelLoop_isSelected() const
{ 
    return currentSelection() == logicalChannelLoop::id_; 
}

inline MaintenanceLoopAck_type::MaintenanceLoopAck_type(systemLoop::Id id, systemLoop::const_reference value)
  : Inherited(&theInfo, id, new systemLoop::value_type(value) )
{ }

inline MaintenanceLoopAck_type::MaintenanceLoopAck_type(mediaLoop::Id id, mediaLoop::value_type::int_type value)
  : Inherited(&theInfo, id, new mediaLoop::value_type(value) )
{ }

inline MaintenanceLoopAck_type::MaintenanceLoopAck_type(logicalChannelLoop::Id id, logicalChannelLoop::value_type::int_type value)
  : Inherited(&theInfo, id, new logicalChannelLoop::value_type(value) )
{ }


inline void MaintenanceLoopAck_type::swap(MaintenanceLoopAck_type & other)
{  Inherited::swap(other); }

inline MaintenanceLoopAck_type* MaintenanceLoopAck_type::clone() const
{ return static_cast<MaintenanceLoopAck_type*> (Inherited::clone()); }

inline bool MaintenanceLoopAck_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MaintenanceLoopReject_type::systemLoop::reference MaintenanceLoopReject_type::select_systemLoop ()
{
    return *static_cast<systemLoop::pointer>(setSelection(systemLoop::id_, ASN1::AbstractData::create( &systemLoop::value_type::theInfo)));
}

inline bool MaintenanceLoopReject_type::systemLoop_isSelected() const
{ 
    return currentSelection() == systemLoop::id_; 
}

inline MaintenanceLoopReject_type::mediaLoop::const_reference MaintenanceLoopReject_type::get_mediaLoop () const
{
    assert(currentSelection() ==mediaLoop::id_);
    return *static_cast<mediaLoop::const_pointer>(choice.get());
}

inline MaintenanceLoopReject_type::mediaLoop::reference MaintenanceLoopReject_type::ref_mediaLoop ()
{
    assert(currentSelection() ==mediaLoop::id_);
    return *static_cast<mediaLoop::pointer>(choice.get());
}

inline MaintenanceLoopReject_type::mediaLoop::reference MaintenanceLoopReject_type::select_mediaLoop ()
{
    return *static_cast<mediaLoop::pointer>(setSelection(mediaLoop::id_, ASN1::AbstractData::create( &mediaLoop::value_type::theInfo)));
}

inline MaintenanceLoopReject_type::mediaLoop::reference MaintenanceLoopReject_type::select_mediaLoop (MaintenanceLoopReject_type::mediaLoop::value_type::int_type value)
{
    return select_mediaLoop() = value;
}

inline bool MaintenanceLoopReject_type::mediaLoop_isSelected() const
{ 
    return currentSelection() == mediaLoop::id_; 
}

inline MaintenanceLoopReject_type::logicalChannelLoop::const_reference MaintenanceLoopReject_type::get_logicalChannelLoop () const
{
    assert(currentSelection() ==logicalChannelLoop::id_);
    return *static_cast<logicalChannelLoop::const_pointer>(choice.get());
}

inline MaintenanceLoopReject_type::logicalChannelLoop::reference MaintenanceLoopReject_type::ref_logicalChannelLoop ()
{
    assert(currentSelection() ==logicalChannelLoop::id_);
    return *static_cast<logicalChannelLoop::pointer>(choice.get());
}

inline MaintenanceLoopReject_type::logicalChannelLoop::reference MaintenanceLoopReject_type::select_logicalChannelLoop ()
{
    return *static_cast<logicalChannelLoop::pointer>(setSelection(logicalChannelLoop::id_, ASN1::AbstractData::create( &logicalChannelLoop::value_type::theInfo)));
}

inline MaintenanceLoopReject_type::logicalChannelLoop::reference MaintenanceLoopReject_type::select_logicalChannelLoop (MaintenanceLoopReject_type::logicalChannelLoop::value_type::int_type value)
{
    return select_logicalChannelLoop() = value;
}

inline bool MaintenanceLoopReject_type::logicalChannelLoop_isSelected() const
{ 
    return currentSelection() == logicalChannelLoop::id_; 
}

inline MaintenanceLoopReject_type::MaintenanceLoopReject_type(systemLoop::Id id, systemLoop::const_reference value)
  : Inherited(&theInfo, id, new systemLoop::value_type(value) )
{ }

inline MaintenanceLoopReject_type::MaintenanceLoopReject_type(mediaLoop::Id id, mediaLoop::value_type::int_type value)
  : Inherited(&theInfo, id, new mediaLoop::value_type(value) )
{ }

inline MaintenanceLoopReject_type::MaintenanceLoopReject_type(logicalChannelLoop::Id id, logicalChannelLoop::value_type::int_type value)
  : Inherited(&theInfo, id, new logicalChannelLoop::value_type(value) )
{ }


inline void MaintenanceLoopReject_type::swap(MaintenanceLoopReject_type & other)
{  Inherited::swap(other); }

inline MaintenanceLoopReject_type* MaintenanceLoopReject_type::clone() const
{ return static_cast<MaintenanceLoopReject_type*> (Inherited::clone()); }

inline bool MaintenanceLoopReject_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MaintenanceLoopReject_cause::canNotPerformLoop::reference MaintenanceLoopReject_cause::select_canNotPerformLoop ()
{
    return *static_cast<canNotPerformLoop::pointer>(setSelection(canNotPerformLoop::id_, ASN1::AbstractData::create( &canNotPerformLoop::value_type::theInfo)));
}

inline bool MaintenanceLoopReject_cause::canNotPerformLoop_isSelected() const
{ 
    return currentSelection() == canNotPerformLoop::id_; 
}

inline MaintenanceLoopReject_cause::MaintenanceLoopReject_cause(canNotPerformLoop::Id id, canNotPerformLoop::const_reference value)
  : Inherited(&theInfo, id, new canNotPerformLoop::value_type(value) )
{ }


inline void MaintenanceLoopReject_cause::swap(MaintenanceLoopReject_cause & other)
{  Inherited::swap(other); }

inline MaintenanceLoopReject_cause* MaintenanceLoopReject_cause::clone() const
{ return static_cast<MaintenanceLoopReject_cause*> (Inherited::clone()); }

inline bool MaintenanceLoopReject_cause::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ConferenceResponse_makeMeChairResponse::grantedChairToken::reference ConferenceResponse_makeMeChairResponse::select_grantedChairToken ()
{
    return *static_cast<grantedChairToken::pointer>(setSelection(grantedChairToken::id_, ASN1::AbstractData::create( &grantedChairToken::value_type::theInfo)));
}

inline bool ConferenceResponse_makeMeChairResponse::grantedChairToken_isSelected() const
{ 
    return currentSelection() == grantedChairToken::id_; 
}

inline ConferenceResponse_makeMeChairResponse::deniedChairToken::reference ConferenceResponse_makeMeChairResponse::select_deniedChairToken ()
{
    return *static_cast<deniedChairToken::pointer>(setSelection(deniedChairToken::id_, ASN1::AbstractData::create( &deniedChairToken::value_type::theInfo)));
}

inline bool ConferenceResponse_makeMeChairResponse::deniedChairToken_isSelected() const
{ 
    return currentSelection() == deniedChairToken::id_; 
}

inline ConferenceResponse_makeMeChairResponse::ConferenceResponse_makeMeChairResponse(grantedChairToken::Id id, grantedChairToken::const_reference value)
  : Inherited(&theInfo, id, new grantedChairToken::value_type(value) )
{ }

inline ConferenceResponse_makeMeChairResponse::ConferenceResponse_makeMeChairResponse(deniedChairToken::Id id, deniedChairToken::const_reference value)
  : Inherited(&theInfo, id, new deniedChairToken::value_type(value) )
{ }


inline void ConferenceResponse_makeMeChairResponse::swap(ConferenceResponse_makeMeChairResponse & other)
{  Inherited::swap(other); }

inline ConferenceResponse_makeMeChairResponse* ConferenceResponse_makeMeChairResponse::clone() const
{ return static_cast<ConferenceResponse_makeMeChairResponse*> (Inherited::clone()); }

inline bool ConferenceResponse_makeMeChairResponse::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ConferenceResponse_extensionAddressResponse::extensionAddress::const_reference ConferenceResponse_extensionAddressResponse::get_extensionAddress () const
{ return *static_cast<extensionAddress::const_pointer>(fields[0]);}

inline ConferenceResponse_extensionAddressResponse::extensionAddress::reference ConferenceResponse_extensionAddressResponse::ref_extensionAddress ()
{ return *static_cast<extensionAddress::pointer>(fields[0]);}

inline ConferenceResponse_extensionAddressResponse::extensionAddress::reference ConferenceResponse_extensionAddressResponse::set_extensionAddress ()
{ return *static_cast<extensionAddress::pointer>(fields[0]);}

inline ConferenceResponse_extensionAddressResponse::extensionAddress::reference ConferenceResponse_extensionAddressResponse::set_extensionAddress (const std::vector<char>& value)
{ return *static_cast<extensionAddress::pointer>(fields[0]) = value ;}

inline void ConferenceResponse_extensionAddressResponse::swap(ConferenceResponse_extensionAddressResponse& other)
{ Inherited::swap(other); }

inline ConferenceResponse_extensionAddressResponse* ConferenceResponse_extensionAddressResponse::clone() const
{ return static_cast<ConferenceResponse_extensionAddressResponse*> (Inherited::clone()); }

inline ConferenceResponse_broadcastMyLogicalChannelResponse::grantedBroadcastMyLogicalChannel::reference ConferenceResponse_broadcastMyLogicalChannelResponse::select_grantedBroadcastMyLogicalChannel ()
{
    return *static_cast<grantedBroadcastMyLogicalChannel::pointer>(setSelection(grantedBroadcastMyLogicalChannel::id_, ASN1::AbstractData::create( &grantedBroadcastMyLogicalChannel::value_type::theInfo)));
}

inline bool ConferenceResponse_broadcastMyLogicalChannelResponse::grantedBroadcastMyLogicalChannel_isSelected() const
{ 
    return currentSelection() == grantedBroadcastMyLogicalChannel::id_; 
}

inline ConferenceResponse_broadcastMyLogicalChannelResponse::deniedBroadcastMyLogicalChannel::reference ConferenceResponse_broadcastMyLogicalChannelResponse::select_deniedBroadcastMyLogicalChannel ()
{
    return *static_cast<deniedBroadcastMyLogicalChannel::pointer>(setSelection(deniedBroadcastMyLogicalChannel::id_, ASN1::AbstractData::create( &deniedBroadcastMyLogicalChannel::value_type::theInfo)));
}

inline bool ConferenceResponse_broadcastMyLogicalChannelResponse::deniedBroadcastMyLogicalChannel_isSelected() const
{ 
    return currentSelection() == deniedBroadcastMyLogicalChannel::id_; 
}

inline ConferenceResponse_broadcastMyLogicalChannelResponse::ConferenceResponse_broadcastMyLogicalChannelResponse(grantedBroadcastMyLogicalChannel::Id id, grantedBroadcastMyLogicalChannel::const_reference value)
  : Inherited(&theInfo, id, new grantedBroadcastMyLogicalChannel::value_type(value) )
{ }

inline ConferenceResponse_broadcastMyLogicalChannelResponse::ConferenceResponse_broadcastMyLogicalChannelResponse(deniedBroadcastMyLogicalChannel::Id id, deniedBroadcastMyLogicalChannel::const_reference value)
  : Inherited(&theInfo, id, new deniedBroadcastMyLogicalChannel::value_type(value) )
{ }


inline void ConferenceResponse_broadcastMyLogicalChannelResponse::swap(ConferenceResponse_broadcastMyLogicalChannelResponse & other)
{  Inherited::swap(other); }

inline ConferenceResponse_broadcastMyLogicalChannelResponse* ConferenceResponse_broadcastMyLogicalChannelResponse::clone() const
{ return static_cast<ConferenceResponse_broadcastMyLogicalChannelResponse*> (Inherited::clone()); }

inline bool ConferenceResponse_broadcastMyLogicalChannelResponse::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ConferenceResponse_makeTerminalBroadcasterResponse::grantedMakeTerminalBroadcaster::reference ConferenceResponse_makeTerminalBroadcasterResponse::select_grantedMakeTerminalBroadcaster ()
{
    return *static_cast<grantedMakeTerminalBroadcaster::pointer>(setSelection(grantedMakeTerminalBroadcaster::id_, ASN1::AbstractData::create( &grantedMakeTerminalBroadcaster::value_type::theInfo)));
}

inline bool ConferenceResponse_makeTerminalBroadcasterResponse::grantedMakeTerminalBroadcaster_isSelected() const
{ 
    return currentSelection() == grantedMakeTerminalBroadcaster::id_; 
}

inline ConferenceResponse_makeTerminalBroadcasterResponse::deniedMakeTerminalBroadcaster::reference ConferenceResponse_makeTerminalBroadcasterResponse::select_deniedMakeTerminalBroadcaster ()
{
    return *static_cast<deniedMakeTerminalBroadcaster::pointer>(setSelection(deniedMakeTerminalBroadcaster::id_, ASN1::AbstractData::create( &deniedMakeTerminalBroadcaster::value_type::theInfo)));
}

inline bool ConferenceResponse_makeTerminalBroadcasterResponse::deniedMakeTerminalBroadcaster_isSelected() const
{ 
    return currentSelection() == deniedMakeTerminalBroadcaster::id_; 
}

inline ConferenceResponse_makeTerminalBroadcasterResponse::ConferenceResponse_makeTerminalBroadcasterResponse(grantedMakeTerminalBroadcaster::Id id, grantedMakeTerminalBroadcaster::const_reference value)
  : Inherited(&theInfo, id, new grantedMakeTerminalBroadcaster::value_type(value) )
{ }

inline ConferenceResponse_makeTerminalBroadcasterResponse::ConferenceResponse_makeTerminalBroadcasterResponse(deniedMakeTerminalBroadcaster::Id id, deniedMakeTerminalBroadcaster::const_reference value)
  : Inherited(&theInfo, id, new deniedMakeTerminalBroadcaster::value_type(value) )
{ }


inline void ConferenceResponse_makeTerminalBroadcasterResponse::swap(ConferenceResponse_makeTerminalBroadcasterResponse & other)
{  Inherited::swap(other); }

inline ConferenceResponse_makeTerminalBroadcasterResponse* ConferenceResponse_makeTerminalBroadcasterResponse::clone() const
{ return static_cast<ConferenceResponse_makeTerminalBroadcasterResponse*> (Inherited::clone()); }

inline bool ConferenceResponse_makeTerminalBroadcasterResponse::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ConferenceResponse_sendThisSourceResponse::grantedSendThisSource::reference ConferenceResponse_sendThisSourceResponse::select_grantedSendThisSource ()
{
    return *static_cast<grantedSendThisSource::pointer>(setSelection(grantedSendThisSource::id_, ASN1::AbstractData::create( &grantedSendThisSource::value_type::theInfo)));
}

inline bool ConferenceResponse_sendThisSourceResponse::grantedSendThisSource_isSelected() const
{ 
    return currentSelection() == grantedSendThisSource::id_; 
}

inline ConferenceResponse_sendThisSourceResponse::deniedSendThisSource::reference ConferenceResponse_sendThisSourceResponse::select_deniedSendThisSource ()
{
    return *static_cast<deniedSendThisSource::pointer>(setSelection(deniedSendThisSource::id_, ASN1::AbstractData::create( &deniedSendThisSource::value_type::theInfo)));
}

inline bool ConferenceResponse_sendThisSourceResponse::deniedSendThisSource_isSelected() const
{ 
    return currentSelection() == deniedSendThisSource::id_; 
}

inline ConferenceResponse_sendThisSourceResponse::ConferenceResponse_sendThisSourceResponse(grantedSendThisSource::Id id, grantedSendThisSource::const_reference value)
  : Inherited(&theInfo, id, new grantedSendThisSource::value_type(value) )
{ }

inline ConferenceResponse_sendThisSourceResponse::ConferenceResponse_sendThisSourceResponse(deniedSendThisSource::Id id, deniedSendThisSource::const_reference value)
  : Inherited(&theInfo, id, new deniedSendThisSource::value_type(value) )
{ }


inline void ConferenceResponse_sendThisSourceResponse::swap(ConferenceResponse_sendThisSourceResponse & other)
{  Inherited::swap(other); }

inline ConferenceResponse_sendThisSourceResponse* ConferenceResponse_sendThisSourceResponse::clone() const
{ return static_cast<ConferenceResponse_sendThisSourceResponse*> (Inherited::clone()); }

inline bool ConferenceResponse_sendThisSourceResponse::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RemoteMCResponse_reject::unspecified::reference RemoteMCResponse_reject::select_unspecified ()
{
    return *static_cast<unspecified::pointer>(setSelection(unspecified::id_, ASN1::AbstractData::create( &unspecified::value_type::theInfo)));
}

inline bool RemoteMCResponse_reject::unspecified_isSelected() const
{ 
    return currentSelection() == unspecified::id_; 
}

inline RemoteMCResponse_reject::functionNotSupported::reference RemoteMCResponse_reject::select_functionNotSupported ()
{
    return *static_cast<functionNotSupported::pointer>(setSelection(functionNotSupported::id_, ASN1::AbstractData::create( &functionNotSupported::value_type::theInfo)));
}

inline bool RemoteMCResponse_reject::functionNotSupported_isSelected() const
{ 
    return currentSelection() == functionNotSupported::id_; 
}

inline RemoteMCResponse_reject::RemoteMCResponse_reject(unspecified::Id id, unspecified::const_reference value)
  : Inherited(&theInfo, id, new unspecified::value_type(value) )
{ }

inline RemoteMCResponse_reject::RemoteMCResponse_reject(functionNotSupported::Id id, functionNotSupported::const_reference value)
  : Inherited(&theInfo, id, new functionNotSupported::value_type(value) )
{ }


inline void RemoteMCResponse_reject::swap(RemoteMCResponse_reject & other)
{  Inherited::swap(other); }

inline RemoteMCResponse_reject* RemoteMCResponse_reject::clone() const
{ return static_cast<RemoteMCResponse_reject*> (Inherited::clone()); }

inline bool RemoteMCResponse_reject::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MultilinkRequest_callInformation::maxNumberOfAdditionalConnections::const_reference MultilinkRequest_callInformation::get_maxNumberOfAdditionalConnections () const
{ return *static_cast<maxNumberOfAdditionalConnections::const_pointer>(fields[0]);}

inline MultilinkRequest_callInformation::maxNumberOfAdditionalConnections::reference MultilinkRequest_callInformation::ref_maxNumberOfAdditionalConnections ()
{ return *static_cast<maxNumberOfAdditionalConnections::pointer>(fields[0]);}

inline MultilinkRequest_callInformation::maxNumberOfAdditionalConnections::reference MultilinkRequest_callInformation::set_maxNumberOfAdditionalConnections ()
{ return *static_cast<maxNumberOfAdditionalConnections::pointer>(fields[0]);}

inline MultilinkRequest_callInformation::maxNumberOfAdditionalConnections::reference MultilinkRequest_callInformation::set_maxNumberOfAdditionalConnections (maxNumberOfAdditionalConnections::value_type::int_type value)
{ return *static_cast<maxNumberOfAdditionalConnections::pointer>(fields[0]) = value ;}

inline void MultilinkRequest_callInformation::swap(MultilinkRequest_callInformation& other)
{ Inherited::swap(other); }

inline MultilinkRequest_callInformation* MultilinkRequest_callInformation::clone() const
{ return static_cast<MultilinkRequest_callInformation*> (Inherited::clone()); }

inline MultilinkRequest_removeConnection::connectionIdentifier::const_reference MultilinkRequest_removeConnection::get_connectionIdentifier () const
{ return *static_cast<connectionIdentifier::const_pointer>(fields[0]);}

inline MultilinkRequest_removeConnection::connectionIdentifier::reference MultilinkRequest_removeConnection::ref_connectionIdentifier ()
{ return *static_cast<connectionIdentifier::pointer>(fields[0]);}

inline MultilinkRequest_removeConnection::connectionIdentifier::reference MultilinkRequest_removeConnection::set_connectionIdentifier ()
{ return *static_cast<connectionIdentifier::pointer>(fields[0]);}

inline MultilinkRequest_removeConnection::connectionIdentifier::reference MultilinkRequest_removeConnection::set_connectionIdentifier (connectionIdentifier::const_reference value)
{ return *static_cast<connectionIdentifier::pointer>(fields[0]) = value ;}

inline void MultilinkRequest_removeConnection::swap(MultilinkRequest_removeConnection& other)
{ Inherited::swap(other); }

inline MultilinkRequest_removeConnection* MultilinkRequest_removeConnection::clone() const
{ return static_cast<MultilinkRequest_removeConnection*> (Inherited::clone()); }

inline MultilinkResponse_removeConnection::connectionIdentifier::const_reference MultilinkResponse_removeConnection::get_connectionIdentifier () const
{ return *static_cast<connectionIdentifier::const_pointer>(fields[0]);}

inline MultilinkResponse_removeConnection::connectionIdentifier::reference MultilinkResponse_removeConnection::ref_connectionIdentifier ()
{ return *static_cast<connectionIdentifier::pointer>(fields[0]);}

inline MultilinkResponse_removeConnection::connectionIdentifier::reference MultilinkResponse_removeConnection::set_connectionIdentifier ()
{ return *static_cast<connectionIdentifier::pointer>(fields[0]);}

inline MultilinkResponse_removeConnection::connectionIdentifier::reference MultilinkResponse_removeConnection::set_connectionIdentifier (connectionIdentifier::const_reference value)
{ return *static_cast<connectionIdentifier::pointer>(fields[0]) = value ;}

inline void MultilinkResponse_removeConnection::swap(MultilinkResponse_removeConnection& other)
{ Inherited::swap(other); }

inline MultilinkResponse_removeConnection* MultilinkResponse_removeConnection::clone() const
{ return static_cast<MultilinkResponse_removeConnection*> (Inherited::clone()); }

inline MultilinkResponse_maximumHeaderInterval::currentInterval::const_reference MultilinkResponse_maximumHeaderInterval::get_currentInterval () const
{ return *static_cast<currentInterval::const_pointer>(fields[0]);}

inline MultilinkResponse_maximumHeaderInterval::currentInterval::reference MultilinkResponse_maximumHeaderInterval::ref_currentInterval ()
{ return *static_cast<currentInterval::pointer>(fields[0]);}

inline MultilinkResponse_maximumHeaderInterval::currentInterval::reference MultilinkResponse_maximumHeaderInterval::set_currentInterval ()
{ return *static_cast<currentInterval::pointer>(fields[0]);}

inline MultilinkResponse_maximumHeaderInterval::currentInterval::reference MultilinkResponse_maximumHeaderInterval::set_currentInterval (currentInterval::value_type::int_type value)
{ return *static_cast<currentInterval::pointer>(fields[0]) = value ;}

inline void MultilinkResponse_maximumHeaderInterval::swap(MultilinkResponse_maximumHeaderInterval& other)
{ Inherited::swap(other); }

inline MultilinkResponse_maximumHeaderInterval* MultilinkResponse_maximumHeaderInterval::clone() const
{ return static_cast<MultilinkResponse_maximumHeaderInterval*> (Inherited::clone()); }

inline void MultilinkIndication_crcDesired::swap(MultilinkIndication_crcDesired& other)
{ Inherited::swap(other); }

inline MultilinkIndication_crcDesired* MultilinkIndication_crcDesired::clone() const
{ return static_cast<MultilinkIndication_crcDesired*> (Inherited::clone()); }

inline MultilinkIndication_excessiveError::connectionIdentifier::const_reference MultilinkIndication_excessiveError::get_connectionIdentifier () const
{ return *static_cast<connectionIdentifier::const_pointer>(fields[0]);}

inline MultilinkIndication_excessiveError::connectionIdentifier::reference MultilinkIndication_excessiveError::ref_connectionIdentifier ()
{ return *static_cast<connectionIdentifier::pointer>(fields[0]);}

inline MultilinkIndication_excessiveError::connectionIdentifier::reference MultilinkIndication_excessiveError::set_connectionIdentifier ()
{ return *static_cast<connectionIdentifier::pointer>(fields[0]);}

inline MultilinkIndication_excessiveError::connectionIdentifier::reference MultilinkIndication_excessiveError::set_connectionIdentifier (connectionIdentifier::const_reference value)
{ return *static_cast<connectionIdentifier::pointer>(fields[0]) = value ;}

inline void MultilinkIndication_excessiveError::swap(MultilinkIndication_excessiveError& other)
{ Inherited::swap(other); }

inline MultilinkIndication_excessiveError* MultilinkIndication_excessiveError::clone() const
{ return static_cast<MultilinkIndication_excessiveError*> (Inherited::clone()); }

inline SendTerminalCapabilitySet_specificRequest::multiplexCapability::const_reference SendTerminalCapabilitySet_specificRequest::get_multiplexCapability () const
{ return *static_cast<multiplexCapability::const_pointer>(fields[0]);}

inline SendTerminalCapabilitySet_specificRequest::multiplexCapability::reference SendTerminalCapabilitySet_specificRequest::ref_multiplexCapability ()
{ return *static_cast<multiplexCapability::pointer>(fields[0]);}

inline SendTerminalCapabilitySet_specificRequest::multiplexCapability::reference SendTerminalCapabilitySet_specificRequest::set_multiplexCapability ()
{ return *static_cast<multiplexCapability::pointer>(fields[0]);}

inline SendTerminalCapabilitySet_specificRequest::multiplexCapability::reference SendTerminalCapabilitySet_specificRequest::set_multiplexCapability (bool value)
{ return *static_cast<multiplexCapability::pointer>(fields[0]) = value ;}

inline SendTerminalCapabilitySet_specificRequest::capabilityTableEntryNumbers::const_reference SendTerminalCapabilitySet_specificRequest::get_capabilityTableEntryNumbers () const
{
  assert(hasOptionalField(e_capabilityTableEntryNumbers));
  return *static_cast<capabilityTableEntryNumbers::const_pointer>(fields[1]);
}

inline SendTerminalCapabilitySet_specificRequest::capabilityTableEntryNumbers::reference SendTerminalCapabilitySet_specificRequest::ref_capabilityTableEntryNumbers ()
{
  assert(hasOptionalField(e_capabilityTableEntryNumbers));
  return *static_cast<capabilityTableEntryNumbers::pointer>(fields[1]);
}

inline SendTerminalCapabilitySet_specificRequest::capabilityTableEntryNumbers::reference SendTerminalCapabilitySet_specificRequest::set_capabilityTableEntryNumbers ()
{
  includeOptionalField( e_capabilityTableEntryNumbers, 1);
  return *static_cast<capabilityTableEntryNumbers::pointer>(fields[1]);
}

inline SendTerminalCapabilitySet_specificRequest::capabilityTableEntryNumbers::reference SendTerminalCapabilitySet_specificRequest::set_capabilityTableEntryNumbers (capabilityTableEntryNumbers::const_reference value)
{
  includeOptionalField( e_capabilityTableEntryNumbers, 1);
  return *static_cast<capabilityTableEntryNumbers::pointer>(fields[1]) = value;
}

inline void SendTerminalCapabilitySet_specificRequest::omit_capabilityTableEntryNumbers ()
{ removeOptionalField( e_capabilityTableEntryNumbers); }

inline bool SendTerminalCapabilitySet_specificRequest::capabilityTableEntryNumbers_isPresent () const
{ return hasOptionalField( e_capabilityTableEntryNumbers); }

inline SendTerminalCapabilitySet_specificRequest::capabilityDescriptorNumbers::const_reference SendTerminalCapabilitySet_specificRequest::get_capabilityDescriptorNumbers () const
{
  assert(hasOptionalField(e_capabilityDescriptorNumbers));
  return *static_cast<capabilityDescriptorNumbers::const_pointer>(fields[2]);
}

inline SendTerminalCapabilitySet_specificRequest::capabilityDescriptorNumbers::reference SendTerminalCapabilitySet_specificRequest::ref_capabilityDescriptorNumbers ()
{
  assert(hasOptionalField(e_capabilityDescriptorNumbers));
  return *static_cast<capabilityDescriptorNumbers::pointer>(fields[2]);
}

inline SendTerminalCapabilitySet_specificRequest::capabilityDescriptorNumbers::reference SendTerminalCapabilitySet_specificRequest::set_capabilityDescriptorNumbers ()
{
  includeOptionalField( e_capabilityDescriptorNumbers, 2);
  return *static_cast<capabilityDescriptorNumbers::pointer>(fields[2]);
}

inline SendTerminalCapabilitySet_specificRequest::capabilityDescriptorNumbers::reference SendTerminalCapabilitySet_specificRequest::set_capabilityDescriptorNumbers (capabilityDescriptorNumbers::const_reference value)
{
  includeOptionalField( e_capabilityDescriptorNumbers, 2);
  return *static_cast<capabilityDescriptorNumbers::pointer>(fields[2]) = value;
}

inline void SendTerminalCapabilitySet_specificRequest::omit_capabilityDescriptorNumbers ()
{ removeOptionalField( e_capabilityDescriptorNumbers); }

inline bool SendTerminalCapabilitySet_specificRequest::capabilityDescriptorNumbers_isPresent () const
{ return hasOptionalField( e_capabilityDescriptorNumbers); }

inline void SendTerminalCapabilitySet_specificRequest::swap(SendTerminalCapabilitySet_specificRequest& other)
{ Inherited::swap(other); }

inline SendTerminalCapabilitySet_specificRequest* SendTerminalCapabilitySet_specificRequest::clone() const
{ return static_cast<SendTerminalCapabilitySet_specificRequest*> (Inherited::clone()); }

inline FlowControlCommand_scope::logicalChannelNumber::const_reference FlowControlCommand_scope::get_logicalChannelNumber () const
{
    assert(currentSelection() ==logicalChannelNumber::id_);
    return *static_cast<logicalChannelNumber::const_pointer>(choice.get());
}

inline FlowControlCommand_scope::logicalChannelNumber::reference FlowControlCommand_scope::ref_logicalChannelNumber ()
{
    assert(currentSelection() ==logicalChannelNumber::id_);
    return *static_cast<logicalChannelNumber::pointer>(choice.get());
}

inline FlowControlCommand_scope::logicalChannelNumber::reference FlowControlCommand_scope::select_logicalChannelNumber ()
{
    return *static_cast<logicalChannelNumber::pointer>(setSelection(logicalChannelNumber::id_, ASN1::AbstractData::create( &logicalChannelNumber::value_type::theInfo)));
}

inline FlowControlCommand_scope::logicalChannelNumber::reference FlowControlCommand_scope::select_logicalChannelNumber (FlowControlCommand_scope::logicalChannelNumber::value_type::int_type value)
{
    return select_logicalChannelNumber() = value;
}

inline bool FlowControlCommand_scope::logicalChannelNumber_isSelected() const
{ 
    return currentSelection() == logicalChannelNumber::id_; 
}

inline FlowControlCommand_scope::resourceID::const_reference FlowControlCommand_scope::get_resourceID () const
{
    assert(currentSelection() ==resourceID::id_);
    return *static_cast<resourceID::const_pointer>(choice.get());
}

inline FlowControlCommand_scope::resourceID::reference FlowControlCommand_scope::ref_resourceID ()
{
    assert(currentSelection() ==resourceID::id_);
    return *static_cast<resourceID::pointer>(choice.get());
}

inline FlowControlCommand_scope::resourceID::reference FlowControlCommand_scope::select_resourceID ()
{
    return *static_cast<resourceID::pointer>(setSelection(resourceID::id_, ASN1::AbstractData::create( &resourceID::value_type::theInfo)));
}

inline FlowControlCommand_scope::resourceID::reference FlowControlCommand_scope::select_resourceID (FlowControlCommand_scope::resourceID::value_type::int_type value)
{
    return select_resourceID() = value;
}

inline bool FlowControlCommand_scope::resourceID_isSelected() const
{ 
    return currentSelection() == resourceID::id_; 
}

inline FlowControlCommand_scope::wholeMultiplex::reference FlowControlCommand_scope::select_wholeMultiplex ()
{
    return *static_cast<wholeMultiplex::pointer>(setSelection(wholeMultiplex::id_, ASN1::AbstractData::create( &wholeMultiplex::value_type::theInfo)));
}

inline bool FlowControlCommand_scope::wholeMultiplex_isSelected() const
{ 
    return currentSelection() == wholeMultiplex::id_; 
}

inline FlowControlCommand_scope::FlowControlCommand_scope(logicalChannelNumber::Id id, logicalChannelNumber::value_type::int_type value)
  : Inherited(&theInfo, id, new logicalChannelNumber::value_type(value) )
{ }

inline FlowControlCommand_scope::FlowControlCommand_scope(resourceID::Id id, resourceID::value_type::int_type value)
  : Inherited(&theInfo, id, new resourceID::value_type(value) )
{ }

inline FlowControlCommand_scope::FlowControlCommand_scope(wholeMultiplex::Id id, wholeMultiplex::const_reference value)
  : Inherited(&theInfo, id, new wholeMultiplex::value_type(value) )
{ }


inline void FlowControlCommand_scope::swap(FlowControlCommand_scope & other)
{  Inherited::swap(other); }

inline FlowControlCommand_scope* FlowControlCommand_scope::clone() const
{ return static_cast<FlowControlCommand_scope*> (Inherited::clone()); }

inline bool FlowControlCommand_scope::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline FlowControlCommand_restriction::maximumBitRate::const_reference FlowControlCommand_restriction::get_maximumBitRate () const
{
    assert(currentSelection() ==maximumBitRate::id_);
    return *static_cast<maximumBitRate::const_pointer>(choice.get());
}

inline FlowControlCommand_restriction::maximumBitRate::reference FlowControlCommand_restriction::ref_maximumBitRate ()
{
    assert(currentSelection() ==maximumBitRate::id_);
    return *static_cast<maximumBitRate::pointer>(choice.get());
}

inline FlowControlCommand_restriction::maximumBitRate::reference FlowControlCommand_restriction::select_maximumBitRate ()
{
    return *static_cast<maximumBitRate::pointer>(setSelection(maximumBitRate::id_, ASN1::AbstractData::create( &maximumBitRate::value_type::theInfo)));
}

inline FlowControlCommand_restriction::maximumBitRate::reference FlowControlCommand_restriction::select_maximumBitRate (FlowControlCommand_restriction::maximumBitRate::value_type::int_type value)
{
    return select_maximumBitRate() = value;
}

inline bool FlowControlCommand_restriction::maximumBitRate_isSelected() const
{ 
    return currentSelection() == maximumBitRate::id_; 
}

inline FlowControlCommand_restriction::noRestriction::reference FlowControlCommand_restriction::select_noRestriction ()
{
    return *static_cast<noRestriction::pointer>(setSelection(noRestriction::id_, ASN1::AbstractData::create( &noRestriction::value_type::theInfo)));
}

inline bool FlowControlCommand_restriction::noRestriction_isSelected() const
{ 
    return currentSelection() == noRestriction::id_; 
}

inline FlowControlCommand_restriction::FlowControlCommand_restriction(maximumBitRate::Id id, maximumBitRate::value_type::int_type value)
  : Inherited(&theInfo, id, new maximumBitRate::value_type(value) )
{ }

inline FlowControlCommand_restriction::FlowControlCommand_restriction(noRestriction::Id id, noRestriction::const_reference value)
  : Inherited(&theInfo, id, new noRestriction::value_type(value) )
{ }


inline void FlowControlCommand_restriction::swap(FlowControlCommand_restriction & other)
{  Inherited::swap(other); }

inline FlowControlCommand_restriction* FlowControlCommand_restriction::clone() const
{ return static_cast<FlowControlCommand_restriction*> (Inherited::clone()); }

inline bool FlowControlCommand_restriction::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline EndSessionCommand_gstnOptions::telephonyMode::reference EndSessionCommand_gstnOptions::select_telephonyMode ()
{
    return *static_cast<telephonyMode::pointer>(setSelection(telephonyMode::id_, ASN1::AbstractData::create( &telephonyMode::value_type::theInfo)));
}

inline bool EndSessionCommand_gstnOptions::telephonyMode_isSelected() const
{ 
    return currentSelection() == telephonyMode::id_; 
}

inline EndSessionCommand_gstnOptions::v8bis::reference EndSessionCommand_gstnOptions::select_v8bis ()
{
    return *static_cast<v8bis::pointer>(setSelection(v8bis::id_, ASN1::AbstractData::create( &v8bis::value_type::theInfo)));
}

inline bool EndSessionCommand_gstnOptions::v8bis_isSelected() const
{ 
    return currentSelection() == v8bis::id_; 
}

inline EndSessionCommand_gstnOptions::v34DSVD::reference EndSessionCommand_gstnOptions::select_v34DSVD ()
{
    return *static_cast<v34DSVD::pointer>(setSelection(v34DSVD::id_, ASN1::AbstractData::create( &v34DSVD::value_type::theInfo)));
}

inline bool EndSessionCommand_gstnOptions::v34DSVD_isSelected() const
{ 
    return currentSelection() == v34DSVD::id_; 
}

inline EndSessionCommand_gstnOptions::v34DuplexFAX::reference EndSessionCommand_gstnOptions::select_v34DuplexFAX ()
{
    return *static_cast<v34DuplexFAX::pointer>(setSelection(v34DuplexFAX::id_, ASN1::AbstractData::create( &v34DuplexFAX::value_type::theInfo)));
}

inline bool EndSessionCommand_gstnOptions::v34DuplexFAX_isSelected() const
{ 
    return currentSelection() == v34DuplexFAX::id_; 
}

inline EndSessionCommand_gstnOptions::v34H324::reference EndSessionCommand_gstnOptions::select_v34H324 ()
{
    return *static_cast<v34H324::pointer>(setSelection(v34H324::id_, ASN1::AbstractData::create( &v34H324::value_type::theInfo)));
}

inline bool EndSessionCommand_gstnOptions::v34H324_isSelected() const
{ 
    return currentSelection() == v34H324::id_; 
}

inline EndSessionCommand_gstnOptions::EndSessionCommand_gstnOptions(telephonyMode::Id id, telephonyMode::const_reference value)
  : Inherited(&theInfo, id, new telephonyMode::value_type(value) )
{ }

inline EndSessionCommand_gstnOptions::EndSessionCommand_gstnOptions(v8bis::Id id, v8bis::const_reference value)
  : Inherited(&theInfo, id, new v8bis::value_type(value) )
{ }

inline EndSessionCommand_gstnOptions::EndSessionCommand_gstnOptions(v34DSVD::Id id, v34DSVD::const_reference value)
  : Inherited(&theInfo, id, new v34DSVD::value_type(value) )
{ }

inline EndSessionCommand_gstnOptions::EndSessionCommand_gstnOptions(v34DuplexFAX::Id id, v34DuplexFAX::const_reference value)
  : Inherited(&theInfo, id, new v34DuplexFAX::value_type(value) )
{ }

inline EndSessionCommand_gstnOptions::EndSessionCommand_gstnOptions(v34H324::Id id, v34H324::const_reference value)
  : Inherited(&theInfo, id, new v34H324::value_type(value) )
{ }


inline void EndSessionCommand_gstnOptions::swap(EndSessionCommand_gstnOptions & other)
{  Inherited::swap(other); }

inline EndSessionCommand_gstnOptions* EndSessionCommand_gstnOptions::clone() const
{ return static_cast<EndSessionCommand_gstnOptions*> (Inherited::clone()); }

inline bool EndSessionCommand_gstnOptions::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline EndSessionCommand_isdnOptions::telephonyMode::reference EndSessionCommand_isdnOptions::select_telephonyMode ()
{
    return *static_cast<telephonyMode::pointer>(setSelection(telephonyMode::id_, ASN1::AbstractData::create( &telephonyMode::value_type::theInfo)));
}

inline bool EndSessionCommand_isdnOptions::telephonyMode_isSelected() const
{ 
    return currentSelection() == telephonyMode::id_; 
}

inline EndSessionCommand_isdnOptions::v140::reference EndSessionCommand_isdnOptions::select_v140 ()
{
    return *static_cast<v140::pointer>(setSelection(v140::id_, ASN1::AbstractData::create( &v140::value_type::theInfo)));
}

inline bool EndSessionCommand_isdnOptions::v140_isSelected() const
{ 
    return currentSelection() == v140::id_; 
}

inline EndSessionCommand_isdnOptions::terminalOnHold::reference EndSessionCommand_isdnOptions::select_terminalOnHold ()
{
    return *static_cast<terminalOnHold::pointer>(setSelection(terminalOnHold::id_, ASN1::AbstractData::create( &terminalOnHold::value_type::theInfo)));
}

inline bool EndSessionCommand_isdnOptions::terminalOnHold_isSelected() const
{ 
    return currentSelection() == terminalOnHold::id_; 
}

inline EndSessionCommand_isdnOptions::EndSessionCommand_isdnOptions(telephonyMode::Id id, telephonyMode::const_reference value)
  : Inherited(&theInfo, id, new telephonyMode::value_type(value) )
{ }

inline EndSessionCommand_isdnOptions::EndSessionCommand_isdnOptions(v140::Id id, v140::const_reference value)
  : Inherited(&theInfo, id, new v140::value_type(value) )
{ }

inline EndSessionCommand_isdnOptions::EndSessionCommand_isdnOptions(terminalOnHold::Id id, terminalOnHold::const_reference value)
  : Inherited(&theInfo, id, new terminalOnHold::value_type(value) )
{ }


inline void EndSessionCommand_isdnOptions::swap(EndSessionCommand_isdnOptions & other)
{  Inherited::swap(other); }

inline EndSessionCommand_isdnOptions* EndSessionCommand_isdnOptions::clone() const
{ return static_cast<EndSessionCommand_isdnOptions*> (Inherited::clone()); }

inline bool EndSessionCommand_isdnOptions::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223MultiplexReconfiguration_h223ModeChange::toLevel0::reference H223MultiplexReconfiguration_h223ModeChange::select_toLevel0 ()
{
    return *static_cast<toLevel0::pointer>(setSelection(toLevel0::id_, ASN1::AbstractData::create( &toLevel0::value_type::theInfo)));
}

inline bool H223MultiplexReconfiguration_h223ModeChange::toLevel0_isSelected() const
{ 
    return currentSelection() == toLevel0::id_; 
}

inline H223MultiplexReconfiguration_h223ModeChange::toLevel1::reference H223MultiplexReconfiguration_h223ModeChange::select_toLevel1 ()
{
    return *static_cast<toLevel1::pointer>(setSelection(toLevel1::id_, ASN1::AbstractData::create( &toLevel1::value_type::theInfo)));
}

inline bool H223MultiplexReconfiguration_h223ModeChange::toLevel1_isSelected() const
{ 
    return currentSelection() == toLevel1::id_; 
}

inline H223MultiplexReconfiguration_h223ModeChange::toLevel2::reference H223MultiplexReconfiguration_h223ModeChange::select_toLevel2 ()
{
    return *static_cast<toLevel2::pointer>(setSelection(toLevel2::id_, ASN1::AbstractData::create( &toLevel2::value_type::theInfo)));
}

inline bool H223MultiplexReconfiguration_h223ModeChange::toLevel2_isSelected() const
{ 
    return currentSelection() == toLevel2::id_; 
}

inline H223MultiplexReconfiguration_h223ModeChange::toLevel2withOptionalHeader::reference H223MultiplexReconfiguration_h223ModeChange::select_toLevel2withOptionalHeader ()
{
    return *static_cast<toLevel2withOptionalHeader::pointer>(setSelection(toLevel2withOptionalHeader::id_, ASN1::AbstractData::create( &toLevel2withOptionalHeader::value_type::theInfo)));
}

inline bool H223MultiplexReconfiguration_h223ModeChange::toLevel2withOptionalHeader_isSelected() const
{ 
    return currentSelection() == toLevel2withOptionalHeader::id_; 
}

inline H223MultiplexReconfiguration_h223ModeChange::H223MultiplexReconfiguration_h223ModeChange(toLevel0::Id id, toLevel0::const_reference value)
  : Inherited(&theInfo, id, new toLevel0::value_type(value) )
{ }

inline H223MultiplexReconfiguration_h223ModeChange::H223MultiplexReconfiguration_h223ModeChange(toLevel1::Id id, toLevel1::const_reference value)
  : Inherited(&theInfo, id, new toLevel1::value_type(value) )
{ }

inline H223MultiplexReconfiguration_h223ModeChange::H223MultiplexReconfiguration_h223ModeChange(toLevel2::Id id, toLevel2::const_reference value)
  : Inherited(&theInfo, id, new toLevel2::value_type(value) )
{ }

inline H223MultiplexReconfiguration_h223ModeChange::H223MultiplexReconfiguration_h223ModeChange(toLevel2withOptionalHeader::Id id, toLevel2withOptionalHeader::const_reference value)
  : Inherited(&theInfo, id, new toLevel2withOptionalHeader::value_type(value) )
{ }


inline void H223MultiplexReconfiguration_h223ModeChange::swap(H223MultiplexReconfiguration_h223ModeChange & other)
{  Inherited::swap(other); }

inline H223MultiplexReconfiguration_h223ModeChange* H223MultiplexReconfiguration_h223ModeChange::clone() const
{ return static_cast<H223MultiplexReconfiguration_h223ModeChange*> (Inherited::clone()); }

inline bool H223MultiplexReconfiguration_h223ModeChange::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223MultiplexReconfiguration_h223AnnexADoubleFlag::start::reference H223MultiplexReconfiguration_h223AnnexADoubleFlag::select_start ()
{
    return *static_cast<start::pointer>(setSelection(start::id_, ASN1::AbstractData::create( &start::value_type::theInfo)));
}

inline bool H223MultiplexReconfiguration_h223AnnexADoubleFlag::start_isSelected() const
{ 
    return currentSelection() == start::id_; 
}

inline H223MultiplexReconfiguration_h223AnnexADoubleFlag::stop::reference H223MultiplexReconfiguration_h223AnnexADoubleFlag::select_stop ()
{
    return *static_cast<stop::pointer>(setSelection(stop::id_, ASN1::AbstractData::create( &stop::value_type::theInfo)));
}

inline bool H223MultiplexReconfiguration_h223AnnexADoubleFlag::stop_isSelected() const
{ 
    return currentSelection() == stop::id_; 
}

inline H223MultiplexReconfiguration_h223AnnexADoubleFlag::H223MultiplexReconfiguration_h223AnnexADoubleFlag(start::Id id, start::const_reference value)
  : Inherited(&theInfo, id, new start::value_type(value) )
{ }

inline H223MultiplexReconfiguration_h223AnnexADoubleFlag::H223MultiplexReconfiguration_h223AnnexADoubleFlag(stop::Id id, stop::const_reference value)
  : Inherited(&theInfo, id, new stop::value_type(value) )
{ }


inline void H223MultiplexReconfiguration_h223AnnexADoubleFlag::swap(H223MultiplexReconfiguration_h223AnnexADoubleFlag & other)
{  Inherited::swap(other); }

inline H223MultiplexReconfiguration_h223AnnexADoubleFlag* H223MultiplexReconfiguration_h223AnnexADoubleFlag::clone() const
{ return static_cast<H223MultiplexReconfiguration_h223AnnexADoubleFlag*> (Inherited::clone()); }

inline bool H223MultiplexReconfiguration_h223AnnexADoubleFlag::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NewATMVCCommand_multiplex::noMultiplex::reference NewATMVCCommand_multiplex::select_noMultiplex ()
{
    return *static_cast<noMultiplex::pointer>(setSelection(noMultiplex::id_, ASN1::AbstractData::create( &noMultiplex::value_type::theInfo)));
}

inline bool NewATMVCCommand_multiplex::noMultiplex_isSelected() const
{ 
    return currentSelection() == noMultiplex::id_; 
}

inline NewATMVCCommand_multiplex::transportStream::reference NewATMVCCommand_multiplex::select_transportStream ()
{
    return *static_cast<transportStream::pointer>(setSelection(transportStream::id_, ASN1::AbstractData::create( &transportStream::value_type::theInfo)));
}

inline bool NewATMVCCommand_multiplex::transportStream_isSelected() const
{ 
    return currentSelection() == transportStream::id_; 
}

inline NewATMVCCommand_multiplex::programStream::reference NewATMVCCommand_multiplex::select_programStream ()
{
    return *static_cast<programStream::pointer>(setSelection(programStream::id_, ASN1::AbstractData::create( &programStream::value_type::theInfo)));
}

inline bool NewATMVCCommand_multiplex::programStream_isSelected() const
{ 
    return currentSelection() == programStream::id_; 
}

inline NewATMVCCommand_multiplex::NewATMVCCommand_multiplex(noMultiplex::Id id, noMultiplex::const_reference value)
  : Inherited(&theInfo, id, new noMultiplex::value_type(value) )
{ }

inline NewATMVCCommand_multiplex::NewATMVCCommand_multiplex(transportStream::Id id, transportStream::const_reference value)
  : Inherited(&theInfo, id, new transportStream::value_type(value) )
{ }

inline NewATMVCCommand_multiplex::NewATMVCCommand_multiplex(programStream::Id id, programStream::const_reference value)
  : Inherited(&theInfo, id, new programStream::value_type(value) )
{ }


inline void NewATMVCCommand_multiplex::swap(NewATMVCCommand_multiplex & other)
{  Inherited::swap(other); }

inline NewATMVCCommand_multiplex* NewATMVCCommand_multiplex::clone() const
{ return static_cast<NewATMVCCommand_multiplex*> (Inherited::clone()); }

inline bool NewATMVCCommand_multiplex::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MobileMultilinkReconfigurationCommand_status::synchronized::reference MobileMultilinkReconfigurationCommand_status::select_synchronized ()
{
    return *static_cast<synchronized::pointer>(setSelection(synchronized::id_, ASN1::AbstractData::create( &synchronized::value_type::theInfo)));
}

inline bool MobileMultilinkReconfigurationCommand_status::synchronized_isSelected() const
{ 
    return currentSelection() == synchronized::id_; 
}

inline MobileMultilinkReconfigurationCommand_status::reconfiguration::reference MobileMultilinkReconfigurationCommand_status::select_reconfiguration ()
{
    return *static_cast<reconfiguration::pointer>(setSelection(reconfiguration::id_, ASN1::AbstractData::create( &reconfiguration::value_type::theInfo)));
}

inline bool MobileMultilinkReconfigurationCommand_status::reconfiguration_isSelected() const
{ 
    return currentSelection() == reconfiguration::id_; 
}

inline MobileMultilinkReconfigurationCommand_status::MobileMultilinkReconfigurationCommand_status(synchronized::Id id, synchronized::const_reference value)
  : Inherited(&theInfo, id, new synchronized::value_type(value) )
{ }

inline MobileMultilinkReconfigurationCommand_status::MobileMultilinkReconfigurationCommand_status(reconfiguration::Id id, reconfiguration::const_reference value)
  : Inherited(&theInfo, id, new reconfiguration::value_type(value) )
{ }


inline void MobileMultilinkReconfigurationCommand_status::swap(MobileMultilinkReconfigurationCommand_status & other)
{  Inherited::swap(other); }

inline MobileMultilinkReconfigurationCommand_status* MobileMultilinkReconfigurationCommand_status::clone() const
{ return static_cast<MobileMultilinkReconfigurationCommand_status*> (Inherited::clone()); }

inline bool MobileMultilinkReconfigurationCommand_status::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline FunctionNotSupported_cause::syntaxError::reference FunctionNotSupported_cause::select_syntaxError ()
{
    return *static_cast<syntaxError::pointer>(setSelection(syntaxError::id_, ASN1::AbstractData::create( &syntaxError::value_type::theInfo)));
}

inline bool FunctionNotSupported_cause::syntaxError_isSelected() const
{ 
    return currentSelection() == syntaxError::id_; 
}

inline FunctionNotSupported_cause::semanticError::reference FunctionNotSupported_cause::select_semanticError ()
{
    return *static_cast<semanticError::pointer>(setSelection(semanticError::id_, ASN1::AbstractData::create( &semanticError::value_type::theInfo)));
}

inline bool FunctionNotSupported_cause::semanticError_isSelected() const
{ 
    return currentSelection() == semanticError::id_; 
}

inline FunctionNotSupported_cause::unknownFunction::reference FunctionNotSupported_cause::select_unknownFunction ()
{
    return *static_cast<unknownFunction::pointer>(setSelection(unknownFunction::id_, ASN1::AbstractData::create( &unknownFunction::value_type::theInfo)));
}

inline bool FunctionNotSupported_cause::unknownFunction_isSelected() const
{ 
    return currentSelection() == unknownFunction::id_; 
}

inline FunctionNotSupported_cause::FunctionNotSupported_cause(syntaxError::Id id, syntaxError::const_reference value)
  : Inherited(&theInfo, id, new syntaxError::value_type(value) )
{ }

inline FunctionNotSupported_cause::FunctionNotSupported_cause(semanticError::Id id, semanticError::const_reference value)
  : Inherited(&theInfo, id, new semanticError::value_type(value) )
{ }

inline FunctionNotSupported_cause::FunctionNotSupported_cause(unknownFunction::Id id, unknownFunction::const_reference value)
  : Inherited(&theInfo, id, new unknownFunction::value_type(value) )
{ }


inline void FunctionNotSupported_cause::swap(FunctionNotSupported_cause & other)
{  Inherited::swap(other); }

inline FunctionNotSupported_cause* FunctionNotSupported_cause::clone() const
{ return static_cast<FunctionNotSupported_cause*> (Inherited::clone()); }

inline bool FunctionNotSupported_cause::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline JitterIndication_scope::logicalChannelNumber::const_reference JitterIndication_scope::get_logicalChannelNumber () const
{
    assert(currentSelection() ==logicalChannelNumber::id_);
    return *static_cast<logicalChannelNumber::const_pointer>(choice.get());
}

inline JitterIndication_scope::logicalChannelNumber::reference JitterIndication_scope::ref_logicalChannelNumber ()
{
    assert(currentSelection() ==logicalChannelNumber::id_);
    return *static_cast<logicalChannelNumber::pointer>(choice.get());
}

inline JitterIndication_scope::logicalChannelNumber::reference JitterIndication_scope::select_logicalChannelNumber ()
{
    return *static_cast<logicalChannelNumber::pointer>(setSelection(logicalChannelNumber::id_, ASN1::AbstractData::create( &logicalChannelNumber::value_type::theInfo)));
}

inline JitterIndication_scope::logicalChannelNumber::reference JitterIndication_scope::select_logicalChannelNumber (JitterIndication_scope::logicalChannelNumber::value_type::int_type value)
{
    return select_logicalChannelNumber() = value;
}

inline bool JitterIndication_scope::logicalChannelNumber_isSelected() const
{ 
    return currentSelection() == logicalChannelNumber::id_; 
}

inline JitterIndication_scope::resourceID::const_reference JitterIndication_scope::get_resourceID () const
{
    assert(currentSelection() ==resourceID::id_);
    return *static_cast<resourceID::const_pointer>(choice.get());
}

inline JitterIndication_scope::resourceID::reference JitterIndication_scope::ref_resourceID ()
{
    assert(currentSelection() ==resourceID::id_);
    return *static_cast<resourceID::pointer>(choice.get());
}

inline JitterIndication_scope::resourceID::reference JitterIndication_scope::select_resourceID ()
{
    return *static_cast<resourceID::pointer>(setSelection(resourceID::id_, ASN1::AbstractData::create( &resourceID::value_type::theInfo)));
}

inline JitterIndication_scope::resourceID::reference JitterIndication_scope::select_resourceID (JitterIndication_scope::resourceID::value_type::int_type value)
{
    return select_resourceID() = value;
}

inline bool JitterIndication_scope::resourceID_isSelected() const
{ 
    return currentSelection() == resourceID::id_; 
}

inline JitterIndication_scope::wholeMultiplex::reference JitterIndication_scope::select_wholeMultiplex ()
{
    return *static_cast<wholeMultiplex::pointer>(setSelection(wholeMultiplex::id_, ASN1::AbstractData::create( &wholeMultiplex::value_type::theInfo)));
}

inline bool JitterIndication_scope::wholeMultiplex_isSelected() const
{ 
    return currentSelection() == wholeMultiplex::id_; 
}

inline JitterIndication_scope::JitterIndication_scope(logicalChannelNumber::Id id, logicalChannelNumber::value_type::int_type value)
  : Inherited(&theInfo, id, new logicalChannelNumber::value_type(value) )
{ }

inline JitterIndication_scope::JitterIndication_scope(resourceID::Id id, resourceID::value_type::int_type value)
  : Inherited(&theInfo, id, new resourceID::value_type(value) )
{ }

inline JitterIndication_scope::JitterIndication_scope(wholeMultiplex::Id id, wholeMultiplex::const_reference value)
  : Inherited(&theInfo, id, new wholeMultiplex::value_type(value) )
{ }


inline void JitterIndication_scope::swap(JitterIndication_scope & other)
{  Inherited::swap(other); }

inline JitterIndication_scope* JitterIndication_scope::clone() const
{ return static_cast<JitterIndication_scope*> (Inherited::clone()); }

inline bool JitterIndication_scope::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NewATMVCIndication_multiplex::noMultiplex::reference NewATMVCIndication_multiplex::select_noMultiplex ()
{
    return *static_cast<noMultiplex::pointer>(setSelection(noMultiplex::id_, ASN1::AbstractData::create( &noMultiplex::value_type::theInfo)));
}

inline bool NewATMVCIndication_multiplex::noMultiplex_isSelected() const
{ 
    return currentSelection() == noMultiplex::id_; 
}

inline NewATMVCIndication_multiplex::transportStream::reference NewATMVCIndication_multiplex::select_transportStream ()
{
    return *static_cast<transportStream::pointer>(setSelection(transportStream::id_, ASN1::AbstractData::create( &transportStream::value_type::theInfo)));
}

inline bool NewATMVCIndication_multiplex::transportStream_isSelected() const
{ 
    return currentSelection() == transportStream::id_; 
}

inline NewATMVCIndication_multiplex::programStream::reference NewATMVCIndication_multiplex::select_programStream ()
{
    return *static_cast<programStream::pointer>(setSelection(programStream::id_, ASN1::AbstractData::create( &programStream::value_type::theInfo)));
}

inline bool NewATMVCIndication_multiplex::programStream_isSelected() const
{ 
    return currentSelection() == programStream::id_; 
}

inline NewATMVCIndication_multiplex::NewATMVCIndication_multiplex(noMultiplex::Id id, noMultiplex::const_reference value)
  : Inherited(&theInfo, id, new noMultiplex::value_type(value) )
{ }

inline NewATMVCIndication_multiplex::NewATMVCIndication_multiplex(transportStream::Id id, transportStream::const_reference value)
  : Inherited(&theInfo, id, new transportStream::value_type(value) )
{ }

inline NewATMVCIndication_multiplex::NewATMVCIndication_multiplex(programStream::Id id, programStream::const_reference value)
  : Inherited(&theInfo, id, new programStream::value_type(value) )
{ }


inline void NewATMVCIndication_multiplex::swap(NewATMVCIndication_multiplex & other)
{  Inherited::swap(other); }

inline NewATMVCIndication_multiplex* NewATMVCIndication_multiplex::clone() const
{ return static_cast<NewATMVCIndication_multiplex*> (Inherited::clone()); }

inline bool NewATMVCIndication_multiplex::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline UserInputIndication_encryptedAlphanumeric::algorithmOID::const_reference UserInputIndication_encryptedAlphanumeric::get_algorithmOID () const
{ return *static_cast<algorithmOID::const_pointer>(fields[0]);}

inline UserInputIndication_encryptedAlphanumeric::algorithmOID::reference UserInputIndication_encryptedAlphanumeric::ref_algorithmOID ()
{ return *static_cast<algorithmOID::pointer>(fields[0]);}

inline UserInputIndication_encryptedAlphanumeric::algorithmOID::reference UserInputIndication_encryptedAlphanumeric::set_algorithmOID ()
{ return *static_cast<algorithmOID::pointer>(fields[0]);}

inline UserInputIndication_encryptedAlphanumeric::algorithmOID::reference UserInputIndication_encryptedAlphanumeric::set_algorithmOID (algorithmOID::const_reference value)
{ return *static_cast<algorithmOID::pointer>(fields[0]) = value ;}

inline UserInputIndication_encryptedAlphanumeric::paramS::const_reference UserInputIndication_encryptedAlphanumeric::get_paramS () const
{
  assert(hasOptionalField(e_paramS));
  return *static_cast<paramS::const_pointer>(fields[1]);
}

inline UserInputIndication_encryptedAlphanumeric::paramS::reference UserInputIndication_encryptedAlphanumeric::ref_paramS ()
{
  assert(hasOptionalField(e_paramS));
  return *static_cast<paramS::pointer>(fields[1]);
}

inline UserInputIndication_encryptedAlphanumeric::paramS::reference UserInputIndication_encryptedAlphanumeric::set_paramS ()
{
  includeOptionalField( e_paramS, 1);
  return *static_cast<paramS::pointer>(fields[1]);
}

inline UserInputIndication_encryptedAlphanumeric::paramS::reference UserInputIndication_encryptedAlphanumeric::set_paramS (paramS::const_reference value)
{
  includeOptionalField( e_paramS, 1);
  return *static_cast<paramS::pointer>(fields[1]) = value;
}

inline void UserInputIndication_encryptedAlphanumeric::omit_paramS ()
{ removeOptionalField( e_paramS); }

inline bool UserInputIndication_encryptedAlphanumeric::paramS_isPresent () const
{ return hasOptionalField( e_paramS); }

inline UserInputIndication_encryptedAlphanumeric::encrypted::const_reference UserInputIndication_encryptedAlphanumeric::get_encrypted () const
{ return *static_cast<encrypted::const_pointer>(fields[2]);}

inline UserInputIndication_encryptedAlphanumeric::encrypted::reference UserInputIndication_encryptedAlphanumeric::ref_encrypted ()
{ return *static_cast<encrypted::pointer>(fields[2]);}

inline UserInputIndication_encryptedAlphanumeric::encrypted::reference UserInputIndication_encryptedAlphanumeric::set_encrypted ()
{ return *static_cast<encrypted::pointer>(fields[2]);}

inline UserInputIndication_encryptedAlphanumeric::encrypted::reference UserInputIndication_encryptedAlphanumeric::set_encrypted (const std::vector<char>& value)
{ return *static_cast<encrypted::pointer>(fields[2]) = value ;}

inline void UserInputIndication_encryptedAlphanumeric::swap(UserInputIndication_encryptedAlphanumeric& other)
{ Inherited::swap(other); }

inline UserInputIndication_encryptedAlphanumeric* UserInputIndication_encryptedAlphanumeric::clone() const
{ return static_cast<UserInputIndication_encryptedAlphanumeric*> (Inherited::clone()); }

inline FlowControlIndication_scope::logicalChannelNumber::const_reference FlowControlIndication_scope::get_logicalChannelNumber () const
{
    assert(currentSelection() ==logicalChannelNumber::id_);
    return *static_cast<logicalChannelNumber::const_pointer>(choice.get());
}

inline FlowControlIndication_scope::logicalChannelNumber::reference FlowControlIndication_scope::ref_logicalChannelNumber ()
{
    assert(currentSelection() ==logicalChannelNumber::id_);
    return *static_cast<logicalChannelNumber::pointer>(choice.get());
}

inline FlowControlIndication_scope::logicalChannelNumber::reference FlowControlIndication_scope::select_logicalChannelNumber ()
{
    return *static_cast<logicalChannelNumber::pointer>(setSelection(logicalChannelNumber::id_, ASN1::AbstractData::create( &logicalChannelNumber::value_type::theInfo)));
}

inline FlowControlIndication_scope::logicalChannelNumber::reference FlowControlIndication_scope::select_logicalChannelNumber (FlowControlIndication_scope::logicalChannelNumber::value_type::int_type value)
{
    return select_logicalChannelNumber() = value;
}

inline bool FlowControlIndication_scope::logicalChannelNumber_isSelected() const
{ 
    return currentSelection() == logicalChannelNumber::id_; 
}

inline FlowControlIndication_scope::resourceID::const_reference FlowControlIndication_scope::get_resourceID () const
{
    assert(currentSelection() ==resourceID::id_);
    return *static_cast<resourceID::const_pointer>(choice.get());
}

inline FlowControlIndication_scope::resourceID::reference FlowControlIndication_scope::ref_resourceID ()
{
    assert(currentSelection() ==resourceID::id_);
    return *static_cast<resourceID::pointer>(choice.get());
}

inline FlowControlIndication_scope::resourceID::reference FlowControlIndication_scope::select_resourceID ()
{
    return *static_cast<resourceID::pointer>(setSelection(resourceID::id_, ASN1::AbstractData::create( &resourceID::value_type::theInfo)));
}

inline FlowControlIndication_scope::resourceID::reference FlowControlIndication_scope::select_resourceID (FlowControlIndication_scope::resourceID::value_type::int_type value)
{
    return select_resourceID() = value;
}

inline bool FlowControlIndication_scope::resourceID_isSelected() const
{ 
    return currentSelection() == resourceID::id_; 
}

inline FlowControlIndication_scope::wholeMultiplex::reference FlowControlIndication_scope::select_wholeMultiplex ()
{
    return *static_cast<wholeMultiplex::pointer>(setSelection(wholeMultiplex::id_, ASN1::AbstractData::create( &wholeMultiplex::value_type::theInfo)));
}

inline bool FlowControlIndication_scope::wholeMultiplex_isSelected() const
{ 
    return currentSelection() == wholeMultiplex::id_; 
}

inline FlowControlIndication_scope::FlowControlIndication_scope(logicalChannelNumber::Id id, logicalChannelNumber::value_type::int_type value)
  : Inherited(&theInfo, id, new logicalChannelNumber::value_type(value) )
{ }

inline FlowControlIndication_scope::FlowControlIndication_scope(resourceID::Id id, resourceID::value_type::int_type value)
  : Inherited(&theInfo, id, new resourceID::value_type(value) )
{ }

inline FlowControlIndication_scope::FlowControlIndication_scope(wholeMultiplex::Id id, wholeMultiplex::const_reference value)
  : Inherited(&theInfo, id, new wholeMultiplex::value_type(value) )
{ }


inline void FlowControlIndication_scope::swap(FlowControlIndication_scope & other)
{  Inherited::swap(other); }

inline FlowControlIndication_scope* FlowControlIndication_scope::clone() const
{ return static_cast<FlowControlIndication_scope*> (Inherited::clone()); }

inline bool FlowControlIndication_scope::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline FlowControlIndication_restriction::maximumBitRate::const_reference FlowControlIndication_restriction::get_maximumBitRate () const
{
    assert(currentSelection() ==maximumBitRate::id_);
    return *static_cast<maximumBitRate::const_pointer>(choice.get());
}

inline FlowControlIndication_restriction::maximumBitRate::reference FlowControlIndication_restriction::ref_maximumBitRate ()
{
    assert(currentSelection() ==maximumBitRate::id_);
    return *static_cast<maximumBitRate::pointer>(choice.get());
}

inline FlowControlIndication_restriction::maximumBitRate::reference FlowControlIndication_restriction::select_maximumBitRate ()
{
    return *static_cast<maximumBitRate::pointer>(setSelection(maximumBitRate::id_, ASN1::AbstractData::create( &maximumBitRate::value_type::theInfo)));
}

inline FlowControlIndication_restriction::maximumBitRate::reference FlowControlIndication_restriction::select_maximumBitRate (FlowControlIndication_restriction::maximumBitRate::value_type::int_type value)
{
    return select_maximumBitRate() = value;
}

inline bool FlowControlIndication_restriction::maximumBitRate_isSelected() const
{ 
    return currentSelection() == maximumBitRate::id_; 
}

inline FlowControlIndication_restriction::noRestriction::reference FlowControlIndication_restriction::select_noRestriction ()
{
    return *static_cast<noRestriction::pointer>(setSelection(noRestriction::id_, ASN1::AbstractData::create( &noRestriction::value_type::theInfo)));
}

inline bool FlowControlIndication_restriction::noRestriction_isSelected() const
{ 
    return currentSelection() == noRestriction::id_; 
}

inline FlowControlIndication_restriction::FlowControlIndication_restriction(maximumBitRate::Id id, maximumBitRate::value_type::int_type value)
  : Inherited(&theInfo, id, new maximumBitRate::value_type(value) )
{ }

inline FlowControlIndication_restriction::FlowControlIndication_restriction(noRestriction::Id id, noRestriction::const_reference value)
  : Inherited(&theInfo, id, new noRestriction::value_type(value) )
{ }


inline void FlowControlIndication_restriction::swap(FlowControlIndication_restriction & other)
{  Inherited::swap(other); }

inline FlowControlIndication_restriction* FlowControlIndication_restriction::clone() const
{ return static_cast<FlowControlIndication_restriction*> (Inherited::clone()); }

inline bool FlowControlIndication_restriction::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::highestEntryNumberProcessed::const_reference TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::get_highestEntryNumberProcessed () const
{
    assert(currentSelection() ==highestEntryNumberProcessed::id_);
    return *static_cast<highestEntryNumberProcessed::const_pointer>(choice.get());
}

inline TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::highestEntryNumberProcessed::reference TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::ref_highestEntryNumberProcessed ()
{
    assert(currentSelection() ==highestEntryNumberProcessed::id_);
    return *static_cast<highestEntryNumberProcessed::pointer>(choice.get());
}

inline TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::highestEntryNumberProcessed::reference TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::select_highestEntryNumberProcessed ()
{
    return *static_cast<highestEntryNumberProcessed::pointer>(setSelection(highestEntryNumberProcessed::id_, ASN1::AbstractData::create( &highestEntryNumberProcessed::value_type::theInfo)));
}

inline TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::highestEntryNumberProcessed::reference TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::select_highestEntryNumberProcessed (TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::highestEntryNumberProcessed::value_type::int_type value)
{
    return select_highestEntryNumberProcessed() = value;
}

inline bool TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::highestEntryNumberProcessed_isSelected() const
{ 
    return currentSelection() == highestEntryNumberProcessed::id_; 
}

inline TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::noneProcessed::reference TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::select_noneProcessed ()
{
    return *static_cast<noneProcessed::pointer>(setSelection(noneProcessed::id_, ASN1::AbstractData::create( &noneProcessed::value_type::theInfo)));
}

inline bool TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::noneProcessed_isSelected() const
{ 
    return currentSelection() == noneProcessed::id_; 
}

inline TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded(highestEntryNumberProcessed::Id id, highestEntryNumberProcessed::value_type::int_type value)
  : Inherited(&theInfo, id, new highestEntryNumberProcessed::value_type(value) )
{ }

inline TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded(noneProcessed::Id id, noneProcessed::const_reference value)
  : Inherited(&theInfo, id, new noneProcessed::value_type(value) )
{ }


inline void TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::swap(TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded & other)
{  Inherited::swap(other); }

inline TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded* TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::clone() const
{ return static_cast<TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded*> (Inherited::clone()); }

inline bool TerminalCapabilitySetReject_cause_tableEntryCapacityExceeded::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumNestingDepth::const_reference H223Capability_h223MultiplexTableCapability_enhanced::get_maximumNestingDepth () const
{ return *static_cast<maximumNestingDepth::const_pointer>(fields[0]);}

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumNestingDepth::reference H223Capability_h223MultiplexTableCapability_enhanced::ref_maximumNestingDepth ()
{ return *static_cast<maximumNestingDepth::pointer>(fields[0]);}

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumNestingDepth::reference H223Capability_h223MultiplexTableCapability_enhanced::set_maximumNestingDepth ()
{ return *static_cast<maximumNestingDepth::pointer>(fields[0]);}

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumNestingDepth::reference H223Capability_h223MultiplexTableCapability_enhanced::set_maximumNestingDepth (maximumNestingDepth::value_type::int_type value)
{ return *static_cast<maximumNestingDepth::pointer>(fields[0]) = value ;}

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumElementListSize::const_reference H223Capability_h223MultiplexTableCapability_enhanced::get_maximumElementListSize () const
{ return *static_cast<maximumElementListSize::const_pointer>(fields[1]);}

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumElementListSize::reference H223Capability_h223MultiplexTableCapability_enhanced::ref_maximumElementListSize ()
{ return *static_cast<maximumElementListSize::pointer>(fields[1]);}

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumElementListSize::reference H223Capability_h223MultiplexTableCapability_enhanced::set_maximumElementListSize ()
{ return *static_cast<maximumElementListSize::pointer>(fields[1]);}

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumElementListSize::reference H223Capability_h223MultiplexTableCapability_enhanced::set_maximumElementListSize (maximumElementListSize::value_type::int_type value)
{ return *static_cast<maximumElementListSize::pointer>(fields[1]) = value ;}

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumSubElementListSize::const_reference H223Capability_h223MultiplexTableCapability_enhanced::get_maximumSubElementListSize () const
{ return *static_cast<maximumSubElementListSize::const_pointer>(fields[2]);}

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumSubElementListSize::reference H223Capability_h223MultiplexTableCapability_enhanced::ref_maximumSubElementListSize ()
{ return *static_cast<maximumSubElementListSize::pointer>(fields[2]);}

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumSubElementListSize::reference H223Capability_h223MultiplexTableCapability_enhanced::set_maximumSubElementListSize ()
{ return *static_cast<maximumSubElementListSize::pointer>(fields[2]);}

inline H223Capability_h223MultiplexTableCapability_enhanced::maximumSubElementListSize::reference H223Capability_h223MultiplexTableCapability_enhanced::set_maximumSubElementListSize (maximumSubElementListSize::value_type::int_type value)
{ return *static_cast<maximumSubElementListSize::pointer>(fields[2]) = value ;}

inline void H223Capability_h223MultiplexTableCapability_enhanced::swap(H223Capability_h223MultiplexTableCapability_enhanced& other)
{ Inherited::swap(other); }

inline H223Capability_h223MultiplexTableCapability_enhanced* H223Capability_h223MultiplexTableCapability_enhanced::clone() const
{ return static_cast<H223Capability_h223MultiplexTableCapability_enhanced*> (Inherited::clone()); }

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuHorizMBs::const_reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::get_mpuHorizMBs () const
{ return *static_cast<mpuHorizMBs::const_pointer>(fields[0]);}

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuHorizMBs::reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::ref_mpuHorizMBs ()
{ return *static_cast<mpuHorizMBs::pointer>(fields[0]);}

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuHorizMBs::reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::set_mpuHorizMBs ()
{ return *static_cast<mpuHorizMBs::pointer>(fields[0]);}

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuHorizMBs::reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::set_mpuHorizMBs (mpuHorizMBs::value_type::int_type value)
{ return *static_cast<mpuHorizMBs::pointer>(fields[0]) = value ;}

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuVertMBs::const_reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::get_mpuVertMBs () const
{ return *static_cast<mpuVertMBs::const_pointer>(fields[1]);}

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuVertMBs::reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::ref_mpuVertMBs ()
{ return *static_cast<mpuVertMBs::pointer>(fields[1]);}

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuVertMBs::reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::set_mpuVertMBs ()
{ return *static_cast<mpuVertMBs::pointer>(fields[1]);}

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuVertMBs::reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::set_mpuVertMBs (mpuVertMBs::value_type::int_type value)
{ return *static_cast<mpuVertMBs::pointer>(fields[1]) = value ;}

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuTotalNumber::const_reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::get_mpuTotalNumber () const
{ return *static_cast<mpuTotalNumber::const_pointer>(fields[2]);}

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuTotalNumber::reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::ref_mpuTotalNumber ()
{ return *static_cast<mpuTotalNumber::pointer>(fields[2]);}

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuTotalNumber::reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::set_mpuTotalNumber ()
{ return *static_cast<mpuTotalNumber::pointer>(fields[2]);}

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::mpuTotalNumber::reference RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::set_mpuTotalNumber (mpuTotalNumber::value_type::int_type value)
{ return *static_cast<mpuTotalNumber::pointer>(fields[2]) = value ;}

inline void RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::swap(RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters& other)
{ Inherited::swap(other); }

inline RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters* RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters::clone() const
{ return static_cast<RefPictureSelection_enhancedReferencePicSelect_subPictureRemovalParameters*> (Inherited::clone()); }

inline DepFECCapability_rfc2733_separateStream::separatePort::const_reference DepFECCapability_rfc2733_separateStream::get_separatePort () const
{ return *static_cast<separatePort::const_pointer>(fields[0]);}

inline DepFECCapability_rfc2733_separateStream::separatePort::reference DepFECCapability_rfc2733_separateStream::ref_separatePort ()
{ return *static_cast<separatePort::pointer>(fields[0]);}

inline DepFECCapability_rfc2733_separateStream::separatePort::reference DepFECCapability_rfc2733_separateStream::set_separatePort ()
{ return *static_cast<separatePort::pointer>(fields[0]);}

inline DepFECCapability_rfc2733_separateStream::separatePort::reference DepFECCapability_rfc2733_separateStream::set_separatePort (bool value)
{ return *static_cast<separatePort::pointer>(fields[0]) = value ;}

inline DepFECCapability_rfc2733_separateStream::samePort::const_reference DepFECCapability_rfc2733_separateStream::get_samePort () const
{ return *static_cast<samePort::const_pointer>(fields[1]);}

inline DepFECCapability_rfc2733_separateStream::samePort::reference DepFECCapability_rfc2733_separateStream::ref_samePort ()
{ return *static_cast<samePort::pointer>(fields[1]);}

inline DepFECCapability_rfc2733_separateStream::samePort::reference DepFECCapability_rfc2733_separateStream::set_samePort ()
{ return *static_cast<samePort::pointer>(fields[1]);}

inline DepFECCapability_rfc2733_separateStream::samePort::reference DepFECCapability_rfc2733_separateStream::set_samePort (bool value)
{ return *static_cast<samePort::pointer>(fields[1]) = value ;}

inline void DepFECCapability_rfc2733_separateStream::swap(DepFECCapability_rfc2733_separateStream& other)
{ Inherited::swap(other); }

inline DepFECCapability_rfc2733_separateStream* DepFECCapability_rfc2733_separateStream::clone() const
{ return static_cast<DepFECCapability_rfc2733_separateStream*> (Inherited::clone()); }

inline H223LogicalChannelParameters_adaptationLayerType_al3::controlFieldOctets::const_reference H223LogicalChannelParameters_adaptationLayerType_al3::get_controlFieldOctets () const
{ return *static_cast<controlFieldOctets::const_pointer>(fields[0]);}

inline H223LogicalChannelParameters_adaptationLayerType_al3::controlFieldOctets::reference H223LogicalChannelParameters_adaptationLayerType_al3::ref_controlFieldOctets ()
{ return *static_cast<controlFieldOctets::pointer>(fields[0]);}

inline H223LogicalChannelParameters_adaptationLayerType_al3::controlFieldOctets::reference H223LogicalChannelParameters_adaptationLayerType_al3::set_controlFieldOctets ()
{ return *static_cast<controlFieldOctets::pointer>(fields[0]);}

inline H223LogicalChannelParameters_adaptationLayerType_al3::controlFieldOctets::reference H223LogicalChannelParameters_adaptationLayerType_al3::set_controlFieldOctets (controlFieldOctets::value_type::int_type value)
{ return *static_cast<controlFieldOctets::pointer>(fields[0]) = value ;}

inline H223LogicalChannelParameters_adaptationLayerType_al3::sendBufferSize::const_reference H223LogicalChannelParameters_adaptationLayerType_al3::get_sendBufferSize () const
{ return *static_cast<sendBufferSize::const_pointer>(fields[1]);}

inline H223LogicalChannelParameters_adaptationLayerType_al3::sendBufferSize::reference H223LogicalChannelParameters_adaptationLayerType_al3::ref_sendBufferSize ()
{ return *static_cast<sendBufferSize::pointer>(fields[1]);}

inline H223LogicalChannelParameters_adaptationLayerType_al3::sendBufferSize::reference H223LogicalChannelParameters_adaptationLayerType_al3::set_sendBufferSize ()
{ return *static_cast<sendBufferSize::pointer>(fields[1]);}

inline H223LogicalChannelParameters_adaptationLayerType_al3::sendBufferSize::reference H223LogicalChannelParameters_adaptationLayerType_al3::set_sendBufferSize (sendBufferSize::value_type::int_type value)
{ return *static_cast<sendBufferSize::pointer>(fields[1]) = value ;}

inline void H223LogicalChannelParameters_adaptationLayerType_al3::swap(H223LogicalChannelParameters_adaptationLayerType_al3& other)
{ Inherited::swap(other); }

inline H223LogicalChannelParameters_adaptationLayerType_al3* H223LogicalChannelParameters_adaptationLayerType_al3::clone() const
{ return static_cast<H223LogicalChannelParameters_adaptationLayerType_al3*> (Inherited::clone()); }

inline UnicastAddress_iPSourceRouteAddress_routing::strict::reference UnicastAddress_iPSourceRouteAddress_routing::select_strict ()
{
    return *static_cast<strict::pointer>(setSelection(strict::id_, ASN1::AbstractData::create( &strict::value_type::theInfo)));
}

inline bool UnicastAddress_iPSourceRouteAddress_routing::strict_isSelected() const
{ 
    return currentSelection() == strict::id_; 
}

inline UnicastAddress_iPSourceRouteAddress_routing::loose::reference UnicastAddress_iPSourceRouteAddress_routing::select_loose ()
{
    return *static_cast<loose::pointer>(setSelection(loose::id_, ASN1::AbstractData::create( &loose::value_type::theInfo)));
}

inline bool UnicastAddress_iPSourceRouteAddress_routing::loose_isSelected() const
{ 
    return currentSelection() == loose::id_; 
}

inline UnicastAddress_iPSourceRouteAddress_routing::UnicastAddress_iPSourceRouteAddress_routing(strict::Id id, strict::const_reference value)
  : Inherited(&theInfo, id, new strict::value_type(value) )
{ }

inline UnicastAddress_iPSourceRouteAddress_routing::UnicastAddress_iPSourceRouteAddress_routing(loose::Id id, loose::const_reference value)
  : Inherited(&theInfo, id, new loose::value_type(value) )
{ }


inline void UnicastAddress_iPSourceRouteAddress_routing::swap(UnicastAddress_iPSourceRouteAddress_routing & other)
{  Inherited::swap(other); }

inline UnicastAddress_iPSourceRouteAddress_routing* UnicastAddress_iPSourceRouteAddress_routing::clone() const
{ return static_cast<UnicastAddress_iPSourceRouteAddress_routing*> (Inherited::clone()); }

inline bool UnicastAddress_iPSourceRouteAddress_routing::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223ModeParameters_adaptationLayerType_al3::controlFieldOctets::const_reference H223ModeParameters_adaptationLayerType_al3::get_controlFieldOctets () const
{ return *static_cast<controlFieldOctets::const_pointer>(fields[0]);}

inline H223ModeParameters_adaptationLayerType_al3::controlFieldOctets::reference H223ModeParameters_adaptationLayerType_al3::ref_controlFieldOctets ()
{ return *static_cast<controlFieldOctets::pointer>(fields[0]);}

inline H223ModeParameters_adaptationLayerType_al3::controlFieldOctets::reference H223ModeParameters_adaptationLayerType_al3::set_controlFieldOctets ()
{ return *static_cast<controlFieldOctets::pointer>(fields[0]);}

inline H223ModeParameters_adaptationLayerType_al3::controlFieldOctets::reference H223ModeParameters_adaptationLayerType_al3::set_controlFieldOctets (controlFieldOctets::value_type::int_type value)
{ return *static_cast<controlFieldOctets::pointer>(fields[0]) = value ;}

inline H223ModeParameters_adaptationLayerType_al3::sendBufferSize::const_reference H223ModeParameters_adaptationLayerType_al3::get_sendBufferSize () const
{ return *static_cast<sendBufferSize::const_pointer>(fields[1]);}

inline H223ModeParameters_adaptationLayerType_al3::sendBufferSize::reference H223ModeParameters_adaptationLayerType_al3::ref_sendBufferSize ()
{ return *static_cast<sendBufferSize::pointer>(fields[1]);}

inline H223ModeParameters_adaptationLayerType_al3::sendBufferSize::reference H223ModeParameters_adaptationLayerType_al3::set_sendBufferSize ()
{ return *static_cast<sendBufferSize::pointer>(fields[1]);}

inline H223ModeParameters_adaptationLayerType_al3::sendBufferSize::reference H223ModeParameters_adaptationLayerType_al3::set_sendBufferSize (sendBufferSize::value_type::int_type value)
{ return *static_cast<sendBufferSize::pointer>(fields[1]) = value ;}

inline void H223ModeParameters_adaptationLayerType_al3::swap(H223ModeParameters_adaptationLayerType_al3& other)
{ Inherited::swap(other); }

inline H223ModeParameters_adaptationLayerType_al3* H223ModeParameters_adaptationLayerType_al3::clone() const
{ return static_cast<H223ModeParameters_adaptationLayerType_al3*> (Inherited::clone()); }

inline MultilinkRequest_maximumHeaderInterval_requestType::currentIntervalInformation::reference MultilinkRequest_maximumHeaderInterval_requestType::select_currentIntervalInformation ()
{
    return *static_cast<currentIntervalInformation::pointer>(setSelection(currentIntervalInformation::id_, ASN1::AbstractData::create( &currentIntervalInformation::value_type::theInfo)));
}

inline bool MultilinkRequest_maximumHeaderInterval_requestType::currentIntervalInformation_isSelected() const
{ 
    return currentSelection() == currentIntervalInformation::id_; 
}

inline MultilinkRequest_maximumHeaderInterval_requestType::requestedInterval::const_reference MultilinkRequest_maximumHeaderInterval_requestType::get_requestedInterval () const
{
    assert(currentSelection() ==requestedInterval::id_);
    return *static_cast<requestedInterval::const_pointer>(choice.get());
}

inline MultilinkRequest_maximumHeaderInterval_requestType::requestedInterval::reference MultilinkRequest_maximumHeaderInterval_requestType::ref_requestedInterval ()
{
    assert(currentSelection() ==requestedInterval::id_);
    return *static_cast<requestedInterval::pointer>(choice.get());
}

inline MultilinkRequest_maximumHeaderInterval_requestType::requestedInterval::reference MultilinkRequest_maximumHeaderInterval_requestType::select_requestedInterval ()
{
    return *static_cast<requestedInterval::pointer>(setSelection(requestedInterval::id_, ASN1::AbstractData::create( &requestedInterval::value_type::theInfo)));
}

inline MultilinkRequest_maximumHeaderInterval_requestType::requestedInterval::reference MultilinkRequest_maximumHeaderInterval_requestType::select_requestedInterval (MultilinkRequest_maximumHeaderInterval_requestType::requestedInterval::value_type::int_type value)
{
    return select_requestedInterval() = value;
}

inline bool MultilinkRequest_maximumHeaderInterval_requestType::requestedInterval_isSelected() const
{ 
    return currentSelection() == requestedInterval::id_; 
}

inline MultilinkRequest_maximumHeaderInterval_requestType::MultilinkRequest_maximumHeaderInterval_requestType(currentIntervalInformation::Id id, currentIntervalInformation::const_reference value)
  : Inherited(&theInfo, id, new currentIntervalInformation::value_type(value) )
{ }

inline MultilinkRequest_maximumHeaderInterval_requestType::MultilinkRequest_maximumHeaderInterval_requestType(requestedInterval::Id id, requestedInterval::value_type::int_type value)
  : Inherited(&theInfo, id, new requestedInterval::value_type(value) )
{ }


inline void MultilinkRequest_maximumHeaderInterval_requestType::swap(MultilinkRequest_maximumHeaderInterval_requestType & other)
{  Inherited::swap(other); }

inline MultilinkRequest_maximumHeaderInterval_requestType* MultilinkRequest_maximumHeaderInterval_requestType::clone() const
{ return static_cast<MultilinkRequest_maximumHeaderInterval_requestType*> (Inherited::clone()); }

inline bool MultilinkRequest_maximumHeaderInterval_requestType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MiscellaneousCommand_type_videoFastUpdateGOB::firstGOB::const_reference MiscellaneousCommand_type_videoFastUpdateGOB::get_firstGOB () const
{ return *static_cast<firstGOB::const_pointer>(fields[0]);}

inline MiscellaneousCommand_type_videoFastUpdateGOB::firstGOB::reference MiscellaneousCommand_type_videoFastUpdateGOB::ref_firstGOB ()
{ return *static_cast<firstGOB::pointer>(fields[0]);}

inline MiscellaneousCommand_type_videoFastUpdateGOB::firstGOB::reference MiscellaneousCommand_type_videoFastUpdateGOB::set_firstGOB ()
{ return *static_cast<firstGOB::pointer>(fields[0]);}

inline MiscellaneousCommand_type_videoFastUpdateGOB::firstGOB::reference MiscellaneousCommand_type_videoFastUpdateGOB::set_firstGOB (firstGOB::value_type::int_type value)
{ return *static_cast<firstGOB::pointer>(fields[0]) = value ;}

inline MiscellaneousCommand_type_videoFastUpdateGOB::numberOfGOBs::const_reference MiscellaneousCommand_type_videoFastUpdateGOB::get_numberOfGOBs () const
{ return *static_cast<numberOfGOBs::const_pointer>(fields[1]);}

inline MiscellaneousCommand_type_videoFastUpdateGOB::numberOfGOBs::reference MiscellaneousCommand_type_videoFastUpdateGOB::ref_numberOfGOBs ()
{ return *static_cast<numberOfGOBs::pointer>(fields[1]);}

inline MiscellaneousCommand_type_videoFastUpdateGOB::numberOfGOBs::reference MiscellaneousCommand_type_videoFastUpdateGOB::set_numberOfGOBs ()
{ return *static_cast<numberOfGOBs::pointer>(fields[1]);}

inline MiscellaneousCommand_type_videoFastUpdateGOB::numberOfGOBs::reference MiscellaneousCommand_type_videoFastUpdateGOB::set_numberOfGOBs (numberOfGOBs::value_type::int_type value)
{ return *static_cast<numberOfGOBs::pointer>(fields[1]) = value ;}

inline void MiscellaneousCommand_type_videoFastUpdateGOB::swap(MiscellaneousCommand_type_videoFastUpdateGOB& other)
{ Inherited::swap(other); }

inline MiscellaneousCommand_type_videoFastUpdateGOB* MiscellaneousCommand_type_videoFastUpdateGOB::clone() const
{ return static_cast<MiscellaneousCommand_type_videoFastUpdateGOB*> (Inherited::clone()); }

inline MiscellaneousCommand_type_videoFastUpdateMB::firstGOB::const_reference MiscellaneousCommand_type_videoFastUpdateMB::get_firstGOB () const
{
  assert(hasOptionalField(e_firstGOB));
  return *static_cast<firstGOB::const_pointer>(fields[0]);
}

inline MiscellaneousCommand_type_videoFastUpdateMB::firstGOB::reference MiscellaneousCommand_type_videoFastUpdateMB::ref_firstGOB ()
{
  assert(hasOptionalField(e_firstGOB));
  return *static_cast<firstGOB::pointer>(fields[0]);
}

inline MiscellaneousCommand_type_videoFastUpdateMB::firstGOB::reference MiscellaneousCommand_type_videoFastUpdateMB::set_firstGOB ()
{
  includeOptionalField( e_firstGOB, 0);
  return *static_cast<firstGOB::pointer>(fields[0]);
}

inline MiscellaneousCommand_type_videoFastUpdateMB::firstGOB::reference MiscellaneousCommand_type_videoFastUpdateMB::set_firstGOB (firstGOB::value_type::int_type value)
{
  includeOptionalField( e_firstGOB, 0);
  return *static_cast<firstGOB::pointer>(fields[0]) = value;
}

inline void MiscellaneousCommand_type_videoFastUpdateMB::omit_firstGOB ()
{ removeOptionalField( e_firstGOB); }

inline bool MiscellaneousCommand_type_videoFastUpdateMB::firstGOB_isPresent () const
{ return hasOptionalField( e_firstGOB); }

inline MiscellaneousCommand_type_videoFastUpdateMB::firstMB::const_reference MiscellaneousCommand_type_videoFastUpdateMB::get_firstMB () const
{
  assert(hasOptionalField(e_firstMB));
  return *static_cast<firstMB::const_pointer>(fields[1]);
}

inline MiscellaneousCommand_type_videoFastUpdateMB::firstMB::reference MiscellaneousCommand_type_videoFastUpdateMB::ref_firstMB ()
{
  assert(hasOptionalField(e_firstMB));
  return *static_cast<firstMB::pointer>(fields[1]);
}

inline MiscellaneousCommand_type_videoFastUpdateMB::firstMB::reference MiscellaneousCommand_type_videoFastUpdateMB::set_firstMB ()
{
  includeOptionalField( e_firstMB, 1);
  return *static_cast<firstMB::pointer>(fields[1]);
}

inline MiscellaneousCommand_type_videoFastUpdateMB::firstMB::reference MiscellaneousCommand_type_videoFastUpdateMB::set_firstMB (firstMB::value_type::int_type value)
{
  includeOptionalField( e_firstMB, 1);
  return *static_cast<firstMB::pointer>(fields[1]) = value;
}

inline void MiscellaneousCommand_type_videoFastUpdateMB::omit_firstMB ()
{ removeOptionalField( e_firstMB); }

inline bool MiscellaneousCommand_type_videoFastUpdateMB::firstMB_isPresent () const
{ return hasOptionalField( e_firstMB); }

inline MiscellaneousCommand_type_videoFastUpdateMB::numberOfMBs::const_reference MiscellaneousCommand_type_videoFastUpdateMB::get_numberOfMBs () const
{ return *static_cast<numberOfMBs::const_pointer>(fields[2]);}

inline MiscellaneousCommand_type_videoFastUpdateMB::numberOfMBs::reference MiscellaneousCommand_type_videoFastUpdateMB::ref_numberOfMBs ()
{ return *static_cast<numberOfMBs::pointer>(fields[2]);}

inline MiscellaneousCommand_type_videoFastUpdateMB::numberOfMBs::reference MiscellaneousCommand_type_videoFastUpdateMB::set_numberOfMBs ()
{ return *static_cast<numberOfMBs::pointer>(fields[2]);}

inline MiscellaneousCommand_type_videoFastUpdateMB::numberOfMBs::reference MiscellaneousCommand_type_videoFastUpdateMB::set_numberOfMBs (numberOfMBs::value_type::int_type value)
{ return *static_cast<numberOfMBs::pointer>(fields[2]) = value ;}

inline void MiscellaneousCommand_type_videoFastUpdateMB::swap(MiscellaneousCommand_type_videoFastUpdateMB& other)
{ Inherited::swap(other); }

inline MiscellaneousCommand_type_videoFastUpdateMB* MiscellaneousCommand_type_videoFastUpdateMB::clone() const
{ return static_cast<MiscellaneousCommand_type_videoFastUpdateMB*> (Inherited::clone()); }

inline MiscellaneousCommand_type_videoBadMBs::firstMB::const_reference MiscellaneousCommand_type_videoBadMBs::get_firstMB () const
{ return *static_cast<firstMB::const_pointer>(fields[0]);}

inline MiscellaneousCommand_type_videoBadMBs::firstMB::reference MiscellaneousCommand_type_videoBadMBs::ref_firstMB ()
{ return *static_cast<firstMB::pointer>(fields[0]);}

inline MiscellaneousCommand_type_videoBadMBs::firstMB::reference MiscellaneousCommand_type_videoBadMBs::set_firstMB ()
{ return *static_cast<firstMB::pointer>(fields[0]);}

inline MiscellaneousCommand_type_videoBadMBs::firstMB::reference MiscellaneousCommand_type_videoBadMBs::set_firstMB (firstMB::value_type::int_type value)
{ return *static_cast<firstMB::pointer>(fields[0]) = value ;}

inline MiscellaneousCommand_type_videoBadMBs::numberOfMBs::const_reference MiscellaneousCommand_type_videoBadMBs::get_numberOfMBs () const
{ return *static_cast<numberOfMBs::const_pointer>(fields[1]);}

inline MiscellaneousCommand_type_videoBadMBs::numberOfMBs::reference MiscellaneousCommand_type_videoBadMBs::ref_numberOfMBs ()
{ return *static_cast<numberOfMBs::pointer>(fields[1]);}

inline MiscellaneousCommand_type_videoBadMBs::numberOfMBs::reference MiscellaneousCommand_type_videoBadMBs::set_numberOfMBs ()
{ return *static_cast<numberOfMBs::pointer>(fields[1]);}

inline MiscellaneousCommand_type_videoBadMBs::numberOfMBs::reference MiscellaneousCommand_type_videoBadMBs::set_numberOfMBs (numberOfMBs::value_type::int_type value)
{ return *static_cast<numberOfMBs::pointer>(fields[1]) = value ;}

inline MiscellaneousCommand_type_videoBadMBs::temporalReference::const_reference MiscellaneousCommand_type_videoBadMBs::get_temporalReference () const
{ return *static_cast<temporalReference::const_pointer>(fields[2]);}

inline MiscellaneousCommand_type_videoBadMBs::temporalReference::reference MiscellaneousCommand_type_videoBadMBs::ref_temporalReference ()
{ return *static_cast<temporalReference::pointer>(fields[2]);}

inline MiscellaneousCommand_type_videoBadMBs::temporalReference::reference MiscellaneousCommand_type_videoBadMBs::set_temporalReference ()
{ return *static_cast<temporalReference::pointer>(fields[2]);}

inline MiscellaneousCommand_type_videoBadMBs::temporalReference::reference MiscellaneousCommand_type_videoBadMBs::set_temporalReference (temporalReference::value_type::int_type value)
{ return *static_cast<temporalReference::pointer>(fields[2]) = value ;}

inline void MiscellaneousCommand_type_videoBadMBs::swap(MiscellaneousCommand_type_videoBadMBs& other)
{ Inherited::swap(other); }

inline MiscellaneousCommand_type_videoBadMBs* MiscellaneousCommand_type_videoBadMBs::clone() const
{ return static_cast<MiscellaneousCommand_type_videoBadMBs*> (Inherited::clone()); }

inline MiscellaneousCommand_type_lostPartialPicture::pictureReference::const_reference MiscellaneousCommand_type_lostPartialPicture::get_pictureReference () const
{ return *static_cast<pictureReference::const_pointer>(fields[0]);}

inline MiscellaneousCommand_type_lostPartialPicture::pictureReference::reference MiscellaneousCommand_type_lostPartialPicture::ref_pictureReference ()
{ return *static_cast<pictureReference::pointer>(fields[0]);}

inline MiscellaneousCommand_type_lostPartialPicture::pictureReference::reference MiscellaneousCommand_type_lostPartialPicture::set_pictureReference ()
{ return *static_cast<pictureReference::pointer>(fields[0]);}

inline MiscellaneousCommand_type_lostPartialPicture::pictureReference::reference MiscellaneousCommand_type_lostPartialPicture::set_pictureReference (pictureReference::const_reference value)
{ return *static_cast<pictureReference::pointer>(fields[0]) = value ;}

inline MiscellaneousCommand_type_lostPartialPicture::firstMB::const_reference MiscellaneousCommand_type_lostPartialPicture::get_firstMB () const
{ return *static_cast<firstMB::const_pointer>(fields[1]);}

inline MiscellaneousCommand_type_lostPartialPicture::firstMB::reference MiscellaneousCommand_type_lostPartialPicture::ref_firstMB ()
{ return *static_cast<firstMB::pointer>(fields[1]);}

inline MiscellaneousCommand_type_lostPartialPicture::firstMB::reference MiscellaneousCommand_type_lostPartialPicture::set_firstMB ()
{ return *static_cast<firstMB::pointer>(fields[1]);}

inline MiscellaneousCommand_type_lostPartialPicture::firstMB::reference MiscellaneousCommand_type_lostPartialPicture::set_firstMB (firstMB::value_type::int_type value)
{ return *static_cast<firstMB::pointer>(fields[1]) = value ;}

inline MiscellaneousCommand_type_lostPartialPicture::numberOfMBs::const_reference MiscellaneousCommand_type_lostPartialPicture::get_numberOfMBs () const
{ return *static_cast<numberOfMBs::const_pointer>(fields[2]);}

inline MiscellaneousCommand_type_lostPartialPicture::numberOfMBs::reference MiscellaneousCommand_type_lostPartialPicture::ref_numberOfMBs ()
{ return *static_cast<numberOfMBs::pointer>(fields[2]);}

inline MiscellaneousCommand_type_lostPartialPicture::numberOfMBs::reference MiscellaneousCommand_type_lostPartialPicture::set_numberOfMBs ()
{ return *static_cast<numberOfMBs::pointer>(fields[2]);}

inline MiscellaneousCommand_type_lostPartialPicture::numberOfMBs::reference MiscellaneousCommand_type_lostPartialPicture::set_numberOfMBs (numberOfMBs::value_type::int_type value)
{ return *static_cast<numberOfMBs::pointer>(fields[2]) = value ;}

inline void MiscellaneousCommand_type_lostPartialPicture::swap(MiscellaneousCommand_type_lostPartialPicture& other)
{ Inherited::swap(other); }

inline MiscellaneousCommand_type_lostPartialPicture* MiscellaneousCommand_type_lostPartialPicture::clone() const
{ return static_cast<MiscellaneousCommand_type_lostPartialPicture*> (Inherited::clone()); }

inline MiscellaneousCommand_type_encryptionUpdateAck::synchFlag::const_reference MiscellaneousCommand_type_encryptionUpdateAck::get_synchFlag () const
{ return *static_cast<synchFlag::const_pointer>(fields[0]);}

inline MiscellaneousCommand_type_encryptionUpdateAck::synchFlag::reference MiscellaneousCommand_type_encryptionUpdateAck::ref_synchFlag ()
{ return *static_cast<synchFlag::pointer>(fields[0]);}

inline MiscellaneousCommand_type_encryptionUpdateAck::synchFlag::reference MiscellaneousCommand_type_encryptionUpdateAck::set_synchFlag ()
{ return *static_cast<synchFlag::pointer>(fields[0]);}

inline MiscellaneousCommand_type_encryptionUpdateAck::synchFlag::reference MiscellaneousCommand_type_encryptionUpdateAck::set_synchFlag (synchFlag::value_type::int_type value)
{ return *static_cast<synchFlag::pointer>(fields[0]) = value ;}

inline void MiscellaneousCommand_type_encryptionUpdateAck::swap(MiscellaneousCommand_type_encryptionUpdateAck& other)
{ Inherited::swap(other); }

inline MiscellaneousCommand_type_encryptionUpdateAck* MiscellaneousCommand_type_encryptionUpdateAck::clone() const
{ return static_cast<MiscellaneousCommand_type_encryptionUpdateAck*> (Inherited::clone()); }

inline NewATMVCCommand_aal_aal5::forwardMaximumSDUSize::const_reference NewATMVCCommand_aal_aal5::get_forwardMaximumSDUSize () const
{ return *static_cast<forwardMaximumSDUSize::const_pointer>(fields[0]);}

inline NewATMVCCommand_aal_aal5::forwardMaximumSDUSize::reference NewATMVCCommand_aal_aal5::ref_forwardMaximumSDUSize ()
{ return *static_cast<forwardMaximumSDUSize::pointer>(fields[0]);}

inline NewATMVCCommand_aal_aal5::forwardMaximumSDUSize::reference NewATMVCCommand_aal_aal5::set_forwardMaximumSDUSize ()
{ return *static_cast<forwardMaximumSDUSize::pointer>(fields[0]);}

inline NewATMVCCommand_aal_aal5::forwardMaximumSDUSize::reference NewATMVCCommand_aal_aal5::set_forwardMaximumSDUSize (forwardMaximumSDUSize::value_type::int_type value)
{ return *static_cast<forwardMaximumSDUSize::pointer>(fields[0]) = value ;}

inline NewATMVCCommand_aal_aal5::backwardMaximumSDUSize::const_reference NewATMVCCommand_aal_aal5::get_backwardMaximumSDUSize () const
{ return *static_cast<backwardMaximumSDUSize::const_pointer>(fields[1]);}

inline NewATMVCCommand_aal_aal5::backwardMaximumSDUSize::reference NewATMVCCommand_aal_aal5::ref_backwardMaximumSDUSize ()
{ return *static_cast<backwardMaximumSDUSize::pointer>(fields[1]);}

inline NewATMVCCommand_aal_aal5::backwardMaximumSDUSize::reference NewATMVCCommand_aal_aal5::set_backwardMaximumSDUSize ()
{ return *static_cast<backwardMaximumSDUSize::pointer>(fields[1]);}

inline NewATMVCCommand_aal_aal5::backwardMaximumSDUSize::reference NewATMVCCommand_aal_aal5::set_backwardMaximumSDUSize (backwardMaximumSDUSize::value_type::int_type value)
{ return *static_cast<backwardMaximumSDUSize::pointer>(fields[1]) = value ;}

inline void NewATMVCCommand_aal_aal5::swap(NewATMVCCommand_aal_aal5& other)
{ Inherited::swap(other); }

inline NewATMVCCommand_aal_aal5* NewATMVCCommand_aal_aal5::clone() const
{ return static_cast<NewATMVCCommand_aal_aal5*> (Inherited::clone()); }

inline NewATMVCCommand_reverseParameters_multiplex::noMultiplex::reference NewATMVCCommand_reverseParameters_multiplex::select_noMultiplex ()
{
    return *static_cast<noMultiplex::pointer>(setSelection(noMultiplex::id_, ASN1::AbstractData::create( &noMultiplex::value_type::theInfo)));
}

inline bool NewATMVCCommand_reverseParameters_multiplex::noMultiplex_isSelected() const
{ 
    return currentSelection() == noMultiplex::id_; 
}

inline NewATMVCCommand_reverseParameters_multiplex::transportStream::reference NewATMVCCommand_reverseParameters_multiplex::select_transportStream ()
{
    return *static_cast<transportStream::pointer>(setSelection(transportStream::id_, ASN1::AbstractData::create( &transportStream::value_type::theInfo)));
}

inline bool NewATMVCCommand_reverseParameters_multiplex::transportStream_isSelected() const
{ 
    return currentSelection() == transportStream::id_; 
}

inline NewATMVCCommand_reverseParameters_multiplex::programStream::reference NewATMVCCommand_reverseParameters_multiplex::select_programStream ()
{
    return *static_cast<programStream::pointer>(setSelection(programStream::id_, ASN1::AbstractData::create( &programStream::value_type::theInfo)));
}

inline bool NewATMVCCommand_reverseParameters_multiplex::programStream_isSelected() const
{ 
    return currentSelection() == programStream::id_; 
}

inline NewATMVCCommand_reverseParameters_multiplex::NewATMVCCommand_reverseParameters_multiplex(noMultiplex::Id id, noMultiplex::const_reference value)
  : Inherited(&theInfo, id, new noMultiplex::value_type(value) )
{ }

inline NewATMVCCommand_reverseParameters_multiplex::NewATMVCCommand_reverseParameters_multiplex(transportStream::Id id, transportStream::const_reference value)
  : Inherited(&theInfo, id, new transportStream::value_type(value) )
{ }

inline NewATMVCCommand_reverseParameters_multiplex::NewATMVCCommand_reverseParameters_multiplex(programStream::Id id, programStream::const_reference value)
  : Inherited(&theInfo, id, new programStream::value_type(value) )
{ }


inline void NewATMVCCommand_reverseParameters_multiplex::swap(NewATMVCCommand_reverseParameters_multiplex & other)
{  Inherited::swap(other); }

inline NewATMVCCommand_reverseParameters_multiplex* NewATMVCCommand_reverseParameters_multiplex::clone() const
{ return static_cast<NewATMVCCommand_reverseParameters_multiplex*> (Inherited::clone()); }

inline bool NewATMVCCommand_reverseParameters_multiplex::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MiscellaneousIndication_type_videoNotDecodedMBs::firstMB::const_reference MiscellaneousIndication_type_videoNotDecodedMBs::get_firstMB () const
{ return *static_cast<firstMB::const_pointer>(fields[0]);}

inline MiscellaneousIndication_type_videoNotDecodedMBs::firstMB::reference MiscellaneousIndication_type_videoNotDecodedMBs::ref_firstMB ()
{ return *static_cast<firstMB::pointer>(fields[0]);}

inline MiscellaneousIndication_type_videoNotDecodedMBs::firstMB::reference MiscellaneousIndication_type_videoNotDecodedMBs::set_firstMB ()
{ return *static_cast<firstMB::pointer>(fields[0]);}

inline MiscellaneousIndication_type_videoNotDecodedMBs::firstMB::reference MiscellaneousIndication_type_videoNotDecodedMBs::set_firstMB (firstMB::value_type::int_type value)
{ return *static_cast<firstMB::pointer>(fields[0]) = value ;}

inline MiscellaneousIndication_type_videoNotDecodedMBs::numberOfMBs::const_reference MiscellaneousIndication_type_videoNotDecodedMBs::get_numberOfMBs () const
{ return *static_cast<numberOfMBs::const_pointer>(fields[1]);}

inline MiscellaneousIndication_type_videoNotDecodedMBs::numberOfMBs::reference MiscellaneousIndication_type_videoNotDecodedMBs::ref_numberOfMBs ()
{ return *static_cast<numberOfMBs::pointer>(fields[1]);}

inline MiscellaneousIndication_type_videoNotDecodedMBs::numberOfMBs::reference MiscellaneousIndication_type_videoNotDecodedMBs::set_numberOfMBs ()
{ return *static_cast<numberOfMBs::pointer>(fields[1]);}

inline MiscellaneousIndication_type_videoNotDecodedMBs::numberOfMBs::reference MiscellaneousIndication_type_videoNotDecodedMBs::set_numberOfMBs (numberOfMBs::value_type::int_type value)
{ return *static_cast<numberOfMBs::pointer>(fields[1]) = value ;}

inline MiscellaneousIndication_type_videoNotDecodedMBs::temporalReference::const_reference MiscellaneousIndication_type_videoNotDecodedMBs::get_temporalReference () const
{ return *static_cast<temporalReference::const_pointer>(fields[2]);}

inline MiscellaneousIndication_type_videoNotDecodedMBs::temporalReference::reference MiscellaneousIndication_type_videoNotDecodedMBs::ref_temporalReference ()
{ return *static_cast<temporalReference::pointer>(fields[2]);}

inline MiscellaneousIndication_type_videoNotDecodedMBs::temporalReference::reference MiscellaneousIndication_type_videoNotDecodedMBs::set_temporalReference ()
{ return *static_cast<temporalReference::pointer>(fields[2]);}

inline MiscellaneousIndication_type_videoNotDecodedMBs::temporalReference::reference MiscellaneousIndication_type_videoNotDecodedMBs::set_temporalReference (temporalReference::value_type::int_type value)
{ return *static_cast<temporalReference::pointer>(fields[2]) = value ;}

inline void MiscellaneousIndication_type_videoNotDecodedMBs::swap(MiscellaneousIndication_type_videoNotDecodedMBs& other)
{ Inherited::swap(other); }

inline MiscellaneousIndication_type_videoNotDecodedMBs* MiscellaneousIndication_type_videoNotDecodedMBs::clone() const
{ return static_cast<MiscellaneousIndication_type_videoNotDecodedMBs*> (Inherited::clone()); }

inline NewATMVCIndication_aal_aal5::forwardMaximumSDUSize::const_reference NewATMVCIndication_aal_aal5::get_forwardMaximumSDUSize () const
{ return *static_cast<forwardMaximumSDUSize::const_pointer>(fields[0]);}

inline NewATMVCIndication_aal_aal5::forwardMaximumSDUSize::reference NewATMVCIndication_aal_aal5::ref_forwardMaximumSDUSize ()
{ return *static_cast<forwardMaximumSDUSize::pointer>(fields[0]);}

inline NewATMVCIndication_aal_aal5::forwardMaximumSDUSize::reference NewATMVCIndication_aal_aal5::set_forwardMaximumSDUSize ()
{ return *static_cast<forwardMaximumSDUSize::pointer>(fields[0]);}

inline NewATMVCIndication_aal_aal5::forwardMaximumSDUSize::reference NewATMVCIndication_aal_aal5::set_forwardMaximumSDUSize (forwardMaximumSDUSize::value_type::int_type value)
{ return *static_cast<forwardMaximumSDUSize::pointer>(fields[0]) = value ;}

inline NewATMVCIndication_aal_aal5::backwardMaximumSDUSize::const_reference NewATMVCIndication_aal_aal5::get_backwardMaximumSDUSize () const
{ return *static_cast<backwardMaximumSDUSize::const_pointer>(fields[1]);}

inline NewATMVCIndication_aal_aal5::backwardMaximumSDUSize::reference NewATMVCIndication_aal_aal5::ref_backwardMaximumSDUSize ()
{ return *static_cast<backwardMaximumSDUSize::pointer>(fields[1]);}

inline NewATMVCIndication_aal_aal5::backwardMaximumSDUSize::reference NewATMVCIndication_aal_aal5::set_backwardMaximumSDUSize ()
{ return *static_cast<backwardMaximumSDUSize::pointer>(fields[1]);}

inline NewATMVCIndication_aal_aal5::backwardMaximumSDUSize::reference NewATMVCIndication_aal_aal5::set_backwardMaximumSDUSize (backwardMaximumSDUSize::value_type::int_type value)
{ return *static_cast<backwardMaximumSDUSize::pointer>(fields[1]) = value ;}

inline void NewATMVCIndication_aal_aal5::swap(NewATMVCIndication_aal_aal5& other)
{ Inherited::swap(other); }

inline NewATMVCIndication_aal_aal5* NewATMVCIndication_aal_aal5::clone() const
{ return static_cast<NewATMVCIndication_aal_aal5*> (Inherited::clone()); }

inline NewATMVCIndication_reverseParameters_multiplex::noMultiplex::reference NewATMVCIndication_reverseParameters_multiplex::select_noMultiplex ()
{
    return *static_cast<noMultiplex::pointer>(setSelection(noMultiplex::id_, ASN1::AbstractData::create( &noMultiplex::value_type::theInfo)));
}

inline bool NewATMVCIndication_reverseParameters_multiplex::noMultiplex_isSelected() const
{ 
    return currentSelection() == noMultiplex::id_; 
}

inline NewATMVCIndication_reverseParameters_multiplex::transportStream::reference NewATMVCIndication_reverseParameters_multiplex::select_transportStream ()
{
    return *static_cast<transportStream::pointer>(setSelection(transportStream::id_, ASN1::AbstractData::create( &transportStream::value_type::theInfo)));
}

inline bool NewATMVCIndication_reverseParameters_multiplex::transportStream_isSelected() const
{ 
    return currentSelection() == transportStream::id_; 
}

inline NewATMVCIndication_reverseParameters_multiplex::programStream::reference NewATMVCIndication_reverseParameters_multiplex::select_programStream ()
{
    return *static_cast<programStream::pointer>(setSelection(programStream::id_, ASN1::AbstractData::create( &programStream::value_type::theInfo)));
}

inline bool NewATMVCIndication_reverseParameters_multiplex::programStream_isSelected() const
{ 
    return currentSelection() == programStream::id_; 
}

inline NewATMVCIndication_reverseParameters_multiplex::NewATMVCIndication_reverseParameters_multiplex(noMultiplex::Id id, noMultiplex::const_reference value)
  : Inherited(&theInfo, id, new noMultiplex::value_type(value) )
{ }

inline NewATMVCIndication_reverseParameters_multiplex::NewATMVCIndication_reverseParameters_multiplex(transportStream::Id id, transportStream::const_reference value)
  : Inherited(&theInfo, id, new transportStream::value_type(value) )
{ }

inline NewATMVCIndication_reverseParameters_multiplex::NewATMVCIndication_reverseParameters_multiplex(programStream::Id id, programStream::const_reference value)
  : Inherited(&theInfo, id, new programStream::value_type(value) )
{ }


inline void NewATMVCIndication_reverseParameters_multiplex::swap(NewATMVCIndication_reverseParameters_multiplex & other)
{  Inherited::swap(other); }

inline NewATMVCIndication_reverseParameters_multiplex* NewATMVCIndication_reverseParameters_multiplex::clone() const
{ return static_cast<NewATMVCIndication_reverseParameters_multiplex*> (Inherited::clone()); }

inline bool NewATMVCIndication_reverseParameters_multiplex::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline UserInputIndication_signal_rtp::timestamp::const_reference UserInputIndication_signal_rtp::get_timestamp () const
{
  assert(hasOptionalField(e_timestamp));
  return *static_cast<timestamp::const_pointer>(fields[0]);
}

inline UserInputIndication_signal_rtp::timestamp::reference UserInputIndication_signal_rtp::ref_timestamp ()
{
  assert(hasOptionalField(e_timestamp));
  return *static_cast<timestamp::pointer>(fields[0]);
}

inline UserInputIndication_signal_rtp::timestamp::reference UserInputIndication_signal_rtp::set_timestamp ()
{
  includeOptionalField( e_timestamp, 0);
  return *static_cast<timestamp::pointer>(fields[0]);
}

inline UserInputIndication_signal_rtp::timestamp::reference UserInputIndication_signal_rtp::set_timestamp (timestamp::value_type::int_type value)
{
  includeOptionalField( e_timestamp, 0);
  return *static_cast<timestamp::pointer>(fields[0]) = value;
}

inline void UserInputIndication_signal_rtp::omit_timestamp ()
{ removeOptionalField( e_timestamp); }

inline bool UserInputIndication_signal_rtp::timestamp_isPresent () const
{ return hasOptionalField( e_timestamp); }

inline UserInputIndication_signal_rtp::expirationTime::const_reference UserInputIndication_signal_rtp::get_expirationTime () const
{
  assert(hasOptionalField(e_expirationTime));
  return *static_cast<expirationTime::const_pointer>(fields[1]);
}

inline UserInputIndication_signal_rtp::expirationTime::reference UserInputIndication_signal_rtp::ref_expirationTime ()
{
  assert(hasOptionalField(e_expirationTime));
  return *static_cast<expirationTime::pointer>(fields[1]);
}

inline UserInputIndication_signal_rtp::expirationTime::reference UserInputIndication_signal_rtp::set_expirationTime ()
{
  includeOptionalField( e_expirationTime, 1);
  return *static_cast<expirationTime::pointer>(fields[1]);
}

inline UserInputIndication_signal_rtp::expirationTime::reference UserInputIndication_signal_rtp::set_expirationTime (expirationTime::value_type::int_type value)
{
  includeOptionalField( e_expirationTime, 1);
  return *static_cast<expirationTime::pointer>(fields[1]) = value;
}

inline void UserInputIndication_signal_rtp::omit_expirationTime ()
{ removeOptionalField( e_expirationTime); }

inline bool UserInputIndication_signal_rtp::expirationTime_isPresent () const
{ return hasOptionalField( e_expirationTime); }

inline UserInputIndication_signal_rtp::logicalChannelNumber::const_reference UserInputIndication_signal_rtp::get_logicalChannelNumber () const
{ return *static_cast<logicalChannelNumber::const_pointer>(fields[2]);}

inline UserInputIndication_signal_rtp::logicalChannelNumber::reference UserInputIndication_signal_rtp::ref_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[2]);}

inline UserInputIndication_signal_rtp::logicalChannelNumber::reference UserInputIndication_signal_rtp::set_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[2]);}

inline UserInputIndication_signal_rtp::logicalChannelNumber::reference UserInputIndication_signal_rtp::set_logicalChannelNumber (logicalChannelNumber::value_type::int_type value)
{ return *static_cast<logicalChannelNumber::pointer>(fields[2]) = value ;}

inline void UserInputIndication_signal_rtp::swap(UserInputIndication_signal_rtp& other)
{ Inherited::swap(other); }

inline UserInputIndication_signal_rtp* UserInputIndication_signal_rtp::clone() const
{ return static_cast<UserInputIndication_signal_rtp*> (Inherited::clone()); }

inline UserInputIndication_signalUpdate_rtp::logicalChannelNumber::const_reference UserInputIndication_signalUpdate_rtp::get_logicalChannelNumber () const
{ return *static_cast<logicalChannelNumber::const_pointer>(fields[0]);}

inline UserInputIndication_signalUpdate_rtp::logicalChannelNumber::reference UserInputIndication_signalUpdate_rtp::ref_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]);}

inline UserInputIndication_signalUpdate_rtp::logicalChannelNumber::reference UserInputIndication_signalUpdate_rtp::set_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]);}

inline UserInputIndication_signalUpdate_rtp::logicalChannelNumber::reference UserInputIndication_signalUpdate_rtp::set_logicalChannelNumber (logicalChannelNumber::value_type::int_type value)
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]) = value ;}

inline void UserInputIndication_signalUpdate_rtp::swap(UserInputIndication_signalUpdate_rtp& other)
{ Inherited::swap(other); }

inline UserInputIndication_signalUpdate_rtp* UserInputIndication_signalUpdate_rtp::clone() const
{ return static_cast<UserInputIndication_signalUpdate_rtp*> (Inherited::clone()); }

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::algorithmOID::const_reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::get_algorithmOID () const
{ return *static_cast<algorithmOID::const_pointer>(fields[0]);}

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::algorithmOID::reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::ref_algorithmOID ()
{ return *static_cast<algorithmOID::pointer>(fields[0]);}

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::algorithmOID::reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::set_algorithmOID ()
{ return *static_cast<algorithmOID::pointer>(fields[0]);}

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::algorithmOID::reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::set_algorithmOID (algorithmOID::const_reference value)
{ return *static_cast<algorithmOID::pointer>(fields[0]) = value ;}

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::paramS::const_reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::get_paramS () const
{
  assert(hasOptionalField(e_paramS));
  return *static_cast<paramS::const_pointer>(fields[1]);
}

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::paramS::reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::ref_paramS ()
{
  assert(hasOptionalField(e_paramS));
  return *static_cast<paramS::pointer>(fields[1]);
}

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::paramS::reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::set_paramS ()
{
  includeOptionalField( e_paramS, 1);
  return *static_cast<paramS::pointer>(fields[1]);
}

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::paramS::reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::set_paramS (paramS::const_reference value)
{
  includeOptionalField( e_paramS, 1);
  return *static_cast<paramS::pointer>(fields[1]) = value;
}

inline void UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::omit_paramS ()
{ removeOptionalField( e_paramS); }

inline bool UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::paramS_isPresent () const
{ return hasOptionalField( e_paramS); }

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::encrypted::const_reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::get_encrypted () const
{ return *static_cast<encrypted::const_pointer>(fields[2]);}

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::encrypted::reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::ref_encrypted ()
{ return *static_cast<encrypted::pointer>(fields[2]);}

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::encrypted::reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::set_encrypted ()
{ return *static_cast<encrypted::pointer>(fields[2]);}

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::encrypted::reference UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::set_encrypted (const std::vector<char>& value)
{ return *static_cast<encrypted::pointer>(fields[2]) = value ;}

inline void UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::swap(UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric& other)
{ Inherited::swap(other); }

inline UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric* UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric::clone() const
{ return static_cast<UserInputIndication_extendedAlphanumeric_encryptedAlphanumeric*> (Inherited::clone()); }

inline VCCapability_availableBitRates_type_rangeOfBitRates::lowerBitRate::const_reference VCCapability_availableBitRates_type_rangeOfBitRates::get_lowerBitRate () const
{ return *static_cast<lowerBitRate::const_pointer>(fields[0]);}

inline VCCapability_availableBitRates_type_rangeOfBitRates::lowerBitRate::reference VCCapability_availableBitRates_type_rangeOfBitRates::ref_lowerBitRate ()
{ return *static_cast<lowerBitRate::pointer>(fields[0]);}

inline VCCapability_availableBitRates_type_rangeOfBitRates::lowerBitRate::reference VCCapability_availableBitRates_type_rangeOfBitRates::set_lowerBitRate ()
{ return *static_cast<lowerBitRate::pointer>(fields[0]);}

inline VCCapability_availableBitRates_type_rangeOfBitRates::lowerBitRate::reference VCCapability_availableBitRates_type_rangeOfBitRates::set_lowerBitRate (lowerBitRate::value_type::int_type value)
{ return *static_cast<lowerBitRate::pointer>(fields[0]) = value ;}

inline VCCapability_availableBitRates_type_rangeOfBitRates::higherBitRate::const_reference VCCapability_availableBitRates_type_rangeOfBitRates::get_higherBitRate () const
{ return *static_cast<higherBitRate::const_pointer>(fields[1]);}

inline VCCapability_availableBitRates_type_rangeOfBitRates::higherBitRate::reference VCCapability_availableBitRates_type_rangeOfBitRates::ref_higherBitRate ()
{ return *static_cast<higherBitRate::pointer>(fields[1]);}

inline VCCapability_availableBitRates_type_rangeOfBitRates::higherBitRate::reference VCCapability_availableBitRates_type_rangeOfBitRates::set_higherBitRate ()
{ return *static_cast<higherBitRate::pointer>(fields[1]);}

inline VCCapability_availableBitRates_type_rangeOfBitRates::higherBitRate::reference VCCapability_availableBitRates_type_rangeOfBitRates::set_higherBitRate (higherBitRate::value_type::int_type value)
{ return *static_cast<higherBitRate::pointer>(fields[1]) = value ;}

inline void VCCapability_availableBitRates_type_rangeOfBitRates::swap(VCCapability_availableBitRates_type_rangeOfBitRates& other)
{ Inherited::swap(other); }

inline VCCapability_availableBitRates_type_rangeOfBitRates* VCCapability_availableBitRates_type_rangeOfBitRates::clone() const
{ return static_cast<VCCapability_availableBitRates_type_rangeOfBitRates*> (Inherited::clone()); }

inline CustomPictureFormat_mPI_customPCF_subtype::clockConversionCode::const_reference CustomPictureFormat_mPI_customPCF_subtype::get_clockConversionCode () const
{ return *static_cast<clockConversionCode::const_pointer>(fields[0]);}

inline CustomPictureFormat_mPI_customPCF_subtype::clockConversionCode::reference CustomPictureFormat_mPI_customPCF_subtype::ref_clockConversionCode ()
{ return *static_cast<clockConversionCode::pointer>(fields[0]);}

inline CustomPictureFormat_mPI_customPCF_subtype::clockConversionCode::reference CustomPictureFormat_mPI_customPCF_subtype::set_clockConversionCode ()
{ return *static_cast<clockConversionCode::pointer>(fields[0]);}

inline CustomPictureFormat_mPI_customPCF_subtype::clockConversionCode::reference CustomPictureFormat_mPI_customPCF_subtype::set_clockConversionCode (clockConversionCode::value_type::int_type value)
{ return *static_cast<clockConversionCode::pointer>(fields[0]) = value ;}

inline CustomPictureFormat_mPI_customPCF_subtype::clockDivisor::const_reference CustomPictureFormat_mPI_customPCF_subtype::get_clockDivisor () const
{ return *static_cast<clockDivisor::const_pointer>(fields[1]);}

inline CustomPictureFormat_mPI_customPCF_subtype::clockDivisor::reference CustomPictureFormat_mPI_customPCF_subtype::ref_clockDivisor ()
{ return *static_cast<clockDivisor::pointer>(fields[1]);}

inline CustomPictureFormat_mPI_customPCF_subtype::clockDivisor::reference CustomPictureFormat_mPI_customPCF_subtype::set_clockDivisor ()
{ return *static_cast<clockDivisor::pointer>(fields[1]);}

inline CustomPictureFormat_mPI_customPCF_subtype::clockDivisor::reference CustomPictureFormat_mPI_customPCF_subtype::set_clockDivisor (clockDivisor::value_type::int_type value)
{ return *static_cast<clockDivisor::pointer>(fields[1]) = value ;}

inline CustomPictureFormat_mPI_customPCF_subtype::customMPI::const_reference CustomPictureFormat_mPI_customPCF_subtype::get_customMPI () const
{ return *static_cast<customMPI::const_pointer>(fields[2]);}

inline CustomPictureFormat_mPI_customPCF_subtype::customMPI::reference CustomPictureFormat_mPI_customPCF_subtype::ref_customMPI ()
{ return *static_cast<customMPI::pointer>(fields[2]);}

inline CustomPictureFormat_mPI_customPCF_subtype::customMPI::reference CustomPictureFormat_mPI_customPCF_subtype::set_customMPI ()
{ return *static_cast<customMPI::pointer>(fields[2]);}

inline CustomPictureFormat_mPI_customPCF_subtype::customMPI::reference CustomPictureFormat_mPI_customPCF_subtype::set_customMPI (customMPI::value_type::int_type value)
{ return *static_cast<customMPI::pointer>(fields[2]) = value ;}

inline void CustomPictureFormat_mPI_customPCF_subtype::swap(CustomPictureFormat_mPI_customPCF_subtype& other)
{ Inherited::swap(other); }

inline CustomPictureFormat_mPI_customPCF_subtype* CustomPictureFormat_mPI_customPCF_subtype::clone() const
{ return static_cast<CustomPictureFormat_mPI_customPCF_subtype*> (Inherited::clone()); }

inline CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::width::const_reference CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::get_width () const
{ return *static_cast<width::const_pointer>(fields[0]);}

inline CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::width::reference CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::ref_width ()
{ return *static_cast<width::pointer>(fields[0]);}

inline CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::width::reference CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::set_width ()
{ return *static_cast<width::pointer>(fields[0]);}

inline CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::width::reference CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::set_width (width::value_type::int_type value)
{ return *static_cast<width::pointer>(fields[0]) = value ;}

inline CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::height::const_reference CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::get_height () const
{ return *static_cast<height::const_pointer>(fields[1]);}

inline CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::height::reference CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::ref_height ()
{ return *static_cast<height::pointer>(fields[1]);}

inline CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::height::reference CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::set_height ()
{ return *static_cast<height::pointer>(fields[1]);}

inline CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::height::reference CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::set_height (height::value_type::int_type value)
{ return *static_cast<height::pointer>(fields[1]) = value ;}

inline void CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::swap(CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype& other)
{ Inherited::swap(other); }

inline CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype* CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype::clone() const
{ return static_cast<CustomPictureFormat_pixelAspectInformation_extendedPAR_subtype*> (Inherited::clone()); }

inline V76LogicalChannelParameters_mode_eRM_recovery::rej::reference V76LogicalChannelParameters_mode_eRM_recovery::select_rej ()
{
    return *static_cast<rej::pointer>(setSelection(rej::id_, ASN1::AbstractData::create( &rej::value_type::theInfo)));
}

inline bool V76LogicalChannelParameters_mode_eRM_recovery::rej_isSelected() const
{ 
    return currentSelection() == rej::id_; 
}

inline V76LogicalChannelParameters_mode_eRM_recovery::sREJ::reference V76LogicalChannelParameters_mode_eRM_recovery::select_sREJ ()
{
    return *static_cast<sREJ::pointer>(setSelection(sREJ::id_, ASN1::AbstractData::create( &sREJ::value_type::theInfo)));
}

inline bool V76LogicalChannelParameters_mode_eRM_recovery::sREJ_isSelected() const
{ 
    return currentSelection() == sREJ::id_; 
}

inline V76LogicalChannelParameters_mode_eRM_recovery::mSREJ::reference V76LogicalChannelParameters_mode_eRM_recovery::select_mSREJ ()
{
    return *static_cast<mSREJ::pointer>(setSelection(mSREJ::id_, ASN1::AbstractData::create( &mSREJ::value_type::theInfo)));
}

inline bool V76LogicalChannelParameters_mode_eRM_recovery::mSREJ_isSelected() const
{ 
    return currentSelection() == mSREJ::id_; 
}

inline V76LogicalChannelParameters_mode_eRM_recovery::V76LogicalChannelParameters_mode_eRM_recovery(rej::Id id, rej::const_reference value)
  : Inherited(&theInfo, id, new rej::value_type(value) )
{ }

inline V76LogicalChannelParameters_mode_eRM_recovery::V76LogicalChannelParameters_mode_eRM_recovery(sREJ::Id id, sREJ::const_reference value)
  : Inherited(&theInfo, id, new sREJ::value_type(value) )
{ }

inline V76LogicalChannelParameters_mode_eRM_recovery::V76LogicalChannelParameters_mode_eRM_recovery(mSREJ::Id id, mSREJ::const_reference value)
  : Inherited(&theInfo, id, new mSREJ::value_type(value) )
{ }


inline void V76LogicalChannelParameters_mode_eRM_recovery::swap(V76LogicalChannelParameters_mode_eRM_recovery & other)
{  Inherited::swap(other); }

inline V76LogicalChannelParameters_mode_eRM_recovery* V76LogicalChannelParameters_mode_eRM_recovery::clone() const
{ return static_cast<V76LogicalChannelParameters_mode_eRM_recovery*> (Inherited::clone()); }

inline bool V76LogicalChannelParameters_mode_eRM_recovery::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline void FECData_rfc2733_pktMode_rfc2733sameport::swap(FECData_rfc2733_pktMode_rfc2733sameport& other)
{ Inherited::swap(other); }

inline FECData_rfc2733_pktMode_rfc2733sameport* FECData_rfc2733_pktMode_rfc2733sameport::clone() const
{ return static_cast<FECData_rfc2733_pktMode_rfc2733sameport*> (Inherited::clone()); }

inline FECData_rfc2733_pktMode_rfc2733diffport::protectedChannel::const_reference FECData_rfc2733_pktMode_rfc2733diffport::get_protectedChannel () const
{ return *static_cast<protectedChannel::const_pointer>(fields[0]);}

inline FECData_rfc2733_pktMode_rfc2733diffport::protectedChannel::reference FECData_rfc2733_pktMode_rfc2733diffport::ref_protectedChannel ()
{ return *static_cast<protectedChannel::pointer>(fields[0]);}

inline FECData_rfc2733_pktMode_rfc2733diffport::protectedChannel::reference FECData_rfc2733_pktMode_rfc2733diffport::set_protectedChannel ()
{ return *static_cast<protectedChannel::pointer>(fields[0]);}

inline FECData_rfc2733_pktMode_rfc2733diffport::protectedChannel::reference FECData_rfc2733_pktMode_rfc2733diffport::set_protectedChannel (protectedChannel::value_type::int_type value)
{ return *static_cast<protectedChannel::pointer>(fields[0]) = value ;}

inline void FECData_rfc2733_pktMode_rfc2733diffport::swap(FECData_rfc2733_pktMode_rfc2733diffport& other)
{ Inherited::swap(other); }

inline FECData_rfc2733_pktMode_rfc2733diffport* FECData_rfc2733_pktMode_rfc2733diffport::clone() const
{ return static_cast<FECData_rfc2733_pktMode_rfc2733diffport*> (Inherited::clone()); }

inline MultilinkResponse_addConnection_responseCode_rejected::connectionsNotAvailable::reference MultilinkResponse_addConnection_responseCode_rejected::select_connectionsNotAvailable ()
{
    return *static_cast<connectionsNotAvailable::pointer>(setSelection(connectionsNotAvailable::id_, ASN1::AbstractData::create( &connectionsNotAvailable::value_type::theInfo)));
}

inline bool MultilinkResponse_addConnection_responseCode_rejected::connectionsNotAvailable_isSelected() const
{ 
    return currentSelection() == connectionsNotAvailable::id_; 
}

inline MultilinkResponse_addConnection_responseCode_rejected::userRejected::reference MultilinkResponse_addConnection_responseCode_rejected::select_userRejected ()
{
    return *static_cast<userRejected::pointer>(setSelection(userRejected::id_, ASN1::AbstractData::create( &userRejected::value_type::theInfo)));
}

inline bool MultilinkResponse_addConnection_responseCode_rejected::userRejected_isSelected() const
{ 
    return currentSelection() == userRejected::id_; 
}

inline MultilinkResponse_addConnection_responseCode_rejected::MultilinkResponse_addConnection_responseCode_rejected(connectionsNotAvailable::Id id, connectionsNotAvailable::const_reference value)
  : Inherited(&theInfo, id, new connectionsNotAvailable::value_type(value) )
{ }

inline MultilinkResponse_addConnection_responseCode_rejected::MultilinkResponse_addConnection_responseCode_rejected(userRejected::Id id, userRejected::const_reference value)
  : Inherited(&theInfo, id, new userRejected::value_type(value) )
{ }


inline void MultilinkResponse_addConnection_responseCode_rejected::swap(MultilinkResponse_addConnection_responseCode_rejected & other)
{  Inherited::swap(other); }

inline MultilinkResponse_addConnection_responseCode_rejected* MultilinkResponse_addConnection_responseCode_rejected::clone() const
{ return static_cast<MultilinkResponse_addConnection_responseCode_rejected*> (Inherited::clone()); }

inline bool MultilinkResponse_addConnection_responseCode_rejected::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::doOneProgression::reference MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::select_doOneProgression ()
{
    return *static_cast<doOneProgression::pointer>(setSelection(doOneProgression::id_, ASN1::AbstractData::create( &doOneProgression::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::doOneProgression_isSelected() const
{ 
    return currentSelection() == doOneProgression::id_; 
}

inline MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::doContinuousProgressions::reference MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::select_doContinuousProgressions ()
{
    return *static_cast<doContinuousProgressions::pointer>(setSelection(doContinuousProgressions::id_, ASN1::AbstractData::create( &doContinuousProgressions::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::doContinuousProgressions_isSelected() const
{ 
    return currentSelection() == doContinuousProgressions::id_; 
}

inline MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::doOneIndependentProgression::reference MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::select_doOneIndependentProgression ()
{
    return *static_cast<doOneIndependentProgression::pointer>(setSelection(doOneIndependentProgression::id_, ASN1::AbstractData::create( &doOneIndependentProgression::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::doOneIndependentProgression_isSelected() const
{ 
    return currentSelection() == doOneIndependentProgression::id_; 
}

inline MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::doContinuousIndependentProgressions::reference MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::select_doContinuousIndependentProgressions ()
{
    return *static_cast<doContinuousIndependentProgressions::pointer>(setSelection(doContinuousIndependentProgressions::id_, ASN1::AbstractData::create( &doContinuousIndependentProgressions::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::doContinuousIndependentProgressions_isSelected() const
{ 
    return currentSelection() == doContinuousIndependentProgressions::id_; 
}

inline MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::MiscellaneousCommand_type_progressiveRefinementStart_repeatCount(doOneProgression::Id id, doOneProgression::const_reference value)
  : Inherited(&theInfo, id, new doOneProgression::value_type(value) )
{ }

inline MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::MiscellaneousCommand_type_progressiveRefinementStart_repeatCount(doContinuousProgressions::Id id, doContinuousProgressions::const_reference value)
  : Inherited(&theInfo, id, new doContinuousProgressions::value_type(value) )
{ }

inline MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::MiscellaneousCommand_type_progressiveRefinementStart_repeatCount(doOneIndependentProgression::Id id, doOneIndependentProgression::const_reference value)
  : Inherited(&theInfo, id, new doOneIndependentProgression::value_type(value) )
{ }

inline MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::MiscellaneousCommand_type_progressiveRefinementStart_repeatCount(doContinuousIndependentProgressions::Id id, doContinuousIndependentProgressions::const_reference value)
  : Inherited(&theInfo, id, new doContinuousIndependentProgressions::value_type(value) )
{ }


inline void MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::swap(MiscellaneousCommand_type_progressiveRefinementStart_repeatCount & other)
{  Inherited::swap(other); }

inline MiscellaneousCommand_type_progressiveRefinementStart_repeatCount* MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::clone() const
{ return static_cast<MiscellaneousCommand_type_progressiveRefinementStart_repeatCount*> (Inherited::clone()); }

inline bool MiscellaneousCommand_type_progressiveRefinementStart_repeatCount::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NewATMVCCommand_aal_aal1_clockRecovery::nullClockRecovery::reference NewATMVCCommand_aal_aal1_clockRecovery::select_nullClockRecovery ()
{
    return *static_cast<nullClockRecovery::pointer>(setSelection(nullClockRecovery::id_, ASN1::AbstractData::create( &nullClockRecovery::value_type::theInfo)));
}

inline bool NewATMVCCommand_aal_aal1_clockRecovery::nullClockRecovery_isSelected() const
{ 
    return currentSelection() == nullClockRecovery::id_; 
}

inline NewATMVCCommand_aal_aal1_clockRecovery::srtsClockRecovery::reference NewATMVCCommand_aal_aal1_clockRecovery::select_srtsClockRecovery ()
{
    return *static_cast<srtsClockRecovery::pointer>(setSelection(srtsClockRecovery::id_, ASN1::AbstractData::create( &srtsClockRecovery::value_type::theInfo)));
}

inline bool NewATMVCCommand_aal_aal1_clockRecovery::srtsClockRecovery_isSelected() const
{ 
    return currentSelection() == srtsClockRecovery::id_; 
}

inline NewATMVCCommand_aal_aal1_clockRecovery::adaptiveClockRecovery::reference NewATMVCCommand_aal_aal1_clockRecovery::select_adaptiveClockRecovery ()
{
    return *static_cast<adaptiveClockRecovery::pointer>(setSelection(adaptiveClockRecovery::id_, ASN1::AbstractData::create( &adaptiveClockRecovery::value_type::theInfo)));
}

inline bool NewATMVCCommand_aal_aal1_clockRecovery::adaptiveClockRecovery_isSelected() const
{ 
    return currentSelection() == adaptiveClockRecovery::id_; 
}

inline NewATMVCCommand_aal_aal1_clockRecovery::NewATMVCCommand_aal_aal1_clockRecovery(nullClockRecovery::Id id, nullClockRecovery::const_reference value)
  : Inherited(&theInfo, id, new nullClockRecovery::value_type(value) )
{ }

inline NewATMVCCommand_aal_aal1_clockRecovery::NewATMVCCommand_aal_aal1_clockRecovery(srtsClockRecovery::Id id, srtsClockRecovery::const_reference value)
  : Inherited(&theInfo, id, new srtsClockRecovery::value_type(value) )
{ }

inline NewATMVCCommand_aal_aal1_clockRecovery::NewATMVCCommand_aal_aal1_clockRecovery(adaptiveClockRecovery::Id id, adaptiveClockRecovery::const_reference value)
  : Inherited(&theInfo, id, new adaptiveClockRecovery::value_type(value) )
{ }


inline void NewATMVCCommand_aal_aal1_clockRecovery::swap(NewATMVCCommand_aal_aal1_clockRecovery & other)
{  Inherited::swap(other); }

inline NewATMVCCommand_aal_aal1_clockRecovery* NewATMVCCommand_aal_aal1_clockRecovery::clone() const
{ return static_cast<NewATMVCCommand_aal_aal1_clockRecovery*> (Inherited::clone()); }

inline bool NewATMVCCommand_aal_aal1_clockRecovery::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NewATMVCCommand_aal_aal1_errorCorrection::nullErrorCorrection::reference NewATMVCCommand_aal_aal1_errorCorrection::select_nullErrorCorrection ()
{
    return *static_cast<nullErrorCorrection::pointer>(setSelection(nullErrorCorrection::id_, ASN1::AbstractData::create( &nullErrorCorrection::value_type::theInfo)));
}

inline bool NewATMVCCommand_aal_aal1_errorCorrection::nullErrorCorrection_isSelected() const
{ 
    return currentSelection() == nullErrorCorrection::id_; 
}

inline NewATMVCCommand_aal_aal1_errorCorrection::longInterleaver::reference NewATMVCCommand_aal_aal1_errorCorrection::select_longInterleaver ()
{
    return *static_cast<longInterleaver::pointer>(setSelection(longInterleaver::id_, ASN1::AbstractData::create( &longInterleaver::value_type::theInfo)));
}

inline bool NewATMVCCommand_aal_aal1_errorCorrection::longInterleaver_isSelected() const
{ 
    return currentSelection() == longInterleaver::id_; 
}

inline NewATMVCCommand_aal_aal1_errorCorrection::shortInterleaver::reference NewATMVCCommand_aal_aal1_errorCorrection::select_shortInterleaver ()
{
    return *static_cast<shortInterleaver::pointer>(setSelection(shortInterleaver::id_, ASN1::AbstractData::create( &shortInterleaver::value_type::theInfo)));
}

inline bool NewATMVCCommand_aal_aal1_errorCorrection::shortInterleaver_isSelected() const
{ 
    return currentSelection() == shortInterleaver::id_; 
}

inline NewATMVCCommand_aal_aal1_errorCorrection::errorCorrectionOnly::reference NewATMVCCommand_aal_aal1_errorCorrection::select_errorCorrectionOnly ()
{
    return *static_cast<errorCorrectionOnly::pointer>(setSelection(errorCorrectionOnly::id_, ASN1::AbstractData::create( &errorCorrectionOnly::value_type::theInfo)));
}

inline bool NewATMVCCommand_aal_aal1_errorCorrection::errorCorrectionOnly_isSelected() const
{ 
    return currentSelection() == errorCorrectionOnly::id_; 
}

inline NewATMVCCommand_aal_aal1_errorCorrection::NewATMVCCommand_aal_aal1_errorCorrection(nullErrorCorrection::Id id, nullErrorCorrection::const_reference value)
  : Inherited(&theInfo, id, new nullErrorCorrection::value_type(value) )
{ }

inline NewATMVCCommand_aal_aal1_errorCorrection::NewATMVCCommand_aal_aal1_errorCorrection(longInterleaver::Id id, longInterleaver::const_reference value)
  : Inherited(&theInfo, id, new longInterleaver::value_type(value) )
{ }

inline NewATMVCCommand_aal_aal1_errorCorrection::NewATMVCCommand_aal_aal1_errorCorrection(shortInterleaver::Id id, shortInterleaver::const_reference value)
  : Inherited(&theInfo, id, new shortInterleaver::value_type(value) )
{ }

inline NewATMVCCommand_aal_aal1_errorCorrection::NewATMVCCommand_aal_aal1_errorCorrection(errorCorrectionOnly::Id id, errorCorrectionOnly::const_reference value)
  : Inherited(&theInfo, id, new errorCorrectionOnly::value_type(value) )
{ }


inline void NewATMVCCommand_aal_aal1_errorCorrection::swap(NewATMVCCommand_aal_aal1_errorCorrection & other)
{  Inherited::swap(other); }

inline NewATMVCCommand_aal_aal1_errorCorrection* NewATMVCCommand_aal_aal1_errorCorrection::clone() const
{ return static_cast<NewATMVCCommand_aal_aal1_errorCorrection*> (Inherited::clone()); }

inline bool NewATMVCCommand_aal_aal1_errorCorrection::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NewATMVCIndication_aal_aal1_clockRecovery::nullClockRecovery::reference NewATMVCIndication_aal_aal1_clockRecovery::select_nullClockRecovery ()
{
    return *static_cast<nullClockRecovery::pointer>(setSelection(nullClockRecovery::id_, ASN1::AbstractData::create( &nullClockRecovery::value_type::theInfo)));
}

inline bool NewATMVCIndication_aal_aal1_clockRecovery::nullClockRecovery_isSelected() const
{ 
    return currentSelection() == nullClockRecovery::id_; 
}

inline NewATMVCIndication_aal_aal1_clockRecovery::srtsClockRecovery::reference NewATMVCIndication_aal_aal1_clockRecovery::select_srtsClockRecovery ()
{
    return *static_cast<srtsClockRecovery::pointer>(setSelection(srtsClockRecovery::id_, ASN1::AbstractData::create( &srtsClockRecovery::value_type::theInfo)));
}

inline bool NewATMVCIndication_aal_aal1_clockRecovery::srtsClockRecovery_isSelected() const
{ 
    return currentSelection() == srtsClockRecovery::id_; 
}

inline NewATMVCIndication_aal_aal1_clockRecovery::adaptiveClockRecovery::reference NewATMVCIndication_aal_aal1_clockRecovery::select_adaptiveClockRecovery ()
{
    return *static_cast<adaptiveClockRecovery::pointer>(setSelection(adaptiveClockRecovery::id_, ASN1::AbstractData::create( &adaptiveClockRecovery::value_type::theInfo)));
}

inline bool NewATMVCIndication_aal_aal1_clockRecovery::adaptiveClockRecovery_isSelected() const
{ 
    return currentSelection() == adaptiveClockRecovery::id_; 
}

inline NewATMVCIndication_aal_aal1_clockRecovery::NewATMVCIndication_aal_aal1_clockRecovery(nullClockRecovery::Id id, nullClockRecovery::const_reference value)
  : Inherited(&theInfo, id, new nullClockRecovery::value_type(value) )
{ }

inline NewATMVCIndication_aal_aal1_clockRecovery::NewATMVCIndication_aal_aal1_clockRecovery(srtsClockRecovery::Id id, srtsClockRecovery::const_reference value)
  : Inherited(&theInfo, id, new srtsClockRecovery::value_type(value) )
{ }

inline NewATMVCIndication_aal_aal1_clockRecovery::NewATMVCIndication_aal_aal1_clockRecovery(adaptiveClockRecovery::Id id, adaptiveClockRecovery::const_reference value)
  : Inherited(&theInfo, id, new adaptiveClockRecovery::value_type(value) )
{ }


inline void NewATMVCIndication_aal_aal1_clockRecovery::swap(NewATMVCIndication_aal_aal1_clockRecovery & other)
{  Inherited::swap(other); }

inline NewATMVCIndication_aal_aal1_clockRecovery* NewATMVCIndication_aal_aal1_clockRecovery::clone() const
{ return static_cast<NewATMVCIndication_aal_aal1_clockRecovery*> (Inherited::clone()); }

inline bool NewATMVCIndication_aal_aal1_clockRecovery::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NewATMVCIndication_aal_aal1_errorCorrection::nullErrorCorrection::reference NewATMVCIndication_aal_aal1_errorCorrection::select_nullErrorCorrection ()
{
    return *static_cast<nullErrorCorrection::pointer>(setSelection(nullErrorCorrection::id_, ASN1::AbstractData::create( &nullErrorCorrection::value_type::theInfo)));
}

inline bool NewATMVCIndication_aal_aal1_errorCorrection::nullErrorCorrection_isSelected() const
{ 
    return currentSelection() == nullErrorCorrection::id_; 
}

inline NewATMVCIndication_aal_aal1_errorCorrection::longInterleaver::reference NewATMVCIndication_aal_aal1_errorCorrection::select_longInterleaver ()
{
    return *static_cast<longInterleaver::pointer>(setSelection(longInterleaver::id_, ASN1::AbstractData::create( &longInterleaver::value_type::theInfo)));
}

inline bool NewATMVCIndication_aal_aal1_errorCorrection::longInterleaver_isSelected() const
{ 
    return currentSelection() == longInterleaver::id_; 
}

inline NewATMVCIndication_aal_aal1_errorCorrection::shortInterleaver::reference NewATMVCIndication_aal_aal1_errorCorrection::select_shortInterleaver ()
{
    return *static_cast<shortInterleaver::pointer>(setSelection(shortInterleaver::id_, ASN1::AbstractData::create( &shortInterleaver::value_type::theInfo)));
}

inline bool NewATMVCIndication_aal_aal1_errorCorrection::shortInterleaver_isSelected() const
{ 
    return currentSelection() == shortInterleaver::id_; 
}

inline NewATMVCIndication_aal_aal1_errorCorrection::errorCorrectionOnly::reference NewATMVCIndication_aal_aal1_errorCorrection::select_errorCorrectionOnly ()
{
    return *static_cast<errorCorrectionOnly::pointer>(setSelection(errorCorrectionOnly::id_, ASN1::AbstractData::create( &errorCorrectionOnly::value_type::theInfo)));
}

inline bool NewATMVCIndication_aal_aal1_errorCorrection::errorCorrectionOnly_isSelected() const
{ 
    return currentSelection() == errorCorrectionOnly::id_; 
}

inline NewATMVCIndication_aal_aal1_errorCorrection::NewATMVCIndication_aal_aal1_errorCorrection(nullErrorCorrection::Id id, nullErrorCorrection::const_reference value)
  : Inherited(&theInfo, id, new nullErrorCorrection::value_type(value) )
{ }

inline NewATMVCIndication_aal_aal1_errorCorrection::NewATMVCIndication_aal_aal1_errorCorrection(longInterleaver::Id id, longInterleaver::const_reference value)
  : Inherited(&theInfo, id, new longInterleaver::value_type(value) )
{ }

inline NewATMVCIndication_aal_aal1_errorCorrection::NewATMVCIndication_aal_aal1_errorCorrection(shortInterleaver::Id id, shortInterleaver::const_reference value)
  : Inherited(&theInfo, id, new shortInterleaver::value_type(value) )
{ }

inline NewATMVCIndication_aal_aal1_errorCorrection::NewATMVCIndication_aal_aal1_errorCorrection(errorCorrectionOnly::Id id, errorCorrectionOnly::const_reference value)
  : Inherited(&theInfo, id, new errorCorrectionOnly::value_type(value) )
{ }


inline void NewATMVCIndication_aal_aal1_errorCorrection::swap(NewATMVCIndication_aal_aal1_errorCorrection & other)
{  Inherited::swap(other); }

inline NewATMVCIndication_aal_aal1_errorCorrection* NewATMVCIndication_aal_aal1_errorCorrection::clone() const
{ return static_cast<NewATMVCIndication_aal_aal1_errorCorrection*> (Inherited::clone()); }

inline bool NewATMVCIndication_aal_aal1_errorCorrection::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DepFECData_rfc2733_mode_separateStream_differentPort::protectedSessionID::const_reference DepFECData_rfc2733_mode_separateStream_differentPort::get_protectedSessionID () const
{ return *static_cast<protectedSessionID::const_pointer>(fields[0]);}

inline DepFECData_rfc2733_mode_separateStream_differentPort::protectedSessionID::reference DepFECData_rfc2733_mode_separateStream_differentPort::ref_protectedSessionID ()
{ return *static_cast<protectedSessionID::pointer>(fields[0]);}

inline DepFECData_rfc2733_mode_separateStream_differentPort::protectedSessionID::reference DepFECData_rfc2733_mode_separateStream_differentPort::set_protectedSessionID ()
{ return *static_cast<protectedSessionID::pointer>(fields[0]);}

inline DepFECData_rfc2733_mode_separateStream_differentPort::protectedSessionID::reference DepFECData_rfc2733_mode_separateStream_differentPort::set_protectedSessionID (protectedSessionID::value_type::int_type value)
{ return *static_cast<protectedSessionID::pointer>(fields[0]) = value ;}

inline DepFECData_rfc2733_mode_separateStream_differentPort::protectedPayloadType::const_reference DepFECData_rfc2733_mode_separateStream_differentPort::get_protectedPayloadType () const
{
  assert(hasOptionalField(e_protectedPayloadType));
  return *static_cast<protectedPayloadType::const_pointer>(fields[1]);
}

inline DepFECData_rfc2733_mode_separateStream_differentPort::protectedPayloadType::reference DepFECData_rfc2733_mode_separateStream_differentPort::ref_protectedPayloadType ()
{
  assert(hasOptionalField(e_protectedPayloadType));
  return *static_cast<protectedPayloadType::pointer>(fields[1]);
}

inline DepFECData_rfc2733_mode_separateStream_differentPort::protectedPayloadType::reference DepFECData_rfc2733_mode_separateStream_differentPort::set_protectedPayloadType ()
{
  includeOptionalField( e_protectedPayloadType, 1);
  return *static_cast<protectedPayloadType::pointer>(fields[1]);
}

inline DepFECData_rfc2733_mode_separateStream_differentPort::protectedPayloadType::reference DepFECData_rfc2733_mode_separateStream_differentPort::set_protectedPayloadType (protectedPayloadType::value_type::int_type value)
{
  includeOptionalField( e_protectedPayloadType, 1);
  return *static_cast<protectedPayloadType::pointer>(fields[1]) = value;
}

inline void DepFECData_rfc2733_mode_separateStream_differentPort::omit_protectedPayloadType ()
{ removeOptionalField( e_protectedPayloadType); }

inline bool DepFECData_rfc2733_mode_separateStream_differentPort::protectedPayloadType_isPresent () const
{ return hasOptionalField( e_protectedPayloadType); }

inline void DepFECData_rfc2733_mode_separateStream_differentPort::swap(DepFECData_rfc2733_mode_separateStream_differentPort& other)
{ Inherited::swap(other); }

inline DepFECData_rfc2733_mode_separateStream_differentPort* DepFECData_rfc2733_mode_separateStream_differentPort::clone() const
{ return static_cast<DepFECData_rfc2733_mode_separateStream_differentPort*> (Inherited::clone()); }

inline DepFECData_rfc2733_mode_separateStream_samePort::protectedPayloadType::const_reference DepFECData_rfc2733_mode_separateStream_samePort::get_protectedPayloadType () const
{ return *static_cast<protectedPayloadType::const_pointer>(fields[0]);}

inline DepFECData_rfc2733_mode_separateStream_samePort::protectedPayloadType::reference DepFECData_rfc2733_mode_separateStream_samePort::ref_protectedPayloadType ()
{ return *static_cast<protectedPayloadType::pointer>(fields[0]);}

inline DepFECData_rfc2733_mode_separateStream_samePort::protectedPayloadType::reference DepFECData_rfc2733_mode_separateStream_samePort::set_protectedPayloadType ()
{ return *static_cast<protectedPayloadType::pointer>(fields[0]);}

inline DepFECData_rfc2733_mode_separateStream_samePort::protectedPayloadType::reference DepFECData_rfc2733_mode_separateStream_samePort::set_protectedPayloadType (protectedPayloadType::value_type::int_type value)
{ return *static_cast<protectedPayloadType::pointer>(fields[0]) = value ;}

inline void DepFECData_rfc2733_mode_separateStream_samePort::swap(DepFECData_rfc2733_mode_separateStream_samePort& other)
{ Inherited::swap(other); }

inline DepFECData_rfc2733_mode_separateStream_samePort* DepFECData_rfc2733_mode_separateStream_samePort::clone() const
{ return static_cast<DepFECData_rfc2733_mode_separateStream_samePort*> (Inherited::clone()); }

inline NonStandardIdentifier::object::const_reference NonStandardIdentifier::get_object () const
{
    assert(currentSelection() ==object::id_);
    return *static_cast<object::const_pointer>(choice.get());
}

inline NonStandardIdentifier::object::reference NonStandardIdentifier::ref_object ()
{
    assert(currentSelection() ==object::id_);
    return *static_cast<object::pointer>(choice.get());
}

inline NonStandardIdentifier::object::reference NonStandardIdentifier::select_object ()
{
    return *static_cast<object::pointer>(setSelection(object::id_, ASN1::AbstractData::create( &object::value_type::theInfo)));
}

inline NonStandardIdentifier::object::reference NonStandardIdentifier::select_object (NonStandardIdentifier::object::const_reference value)
{
    return select_object() = value;
}

inline bool NonStandardIdentifier::object_isSelected() const
{ 
    return currentSelection() == object::id_; 
}

inline NonStandardIdentifier::h221NonStandard::const_reference NonStandardIdentifier::get_h221NonStandard () const
{
    assert(currentSelection() ==h221NonStandard::id_);
    return *static_cast<h221NonStandard::const_pointer>(choice.get());
}

inline NonStandardIdentifier::h221NonStandard::reference NonStandardIdentifier::ref_h221NonStandard ()
{
    assert(currentSelection() ==h221NonStandard::id_);
    return *static_cast<h221NonStandard::pointer>(choice.get());
}

inline NonStandardIdentifier::h221NonStandard::reference NonStandardIdentifier::select_h221NonStandard ()
{
    return *static_cast<h221NonStandard::pointer>(setSelection(h221NonStandard::id_, ASN1::AbstractData::create( &h221NonStandard::value_type::theInfo)));
}

inline NonStandardIdentifier::h221NonStandard::reference NonStandardIdentifier::select_h221NonStandard (NonStandardIdentifier::h221NonStandard::const_reference value)
{
    return select_h221NonStandard() = value;
}

inline bool NonStandardIdentifier::h221NonStandard_isSelected() const
{ 
    return currentSelection() == h221NonStandard::id_; 
}

inline NonStandardIdentifier::NonStandardIdentifier(object::Id id, object::const_reference value)
  : Inherited(&theInfo, id, new object::value_type(value) )
{ }

inline NonStandardIdentifier::NonStandardIdentifier(h221NonStandard::Id id, h221NonStandard::const_reference value)
  : Inherited(&theInfo, id, new h221NonStandard::value_type(value) )
{ }


inline void NonStandardIdentifier::swap(NonStandardIdentifier & other)
{  Inherited::swap(other); }

inline NonStandardIdentifier* NonStandardIdentifier::clone() const
{ return static_cast<NonStandardIdentifier*> (Inherited::clone()); }

inline bool NonStandardIdentifier::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MasterSlaveDeterminationAck::decision::const_reference MasterSlaveDeterminationAck::get_decision () const
{ return *static_cast<decision::const_pointer>(fields[0]);}

inline MasterSlaveDeterminationAck::decision::reference MasterSlaveDeterminationAck::ref_decision ()
{ return *static_cast<decision::pointer>(fields[0]);}

inline MasterSlaveDeterminationAck::decision::reference MasterSlaveDeterminationAck::set_decision ()
{ return *static_cast<decision::pointer>(fields[0]);}

inline MasterSlaveDeterminationAck::decision::reference MasterSlaveDeterminationAck::set_decision (decision::const_reference value)
{ return *static_cast<decision::pointer>(fields[0]) = value ;}

inline void MasterSlaveDeterminationAck::swap(MasterSlaveDeterminationAck& other)
{ Inherited::swap(other); }

inline MasterSlaveDeterminationAck* MasterSlaveDeterminationAck::clone() const
{ return static_cast<MasterSlaveDeterminationAck*> (Inherited::clone()); }

inline MasterSlaveDeterminationReject::cause::const_reference MasterSlaveDeterminationReject::get_cause () const
{ return *static_cast<cause::const_pointer>(fields[0]);}

inline MasterSlaveDeterminationReject::cause::reference MasterSlaveDeterminationReject::ref_cause ()
{ return *static_cast<cause::pointer>(fields[0]);}

inline MasterSlaveDeterminationReject::cause::reference MasterSlaveDeterminationReject::set_cause ()
{ return *static_cast<cause::pointer>(fields[0]);}

inline MasterSlaveDeterminationReject::cause::reference MasterSlaveDeterminationReject::set_cause (cause::const_reference value)
{ return *static_cast<cause::pointer>(fields[0]) = value ;}

inline void MasterSlaveDeterminationReject::swap(MasterSlaveDeterminationReject& other)
{ Inherited::swap(other); }

inline MasterSlaveDeterminationReject* MasterSlaveDeterminationReject::clone() const
{ return static_cast<MasterSlaveDeterminationReject*> (Inherited::clone()); }

inline V76Capability::suspendResumeCapabilitywAddress::const_reference V76Capability::get_suspendResumeCapabilitywAddress () const
{ return *static_cast<suspendResumeCapabilitywAddress::const_pointer>(fields[0]);}

inline V76Capability::suspendResumeCapabilitywAddress::reference V76Capability::ref_suspendResumeCapabilitywAddress ()
{ return *static_cast<suspendResumeCapabilitywAddress::pointer>(fields[0]);}

inline V76Capability::suspendResumeCapabilitywAddress::reference V76Capability::set_suspendResumeCapabilitywAddress ()
{ return *static_cast<suspendResumeCapabilitywAddress::pointer>(fields[0]);}

inline V76Capability::suspendResumeCapabilitywAddress::reference V76Capability::set_suspendResumeCapabilitywAddress (bool value)
{ return *static_cast<suspendResumeCapabilitywAddress::pointer>(fields[0]) = value ;}

inline V76Capability::suspendResumeCapabilitywoAddress::const_reference V76Capability::get_suspendResumeCapabilitywoAddress () const
{ return *static_cast<suspendResumeCapabilitywoAddress::const_pointer>(fields[1]);}

inline V76Capability::suspendResumeCapabilitywoAddress::reference V76Capability::ref_suspendResumeCapabilitywoAddress ()
{ return *static_cast<suspendResumeCapabilitywoAddress::pointer>(fields[1]);}

inline V76Capability::suspendResumeCapabilitywoAddress::reference V76Capability::set_suspendResumeCapabilitywoAddress ()
{ return *static_cast<suspendResumeCapabilitywoAddress::pointer>(fields[1]);}

inline V76Capability::suspendResumeCapabilitywoAddress::reference V76Capability::set_suspendResumeCapabilitywoAddress (bool value)
{ return *static_cast<suspendResumeCapabilitywoAddress::pointer>(fields[1]) = value ;}

inline V76Capability::rejCapability::const_reference V76Capability::get_rejCapability () const
{ return *static_cast<rejCapability::const_pointer>(fields[2]);}

inline V76Capability::rejCapability::reference V76Capability::ref_rejCapability ()
{ return *static_cast<rejCapability::pointer>(fields[2]);}

inline V76Capability::rejCapability::reference V76Capability::set_rejCapability ()
{ return *static_cast<rejCapability::pointer>(fields[2]);}

inline V76Capability::rejCapability::reference V76Capability::set_rejCapability (bool value)
{ return *static_cast<rejCapability::pointer>(fields[2]) = value ;}

inline V76Capability::sREJCapability::const_reference V76Capability::get_sREJCapability () const
{ return *static_cast<sREJCapability::const_pointer>(fields[3]);}

inline V76Capability::sREJCapability::reference V76Capability::ref_sREJCapability ()
{ return *static_cast<sREJCapability::pointer>(fields[3]);}

inline V76Capability::sREJCapability::reference V76Capability::set_sREJCapability ()
{ return *static_cast<sREJCapability::pointer>(fields[3]);}

inline V76Capability::sREJCapability::reference V76Capability::set_sREJCapability (bool value)
{ return *static_cast<sREJCapability::pointer>(fields[3]) = value ;}

inline V76Capability::mREJCapability::const_reference V76Capability::get_mREJCapability () const
{ return *static_cast<mREJCapability::const_pointer>(fields[4]);}

inline V76Capability::mREJCapability::reference V76Capability::ref_mREJCapability ()
{ return *static_cast<mREJCapability::pointer>(fields[4]);}

inline V76Capability::mREJCapability::reference V76Capability::set_mREJCapability ()
{ return *static_cast<mREJCapability::pointer>(fields[4]);}

inline V76Capability::mREJCapability::reference V76Capability::set_mREJCapability (bool value)
{ return *static_cast<mREJCapability::pointer>(fields[4]) = value ;}

inline V76Capability::crc8bitCapability::const_reference V76Capability::get_crc8bitCapability () const
{ return *static_cast<crc8bitCapability::const_pointer>(fields[5]);}

inline V76Capability::crc8bitCapability::reference V76Capability::ref_crc8bitCapability ()
{ return *static_cast<crc8bitCapability::pointer>(fields[5]);}

inline V76Capability::crc8bitCapability::reference V76Capability::set_crc8bitCapability ()
{ return *static_cast<crc8bitCapability::pointer>(fields[5]);}

inline V76Capability::crc8bitCapability::reference V76Capability::set_crc8bitCapability (bool value)
{ return *static_cast<crc8bitCapability::pointer>(fields[5]) = value ;}

inline V76Capability::crc16bitCapability::const_reference V76Capability::get_crc16bitCapability () const
{ return *static_cast<crc16bitCapability::const_pointer>(fields[6]);}

inline V76Capability::crc16bitCapability::reference V76Capability::ref_crc16bitCapability ()
{ return *static_cast<crc16bitCapability::pointer>(fields[6]);}

inline V76Capability::crc16bitCapability::reference V76Capability::set_crc16bitCapability ()
{ return *static_cast<crc16bitCapability::pointer>(fields[6]);}

inline V76Capability::crc16bitCapability::reference V76Capability::set_crc16bitCapability (bool value)
{ return *static_cast<crc16bitCapability::pointer>(fields[6]) = value ;}

inline V76Capability::crc32bitCapability::const_reference V76Capability::get_crc32bitCapability () const
{ return *static_cast<crc32bitCapability::const_pointer>(fields[7]);}

inline V76Capability::crc32bitCapability::reference V76Capability::ref_crc32bitCapability ()
{ return *static_cast<crc32bitCapability::pointer>(fields[7]);}

inline V76Capability::crc32bitCapability::reference V76Capability::set_crc32bitCapability ()
{ return *static_cast<crc32bitCapability::pointer>(fields[7]);}

inline V76Capability::crc32bitCapability::reference V76Capability::set_crc32bitCapability (bool value)
{ return *static_cast<crc32bitCapability::pointer>(fields[7]) = value ;}

inline V76Capability::uihCapability::const_reference V76Capability::get_uihCapability () const
{ return *static_cast<uihCapability::const_pointer>(fields[8]);}

inline V76Capability::uihCapability::reference V76Capability::ref_uihCapability ()
{ return *static_cast<uihCapability::pointer>(fields[8]);}

inline V76Capability::uihCapability::reference V76Capability::set_uihCapability ()
{ return *static_cast<uihCapability::pointer>(fields[8]);}

inline V76Capability::uihCapability::reference V76Capability::set_uihCapability (bool value)
{ return *static_cast<uihCapability::pointer>(fields[8]) = value ;}

inline V76Capability::numOfDLCS::const_reference V76Capability::get_numOfDLCS () const
{ return *static_cast<numOfDLCS::const_pointer>(fields[9]);}

inline V76Capability::numOfDLCS::reference V76Capability::ref_numOfDLCS ()
{ return *static_cast<numOfDLCS::pointer>(fields[9]);}

inline V76Capability::numOfDLCS::reference V76Capability::set_numOfDLCS ()
{ return *static_cast<numOfDLCS::pointer>(fields[9]);}

inline V76Capability::numOfDLCS::reference V76Capability::set_numOfDLCS (numOfDLCS::value_type::int_type value)
{ return *static_cast<numOfDLCS::pointer>(fields[9]) = value ;}

inline V76Capability::twoOctetAddressFieldCapability::const_reference V76Capability::get_twoOctetAddressFieldCapability () const
{ return *static_cast<twoOctetAddressFieldCapability::const_pointer>(fields[10]);}

inline V76Capability::twoOctetAddressFieldCapability::reference V76Capability::ref_twoOctetAddressFieldCapability ()
{ return *static_cast<twoOctetAddressFieldCapability::pointer>(fields[10]);}

inline V76Capability::twoOctetAddressFieldCapability::reference V76Capability::set_twoOctetAddressFieldCapability ()
{ return *static_cast<twoOctetAddressFieldCapability::pointer>(fields[10]);}

inline V76Capability::twoOctetAddressFieldCapability::reference V76Capability::set_twoOctetAddressFieldCapability (bool value)
{ return *static_cast<twoOctetAddressFieldCapability::pointer>(fields[10]) = value ;}

inline V76Capability::loopBackTestCapability::const_reference V76Capability::get_loopBackTestCapability () const
{ return *static_cast<loopBackTestCapability::const_pointer>(fields[11]);}

inline V76Capability::loopBackTestCapability::reference V76Capability::ref_loopBackTestCapability ()
{ return *static_cast<loopBackTestCapability::pointer>(fields[11]);}

inline V76Capability::loopBackTestCapability::reference V76Capability::set_loopBackTestCapability ()
{ return *static_cast<loopBackTestCapability::pointer>(fields[11]);}

inline V76Capability::loopBackTestCapability::reference V76Capability::set_loopBackTestCapability (bool value)
{ return *static_cast<loopBackTestCapability::pointer>(fields[11]) = value ;}

inline V76Capability::n401Capability::const_reference V76Capability::get_n401Capability () const
{ return *static_cast<n401Capability::const_pointer>(fields[12]);}

inline V76Capability::n401Capability::reference V76Capability::ref_n401Capability ()
{ return *static_cast<n401Capability::pointer>(fields[12]);}

inline V76Capability::n401Capability::reference V76Capability::set_n401Capability ()
{ return *static_cast<n401Capability::pointer>(fields[12]);}

inline V76Capability::n401Capability::reference V76Capability::set_n401Capability (n401Capability::value_type::int_type value)
{ return *static_cast<n401Capability::pointer>(fields[12]) = value ;}

inline V76Capability::maxWindowSizeCapability::const_reference V76Capability::get_maxWindowSizeCapability () const
{ return *static_cast<maxWindowSizeCapability::const_pointer>(fields[13]);}

inline V76Capability::maxWindowSizeCapability::reference V76Capability::ref_maxWindowSizeCapability ()
{ return *static_cast<maxWindowSizeCapability::pointer>(fields[13]);}

inline V76Capability::maxWindowSizeCapability::reference V76Capability::set_maxWindowSizeCapability ()
{ return *static_cast<maxWindowSizeCapability::pointer>(fields[13]);}

inline V76Capability::maxWindowSizeCapability::reference V76Capability::set_maxWindowSizeCapability (maxWindowSizeCapability::value_type::int_type value)
{ return *static_cast<maxWindowSizeCapability::pointer>(fields[13]) = value ;}

inline V76Capability::v75Capability::const_reference V76Capability::get_v75Capability () const
{ return *static_cast<v75Capability::const_pointer>(fields[14]);}

inline V76Capability::v75Capability::reference V76Capability::ref_v75Capability ()
{ return *static_cast<v75Capability::pointer>(fields[14]);}

inline V76Capability::v75Capability::reference V76Capability::set_v75Capability ()
{ return *static_cast<v75Capability::pointer>(fields[14]);}

inline V76Capability::v75Capability::reference V76Capability::set_v75Capability (v75Capability::const_reference value)
{ return *static_cast<v75Capability::pointer>(fields[14]) = value ;}

inline void V76Capability::swap(V76Capability& other)
{ Inherited::swap(other); }

inline V76Capability* V76Capability::clone() const
{ return static_cast<V76Capability*> (Inherited::clone()); }

inline RSVPParameters::qosMode::const_reference RSVPParameters::get_qosMode () const
{
  assert(hasOptionalField(e_qosMode));
  return *static_cast<qosMode::const_pointer>(fields[0]);
}

inline RSVPParameters::qosMode::reference RSVPParameters::ref_qosMode ()
{
  assert(hasOptionalField(e_qosMode));
  return *static_cast<qosMode::pointer>(fields[0]);
}

inline RSVPParameters::qosMode::reference RSVPParameters::set_qosMode ()
{
  includeOptionalField( e_qosMode, 0);
  return *static_cast<qosMode::pointer>(fields[0]);
}

inline RSVPParameters::qosMode::reference RSVPParameters::set_qosMode (qosMode::const_reference value)
{
  includeOptionalField( e_qosMode, 0);
  return *static_cast<qosMode::pointer>(fields[0]) = value;
}

inline void RSVPParameters::omit_qosMode ()
{ removeOptionalField( e_qosMode); }

inline bool RSVPParameters::qosMode_isPresent () const
{ return hasOptionalField( e_qosMode); }

inline RSVPParameters::tokenRate::const_reference RSVPParameters::get_tokenRate () const
{
  assert(hasOptionalField(e_tokenRate));
  return *static_cast<tokenRate::const_pointer>(fields[1]);
}

inline RSVPParameters::tokenRate::reference RSVPParameters::ref_tokenRate ()
{
  assert(hasOptionalField(e_tokenRate));
  return *static_cast<tokenRate::pointer>(fields[1]);
}

inline RSVPParameters::tokenRate::reference RSVPParameters::set_tokenRate ()
{
  includeOptionalField( e_tokenRate, 1);
  return *static_cast<tokenRate::pointer>(fields[1]);
}

inline RSVPParameters::tokenRate::reference RSVPParameters::set_tokenRate (tokenRate::value_type::int_type value)
{
  includeOptionalField( e_tokenRate, 1);
  return *static_cast<tokenRate::pointer>(fields[1]) = value;
}

inline void RSVPParameters::omit_tokenRate ()
{ removeOptionalField( e_tokenRate); }

inline bool RSVPParameters::tokenRate_isPresent () const
{ return hasOptionalField( e_tokenRate); }

inline RSVPParameters::bucketSize::const_reference RSVPParameters::get_bucketSize () const
{
  assert(hasOptionalField(e_bucketSize));
  return *static_cast<bucketSize::const_pointer>(fields[2]);
}

inline RSVPParameters::bucketSize::reference RSVPParameters::ref_bucketSize ()
{
  assert(hasOptionalField(e_bucketSize));
  return *static_cast<bucketSize::pointer>(fields[2]);
}

inline RSVPParameters::bucketSize::reference RSVPParameters::set_bucketSize ()
{
  includeOptionalField( e_bucketSize, 2);
  return *static_cast<bucketSize::pointer>(fields[2]);
}

inline RSVPParameters::bucketSize::reference RSVPParameters::set_bucketSize (bucketSize::value_type::int_type value)
{
  includeOptionalField( e_bucketSize, 2);
  return *static_cast<bucketSize::pointer>(fields[2]) = value;
}

inline void RSVPParameters::omit_bucketSize ()
{ removeOptionalField( e_bucketSize); }

inline bool RSVPParameters::bucketSize_isPresent () const
{ return hasOptionalField( e_bucketSize); }

inline RSVPParameters::peakRate::const_reference RSVPParameters::get_peakRate () const
{
  assert(hasOptionalField(e_peakRate));
  return *static_cast<peakRate::const_pointer>(fields[3]);
}

inline RSVPParameters::peakRate::reference RSVPParameters::ref_peakRate ()
{
  assert(hasOptionalField(e_peakRate));
  return *static_cast<peakRate::pointer>(fields[3]);
}

inline RSVPParameters::peakRate::reference RSVPParameters::set_peakRate ()
{
  includeOptionalField( e_peakRate, 3);
  return *static_cast<peakRate::pointer>(fields[3]);
}

inline RSVPParameters::peakRate::reference RSVPParameters::set_peakRate (peakRate::value_type::int_type value)
{
  includeOptionalField( e_peakRate, 3);
  return *static_cast<peakRate::pointer>(fields[3]) = value;
}

inline void RSVPParameters::omit_peakRate ()
{ removeOptionalField( e_peakRate); }

inline bool RSVPParameters::peakRate_isPresent () const
{ return hasOptionalField( e_peakRate); }

inline RSVPParameters::minPoliced::const_reference RSVPParameters::get_minPoliced () const
{
  assert(hasOptionalField(e_minPoliced));
  return *static_cast<minPoliced::const_pointer>(fields[4]);
}

inline RSVPParameters::minPoliced::reference RSVPParameters::ref_minPoliced ()
{
  assert(hasOptionalField(e_minPoliced));
  return *static_cast<minPoliced::pointer>(fields[4]);
}

inline RSVPParameters::minPoliced::reference RSVPParameters::set_minPoliced ()
{
  includeOptionalField( e_minPoliced, 4);
  return *static_cast<minPoliced::pointer>(fields[4]);
}

inline RSVPParameters::minPoliced::reference RSVPParameters::set_minPoliced (minPoliced::value_type::int_type value)
{
  includeOptionalField( e_minPoliced, 4);
  return *static_cast<minPoliced::pointer>(fields[4]) = value;
}

inline void RSVPParameters::omit_minPoliced ()
{ removeOptionalField( e_minPoliced); }

inline bool RSVPParameters::minPoliced_isPresent () const
{ return hasOptionalField( e_minPoliced); }

inline RSVPParameters::maxPktSize::const_reference RSVPParameters::get_maxPktSize () const
{
  assert(hasOptionalField(e_maxPktSize));
  return *static_cast<maxPktSize::const_pointer>(fields[5]);
}

inline RSVPParameters::maxPktSize::reference RSVPParameters::ref_maxPktSize ()
{
  assert(hasOptionalField(e_maxPktSize));
  return *static_cast<maxPktSize::pointer>(fields[5]);
}

inline RSVPParameters::maxPktSize::reference RSVPParameters::set_maxPktSize ()
{
  includeOptionalField( e_maxPktSize, 5);
  return *static_cast<maxPktSize::pointer>(fields[5]);
}

inline RSVPParameters::maxPktSize::reference RSVPParameters::set_maxPktSize (maxPktSize::value_type::int_type value)
{
  includeOptionalField( e_maxPktSize, 5);
  return *static_cast<maxPktSize::pointer>(fields[5]) = value;
}

inline void RSVPParameters::omit_maxPktSize ()
{ removeOptionalField( e_maxPktSize); }

inline bool RSVPParameters::maxPktSize_isPresent () const
{ return hasOptionalField( e_maxPktSize); }

inline void RSVPParameters::swap(RSVPParameters& other)
{ Inherited::swap(other); }

inline RSVPParameters* RSVPParameters::clone() const
{ return static_cast<RSVPParameters*> (Inherited::clone()); }

inline MediaTransportType::ip_UDP::reference MediaTransportType::select_ip_UDP ()
{
    return *static_cast<ip_UDP::pointer>(setSelection(ip_UDP::id_, ASN1::AbstractData::create( &ip_UDP::value_type::theInfo)));
}

inline bool MediaTransportType::ip_UDP_isSelected() const
{ 
    return currentSelection() == ip_UDP::id_; 
}

inline MediaTransportType::ip_TCP::reference MediaTransportType::select_ip_TCP ()
{
    return *static_cast<ip_TCP::pointer>(setSelection(ip_TCP::id_, ASN1::AbstractData::create( &ip_TCP::value_type::theInfo)));
}

inline bool MediaTransportType::ip_TCP_isSelected() const
{ 
    return currentSelection() == ip_TCP::id_; 
}

inline MediaTransportType::atm_AAL5_UNIDIR::reference MediaTransportType::select_atm_AAL5_UNIDIR ()
{
    return *static_cast<atm_AAL5_UNIDIR::pointer>(setSelection(atm_AAL5_UNIDIR::id_, ASN1::AbstractData::create( &atm_AAL5_UNIDIR::value_type::theInfo)));
}

inline bool MediaTransportType::atm_AAL5_UNIDIR_isSelected() const
{ 
    return currentSelection() == atm_AAL5_UNIDIR::id_; 
}

inline MediaTransportType::atm_AAL5_BIDIR::reference MediaTransportType::select_atm_AAL5_BIDIR ()
{
    return *static_cast<atm_AAL5_BIDIR::pointer>(setSelection(atm_AAL5_BIDIR::id_, ASN1::AbstractData::create( &atm_AAL5_BIDIR::value_type::theInfo)));
}

inline bool MediaTransportType::atm_AAL5_BIDIR_isSelected() const
{ 
    return currentSelection() == atm_AAL5_BIDIR::id_; 
}

inline MediaTransportType::atm_AAL5_compressed::const_reference MediaTransportType::get_atm_AAL5_compressed () const
{
    assert(currentSelection() ==atm_AAL5_compressed::id_);
    return *static_cast<atm_AAL5_compressed::const_pointer>(choice.get());
}

inline MediaTransportType::atm_AAL5_compressed::reference MediaTransportType::ref_atm_AAL5_compressed ()
{
    assert(currentSelection() ==atm_AAL5_compressed::id_);
    return *static_cast<atm_AAL5_compressed::pointer>(choice.get());
}

inline MediaTransportType::atm_AAL5_compressed::reference MediaTransportType::select_atm_AAL5_compressed ()
{
    return *static_cast<atm_AAL5_compressed::pointer>(setSelection(atm_AAL5_compressed::id_, ASN1::AbstractData::create( &atm_AAL5_compressed::value_type::theInfo)));
}

inline MediaTransportType::atm_AAL5_compressed::reference MediaTransportType::select_atm_AAL5_compressed (MediaTransportType::atm_AAL5_compressed::const_reference value)
{
    return select_atm_AAL5_compressed() = value;
}

inline bool MediaTransportType::atm_AAL5_compressed_isSelected() const
{ 
    return currentSelection() == atm_AAL5_compressed::id_; 
}

inline MediaTransportType::MediaTransportType(ip_UDP::Id id, ip_UDP::const_reference value)
  : Inherited(&theInfo, id, new ip_UDP::value_type(value) )
{ }

inline MediaTransportType::MediaTransportType(ip_TCP::Id id, ip_TCP::const_reference value)
  : Inherited(&theInfo, id, new ip_TCP::value_type(value) )
{ }

inline MediaTransportType::MediaTransportType(atm_AAL5_UNIDIR::Id id, atm_AAL5_UNIDIR::const_reference value)
  : Inherited(&theInfo, id, new atm_AAL5_UNIDIR::value_type(value) )
{ }

inline MediaTransportType::MediaTransportType(atm_AAL5_BIDIR::Id id, atm_AAL5_BIDIR::const_reference value)
  : Inherited(&theInfo, id, new atm_AAL5_BIDIR::value_type(value) )
{ }

inline MediaTransportType::MediaTransportType(atm_AAL5_compressed::Id id, atm_AAL5_compressed::const_reference value)
  : Inherited(&theInfo, id, new atm_AAL5_compressed::value_type(value) )
{ }


inline void MediaTransportType::swap(MediaTransportType & other)
{  Inherited::swap(other); }

inline MediaTransportType* MediaTransportType::clone() const
{ return static_cast<MediaTransportType*> (Inherited::clone()); }

inline bool MediaTransportType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MediaChannelCapability::mediaTransport::const_reference MediaChannelCapability::get_mediaTransport () const
{
  assert(hasOptionalField(e_mediaTransport));
  return *static_cast<mediaTransport::const_pointer>(fields[0]);
}

inline MediaChannelCapability::mediaTransport::reference MediaChannelCapability::ref_mediaTransport ()
{
  assert(hasOptionalField(e_mediaTransport));
  return *static_cast<mediaTransport::pointer>(fields[0]);
}

inline MediaChannelCapability::mediaTransport::reference MediaChannelCapability::set_mediaTransport ()
{
  includeOptionalField( e_mediaTransport, 0);
  return *static_cast<mediaTransport::pointer>(fields[0]);
}

inline MediaChannelCapability::mediaTransport::reference MediaChannelCapability::set_mediaTransport (mediaTransport::const_reference value)
{
  includeOptionalField( e_mediaTransport, 0);
  return *static_cast<mediaTransport::pointer>(fields[0]) = value;
}

inline void MediaChannelCapability::omit_mediaTransport ()
{ removeOptionalField( e_mediaTransport); }

inline bool MediaChannelCapability::mediaTransport_isPresent () const
{ return hasOptionalField( e_mediaTransport); }

inline void MediaChannelCapability::swap(MediaChannelCapability& other)
{ Inherited::swap(other); }

inline MediaChannelCapability* MediaChannelCapability::clone() const
{ return static_cast<MediaChannelCapability*> (Inherited::clone()); }

inline RTPH263VideoRedundancyFrameMapping::threadNumber::const_reference RTPH263VideoRedundancyFrameMapping::get_threadNumber () const
{ return *static_cast<threadNumber::const_pointer>(fields[0]);}

inline RTPH263VideoRedundancyFrameMapping::threadNumber::reference RTPH263VideoRedundancyFrameMapping::ref_threadNumber ()
{ return *static_cast<threadNumber::pointer>(fields[0]);}

inline RTPH263VideoRedundancyFrameMapping::threadNumber::reference RTPH263VideoRedundancyFrameMapping::set_threadNumber ()
{ return *static_cast<threadNumber::pointer>(fields[0]);}

inline RTPH263VideoRedundancyFrameMapping::threadNumber::reference RTPH263VideoRedundancyFrameMapping::set_threadNumber (threadNumber::value_type::int_type value)
{ return *static_cast<threadNumber::pointer>(fields[0]) = value ;}

inline RTPH263VideoRedundancyFrameMapping::frameSequence::const_reference RTPH263VideoRedundancyFrameMapping::get_frameSequence () const
{ return *static_cast<frameSequence::const_pointer>(fields[1]);}

inline RTPH263VideoRedundancyFrameMapping::frameSequence::reference RTPH263VideoRedundancyFrameMapping::ref_frameSequence ()
{ return *static_cast<frameSequence::pointer>(fields[1]);}

inline RTPH263VideoRedundancyFrameMapping::frameSequence::reference RTPH263VideoRedundancyFrameMapping::set_frameSequence ()
{ return *static_cast<frameSequence::pointer>(fields[1]);}

inline RTPH263VideoRedundancyFrameMapping::frameSequence::reference RTPH263VideoRedundancyFrameMapping::set_frameSequence (frameSequence::const_reference value)
{ return *static_cast<frameSequence::pointer>(fields[1]) = value ;}

inline void RTPH263VideoRedundancyFrameMapping::swap(RTPH263VideoRedundancyFrameMapping& other)
{ Inherited::swap(other); }

inline RTPH263VideoRedundancyFrameMapping* RTPH263VideoRedundancyFrameMapping::clone() const
{ return static_cast<RTPH263VideoRedundancyFrameMapping*> (Inherited::clone()); }

inline H263ModeComboFlags::unrestrictedVector::const_reference H263ModeComboFlags::get_unrestrictedVector () const
{ return *static_cast<unrestrictedVector::const_pointer>(fields[0]);}

inline H263ModeComboFlags::unrestrictedVector::reference H263ModeComboFlags::ref_unrestrictedVector ()
{ return *static_cast<unrestrictedVector::pointer>(fields[0]);}

inline H263ModeComboFlags::unrestrictedVector::reference H263ModeComboFlags::set_unrestrictedVector ()
{ return *static_cast<unrestrictedVector::pointer>(fields[0]);}

inline H263ModeComboFlags::unrestrictedVector::reference H263ModeComboFlags::set_unrestrictedVector (bool value)
{ return *static_cast<unrestrictedVector::pointer>(fields[0]) = value ;}

inline H263ModeComboFlags::arithmeticCoding::const_reference H263ModeComboFlags::get_arithmeticCoding () const
{ return *static_cast<arithmeticCoding::const_pointer>(fields[1]);}

inline H263ModeComboFlags::arithmeticCoding::reference H263ModeComboFlags::ref_arithmeticCoding ()
{ return *static_cast<arithmeticCoding::pointer>(fields[1]);}

inline H263ModeComboFlags::arithmeticCoding::reference H263ModeComboFlags::set_arithmeticCoding ()
{ return *static_cast<arithmeticCoding::pointer>(fields[1]);}

inline H263ModeComboFlags::arithmeticCoding::reference H263ModeComboFlags::set_arithmeticCoding (bool value)
{ return *static_cast<arithmeticCoding::pointer>(fields[1]) = value ;}

inline H263ModeComboFlags::advancedPrediction::const_reference H263ModeComboFlags::get_advancedPrediction () const
{ return *static_cast<advancedPrediction::const_pointer>(fields[2]);}

inline H263ModeComboFlags::advancedPrediction::reference H263ModeComboFlags::ref_advancedPrediction ()
{ return *static_cast<advancedPrediction::pointer>(fields[2]);}

inline H263ModeComboFlags::advancedPrediction::reference H263ModeComboFlags::set_advancedPrediction ()
{ return *static_cast<advancedPrediction::pointer>(fields[2]);}

inline H263ModeComboFlags::advancedPrediction::reference H263ModeComboFlags::set_advancedPrediction (bool value)
{ return *static_cast<advancedPrediction::pointer>(fields[2]) = value ;}

inline H263ModeComboFlags::pbFrames::const_reference H263ModeComboFlags::get_pbFrames () const
{ return *static_cast<pbFrames::const_pointer>(fields[3]);}

inline H263ModeComboFlags::pbFrames::reference H263ModeComboFlags::ref_pbFrames ()
{ return *static_cast<pbFrames::pointer>(fields[3]);}

inline H263ModeComboFlags::pbFrames::reference H263ModeComboFlags::set_pbFrames ()
{ return *static_cast<pbFrames::pointer>(fields[3]);}

inline H263ModeComboFlags::pbFrames::reference H263ModeComboFlags::set_pbFrames (bool value)
{ return *static_cast<pbFrames::pointer>(fields[3]) = value ;}

inline H263ModeComboFlags::advancedIntraCodingMode::const_reference H263ModeComboFlags::get_advancedIntraCodingMode () const
{ return *static_cast<advancedIntraCodingMode::const_pointer>(fields[4]);}

inline H263ModeComboFlags::advancedIntraCodingMode::reference H263ModeComboFlags::ref_advancedIntraCodingMode ()
{ return *static_cast<advancedIntraCodingMode::pointer>(fields[4]);}

inline H263ModeComboFlags::advancedIntraCodingMode::reference H263ModeComboFlags::set_advancedIntraCodingMode ()
{ return *static_cast<advancedIntraCodingMode::pointer>(fields[4]);}

inline H263ModeComboFlags::advancedIntraCodingMode::reference H263ModeComboFlags::set_advancedIntraCodingMode (bool value)
{ return *static_cast<advancedIntraCodingMode::pointer>(fields[4]) = value ;}

inline H263ModeComboFlags::deblockingFilterMode::const_reference H263ModeComboFlags::get_deblockingFilterMode () const
{ return *static_cast<deblockingFilterMode::const_pointer>(fields[5]);}

inline H263ModeComboFlags::deblockingFilterMode::reference H263ModeComboFlags::ref_deblockingFilterMode ()
{ return *static_cast<deblockingFilterMode::pointer>(fields[5]);}

inline H263ModeComboFlags::deblockingFilterMode::reference H263ModeComboFlags::set_deblockingFilterMode ()
{ return *static_cast<deblockingFilterMode::pointer>(fields[5]);}

inline H263ModeComboFlags::deblockingFilterMode::reference H263ModeComboFlags::set_deblockingFilterMode (bool value)
{ return *static_cast<deblockingFilterMode::pointer>(fields[5]) = value ;}

inline H263ModeComboFlags::unlimitedMotionVectors::const_reference H263ModeComboFlags::get_unlimitedMotionVectors () const
{ return *static_cast<unlimitedMotionVectors::const_pointer>(fields[6]);}

inline H263ModeComboFlags::unlimitedMotionVectors::reference H263ModeComboFlags::ref_unlimitedMotionVectors ()
{ return *static_cast<unlimitedMotionVectors::pointer>(fields[6]);}

inline H263ModeComboFlags::unlimitedMotionVectors::reference H263ModeComboFlags::set_unlimitedMotionVectors ()
{ return *static_cast<unlimitedMotionVectors::pointer>(fields[6]);}

inline H263ModeComboFlags::unlimitedMotionVectors::reference H263ModeComboFlags::set_unlimitedMotionVectors (bool value)
{ return *static_cast<unlimitedMotionVectors::pointer>(fields[6]) = value ;}

inline H263ModeComboFlags::slicesInOrder_NonRect::const_reference H263ModeComboFlags::get_slicesInOrder_NonRect () const
{ return *static_cast<slicesInOrder_NonRect::const_pointer>(fields[7]);}

inline H263ModeComboFlags::slicesInOrder_NonRect::reference H263ModeComboFlags::ref_slicesInOrder_NonRect ()
{ return *static_cast<slicesInOrder_NonRect::pointer>(fields[7]);}

inline H263ModeComboFlags::slicesInOrder_NonRect::reference H263ModeComboFlags::set_slicesInOrder_NonRect ()
{ return *static_cast<slicesInOrder_NonRect::pointer>(fields[7]);}

inline H263ModeComboFlags::slicesInOrder_NonRect::reference H263ModeComboFlags::set_slicesInOrder_NonRect (bool value)
{ return *static_cast<slicesInOrder_NonRect::pointer>(fields[7]) = value ;}

inline H263ModeComboFlags::slicesInOrder_Rect::const_reference H263ModeComboFlags::get_slicesInOrder_Rect () const
{ return *static_cast<slicesInOrder_Rect::const_pointer>(fields[8]);}

inline H263ModeComboFlags::slicesInOrder_Rect::reference H263ModeComboFlags::ref_slicesInOrder_Rect ()
{ return *static_cast<slicesInOrder_Rect::pointer>(fields[8]);}

inline H263ModeComboFlags::slicesInOrder_Rect::reference H263ModeComboFlags::set_slicesInOrder_Rect ()
{ return *static_cast<slicesInOrder_Rect::pointer>(fields[8]);}

inline H263ModeComboFlags::slicesInOrder_Rect::reference H263ModeComboFlags::set_slicesInOrder_Rect (bool value)
{ return *static_cast<slicesInOrder_Rect::pointer>(fields[8]) = value ;}

inline H263ModeComboFlags::slicesNoOrder_NonRect::const_reference H263ModeComboFlags::get_slicesNoOrder_NonRect () const
{ return *static_cast<slicesNoOrder_NonRect::const_pointer>(fields[9]);}

inline H263ModeComboFlags::slicesNoOrder_NonRect::reference H263ModeComboFlags::ref_slicesNoOrder_NonRect ()
{ return *static_cast<slicesNoOrder_NonRect::pointer>(fields[9]);}

inline H263ModeComboFlags::slicesNoOrder_NonRect::reference H263ModeComboFlags::set_slicesNoOrder_NonRect ()
{ return *static_cast<slicesNoOrder_NonRect::pointer>(fields[9]);}

inline H263ModeComboFlags::slicesNoOrder_NonRect::reference H263ModeComboFlags::set_slicesNoOrder_NonRect (bool value)
{ return *static_cast<slicesNoOrder_NonRect::pointer>(fields[9]) = value ;}

inline H263ModeComboFlags::slicesNoOrder_Rect::const_reference H263ModeComboFlags::get_slicesNoOrder_Rect () const
{ return *static_cast<slicesNoOrder_Rect::const_pointer>(fields[10]);}

inline H263ModeComboFlags::slicesNoOrder_Rect::reference H263ModeComboFlags::ref_slicesNoOrder_Rect ()
{ return *static_cast<slicesNoOrder_Rect::pointer>(fields[10]);}

inline H263ModeComboFlags::slicesNoOrder_Rect::reference H263ModeComboFlags::set_slicesNoOrder_Rect ()
{ return *static_cast<slicesNoOrder_Rect::pointer>(fields[10]);}

inline H263ModeComboFlags::slicesNoOrder_Rect::reference H263ModeComboFlags::set_slicesNoOrder_Rect (bool value)
{ return *static_cast<slicesNoOrder_Rect::pointer>(fields[10]) = value ;}

inline H263ModeComboFlags::improvedPBFramesMode::const_reference H263ModeComboFlags::get_improvedPBFramesMode () const
{ return *static_cast<improvedPBFramesMode::const_pointer>(fields[11]);}

inline H263ModeComboFlags::improvedPBFramesMode::reference H263ModeComboFlags::ref_improvedPBFramesMode ()
{ return *static_cast<improvedPBFramesMode::pointer>(fields[11]);}

inline H263ModeComboFlags::improvedPBFramesMode::reference H263ModeComboFlags::set_improvedPBFramesMode ()
{ return *static_cast<improvedPBFramesMode::pointer>(fields[11]);}

inline H263ModeComboFlags::improvedPBFramesMode::reference H263ModeComboFlags::set_improvedPBFramesMode (bool value)
{ return *static_cast<improvedPBFramesMode::pointer>(fields[11]) = value ;}

inline H263ModeComboFlags::referencePicSelect::const_reference H263ModeComboFlags::get_referencePicSelect () const
{ return *static_cast<referencePicSelect::const_pointer>(fields[12]);}

inline H263ModeComboFlags::referencePicSelect::reference H263ModeComboFlags::ref_referencePicSelect ()
{ return *static_cast<referencePicSelect::pointer>(fields[12]);}

inline H263ModeComboFlags::referencePicSelect::reference H263ModeComboFlags::set_referencePicSelect ()
{ return *static_cast<referencePicSelect::pointer>(fields[12]);}

inline H263ModeComboFlags::referencePicSelect::reference H263ModeComboFlags::set_referencePicSelect (bool value)
{ return *static_cast<referencePicSelect::pointer>(fields[12]) = value ;}

inline H263ModeComboFlags::dynamicPictureResizingByFour::const_reference H263ModeComboFlags::get_dynamicPictureResizingByFour () const
{ return *static_cast<dynamicPictureResizingByFour::const_pointer>(fields[13]);}

inline H263ModeComboFlags::dynamicPictureResizingByFour::reference H263ModeComboFlags::ref_dynamicPictureResizingByFour ()
{ return *static_cast<dynamicPictureResizingByFour::pointer>(fields[13]);}

inline H263ModeComboFlags::dynamicPictureResizingByFour::reference H263ModeComboFlags::set_dynamicPictureResizingByFour ()
{ return *static_cast<dynamicPictureResizingByFour::pointer>(fields[13]);}

inline H263ModeComboFlags::dynamicPictureResizingByFour::reference H263ModeComboFlags::set_dynamicPictureResizingByFour (bool value)
{ return *static_cast<dynamicPictureResizingByFour::pointer>(fields[13]) = value ;}

inline H263ModeComboFlags::dynamicPictureResizingSixteenthPel::const_reference H263ModeComboFlags::get_dynamicPictureResizingSixteenthPel () const
{ return *static_cast<dynamicPictureResizingSixteenthPel::const_pointer>(fields[14]);}

inline H263ModeComboFlags::dynamicPictureResizingSixteenthPel::reference H263ModeComboFlags::ref_dynamicPictureResizingSixteenthPel ()
{ return *static_cast<dynamicPictureResizingSixteenthPel::pointer>(fields[14]);}

inline H263ModeComboFlags::dynamicPictureResizingSixteenthPel::reference H263ModeComboFlags::set_dynamicPictureResizingSixteenthPel ()
{ return *static_cast<dynamicPictureResizingSixteenthPel::pointer>(fields[14]);}

inline H263ModeComboFlags::dynamicPictureResizingSixteenthPel::reference H263ModeComboFlags::set_dynamicPictureResizingSixteenthPel (bool value)
{ return *static_cast<dynamicPictureResizingSixteenthPel::pointer>(fields[14]) = value ;}

inline H263ModeComboFlags::dynamicWarpingHalfPel::const_reference H263ModeComboFlags::get_dynamicWarpingHalfPel () const
{ return *static_cast<dynamicWarpingHalfPel::const_pointer>(fields[15]);}

inline H263ModeComboFlags::dynamicWarpingHalfPel::reference H263ModeComboFlags::ref_dynamicWarpingHalfPel ()
{ return *static_cast<dynamicWarpingHalfPel::pointer>(fields[15]);}

inline H263ModeComboFlags::dynamicWarpingHalfPel::reference H263ModeComboFlags::set_dynamicWarpingHalfPel ()
{ return *static_cast<dynamicWarpingHalfPel::pointer>(fields[15]);}

inline H263ModeComboFlags::dynamicWarpingHalfPel::reference H263ModeComboFlags::set_dynamicWarpingHalfPel (bool value)
{ return *static_cast<dynamicWarpingHalfPel::pointer>(fields[15]) = value ;}

inline H263ModeComboFlags::dynamicWarpingSixteenthPel::const_reference H263ModeComboFlags::get_dynamicWarpingSixteenthPel () const
{ return *static_cast<dynamicWarpingSixteenthPel::const_pointer>(fields[16]);}

inline H263ModeComboFlags::dynamicWarpingSixteenthPel::reference H263ModeComboFlags::ref_dynamicWarpingSixteenthPel ()
{ return *static_cast<dynamicWarpingSixteenthPel::pointer>(fields[16]);}

inline H263ModeComboFlags::dynamicWarpingSixteenthPel::reference H263ModeComboFlags::set_dynamicWarpingSixteenthPel ()
{ return *static_cast<dynamicWarpingSixteenthPel::pointer>(fields[16]);}

inline H263ModeComboFlags::dynamicWarpingSixteenthPel::reference H263ModeComboFlags::set_dynamicWarpingSixteenthPel (bool value)
{ return *static_cast<dynamicWarpingSixteenthPel::pointer>(fields[16]) = value ;}

inline H263ModeComboFlags::reducedResolutionUpdate::const_reference H263ModeComboFlags::get_reducedResolutionUpdate () const
{ return *static_cast<reducedResolutionUpdate::const_pointer>(fields[17]);}

inline H263ModeComboFlags::reducedResolutionUpdate::reference H263ModeComboFlags::ref_reducedResolutionUpdate ()
{ return *static_cast<reducedResolutionUpdate::pointer>(fields[17]);}

inline H263ModeComboFlags::reducedResolutionUpdate::reference H263ModeComboFlags::set_reducedResolutionUpdate ()
{ return *static_cast<reducedResolutionUpdate::pointer>(fields[17]);}

inline H263ModeComboFlags::reducedResolutionUpdate::reference H263ModeComboFlags::set_reducedResolutionUpdate (bool value)
{ return *static_cast<reducedResolutionUpdate::pointer>(fields[17]) = value ;}

inline H263ModeComboFlags::independentSegmentDecoding::const_reference H263ModeComboFlags::get_independentSegmentDecoding () const
{ return *static_cast<independentSegmentDecoding::const_pointer>(fields[18]);}

inline H263ModeComboFlags::independentSegmentDecoding::reference H263ModeComboFlags::ref_independentSegmentDecoding ()
{ return *static_cast<independentSegmentDecoding::pointer>(fields[18]);}

inline H263ModeComboFlags::independentSegmentDecoding::reference H263ModeComboFlags::set_independentSegmentDecoding ()
{ return *static_cast<independentSegmentDecoding::pointer>(fields[18]);}

inline H263ModeComboFlags::independentSegmentDecoding::reference H263ModeComboFlags::set_independentSegmentDecoding (bool value)
{ return *static_cast<independentSegmentDecoding::pointer>(fields[18]) = value ;}

inline H263ModeComboFlags::alternateInterVLCMode::const_reference H263ModeComboFlags::get_alternateInterVLCMode () const
{ return *static_cast<alternateInterVLCMode::const_pointer>(fields[19]);}

inline H263ModeComboFlags::alternateInterVLCMode::reference H263ModeComboFlags::ref_alternateInterVLCMode ()
{ return *static_cast<alternateInterVLCMode::pointer>(fields[19]);}

inline H263ModeComboFlags::alternateInterVLCMode::reference H263ModeComboFlags::set_alternateInterVLCMode ()
{ return *static_cast<alternateInterVLCMode::pointer>(fields[19]);}

inline H263ModeComboFlags::alternateInterVLCMode::reference H263ModeComboFlags::set_alternateInterVLCMode (bool value)
{ return *static_cast<alternateInterVLCMode::pointer>(fields[19]) = value ;}

inline H263ModeComboFlags::modifiedQuantizationMode::const_reference H263ModeComboFlags::get_modifiedQuantizationMode () const
{ return *static_cast<modifiedQuantizationMode::const_pointer>(fields[20]);}

inline H263ModeComboFlags::modifiedQuantizationMode::reference H263ModeComboFlags::ref_modifiedQuantizationMode ()
{ return *static_cast<modifiedQuantizationMode::pointer>(fields[20]);}

inline H263ModeComboFlags::modifiedQuantizationMode::reference H263ModeComboFlags::set_modifiedQuantizationMode ()
{ return *static_cast<modifiedQuantizationMode::pointer>(fields[20]);}

inline H263ModeComboFlags::modifiedQuantizationMode::reference H263ModeComboFlags::set_modifiedQuantizationMode (bool value)
{ return *static_cast<modifiedQuantizationMode::pointer>(fields[20]) = value ;}

inline H263ModeComboFlags::enhancedReferencePicSelect::const_reference H263ModeComboFlags::get_enhancedReferencePicSelect () const
{
  assert(hasOptionalField(e_enhancedReferencePicSelect));
  return *static_cast<enhancedReferencePicSelect::const_pointer>(fields[21]);
}

inline H263ModeComboFlags::enhancedReferencePicSelect::reference H263ModeComboFlags::ref_enhancedReferencePicSelect ()
{
  assert(hasOptionalField(e_enhancedReferencePicSelect));
  return *static_cast<enhancedReferencePicSelect::pointer>(fields[21]);
}

inline H263ModeComboFlags::enhancedReferencePicSelect::reference H263ModeComboFlags::set_enhancedReferencePicSelect ()
{
  includeOptionalField( e_enhancedReferencePicSelect, 21);
  return *static_cast<enhancedReferencePicSelect::pointer>(fields[21]);
}

inline H263ModeComboFlags::enhancedReferencePicSelect::reference H263ModeComboFlags::set_enhancedReferencePicSelect (bool value)
{
  includeOptionalField( e_enhancedReferencePicSelect, 21);
  return *static_cast<enhancedReferencePicSelect::pointer>(fields[21]) = value;
}

inline void H263ModeComboFlags::omit_enhancedReferencePicSelect ()
{ removeOptionalField( e_enhancedReferencePicSelect); }

inline bool H263ModeComboFlags::enhancedReferencePicSelect_isPresent () const
{ return hasOptionalField( e_enhancedReferencePicSelect); }

inline H263ModeComboFlags::h263Version3Options::const_reference H263ModeComboFlags::get_h263Version3Options () const
{
  assert(hasOptionalField(e_h263Version3Options));
  return *static_cast<h263Version3Options::const_pointer>(fields[22]);
}

inline H263ModeComboFlags::h263Version3Options::reference H263ModeComboFlags::ref_h263Version3Options ()
{
  assert(hasOptionalField(e_h263Version3Options));
  return *static_cast<h263Version3Options::pointer>(fields[22]);
}

inline H263ModeComboFlags::h263Version3Options::reference H263ModeComboFlags::set_h263Version3Options ()
{
  includeOptionalField( e_h263Version3Options, 22);
  return *static_cast<h263Version3Options::pointer>(fields[22]);
}

inline H263ModeComboFlags::h263Version3Options::reference H263ModeComboFlags::set_h263Version3Options (h263Version3Options::const_reference value)
{
  includeOptionalField( e_h263Version3Options, 22);
  return *static_cast<h263Version3Options::pointer>(fields[22]) = value;
}

inline void H263ModeComboFlags::omit_h263Version3Options ()
{ removeOptionalField( e_h263Version3Options); }

inline bool H263ModeComboFlags::h263Version3Options_isPresent () const
{ return hasOptionalField( e_h263Version3Options); }

inline void H263ModeComboFlags::swap(H263ModeComboFlags& other)
{ Inherited::swap(other); }

inline H263ModeComboFlags* H263ModeComboFlags::clone() const
{ return static_cast<H263ModeComboFlags*> (Inherited::clone()); }

inline G7231AnnexCCapability::maxAl_sduAudioFrames::const_reference G7231AnnexCCapability::get_maxAl_sduAudioFrames () const
{ return *static_cast<maxAl_sduAudioFrames::const_pointer>(fields[0]);}

inline G7231AnnexCCapability::maxAl_sduAudioFrames::reference G7231AnnexCCapability::ref_maxAl_sduAudioFrames ()
{ return *static_cast<maxAl_sduAudioFrames::pointer>(fields[0]);}

inline G7231AnnexCCapability::maxAl_sduAudioFrames::reference G7231AnnexCCapability::set_maxAl_sduAudioFrames ()
{ return *static_cast<maxAl_sduAudioFrames::pointer>(fields[0]);}

inline G7231AnnexCCapability::maxAl_sduAudioFrames::reference G7231AnnexCCapability::set_maxAl_sduAudioFrames (maxAl_sduAudioFrames::value_type::int_type value)
{ return *static_cast<maxAl_sduAudioFrames::pointer>(fields[0]) = value ;}

inline G7231AnnexCCapability::silenceSuppression::const_reference G7231AnnexCCapability::get_silenceSuppression () const
{ return *static_cast<silenceSuppression::const_pointer>(fields[1]);}

inline G7231AnnexCCapability::silenceSuppression::reference G7231AnnexCCapability::ref_silenceSuppression ()
{ return *static_cast<silenceSuppression::pointer>(fields[1]);}

inline G7231AnnexCCapability::silenceSuppression::reference G7231AnnexCCapability::set_silenceSuppression ()
{ return *static_cast<silenceSuppression::pointer>(fields[1]);}

inline G7231AnnexCCapability::silenceSuppression::reference G7231AnnexCCapability::set_silenceSuppression (bool value)
{ return *static_cast<silenceSuppression::pointer>(fields[1]) = value ;}

inline G7231AnnexCCapability::g723AnnexCAudioMode::const_reference G7231AnnexCCapability::get_g723AnnexCAudioMode () const
{
  assert(hasOptionalField(e_g723AnnexCAudioMode));
  return *static_cast<g723AnnexCAudioMode::const_pointer>(fields[2]);
}

inline G7231AnnexCCapability::g723AnnexCAudioMode::reference G7231AnnexCCapability::ref_g723AnnexCAudioMode ()
{
  assert(hasOptionalField(e_g723AnnexCAudioMode));
  return *static_cast<g723AnnexCAudioMode::pointer>(fields[2]);
}

inline G7231AnnexCCapability::g723AnnexCAudioMode::reference G7231AnnexCCapability::set_g723AnnexCAudioMode ()
{
  includeOptionalField( e_g723AnnexCAudioMode, 2);
  return *static_cast<g723AnnexCAudioMode::pointer>(fields[2]);
}

inline G7231AnnexCCapability::g723AnnexCAudioMode::reference G7231AnnexCCapability::set_g723AnnexCAudioMode (g723AnnexCAudioMode::const_reference value)
{
  includeOptionalField( e_g723AnnexCAudioMode, 2);
  return *static_cast<g723AnnexCAudioMode::pointer>(fields[2]) = value;
}

inline void G7231AnnexCCapability::omit_g723AnnexCAudioMode ()
{ removeOptionalField( e_g723AnnexCAudioMode); }

inline bool G7231AnnexCCapability::g723AnnexCAudioMode_isPresent () const
{ return hasOptionalField( e_g723AnnexCAudioMode); }

inline void G7231AnnexCCapability::swap(G7231AnnexCCapability& other)
{ Inherited::swap(other); }

inline G7231AnnexCCapability* G7231AnnexCCapability::clone() const
{ return static_cast<G7231AnnexCCapability*> (Inherited::clone()); }

inline CompressionType::v42bis::const_reference CompressionType::get_v42bis () const
{
    assert(currentSelection() ==v42bis::id_);
    return *static_cast<v42bis::const_pointer>(choice.get());
}

inline CompressionType::v42bis::reference CompressionType::ref_v42bis ()
{
    assert(currentSelection() ==v42bis::id_);
    return *static_cast<v42bis::pointer>(choice.get());
}

inline CompressionType::v42bis::reference CompressionType::select_v42bis ()
{
    return *static_cast<v42bis::pointer>(setSelection(v42bis::id_, ASN1::AbstractData::create( &v42bis::value_type::theInfo)));
}

inline CompressionType::v42bis::reference CompressionType::select_v42bis (CompressionType::v42bis::const_reference value)
{
    return select_v42bis() = value;
}

inline bool CompressionType::v42bis_isSelected() const
{ 
    return currentSelection() == v42bis::id_; 
}

inline CompressionType::CompressionType(v42bis::Id id, v42bis::const_reference value)
  : Inherited(&theInfo, id, new v42bis::value_type(value) )
{ }


inline void CompressionType::swap(CompressionType & other)
{  Inherited::swap(other); }

inline CompressionType* CompressionType::clone() const
{ return static_cast<CompressionType*> (Inherited::clone()); }

inline bool CompressionType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline T84Profile::t84Unrestricted::reference T84Profile::select_t84Unrestricted ()
{
    return *static_cast<t84Unrestricted::pointer>(setSelection(t84Unrestricted::id_, ASN1::AbstractData::create( &t84Unrestricted::value_type::theInfo)));
}

inline bool T84Profile::t84Unrestricted_isSelected() const
{ 
    return currentSelection() == t84Unrestricted::id_; 
}

inline T84Profile::t84Restricted::const_reference T84Profile::get_t84Restricted () const
{
    assert(currentSelection() ==t84Restricted::id_);
    return *static_cast<t84Restricted::const_pointer>(choice.get());
}

inline T84Profile::t84Restricted::reference T84Profile::ref_t84Restricted ()
{
    assert(currentSelection() ==t84Restricted::id_);
    return *static_cast<t84Restricted::pointer>(choice.get());
}

inline T84Profile::t84Restricted::reference T84Profile::select_t84Restricted ()
{
    return *static_cast<t84Restricted::pointer>(setSelection(t84Restricted::id_, ASN1::AbstractData::create( &t84Restricted::value_type::theInfo)));
}

inline T84Profile::t84Restricted::reference T84Profile::select_t84Restricted (T84Profile::t84Restricted::const_reference value)
{
    return select_t84Restricted() = value;
}

inline bool T84Profile::t84Restricted_isSelected() const
{ 
    return currentSelection() == t84Restricted::id_; 
}

inline T84Profile::T84Profile(t84Unrestricted::Id id, t84Unrestricted::const_reference value)
  : Inherited(&theInfo, id, new t84Unrestricted::value_type(value) )
{ }

inline T84Profile::T84Profile(t84Restricted::Id id, t84Restricted::const_reference value)
  : Inherited(&theInfo, id, new t84Restricted::value_type(value) )
{ }


inline void T84Profile::swap(T84Profile & other)
{  Inherited::swap(other); }

inline T84Profile* T84Profile::clone() const
{ return static_cast<T84Profile*> (Inherited::clone()); }

inline bool T84Profile::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline T38FaxUdpOptions::t38FaxMaxBuffer::const_reference T38FaxUdpOptions::get_t38FaxMaxBuffer () const
{
  assert(hasOptionalField(e_t38FaxMaxBuffer));
  return *static_cast<t38FaxMaxBuffer::const_pointer>(fields[0]);
}

inline T38FaxUdpOptions::t38FaxMaxBuffer::reference T38FaxUdpOptions::ref_t38FaxMaxBuffer ()
{
  assert(hasOptionalField(e_t38FaxMaxBuffer));
  return *static_cast<t38FaxMaxBuffer::pointer>(fields[0]);
}

inline T38FaxUdpOptions::t38FaxMaxBuffer::reference T38FaxUdpOptions::set_t38FaxMaxBuffer ()
{
  includeOptionalField( e_t38FaxMaxBuffer, 0);
  return *static_cast<t38FaxMaxBuffer::pointer>(fields[0]);
}

inline T38FaxUdpOptions::t38FaxMaxBuffer::reference T38FaxUdpOptions::set_t38FaxMaxBuffer (t38FaxMaxBuffer::value_type::int_type value)
{
  includeOptionalField( e_t38FaxMaxBuffer, 0);
  return *static_cast<t38FaxMaxBuffer::pointer>(fields[0]) = value;
}

inline void T38FaxUdpOptions::omit_t38FaxMaxBuffer ()
{ removeOptionalField( e_t38FaxMaxBuffer); }

inline bool T38FaxUdpOptions::t38FaxMaxBuffer_isPresent () const
{ return hasOptionalField( e_t38FaxMaxBuffer); }

inline T38FaxUdpOptions::t38FaxMaxDatagram::const_reference T38FaxUdpOptions::get_t38FaxMaxDatagram () const
{
  assert(hasOptionalField(e_t38FaxMaxDatagram));
  return *static_cast<t38FaxMaxDatagram::const_pointer>(fields[1]);
}

inline T38FaxUdpOptions::t38FaxMaxDatagram::reference T38FaxUdpOptions::ref_t38FaxMaxDatagram ()
{
  assert(hasOptionalField(e_t38FaxMaxDatagram));
  return *static_cast<t38FaxMaxDatagram::pointer>(fields[1]);
}

inline T38FaxUdpOptions::t38FaxMaxDatagram::reference T38FaxUdpOptions::set_t38FaxMaxDatagram ()
{
  includeOptionalField( e_t38FaxMaxDatagram, 1);
  return *static_cast<t38FaxMaxDatagram::pointer>(fields[1]);
}

inline T38FaxUdpOptions::t38FaxMaxDatagram::reference T38FaxUdpOptions::set_t38FaxMaxDatagram (t38FaxMaxDatagram::value_type::int_type value)
{
  includeOptionalField( e_t38FaxMaxDatagram, 1);
  return *static_cast<t38FaxMaxDatagram::pointer>(fields[1]) = value;
}

inline void T38FaxUdpOptions::omit_t38FaxMaxDatagram ()
{ removeOptionalField( e_t38FaxMaxDatagram); }

inline bool T38FaxUdpOptions::t38FaxMaxDatagram_isPresent () const
{ return hasOptionalField( e_t38FaxMaxDatagram); }

inline T38FaxUdpOptions::t38FaxUdpEC::const_reference T38FaxUdpOptions::get_t38FaxUdpEC () const
{ return *static_cast<t38FaxUdpEC::const_pointer>(fields[2]);}

inline T38FaxUdpOptions::t38FaxUdpEC::reference T38FaxUdpOptions::ref_t38FaxUdpEC ()
{ return *static_cast<t38FaxUdpEC::pointer>(fields[2]);}

inline T38FaxUdpOptions::t38FaxUdpEC::reference T38FaxUdpOptions::set_t38FaxUdpEC ()
{ return *static_cast<t38FaxUdpEC::pointer>(fields[2]);}

inline T38FaxUdpOptions::t38FaxUdpEC::reference T38FaxUdpOptions::set_t38FaxUdpEC (t38FaxUdpEC::const_reference value)
{ return *static_cast<t38FaxUdpEC::pointer>(fields[2]) = value ;}

inline void T38FaxUdpOptions::swap(T38FaxUdpOptions& other)
{ Inherited::swap(other); }

inline T38FaxUdpOptions* T38FaxUdpOptions::clone() const
{ return static_cast<T38FaxUdpOptions*> (Inherited::clone()); }

inline MultiplePayloadStreamCapability::capabilities::const_reference MultiplePayloadStreamCapability::get_capabilities () const
{ return *static_cast<capabilities::const_pointer>(fields[0]);}

inline MultiplePayloadStreamCapability::capabilities::reference MultiplePayloadStreamCapability::ref_capabilities ()
{ return *static_cast<capabilities::pointer>(fields[0]);}

inline MultiplePayloadStreamCapability::capabilities::reference MultiplePayloadStreamCapability::set_capabilities ()
{ return *static_cast<capabilities::pointer>(fields[0]);}

inline MultiplePayloadStreamCapability::capabilities::reference MultiplePayloadStreamCapability::set_capabilities (capabilities::const_reference value)
{ return *static_cast<capabilities::pointer>(fields[0]) = value ;}

inline void MultiplePayloadStreamCapability::swap(MultiplePayloadStreamCapability& other)
{ Inherited::swap(other); }

inline MultiplePayloadStreamCapability* MultiplePayloadStreamCapability::clone() const
{ return static_cast<MultiplePayloadStreamCapability*> (Inherited::clone()); }

inline FECCapability::protectedCapability::const_reference FECCapability::get_protectedCapability () const
{ return *static_cast<protectedCapability::const_pointer>(fields[0]);}

inline FECCapability::protectedCapability::reference FECCapability::ref_protectedCapability ()
{ return *static_cast<protectedCapability::pointer>(fields[0]);}

inline FECCapability::protectedCapability::reference FECCapability::set_protectedCapability ()
{ return *static_cast<protectedCapability::pointer>(fields[0]);}

inline FECCapability::protectedCapability::reference FECCapability::set_protectedCapability (protectedCapability::value_type::int_type value)
{ return *static_cast<protectedCapability::pointer>(fields[0]) = value ;}

inline FECCapability::fecScheme::const_reference FECCapability::get_fecScheme () const
{
  assert(hasOptionalField(e_fecScheme));
  return *static_cast<fecScheme::const_pointer>(fields[1]);
}

inline FECCapability::fecScheme::reference FECCapability::ref_fecScheme ()
{
  assert(hasOptionalField(e_fecScheme));
  return *static_cast<fecScheme::pointer>(fields[1]);
}

inline FECCapability::fecScheme::reference FECCapability::set_fecScheme ()
{
  includeOptionalField( e_fecScheme, 1);
  return *static_cast<fecScheme::pointer>(fields[1]);
}

inline FECCapability::fecScheme::reference FECCapability::set_fecScheme (fecScheme::const_reference value)
{
  includeOptionalField( e_fecScheme, 1);
  return *static_cast<fecScheme::pointer>(fields[1]) = value;
}

inline void FECCapability::omit_fecScheme ()
{ removeOptionalField( e_fecScheme); }

inline bool FECCapability::fecScheme_isPresent () const
{ return hasOptionalField( e_fecScheme); }

inline FECCapability::rfc2733Format::const_reference FECCapability::get_rfc2733Format () const
{
  assert(hasOptionalField(e_rfc2733Format));
  return *static_cast<rfc2733Format::const_pointer>(fields[2]);
}

inline FECCapability::rfc2733Format::reference FECCapability::ref_rfc2733Format ()
{
  assert(hasOptionalField(e_rfc2733Format));
  return *static_cast<rfc2733Format::pointer>(fields[2]);
}

inline FECCapability::rfc2733Format::reference FECCapability::set_rfc2733Format ()
{
  includeOptionalField( e_rfc2733Format, 2);
  return *static_cast<rfc2733Format::pointer>(fields[2]);
}

inline FECCapability::rfc2733Format::reference FECCapability::set_rfc2733Format (rfc2733Format::const_reference value)
{
  includeOptionalField( e_rfc2733Format, 2);
  return *static_cast<rfc2733Format::pointer>(fields[2]) = value;
}

inline void FECCapability::omit_rfc2733Format ()
{ removeOptionalField( e_rfc2733Format); }

inline bool FECCapability::rfc2733Format_isPresent () const
{ return hasOptionalField( e_rfc2733Format); }

inline void FECCapability::swap(FECCapability& other)
{ Inherited::swap(other); }

inline FECCapability* FECCapability::clone() const
{ return static_cast<FECCapability*> (Inherited::clone()); }

inline Q2931Address::address::const_reference Q2931Address::get_address () const
{ return *static_cast<address::const_pointer>(fields[0]);}

inline Q2931Address::address::reference Q2931Address::ref_address ()
{ return *static_cast<address::pointer>(fields[0]);}

inline Q2931Address::address::reference Q2931Address::set_address ()
{ return *static_cast<address::pointer>(fields[0]);}

inline Q2931Address::address::reference Q2931Address::set_address (address::const_reference value)
{ return *static_cast<address::pointer>(fields[0]) = value ;}

inline Q2931Address::subaddress::const_reference Q2931Address::get_subaddress () const
{
  assert(hasOptionalField(e_subaddress));
  return *static_cast<subaddress::const_pointer>(fields[1]);
}

inline Q2931Address::subaddress::reference Q2931Address::ref_subaddress ()
{
  assert(hasOptionalField(e_subaddress));
  return *static_cast<subaddress::pointer>(fields[1]);
}

inline Q2931Address::subaddress::reference Q2931Address::set_subaddress ()
{
  includeOptionalField( e_subaddress, 1);
  return *static_cast<subaddress::pointer>(fields[1]);
}

inline Q2931Address::subaddress::reference Q2931Address::set_subaddress (const std::vector<char>& value)
{
  includeOptionalField( e_subaddress, 1);
  return *static_cast<subaddress::pointer>(fields[1]) = value;
}

inline void Q2931Address::omit_subaddress ()
{ removeOptionalField( e_subaddress); }

inline bool Q2931Address::subaddress_isPresent () const
{ return hasOptionalField( e_subaddress); }

inline void Q2931Address::swap(Q2931Address& other)
{ Inherited::swap(other); }

inline Q2931Address* Q2931Address::clone() const
{ return static_cast<Q2931Address*> (Inherited::clone()); }

inline H223AL2MParameters::headerFEC::const_reference H223AL2MParameters::get_headerFEC () const
{ return *static_cast<headerFEC::const_pointer>(fields[0]);}

inline H223AL2MParameters::headerFEC::reference H223AL2MParameters::ref_headerFEC ()
{ return *static_cast<headerFEC::pointer>(fields[0]);}

inline H223AL2MParameters::headerFEC::reference H223AL2MParameters::set_headerFEC ()
{ return *static_cast<headerFEC::pointer>(fields[0]);}

inline H223AL2MParameters::headerFEC::reference H223AL2MParameters::set_headerFEC (headerFEC::const_reference value)
{ return *static_cast<headerFEC::pointer>(fields[0]) = value ;}

inline H223AL2MParameters::alpduInterleaving::const_reference H223AL2MParameters::get_alpduInterleaving () const
{ return *static_cast<alpduInterleaving::const_pointer>(fields[1]);}

inline H223AL2MParameters::alpduInterleaving::reference H223AL2MParameters::ref_alpduInterleaving ()
{ return *static_cast<alpduInterleaving::pointer>(fields[1]);}

inline H223AL2MParameters::alpduInterleaving::reference H223AL2MParameters::set_alpduInterleaving ()
{ return *static_cast<alpduInterleaving::pointer>(fields[1]);}

inline H223AL2MParameters::alpduInterleaving::reference H223AL2MParameters::set_alpduInterleaving (bool value)
{ return *static_cast<alpduInterleaving::pointer>(fields[1]) = value ;}

inline void H223AL2MParameters::swap(H223AL2MParameters& other)
{ Inherited::swap(other); }

inline H223AL2MParameters* H223AL2MParameters::clone() const
{ return static_cast<H223AL2MParameters*> (Inherited::clone()); }

inline H223AnnexCArqParameters::numberOfRetransmissions::const_reference H223AnnexCArqParameters::get_numberOfRetransmissions () const
{ return *static_cast<numberOfRetransmissions::const_pointer>(fields[0]);}

inline H223AnnexCArqParameters::numberOfRetransmissions::reference H223AnnexCArqParameters::ref_numberOfRetransmissions ()
{ return *static_cast<numberOfRetransmissions::pointer>(fields[0]);}

inline H223AnnexCArqParameters::numberOfRetransmissions::reference H223AnnexCArqParameters::set_numberOfRetransmissions ()
{ return *static_cast<numberOfRetransmissions::pointer>(fields[0]);}

inline H223AnnexCArqParameters::numberOfRetransmissions::reference H223AnnexCArqParameters::set_numberOfRetransmissions (numberOfRetransmissions::const_reference value)
{ return *static_cast<numberOfRetransmissions::pointer>(fields[0]) = value ;}

inline H223AnnexCArqParameters::sendBufferSize::const_reference H223AnnexCArqParameters::get_sendBufferSize () const
{ return *static_cast<sendBufferSize::const_pointer>(fields[1]);}

inline H223AnnexCArqParameters::sendBufferSize::reference H223AnnexCArqParameters::ref_sendBufferSize ()
{ return *static_cast<sendBufferSize::pointer>(fields[1]);}

inline H223AnnexCArqParameters::sendBufferSize::reference H223AnnexCArqParameters::set_sendBufferSize ()
{ return *static_cast<sendBufferSize::pointer>(fields[1]);}

inline H223AnnexCArqParameters::sendBufferSize::reference H223AnnexCArqParameters::set_sendBufferSize (sendBufferSize::value_type::int_type value)
{ return *static_cast<sendBufferSize::pointer>(fields[1]) = value ;}

inline void H223AnnexCArqParameters::swap(H223AnnexCArqParameters& other)
{ Inherited::swap(other); }

inline H223AnnexCArqParameters* H223AnnexCArqParameters::clone() const
{ return static_cast<H223AnnexCArqParameters*> (Inherited::clone()); }

inline V76HDLCParameters::crcLength::const_reference V76HDLCParameters::get_crcLength () const
{ return *static_cast<crcLength::const_pointer>(fields[0]);}

inline V76HDLCParameters::crcLength::reference V76HDLCParameters::ref_crcLength ()
{ return *static_cast<crcLength::pointer>(fields[0]);}

inline V76HDLCParameters::crcLength::reference V76HDLCParameters::set_crcLength ()
{ return *static_cast<crcLength::pointer>(fields[0]);}

inline V76HDLCParameters::crcLength::reference V76HDLCParameters::set_crcLength (crcLength::const_reference value)
{ return *static_cast<crcLength::pointer>(fields[0]) = value ;}

inline V76HDLCParameters::n401::const_reference V76HDLCParameters::get_n401 () const
{ return *static_cast<n401::const_pointer>(fields[1]);}

inline V76HDLCParameters::n401::reference V76HDLCParameters::ref_n401 ()
{ return *static_cast<n401::pointer>(fields[1]);}

inline V76HDLCParameters::n401::reference V76HDLCParameters::set_n401 ()
{ return *static_cast<n401::pointer>(fields[1]);}

inline V76HDLCParameters::n401::reference V76HDLCParameters::set_n401 (n401::value_type::int_type value)
{ return *static_cast<n401::pointer>(fields[1]) = value ;}

inline V76HDLCParameters::loopbackTestProcedure::const_reference V76HDLCParameters::get_loopbackTestProcedure () const
{ return *static_cast<loopbackTestProcedure::const_pointer>(fields[2]);}

inline V76HDLCParameters::loopbackTestProcedure::reference V76HDLCParameters::ref_loopbackTestProcedure ()
{ return *static_cast<loopbackTestProcedure::pointer>(fields[2]);}

inline V76HDLCParameters::loopbackTestProcedure::reference V76HDLCParameters::set_loopbackTestProcedure ()
{ return *static_cast<loopbackTestProcedure::pointer>(fields[2]);}

inline V76HDLCParameters::loopbackTestProcedure::reference V76HDLCParameters::set_loopbackTestProcedure (bool value)
{ return *static_cast<loopbackTestProcedure::pointer>(fields[2]) = value ;}

inline void V76HDLCParameters::swap(V76HDLCParameters& other)
{ Inherited::swap(other); }

inline V76HDLCParameters* V76HDLCParameters::clone() const
{ return static_cast<V76HDLCParameters*> (Inherited::clone()); }

inline CloseLogicalChannel::forwardLogicalChannelNumber::const_reference CloseLogicalChannel::get_forwardLogicalChannelNumber () const
{ return *static_cast<forwardLogicalChannelNumber::const_pointer>(fields[0]);}

inline CloseLogicalChannel::forwardLogicalChannelNumber::reference CloseLogicalChannel::ref_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline CloseLogicalChannel::forwardLogicalChannelNumber::reference CloseLogicalChannel::set_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline CloseLogicalChannel::forwardLogicalChannelNumber::reference CloseLogicalChannel::set_forwardLogicalChannelNumber (forwardLogicalChannelNumber::value_type::int_type value)
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]) = value ;}

inline CloseLogicalChannel::source::const_reference CloseLogicalChannel::get_source () const
{ return *static_cast<source::const_pointer>(fields[1]);}

inline CloseLogicalChannel::source::reference CloseLogicalChannel::ref_source ()
{ return *static_cast<source::pointer>(fields[1]);}

inline CloseLogicalChannel::source::reference CloseLogicalChannel::set_source ()
{ return *static_cast<source::pointer>(fields[1]);}

inline CloseLogicalChannel::source::reference CloseLogicalChannel::set_source (source::const_reference value)
{ return *static_cast<source::pointer>(fields[1]) = value ;}

inline CloseLogicalChannel::reason::const_reference CloseLogicalChannel::get_reason () const
{
  assert(hasOptionalField(e_reason));
  return *static_cast<reason::const_pointer>(fields[2]);
}

inline CloseLogicalChannel::reason::reference CloseLogicalChannel::ref_reason ()
{
  assert(hasOptionalField(e_reason));
  return *static_cast<reason::pointer>(fields[2]);
}

inline CloseLogicalChannel::reason::reference CloseLogicalChannel::set_reason ()
{
  includeOptionalField( e_reason, 2);
  return *static_cast<reason::pointer>(fields[2]);
}

inline CloseLogicalChannel::reason::reference CloseLogicalChannel::set_reason (reason::const_reference value)
{
  includeOptionalField( e_reason, 2);
  return *static_cast<reason::pointer>(fields[2]) = value;
}

inline void CloseLogicalChannel::omit_reason ()
{ removeOptionalField( e_reason); }

inline bool CloseLogicalChannel::reason_isPresent () const
{ return hasOptionalField( e_reason); }

inline void CloseLogicalChannel::swap(CloseLogicalChannel& other)
{ Inherited::swap(other); }

inline CloseLogicalChannel* CloseLogicalChannel::clone() const
{ return static_cast<CloseLogicalChannel*> (Inherited::clone()); }

inline RequestChannelCloseReject::forwardLogicalChannelNumber::const_reference RequestChannelCloseReject::get_forwardLogicalChannelNumber () const
{ return *static_cast<forwardLogicalChannelNumber::const_pointer>(fields[0]);}

inline RequestChannelCloseReject::forwardLogicalChannelNumber::reference RequestChannelCloseReject::ref_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline RequestChannelCloseReject::forwardLogicalChannelNumber::reference RequestChannelCloseReject::set_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline RequestChannelCloseReject::forwardLogicalChannelNumber::reference RequestChannelCloseReject::set_forwardLogicalChannelNumber (forwardLogicalChannelNumber::value_type::int_type value)
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]) = value ;}

inline RequestChannelCloseReject::cause::const_reference RequestChannelCloseReject::get_cause () const
{ return *static_cast<cause::const_pointer>(fields[1]);}

inline RequestChannelCloseReject::cause::reference RequestChannelCloseReject::ref_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline RequestChannelCloseReject::cause::reference RequestChannelCloseReject::set_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline RequestChannelCloseReject::cause::reference RequestChannelCloseReject::set_cause (cause::const_reference value)
{ return *static_cast<cause::pointer>(fields[1]) = value ;}

inline void RequestChannelCloseReject::swap(RequestChannelCloseReject& other)
{ Inherited::swap(other); }

inline RequestChannelCloseReject* RequestChannelCloseReject::clone() const
{ return static_cast<RequestChannelCloseReject*> (Inherited::clone()); }

inline MultiplexElement::type::const_reference MultiplexElement::get_type () const
{ return *static_cast<type::const_pointer>(fields[0]);}

inline MultiplexElement::type::reference MultiplexElement::ref_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline MultiplexElement::type::reference MultiplexElement::set_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline MultiplexElement::type::reference MultiplexElement::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[0]) = value ;}

inline MultiplexElement::repeatCount::const_reference MultiplexElement::get_repeatCount () const
{ return *static_cast<repeatCount::const_pointer>(fields[1]);}

inline MultiplexElement::repeatCount::reference MultiplexElement::ref_repeatCount ()
{ return *static_cast<repeatCount::pointer>(fields[1]);}

inline MultiplexElement::repeatCount::reference MultiplexElement::set_repeatCount ()
{ return *static_cast<repeatCount::pointer>(fields[1]);}

inline MultiplexElement::repeatCount::reference MultiplexElement::set_repeatCount (repeatCount::const_reference value)
{ return *static_cast<repeatCount::pointer>(fields[1]) = value ;}

inline void MultiplexElement::swap(MultiplexElement& other)
{ Inherited::swap(other); }

inline MultiplexElement* MultiplexElement::clone() const
{ return static_cast<MultiplexElement*> (Inherited::clone()); }

inline MultiplexEntryRejectionDescriptions::multiplexTableEntryNumber::const_reference MultiplexEntryRejectionDescriptions::get_multiplexTableEntryNumber () const
{ return *static_cast<multiplexTableEntryNumber::const_pointer>(fields[0]);}

inline MultiplexEntryRejectionDescriptions::multiplexTableEntryNumber::reference MultiplexEntryRejectionDescriptions::ref_multiplexTableEntryNumber ()
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]);}

inline MultiplexEntryRejectionDescriptions::multiplexTableEntryNumber::reference MultiplexEntryRejectionDescriptions::set_multiplexTableEntryNumber ()
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]);}

inline MultiplexEntryRejectionDescriptions::multiplexTableEntryNumber::reference MultiplexEntryRejectionDescriptions::set_multiplexTableEntryNumber (multiplexTableEntryNumber::value_type::int_type value)
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]) = value ;}

inline MultiplexEntryRejectionDescriptions::cause::const_reference MultiplexEntryRejectionDescriptions::get_cause () const
{ return *static_cast<cause::const_pointer>(fields[1]);}

inline MultiplexEntryRejectionDescriptions::cause::reference MultiplexEntryRejectionDescriptions::ref_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline MultiplexEntryRejectionDescriptions::cause::reference MultiplexEntryRejectionDescriptions::set_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline MultiplexEntryRejectionDescriptions::cause::reference MultiplexEntryRejectionDescriptions::set_cause (cause::const_reference value)
{ return *static_cast<cause::pointer>(fields[1]) = value ;}

inline void MultiplexEntryRejectionDescriptions::swap(MultiplexEntryRejectionDescriptions& other)
{ Inherited::swap(other); }

inline MultiplexEntryRejectionDescriptions* MultiplexEntryRejectionDescriptions::clone() const
{ return static_cast<MultiplexEntryRejectionDescriptions*> (Inherited::clone()); }

inline RequestMultiplexEntryRejectionDescriptions::multiplexTableEntryNumber::const_reference RequestMultiplexEntryRejectionDescriptions::get_multiplexTableEntryNumber () const
{ return *static_cast<multiplexTableEntryNumber::const_pointer>(fields[0]);}

inline RequestMultiplexEntryRejectionDescriptions::multiplexTableEntryNumber::reference RequestMultiplexEntryRejectionDescriptions::ref_multiplexTableEntryNumber ()
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]);}

inline RequestMultiplexEntryRejectionDescriptions::multiplexTableEntryNumber::reference RequestMultiplexEntryRejectionDescriptions::set_multiplexTableEntryNumber ()
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]);}

inline RequestMultiplexEntryRejectionDescriptions::multiplexTableEntryNumber::reference RequestMultiplexEntryRejectionDescriptions::set_multiplexTableEntryNumber (multiplexTableEntryNumber::value_type::int_type value)
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]) = value ;}

inline RequestMultiplexEntryRejectionDescriptions::cause::const_reference RequestMultiplexEntryRejectionDescriptions::get_cause () const
{ return *static_cast<cause::const_pointer>(fields[1]);}

inline RequestMultiplexEntryRejectionDescriptions::cause::reference RequestMultiplexEntryRejectionDescriptions::ref_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline RequestMultiplexEntryRejectionDescriptions::cause::reference RequestMultiplexEntryRejectionDescriptions::set_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline RequestMultiplexEntryRejectionDescriptions::cause::reference RequestMultiplexEntryRejectionDescriptions::set_cause (cause::const_reference value)
{ return *static_cast<cause::pointer>(fields[1]) = value ;}

inline void RequestMultiplexEntryRejectionDescriptions::swap(RequestMultiplexEntryRejectionDescriptions& other)
{ Inherited::swap(other); }

inline RequestMultiplexEntryRejectionDescriptions* RequestMultiplexEntryRejectionDescriptions::clone() const
{ return static_cast<RequestMultiplexEntryRejectionDescriptions*> (Inherited::clone()); }

inline RequestModeAck::sequenceNumber::const_reference RequestModeAck::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline RequestModeAck::sequenceNumber::reference RequestModeAck::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline RequestModeAck::sequenceNumber::reference RequestModeAck::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline RequestModeAck::sequenceNumber::reference RequestModeAck::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline RequestModeAck::response::const_reference RequestModeAck::get_response () const
{ return *static_cast<response::const_pointer>(fields[1]);}

inline RequestModeAck::response::reference RequestModeAck::ref_response ()
{ return *static_cast<response::pointer>(fields[1]);}

inline RequestModeAck::response::reference RequestModeAck::set_response ()
{ return *static_cast<response::pointer>(fields[1]);}

inline RequestModeAck::response::reference RequestModeAck::set_response (response::const_reference value)
{ return *static_cast<response::pointer>(fields[1]) = value ;}

inline void RequestModeAck::swap(RequestModeAck& other)
{ Inherited::swap(other); }

inline RequestModeAck* RequestModeAck::clone() const
{ return static_cast<RequestModeAck*> (Inherited::clone()); }

inline RequestModeReject::sequenceNumber::const_reference RequestModeReject::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline RequestModeReject::sequenceNumber::reference RequestModeReject::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline RequestModeReject::sequenceNumber::reference RequestModeReject::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline RequestModeReject::sequenceNumber::reference RequestModeReject::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline RequestModeReject::cause::const_reference RequestModeReject::get_cause () const
{ return *static_cast<cause::const_pointer>(fields[1]);}

inline RequestModeReject::cause::reference RequestModeReject::ref_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline RequestModeReject::cause::reference RequestModeReject::set_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline RequestModeReject::cause::reference RequestModeReject::set_cause (cause::const_reference value)
{ return *static_cast<cause::pointer>(fields[1]) = value ;}

inline void RequestModeReject::swap(RequestModeReject& other)
{ Inherited::swap(other); }

inline RequestModeReject* RequestModeReject::clone() const
{ return static_cast<RequestModeReject*> (Inherited::clone()); }

inline FECMode::protectedElement::const_reference FECMode::get_protectedElement () const
{ return *static_cast<protectedElement::const_pointer>(fields[0]);}

inline FECMode::protectedElement::reference FECMode::ref_protectedElement ()
{ return *static_cast<protectedElement::pointer>(fields[0]);}

inline FECMode::protectedElement::reference FECMode::set_protectedElement ()
{ return *static_cast<protectedElement::pointer>(fields[0]);}

inline FECMode::protectedElement::reference FECMode::set_protectedElement (protectedElement::const_reference value)
{ return *static_cast<protectedElement::pointer>(fields[0]) = value ;}

inline FECMode::fecScheme::const_reference FECMode::get_fecScheme () const
{
  assert(hasOptionalField(e_fecScheme));
  return *static_cast<fecScheme::const_pointer>(fields[1]);
}

inline FECMode::fecScheme::reference FECMode::ref_fecScheme ()
{
  assert(hasOptionalField(e_fecScheme));
  return *static_cast<fecScheme::pointer>(fields[1]);
}

inline FECMode::fecScheme::reference FECMode::set_fecScheme ()
{
  includeOptionalField( e_fecScheme, 1);
  return *static_cast<fecScheme::pointer>(fields[1]);
}

inline FECMode::fecScheme::reference FECMode::set_fecScheme (fecScheme::const_reference value)
{
  includeOptionalField( e_fecScheme, 1);
  return *static_cast<fecScheme::pointer>(fields[1]) = value;
}

inline void FECMode::omit_fecScheme ()
{ removeOptionalField( e_fecScheme); }

inline bool FECMode::fecScheme_isPresent () const
{ return hasOptionalField( e_fecScheme); }

inline FECMode::rfc2733Format::const_reference FECMode::get_rfc2733Format () const
{
  assert(hasOptionalField(e_rfc2733Format));
  return *static_cast<rfc2733Format::const_pointer>(fields[2]);
}

inline FECMode::rfc2733Format::reference FECMode::ref_rfc2733Format ()
{
  assert(hasOptionalField(e_rfc2733Format));
  return *static_cast<rfc2733Format::pointer>(fields[2]);
}

inline FECMode::rfc2733Format::reference FECMode::set_rfc2733Format ()
{
  includeOptionalField( e_rfc2733Format, 2);
  return *static_cast<rfc2733Format::pointer>(fields[2]);
}

inline FECMode::rfc2733Format::reference FECMode::set_rfc2733Format (rfc2733Format::const_reference value)
{
  includeOptionalField( e_rfc2733Format, 2);
  return *static_cast<rfc2733Format::pointer>(fields[2]) = value;
}

inline void FECMode::omit_rfc2733Format ()
{ removeOptionalField( e_rfc2733Format); }

inline bool FECMode::rfc2733Format_isPresent () const
{ return hasOptionalField( e_rfc2733Format); }

inline void FECMode::swap(FECMode& other)
{ Inherited::swap(other); }

inline FECMode* FECMode::clone() const
{ return static_cast<FECMode*> (Inherited::clone()); }

inline H261VideoMode::resolution::const_reference H261VideoMode::get_resolution () const
{ return *static_cast<resolution::const_pointer>(fields[0]);}

inline H261VideoMode::resolution::reference H261VideoMode::ref_resolution ()
{ return *static_cast<resolution::pointer>(fields[0]);}

inline H261VideoMode::resolution::reference H261VideoMode::set_resolution ()
{ return *static_cast<resolution::pointer>(fields[0]);}

inline H261VideoMode::resolution::reference H261VideoMode::set_resolution (resolution::const_reference value)
{ return *static_cast<resolution::pointer>(fields[0]) = value ;}

inline H261VideoMode::bitRate::const_reference H261VideoMode::get_bitRate () const
{ return *static_cast<bitRate::const_pointer>(fields[1]);}

inline H261VideoMode::bitRate::reference H261VideoMode::ref_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[1]);}

inline H261VideoMode::bitRate::reference H261VideoMode::set_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[1]);}

inline H261VideoMode::bitRate::reference H261VideoMode::set_bitRate (bitRate::value_type::int_type value)
{ return *static_cast<bitRate::pointer>(fields[1]) = value ;}

inline H261VideoMode::stillImageTransmission::const_reference H261VideoMode::get_stillImageTransmission () const
{ return *static_cast<stillImageTransmission::const_pointer>(fields[2]);}

inline H261VideoMode::stillImageTransmission::reference H261VideoMode::ref_stillImageTransmission ()
{ return *static_cast<stillImageTransmission::pointer>(fields[2]);}

inline H261VideoMode::stillImageTransmission::reference H261VideoMode::set_stillImageTransmission ()
{ return *static_cast<stillImageTransmission::pointer>(fields[2]);}

inline H261VideoMode::stillImageTransmission::reference H261VideoMode::set_stillImageTransmission (bool value)
{ return *static_cast<stillImageTransmission::pointer>(fields[2]) = value ;}

inline void H261VideoMode::swap(H261VideoMode& other)
{ Inherited::swap(other); }

inline H261VideoMode* H261VideoMode::clone() const
{ return static_cast<H261VideoMode*> (Inherited::clone()); }

inline H262VideoMode::profileAndLevel::const_reference H262VideoMode::get_profileAndLevel () const
{ return *static_cast<profileAndLevel::const_pointer>(fields[0]);}

inline H262VideoMode::profileAndLevel::reference H262VideoMode::ref_profileAndLevel ()
{ return *static_cast<profileAndLevel::pointer>(fields[0]);}

inline H262VideoMode::profileAndLevel::reference H262VideoMode::set_profileAndLevel ()
{ return *static_cast<profileAndLevel::pointer>(fields[0]);}

inline H262VideoMode::profileAndLevel::reference H262VideoMode::set_profileAndLevel (profileAndLevel::const_reference value)
{ return *static_cast<profileAndLevel::pointer>(fields[0]) = value ;}

inline H262VideoMode::videoBitRate::const_reference H262VideoMode::get_videoBitRate () const
{
  assert(hasOptionalField(e_videoBitRate));
  return *static_cast<videoBitRate::const_pointer>(fields[1]);
}

inline H262VideoMode::videoBitRate::reference H262VideoMode::ref_videoBitRate ()
{
  assert(hasOptionalField(e_videoBitRate));
  return *static_cast<videoBitRate::pointer>(fields[1]);
}

inline H262VideoMode::videoBitRate::reference H262VideoMode::set_videoBitRate ()
{
  includeOptionalField( e_videoBitRate, 1);
  return *static_cast<videoBitRate::pointer>(fields[1]);
}

inline H262VideoMode::videoBitRate::reference H262VideoMode::set_videoBitRate (videoBitRate::value_type::int_type value)
{
  includeOptionalField( e_videoBitRate, 1);
  return *static_cast<videoBitRate::pointer>(fields[1]) = value;
}

inline void H262VideoMode::omit_videoBitRate ()
{ removeOptionalField( e_videoBitRate); }

inline bool H262VideoMode::videoBitRate_isPresent () const
{ return hasOptionalField( e_videoBitRate); }

inline H262VideoMode::vbvBufferSize::const_reference H262VideoMode::get_vbvBufferSize () const
{
  assert(hasOptionalField(e_vbvBufferSize));
  return *static_cast<vbvBufferSize::const_pointer>(fields[2]);
}

inline H262VideoMode::vbvBufferSize::reference H262VideoMode::ref_vbvBufferSize ()
{
  assert(hasOptionalField(e_vbvBufferSize));
  return *static_cast<vbvBufferSize::pointer>(fields[2]);
}

inline H262VideoMode::vbvBufferSize::reference H262VideoMode::set_vbvBufferSize ()
{
  includeOptionalField( e_vbvBufferSize, 2);
  return *static_cast<vbvBufferSize::pointer>(fields[2]);
}

inline H262VideoMode::vbvBufferSize::reference H262VideoMode::set_vbvBufferSize (vbvBufferSize::value_type::int_type value)
{
  includeOptionalField( e_vbvBufferSize, 2);
  return *static_cast<vbvBufferSize::pointer>(fields[2]) = value;
}

inline void H262VideoMode::omit_vbvBufferSize ()
{ removeOptionalField( e_vbvBufferSize); }

inline bool H262VideoMode::vbvBufferSize_isPresent () const
{ return hasOptionalField( e_vbvBufferSize); }

inline H262VideoMode::samplesPerLine::const_reference H262VideoMode::get_samplesPerLine () const
{
  assert(hasOptionalField(e_samplesPerLine));
  return *static_cast<samplesPerLine::const_pointer>(fields[3]);
}

inline H262VideoMode::samplesPerLine::reference H262VideoMode::ref_samplesPerLine ()
{
  assert(hasOptionalField(e_samplesPerLine));
  return *static_cast<samplesPerLine::pointer>(fields[3]);
}

inline H262VideoMode::samplesPerLine::reference H262VideoMode::set_samplesPerLine ()
{
  includeOptionalField( e_samplesPerLine, 3);
  return *static_cast<samplesPerLine::pointer>(fields[3]);
}

inline H262VideoMode::samplesPerLine::reference H262VideoMode::set_samplesPerLine (samplesPerLine::value_type::int_type value)
{
  includeOptionalField( e_samplesPerLine, 3);
  return *static_cast<samplesPerLine::pointer>(fields[3]) = value;
}

inline void H262VideoMode::omit_samplesPerLine ()
{ removeOptionalField( e_samplesPerLine); }

inline bool H262VideoMode::samplesPerLine_isPresent () const
{ return hasOptionalField( e_samplesPerLine); }

inline H262VideoMode::linesPerFrame::const_reference H262VideoMode::get_linesPerFrame () const
{
  assert(hasOptionalField(e_linesPerFrame));
  return *static_cast<linesPerFrame::const_pointer>(fields[4]);
}

inline H262VideoMode::linesPerFrame::reference H262VideoMode::ref_linesPerFrame ()
{
  assert(hasOptionalField(e_linesPerFrame));
  return *static_cast<linesPerFrame::pointer>(fields[4]);
}

inline H262VideoMode::linesPerFrame::reference H262VideoMode::set_linesPerFrame ()
{
  includeOptionalField( e_linesPerFrame, 4);
  return *static_cast<linesPerFrame::pointer>(fields[4]);
}

inline H262VideoMode::linesPerFrame::reference H262VideoMode::set_linesPerFrame (linesPerFrame::value_type::int_type value)
{
  includeOptionalField( e_linesPerFrame, 4);
  return *static_cast<linesPerFrame::pointer>(fields[4]) = value;
}

inline void H262VideoMode::omit_linesPerFrame ()
{ removeOptionalField( e_linesPerFrame); }

inline bool H262VideoMode::linesPerFrame_isPresent () const
{ return hasOptionalField( e_linesPerFrame); }

inline H262VideoMode::framesPerSecond::const_reference H262VideoMode::get_framesPerSecond () const
{
  assert(hasOptionalField(e_framesPerSecond));
  return *static_cast<framesPerSecond::const_pointer>(fields[5]);
}

inline H262VideoMode::framesPerSecond::reference H262VideoMode::ref_framesPerSecond ()
{
  assert(hasOptionalField(e_framesPerSecond));
  return *static_cast<framesPerSecond::pointer>(fields[5]);
}

inline H262VideoMode::framesPerSecond::reference H262VideoMode::set_framesPerSecond ()
{
  includeOptionalField( e_framesPerSecond, 5);
  return *static_cast<framesPerSecond::pointer>(fields[5]);
}

inline H262VideoMode::framesPerSecond::reference H262VideoMode::set_framesPerSecond (framesPerSecond::value_type::int_type value)
{
  includeOptionalField( e_framesPerSecond, 5);
  return *static_cast<framesPerSecond::pointer>(fields[5]) = value;
}

inline void H262VideoMode::omit_framesPerSecond ()
{ removeOptionalField( e_framesPerSecond); }

inline bool H262VideoMode::framesPerSecond_isPresent () const
{ return hasOptionalField( e_framesPerSecond); }

inline H262VideoMode::luminanceSampleRate::const_reference H262VideoMode::get_luminanceSampleRate () const
{
  assert(hasOptionalField(e_luminanceSampleRate));
  return *static_cast<luminanceSampleRate::const_pointer>(fields[6]);
}

inline H262VideoMode::luminanceSampleRate::reference H262VideoMode::ref_luminanceSampleRate ()
{
  assert(hasOptionalField(e_luminanceSampleRate));
  return *static_cast<luminanceSampleRate::pointer>(fields[6]);
}

inline H262VideoMode::luminanceSampleRate::reference H262VideoMode::set_luminanceSampleRate ()
{
  includeOptionalField( e_luminanceSampleRate, 6);
  return *static_cast<luminanceSampleRate::pointer>(fields[6]);
}

inline H262VideoMode::luminanceSampleRate::reference H262VideoMode::set_luminanceSampleRate (luminanceSampleRate::value_type::int_type value)
{
  includeOptionalField( e_luminanceSampleRate, 6);
  return *static_cast<luminanceSampleRate::pointer>(fields[6]) = value;
}

inline void H262VideoMode::omit_luminanceSampleRate ()
{ removeOptionalField( e_luminanceSampleRate); }

inline bool H262VideoMode::luminanceSampleRate_isPresent () const
{ return hasOptionalField( e_luminanceSampleRate); }

inline void H262VideoMode::swap(H262VideoMode& other)
{ Inherited::swap(other); }

inline H262VideoMode* H262VideoMode::clone() const
{ return static_cast<H262VideoMode*> (Inherited::clone()); }

inline IS11172AudioMode::audioLayer::const_reference IS11172AudioMode::get_audioLayer () const
{ return *static_cast<audioLayer::const_pointer>(fields[0]);}

inline IS11172AudioMode::audioLayer::reference IS11172AudioMode::ref_audioLayer ()
{ return *static_cast<audioLayer::pointer>(fields[0]);}

inline IS11172AudioMode::audioLayer::reference IS11172AudioMode::set_audioLayer ()
{ return *static_cast<audioLayer::pointer>(fields[0]);}

inline IS11172AudioMode::audioLayer::reference IS11172AudioMode::set_audioLayer (audioLayer::const_reference value)
{ return *static_cast<audioLayer::pointer>(fields[0]) = value ;}

inline IS11172AudioMode::audioSampling::const_reference IS11172AudioMode::get_audioSampling () const
{ return *static_cast<audioSampling::const_pointer>(fields[1]);}

inline IS11172AudioMode::audioSampling::reference IS11172AudioMode::ref_audioSampling ()
{ return *static_cast<audioSampling::pointer>(fields[1]);}

inline IS11172AudioMode::audioSampling::reference IS11172AudioMode::set_audioSampling ()
{ return *static_cast<audioSampling::pointer>(fields[1]);}

inline IS11172AudioMode::audioSampling::reference IS11172AudioMode::set_audioSampling (audioSampling::const_reference value)
{ return *static_cast<audioSampling::pointer>(fields[1]) = value ;}

inline IS11172AudioMode::multichannelType::const_reference IS11172AudioMode::get_multichannelType () const
{ return *static_cast<multichannelType::const_pointer>(fields[2]);}

inline IS11172AudioMode::multichannelType::reference IS11172AudioMode::ref_multichannelType ()
{ return *static_cast<multichannelType::pointer>(fields[2]);}

inline IS11172AudioMode::multichannelType::reference IS11172AudioMode::set_multichannelType ()
{ return *static_cast<multichannelType::pointer>(fields[2]);}

inline IS11172AudioMode::multichannelType::reference IS11172AudioMode::set_multichannelType (multichannelType::const_reference value)
{ return *static_cast<multichannelType::pointer>(fields[2]) = value ;}

inline IS11172AudioMode::bitRate::const_reference IS11172AudioMode::get_bitRate () const
{ return *static_cast<bitRate::const_pointer>(fields[3]);}

inline IS11172AudioMode::bitRate::reference IS11172AudioMode::ref_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[3]);}

inline IS11172AudioMode::bitRate::reference IS11172AudioMode::set_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[3]);}

inline IS11172AudioMode::bitRate::reference IS11172AudioMode::set_bitRate (bitRate::value_type::int_type value)
{ return *static_cast<bitRate::pointer>(fields[3]) = value ;}

inline void IS11172AudioMode::swap(IS11172AudioMode& other)
{ Inherited::swap(other); }

inline IS11172AudioMode* IS11172AudioMode::clone() const
{ return static_cast<IS11172AudioMode*> (Inherited::clone()); }

inline IS13818AudioMode::audioLayer::const_reference IS13818AudioMode::get_audioLayer () const
{ return *static_cast<audioLayer::const_pointer>(fields[0]);}

inline IS13818AudioMode::audioLayer::reference IS13818AudioMode::ref_audioLayer ()
{ return *static_cast<audioLayer::pointer>(fields[0]);}

inline IS13818AudioMode::audioLayer::reference IS13818AudioMode::set_audioLayer ()
{ return *static_cast<audioLayer::pointer>(fields[0]);}

inline IS13818AudioMode::audioLayer::reference IS13818AudioMode::set_audioLayer (audioLayer::const_reference value)
{ return *static_cast<audioLayer::pointer>(fields[0]) = value ;}

inline IS13818AudioMode::audioSampling::const_reference IS13818AudioMode::get_audioSampling () const
{ return *static_cast<audioSampling::const_pointer>(fields[1]);}

inline IS13818AudioMode::audioSampling::reference IS13818AudioMode::ref_audioSampling ()
{ return *static_cast<audioSampling::pointer>(fields[1]);}

inline IS13818AudioMode::audioSampling::reference IS13818AudioMode::set_audioSampling ()
{ return *static_cast<audioSampling::pointer>(fields[1]);}

inline IS13818AudioMode::audioSampling::reference IS13818AudioMode::set_audioSampling (audioSampling::const_reference value)
{ return *static_cast<audioSampling::pointer>(fields[1]) = value ;}

inline IS13818AudioMode::multichannelType::const_reference IS13818AudioMode::get_multichannelType () const
{ return *static_cast<multichannelType::const_pointer>(fields[2]);}

inline IS13818AudioMode::multichannelType::reference IS13818AudioMode::ref_multichannelType ()
{ return *static_cast<multichannelType::pointer>(fields[2]);}

inline IS13818AudioMode::multichannelType::reference IS13818AudioMode::set_multichannelType ()
{ return *static_cast<multichannelType::pointer>(fields[2]);}

inline IS13818AudioMode::multichannelType::reference IS13818AudioMode::set_multichannelType (multichannelType::const_reference value)
{ return *static_cast<multichannelType::pointer>(fields[2]) = value ;}

inline IS13818AudioMode::lowFrequencyEnhancement::const_reference IS13818AudioMode::get_lowFrequencyEnhancement () const
{ return *static_cast<lowFrequencyEnhancement::const_pointer>(fields[3]);}

inline IS13818AudioMode::lowFrequencyEnhancement::reference IS13818AudioMode::ref_lowFrequencyEnhancement ()
{ return *static_cast<lowFrequencyEnhancement::pointer>(fields[3]);}

inline IS13818AudioMode::lowFrequencyEnhancement::reference IS13818AudioMode::set_lowFrequencyEnhancement ()
{ return *static_cast<lowFrequencyEnhancement::pointer>(fields[3]);}

inline IS13818AudioMode::lowFrequencyEnhancement::reference IS13818AudioMode::set_lowFrequencyEnhancement (bool value)
{ return *static_cast<lowFrequencyEnhancement::pointer>(fields[3]) = value ;}

inline IS13818AudioMode::multilingual::const_reference IS13818AudioMode::get_multilingual () const
{ return *static_cast<multilingual::const_pointer>(fields[4]);}

inline IS13818AudioMode::multilingual::reference IS13818AudioMode::ref_multilingual ()
{ return *static_cast<multilingual::pointer>(fields[4]);}

inline IS13818AudioMode::multilingual::reference IS13818AudioMode::set_multilingual ()
{ return *static_cast<multilingual::pointer>(fields[4]);}

inline IS13818AudioMode::multilingual::reference IS13818AudioMode::set_multilingual (bool value)
{ return *static_cast<multilingual::pointer>(fields[4]) = value ;}

inline IS13818AudioMode::bitRate::const_reference IS13818AudioMode::get_bitRate () const
{ return *static_cast<bitRate::const_pointer>(fields[5]);}

inline IS13818AudioMode::bitRate::reference IS13818AudioMode::ref_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[5]);}

inline IS13818AudioMode::bitRate::reference IS13818AudioMode::set_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[5]);}

inline IS13818AudioMode::bitRate::reference IS13818AudioMode::set_bitRate (bitRate::value_type::int_type value)
{ return *static_cast<bitRate::pointer>(fields[5]) = value ;}

inline void IS13818AudioMode::swap(IS13818AudioMode& other)
{ Inherited::swap(other); }

inline IS13818AudioMode* IS13818AudioMode::clone() const
{ return static_cast<IS13818AudioMode*> (Inherited::clone()); }

inline G7231AnnexCMode::maxAl_sduAudioFrames::const_reference G7231AnnexCMode::get_maxAl_sduAudioFrames () const
{ return *static_cast<maxAl_sduAudioFrames::const_pointer>(fields[0]);}

inline G7231AnnexCMode::maxAl_sduAudioFrames::reference G7231AnnexCMode::ref_maxAl_sduAudioFrames ()
{ return *static_cast<maxAl_sduAudioFrames::pointer>(fields[0]);}

inline G7231AnnexCMode::maxAl_sduAudioFrames::reference G7231AnnexCMode::set_maxAl_sduAudioFrames ()
{ return *static_cast<maxAl_sduAudioFrames::pointer>(fields[0]);}

inline G7231AnnexCMode::maxAl_sduAudioFrames::reference G7231AnnexCMode::set_maxAl_sduAudioFrames (maxAl_sduAudioFrames::value_type::int_type value)
{ return *static_cast<maxAl_sduAudioFrames::pointer>(fields[0]) = value ;}

inline G7231AnnexCMode::silenceSuppression::const_reference G7231AnnexCMode::get_silenceSuppression () const
{ return *static_cast<silenceSuppression::const_pointer>(fields[1]);}

inline G7231AnnexCMode::silenceSuppression::reference G7231AnnexCMode::ref_silenceSuppression ()
{ return *static_cast<silenceSuppression::pointer>(fields[1]);}

inline G7231AnnexCMode::silenceSuppression::reference G7231AnnexCMode::set_silenceSuppression ()
{ return *static_cast<silenceSuppression::pointer>(fields[1]);}

inline G7231AnnexCMode::silenceSuppression::reference G7231AnnexCMode::set_silenceSuppression (bool value)
{ return *static_cast<silenceSuppression::pointer>(fields[1]) = value ;}

inline G7231AnnexCMode::g723AnnexCAudioMode::const_reference G7231AnnexCMode::get_g723AnnexCAudioMode () const
{ return *static_cast<g723AnnexCAudioMode::const_pointer>(fields[2]);}

inline G7231AnnexCMode::g723AnnexCAudioMode::reference G7231AnnexCMode::ref_g723AnnexCAudioMode ()
{ return *static_cast<g723AnnexCAudioMode::pointer>(fields[2]);}

inline G7231AnnexCMode::g723AnnexCAudioMode::reference G7231AnnexCMode::set_g723AnnexCAudioMode ()
{ return *static_cast<g723AnnexCAudioMode::pointer>(fields[2]);}

inline G7231AnnexCMode::g723AnnexCAudioMode::reference G7231AnnexCMode::set_g723AnnexCAudioMode (g723AnnexCAudioMode::const_reference value)
{ return *static_cast<g723AnnexCAudioMode::pointer>(fields[2]) = value ;}

inline void G7231AnnexCMode::swap(G7231AnnexCMode& other)
{ Inherited::swap(other); }

inline G7231AnnexCMode* G7231AnnexCMode::clone() const
{ return static_cast<G7231AnnexCMode*> (Inherited::clone()); }

inline MaintenanceLoopRequest::type::const_reference MaintenanceLoopRequest::get_type () const
{ return *static_cast<type::const_pointer>(fields[0]);}

inline MaintenanceLoopRequest::type::reference MaintenanceLoopRequest::ref_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline MaintenanceLoopRequest::type::reference MaintenanceLoopRequest::set_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline MaintenanceLoopRequest::type::reference MaintenanceLoopRequest::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[0]) = value ;}

inline void MaintenanceLoopRequest::swap(MaintenanceLoopRequest& other)
{ Inherited::swap(other); }

inline MaintenanceLoopRequest* MaintenanceLoopRequest::clone() const
{ return static_cast<MaintenanceLoopRequest*> (Inherited::clone()); }

inline MaintenanceLoopAck::type::const_reference MaintenanceLoopAck::get_type () const
{ return *static_cast<type::const_pointer>(fields[0]);}

inline MaintenanceLoopAck::type::reference MaintenanceLoopAck::ref_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline MaintenanceLoopAck::type::reference MaintenanceLoopAck::set_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline MaintenanceLoopAck::type::reference MaintenanceLoopAck::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[0]) = value ;}

inline void MaintenanceLoopAck::swap(MaintenanceLoopAck& other)
{ Inherited::swap(other); }

inline MaintenanceLoopAck* MaintenanceLoopAck::clone() const
{ return static_cast<MaintenanceLoopAck*> (Inherited::clone()); }

inline MaintenanceLoopReject::type::const_reference MaintenanceLoopReject::get_type () const
{ return *static_cast<type::const_pointer>(fields[0]);}

inline MaintenanceLoopReject::type::reference MaintenanceLoopReject::ref_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline MaintenanceLoopReject::type::reference MaintenanceLoopReject::set_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline MaintenanceLoopReject::type::reference MaintenanceLoopReject::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[0]) = value ;}

inline MaintenanceLoopReject::cause::const_reference MaintenanceLoopReject::get_cause () const
{ return *static_cast<cause::const_pointer>(fields[1]);}

inline MaintenanceLoopReject::cause::reference MaintenanceLoopReject::ref_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline MaintenanceLoopReject::cause::reference MaintenanceLoopReject::set_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline MaintenanceLoopReject::cause::reference MaintenanceLoopReject::set_cause (cause::const_reference value)
{ return *static_cast<cause::pointer>(fields[1]) = value ;}

inline void MaintenanceLoopReject::swap(MaintenanceLoopReject& other)
{ Inherited::swap(other); }

inline MaintenanceLoopReject* MaintenanceLoopReject::clone() const
{ return static_cast<MaintenanceLoopReject*> (Inherited::clone()); }

inline TerminalLabel::mcuNumber::const_reference TerminalLabel::get_mcuNumber () const
{ return *static_cast<mcuNumber::const_pointer>(fields[0]);}

inline TerminalLabel::mcuNumber::reference TerminalLabel::ref_mcuNumber ()
{ return *static_cast<mcuNumber::pointer>(fields[0]);}

inline TerminalLabel::mcuNumber::reference TerminalLabel::set_mcuNumber ()
{ return *static_cast<mcuNumber::pointer>(fields[0]);}

inline TerminalLabel::mcuNumber::reference TerminalLabel::set_mcuNumber (mcuNumber::value_type::int_type value)
{ return *static_cast<mcuNumber::pointer>(fields[0]) = value ;}

inline TerminalLabel::terminalNumber::const_reference TerminalLabel::get_terminalNumber () const
{ return *static_cast<terminalNumber::const_pointer>(fields[1]);}

inline TerminalLabel::terminalNumber::reference TerminalLabel::ref_terminalNumber ()
{ return *static_cast<terminalNumber::pointer>(fields[1]);}

inline TerminalLabel::terminalNumber::reference TerminalLabel::set_terminalNumber ()
{ return *static_cast<terminalNumber::pointer>(fields[1]);}

inline TerminalLabel::terminalNumber::reference TerminalLabel::set_terminalNumber (terminalNumber::value_type::int_type value)
{ return *static_cast<terminalNumber::pointer>(fields[1]) = value ;}

inline void TerminalLabel::swap(TerminalLabel& other)
{ Inherited::swap(other); }

inline TerminalLabel* TerminalLabel::clone() const
{ return static_cast<TerminalLabel*> (Inherited::clone()); }

inline TerminalInformation::terminalLabel::const_reference TerminalInformation::get_terminalLabel () const
{ return *static_cast<terminalLabel::const_pointer>(fields[0]);}

inline TerminalInformation::terminalLabel::reference TerminalInformation::ref_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline TerminalInformation::terminalLabel::reference TerminalInformation::set_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline TerminalInformation::terminalLabel::reference TerminalInformation::set_terminalLabel (terminalLabel::const_reference value)
{ return *static_cast<terminalLabel::pointer>(fields[0]) = value ;}

inline TerminalInformation::terminalID::const_reference TerminalInformation::get_terminalID () const
{ return *static_cast<terminalID::const_pointer>(fields[1]);}

inline TerminalInformation::terminalID::reference TerminalInformation::ref_terminalID ()
{ return *static_cast<terminalID::pointer>(fields[1]);}

inline TerminalInformation::terminalID::reference TerminalInformation::set_terminalID ()
{ return *static_cast<terminalID::pointer>(fields[1]);}

inline TerminalInformation::terminalID::reference TerminalInformation::set_terminalID (const std::vector<char>& value)
{ return *static_cast<terminalID::pointer>(fields[1]) = value ;}

inline void TerminalInformation::swap(TerminalInformation& other)
{ Inherited::swap(other); }

inline TerminalInformation* TerminalInformation::clone() const
{ return static_cast<TerminalInformation*> (Inherited::clone()); }

inline RemoteMCResponse::accept::reference RemoteMCResponse::select_accept ()
{
    return *static_cast<accept::pointer>(setSelection(accept::id_, ASN1::AbstractData::create( &accept::value_type::theInfo)));
}

inline bool RemoteMCResponse::accept_isSelected() const
{ 
    return currentSelection() == accept::id_; 
}

inline RemoteMCResponse::reject::const_reference RemoteMCResponse::get_reject () const
{
    assert(currentSelection() ==reject::id_);
    return *static_cast<reject::const_pointer>(choice.get());
}

inline RemoteMCResponse::reject::reference RemoteMCResponse::ref_reject ()
{
    assert(currentSelection() ==reject::id_);
    return *static_cast<reject::pointer>(choice.get());
}

inline RemoteMCResponse::reject::reference RemoteMCResponse::select_reject ()
{
    return *static_cast<reject::pointer>(setSelection(reject::id_, ASN1::AbstractData::create( &reject::value_type::theInfo)));
}

inline RemoteMCResponse::reject::reference RemoteMCResponse::select_reject (RemoteMCResponse::reject::const_reference value)
{
    return select_reject() = value;
}

inline bool RemoteMCResponse::reject_isSelected() const
{ 
    return currentSelection() == reject::id_; 
}

inline RemoteMCResponse::RemoteMCResponse(accept::Id id, accept::const_reference value)
  : Inherited(&theInfo, id, new accept::value_type(value) )
{ }

inline RemoteMCResponse::RemoteMCResponse(reject::Id id, reject::const_reference value)
  : Inherited(&theInfo, id, new reject::value_type(value) )
{ }


inline void RemoteMCResponse::swap(RemoteMCResponse & other)
{  Inherited::swap(other); }

inline RemoteMCResponse* RemoteMCResponse::clone() const
{ return static_cast<RemoteMCResponse*> (Inherited::clone()); }

inline bool RemoteMCResponse::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline LogicalChannelRateReject::sequenceNumber::const_reference LogicalChannelRateReject::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline LogicalChannelRateReject::sequenceNumber::reference LogicalChannelRateReject::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline LogicalChannelRateReject::sequenceNumber::reference LogicalChannelRateReject::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline LogicalChannelRateReject::sequenceNumber::reference LogicalChannelRateReject::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline LogicalChannelRateReject::logicalChannelNumber::const_reference LogicalChannelRateReject::get_logicalChannelNumber () const
{ return *static_cast<logicalChannelNumber::const_pointer>(fields[1]);}

inline LogicalChannelRateReject::logicalChannelNumber::reference LogicalChannelRateReject::ref_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[1]);}

inline LogicalChannelRateReject::logicalChannelNumber::reference LogicalChannelRateReject::set_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[1]);}

inline LogicalChannelRateReject::logicalChannelNumber::reference LogicalChannelRateReject::set_logicalChannelNumber (logicalChannelNumber::value_type::int_type value)
{ return *static_cast<logicalChannelNumber::pointer>(fields[1]) = value ;}

inline LogicalChannelRateReject::rejectReason::const_reference LogicalChannelRateReject::get_rejectReason () const
{ return *static_cast<rejectReason::const_pointer>(fields[2]);}

inline LogicalChannelRateReject::rejectReason::reference LogicalChannelRateReject::ref_rejectReason ()
{ return *static_cast<rejectReason::pointer>(fields[2]);}

inline LogicalChannelRateReject::rejectReason::reference LogicalChannelRateReject::set_rejectReason ()
{ return *static_cast<rejectReason::pointer>(fields[2]);}

inline LogicalChannelRateReject::rejectReason::reference LogicalChannelRateReject::set_rejectReason (rejectReason::const_reference value)
{ return *static_cast<rejectReason::pointer>(fields[2]) = value ;}

inline LogicalChannelRateReject::currentMaximumBitRate::const_reference LogicalChannelRateReject::get_currentMaximumBitRate () const
{
  assert(hasOptionalField(e_currentMaximumBitRate));
  return *static_cast<currentMaximumBitRate::const_pointer>(fields[3]);
}

inline LogicalChannelRateReject::currentMaximumBitRate::reference LogicalChannelRateReject::ref_currentMaximumBitRate ()
{
  assert(hasOptionalField(e_currentMaximumBitRate));
  return *static_cast<currentMaximumBitRate::pointer>(fields[3]);
}

inline LogicalChannelRateReject::currentMaximumBitRate::reference LogicalChannelRateReject::set_currentMaximumBitRate ()
{
  includeOptionalField( e_currentMaximumBitRate, 3);
  return *static_cast<currentMaximumBitRate::pointer>(fields[3]);
}

inline LogicalChannelRateReject::currentMaximumBitRate::reference LogicalChannelRateReject::set_currentMaximumBitRate (currentMaximumBitRate::value_type::int_type value)
{
  includeOptionalField( e_currentMaximumBitRate, 3);
  return *static_cast<currentMaximumBitRate::pointer>(fields[3]) = value;
}

inline void LogicalChannelRateReject::omit_currentMaximumBitRate ()
{ removeOptionalField( e_currentMaximumBitRate); }

inline bool LogicalChannelRateReject::currentMaximumBitRate_isPresent () const
{ return hasOptionalField( e_currentMaximumBitRate); }

inline void LogicalChannelRateReject::swap(LogicalChannelRateReject& other)
{ Inherited::swap(other); }

inline LogicalChannelRateReject* LogicalChannelRateReject::clone() const
{ return static_cast<LogicalChannelRateReject*> (Inherited::clone()); }

inline SendTerminalCapabilitySet::specificRequest::const_reference SendTerminalCapabilitySet::get_specificRequest () const
{
    assert(currentSelection() ==specificRequest::id_);
    return *static_cast<specificRequest::const_pointer>(choice.get());
}

inline SendTerminalCapabilitySet::specificRequest::reference SendTerminalCapabilitySet::ref_specificRequest ()
{
    assert(currentSelection() ==specificRequest::id_);
    return *static_cast<specificRequest::pointer>(choice.get());
}

inline SendTerminalCapabilitySet::specificRequest::reference SendTerminalCapabilitySet::select_specificRequest ()
{
    return *static_cast<specificRequest::pointer>(setSelection(specificRequest::id_, ASN1::AbstractData::create( &specificRequest::value_type::theInfo)));
}

inline SendTerminalCapabilitySet::specificRequest::reference SendTerminalCapabilitySet::select_specificRequest (SendTerminalCapabilitySet::specificRequest::const_reference value)
{
    return select_specificRequest() = value;
}

inline bool SendTerminalCapabilitySet::specificRequest_isSelected() const
{ 
    return currentSelection() == specificRequest::id_; 
}

inline SendTerminalCapabilitySet::genericRequest::reference SendTerminalCapabilitySet::select_genericRequest ()
{
    return *static_cast<genericRequest::pointer>(setSelection(genericRequest::id_, ASN1::AbstractData::create( &genericRequest::value_type::theInfo)));
}

inline bool SendTerminalCapabilitySet::genericRequest_isSelected() const
{ 
    return currentSelection() == genericRequest::id_; 
}

inline SendTerminalCapabilitySet::SendTerminalCapabilitySet(specificRequest::Id id, specificRequest::const_reference value)
  : Inherited(&theInfo, id, new specificRequest::value_type(value) )
{ }

inline SendTerminalCapabilitySet::SendTerminalCapabilitySet(genericRequest::Id id, genericRequest::const_reference value)
  : Inherited(&theInfo, id, new genericRequest::value_type(value) )
{ }


inline void SendTerminalCapabilitySet::swap(SendTerminalCapabilitySet & other)
{  Inherited::swap(other); }

inline SendTerminalCapabilitySet* SendTerminalCapabilitySet::clone() const
{ return static_cast<SendTerminalCapabilitySet*> (Inherited::clone()); }

inline bool SendTerminalCapabilitySet::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline FlowControlCommand::scope::const_reference FlowControlCommand::get_scope () const
{ return *static_cast<scope::const_pointer>(fields[0]);}

inline FlowControlCommand::scope::reference FlowControlCommand::ref_scope ()
{ return *static_cast<scope::pointer>(fields[0]);}

inline FlowControlCommand::scope::reference FlowControlCommand::set_scope ()
{ return *static_cast<scope::pointer>(fields[0]);}

inline FlowControlCommand::scope::reference FlowControlCommand::set_scope (scope::const_reference value)
{ return *static_cast<scope::pointer>(fields[0]) = value ;}

inline FlowControlCommand::restriction::const_reference FlowControlCommand::get_restriction () const
{ return *static_cast<restriction::const_pointer>(fields[1]);}

inline FlowControlCommand::restriction::reference FlowControlCommand::ref_restriction ()
{ return *static_cast<restriction::pointer>(fields[1]);}

inline FlowControlCommand::restriction::reference FlowControlCommand::set_restriction ()
{ return *static_cast<restriction::pointer>(fields[1]);}

inline FlowControlCommand::restriction::reference FlowControlCommand::set_restriction (restriction::const_reference value)
{ return *static_cast<restriction::pointer>(fields[1]) = value ;}

inline void FlowControlCommand::swap(FlowControlCommand& other)
{ Inherited::swap(other); }

inline FlowControlCommand* FlowControlCommand::clone() const
{ return static_cast<FlowControlCommand*> (Inherited::clone()); }

inline ConferenceCommand::broadcastMyLogicalChannel::const_reference ConferenceCommand::get_broadcastMyLogicalChannel () const
{
    assert(currentSelection() ==broadcastMyLogicalChannel::id_);
    return *static_cast<broadcastMyLogicalChannel::const_pointer>(choice.get());
}

inline ConferenceCommand::broadcastMyLogicalChannel::reference ConferenceCommand::ref_broadcastMyLogicalChannel ()
{
    assert(currentSelection() ==broadcastMyLogicalChannel::id_);
    return *static_cast<broadcastMyLogicalChannel::pointer>(choice.get());
}

inline ConferenceCommand::broadcastMyLogicalChannel::reference ConferenceCommand::select_broadcastMyLogicalChannel ()
{
    return *static_cast<broadcastMyLogicalChannel::pointer>(setSelection(broadcastMyLogicalChannel::id_, ASN1::AbstractData::create( &broadcastMyLogicalChannel::value_type::theInfo)));
}

inline ConferenceCommand::broadcastMyLogicalChannel::reference ConferenceCommand::select_broadcastMyLogicalChannel (ConferenceCommand::broadcastMyLogicalChannel::value_type::int_type value)
{
    return select_broadcastMyLogicalChannel() = value;
}

inline bool ConferenceCommand::broadcastMyLogicalChannel_isSelected() const
{ 
    return currentSelection() == broadcastMyLogicalChannel::id_; 
}

inline ConferenceCommand::cancelBroadcastMyLogicalChannel::const_reference ConferenceCommand::get_cancelBroadcastMyLogicalChannel () const
{
    assert(currentSelection() ==cancelBroadcastMyLogicalChannel::id_);
    return *static_cast<cancelBroadcastMyLogicalChannel::const_pointer>(choice.get());
}

inline ConferenceCommand::cancelBroadcastMyLogicalChannel::reference ConferenceCommand::ref_cancelBroadcastMyLogicalChannel ()
{
    assert(currentSelection() ==cancelBroadcastMyLogicalChannel::id_);
    return *static_cast<cancelBroadcastMyLogicalChannel::pointer>(choice.get());
}

inline ConferenceCommand::cancelBroadcastMyLogicalChannel::reference ConferenceCommand::select_cancelBroadcastMyLogicalChannel ()
{
    return *static_cast<cancelBroadcastMyLogicalChannel::pointer>(setSelection(cancelBroadcastMyLogicalChannel::id_, ASN1::AbstractData::create( &cancelBroadcastMyLogicalChannel::value_type::theInfo)));
}

inline ConferenceCommand::cancelBroadcastMyLogicalChannel::reference ConferenceCommand::select_cancelBroadcastMyLogicalChannel (ConferenceCommand::cancelBroadcastMyLogicalChannel::value_type::int_type value)
{
    return select_cancelBroadcastMyLogicalChannel() = value;
}

inline bool ConferenceCommand::cancelBroadcastMyLogicalChannel_isSelected() const
{ 
    return currentSelection() == cancelBroadcastMyLogicalChannel::id_; 
}

inline ConferenceCommand::makeTerminalBroadcaster::const_reference ConferenceCommand::get_makeTerminalBroadcaster () const
{
    assert(currentSelection() ==makeTerminalBroadcaster::id_);
    return *static_cast<makeTerminalBroadcaster::const_pointer>(choice.get());
}

inline ConferenceCommand::makeTerminalBroadcaster::reference ConferenceCommand::ref_makeTerminalBroadcaster ()
{
    assert(currentSelection() ==makeTerminalBroadcaster::id_);
    return *static_cast<makeTerminalBroadcaster::pointer>(choice.get());
}

inline ConferenceCommand::makeTerminalBroadcaster::reference ConferenceCommand::select_makeTerminalBroadcaster ()
{
    return *static_cast<makeTerminalBroadcaster::pointer>(setSelection(makeTerminalBroadcaster::id_, ASN1::AbstractData::create( &makeTerminalBroadcaster::value_type::theInfo)));
}

inline ConferenceCommand::makeTerminalBroadcaster::reference ConferenceCommand::select_makeTerminalBroadcaster (ConferenceCommand::makeTerminalBroadcaster::const_reference value)
{
    return select_makeTerminalBroadcaster() = value;
}

inline bool ConferenceCommand::makeTerminalBroadcaster_isSelected() const
{ 
    return currentSelection() == makeTerminalBroadcaster::id_; 
}

inline ConferenceCommand::cancelMakeTerminalBroadcaster::reference ConferenceCommand::select_cancelMakeTerminalBroadcaster ()
{
    return *static_cast<cancelMakeTerminalBroadcaster::pointer>(setSelection(cancelMakeTerminalBroadcaster::id_, ASN1::AbstractData::create( &cancelMakeTerminalBroadcaster::value_type::theInfo)));
}

inline bool ConferenceCommand::cancelMakeTerminalBroadcaster_isSelected() const
{ 
    return currentSelection() == cancelMakeTerminalBroadcaster::id_; 
}

inline ConferenceCommand::sendThisSource::const_reference ConferenceCommand::get_sendThisSource () const
{
    assert(currentSelection() ==sendThisSource::id_);
    return *static_cast<sendThisSource::const_pointer>(choice.get());
}

inline ConferenceCommand::sendThisSource::reference ConferenceCommand::ref_sendThisSource ()
{
    assert(currentSelection() ==sendThisSource::id_);
    return *static_cast<sendThisSource::pointer>(choice.get());
}

inline ConferenceCommand::sendThisSource::reference ConferenceCommand::select_sendThisSource ()
{
    return *static_cast<sendThisSource::pointer>(setSelection(sendThisSource::id_, ASN1::AbstractData::create( &sendThisSource::value_type::theInfo)));
}

inline ConferenceCommand::sendThisSource::reference ConferenceCommand::select_sendThisSource (ConferenceCommand::sendThisSource::const_reference value)
{
    return select_sendThisSource() = value;
}

inline bool ConferenceCommand::sendThisSource_isSelected() const
{ 
    return currentSelection() == sendThisSource::id_; 
}

inline ConferenceCommand::cancelSendThisSource::reference ConferenceCommand::select_cancelSendThisSource ()
{
    return *static_cast<cancelSendThisSource::pointer>(setSelection(cancelSendThisSource::id_, ASN1::AbstractData::create( &cancelSendThisSource::value_type::theInfo)));
}

inline bool ConferenceCommand::cancelSendThisSource_isSelected() const
{ 
    return currentSelection() == cancelSendThisSource::id_; 
}

inline ConferenceCommand::dropConference::reference ConferenceCommand::select_dropConference ()
{
    return *static_cast<dropConference::pointer>(setSelection(dropConference::id_, ASN1::AbstractData::create( &dropConference::value_type::theInfo)));
}

inline bool ConferenceCommand::dropConference_isSelected() const
{ 
    return currentSelection() == dropConference::id_; 
}

inline ConferenceCommand::substituteConferenceIDCommand::const_reference ConferenceCommand::get_substituteConferenceIDCommand () const
{
    assert(currentSelection() ==substituteConferenceIDCommand::id_);
    return *static_cast<substituteConferenceIDCommand::const_pointer>(choice.get());
}

inline ConferenceCommand::substituteConferenceIDCommand::reference ConferenceCommand::ref_substituteConferenceIDCommand ()
{
    assert(currentSelection() ==substituteConferenceIDCommand::id_);
    return *static_cast<substituteConferenceIDCommand::pointer>(choice.get());
}

inline ConferenceCommand::substituteConferenceIDCommand::reference ConferenceCommand::select_substituteConferenceIDCommand ()
{
    return *static_cast<substituteConferenceIDCommand::pointer>(setSelection(substituteConferenceIDCommand::id_, ASN1::AbstractData::create( &substituteConferenceIDCommand::value_type::theInfo)));
}

inline ConferenceCommand::substituteConferenceIDCommand::reference ConferenceCommand::select_substituteConferenceIDCommand (ConferenceCommand::substituteConferenceIDCommand::const_reference value)
{
    return select_substituteConferenceIDCommand() = value;
}

inline bool ConferenceCommand::substituteConferenceIDCommand_isSelected() const
{ 
    return currentSelection() == substituteConferenceIDCommand::id_; 
}

inline ConferenceCommand::ConferenceCommand(broadcastMyLogicalChannel::Id id, broadcastMyLogicalChannel::value_type::int_type value)
  : Inherited(&theInfo, id, new broadcastMyLogicalChannel::value_type(value) )
{ }

inline ConferenceCommand::ConferenceCommand(cancelBroadcastMyLogicalChannel::Id id, cancelBroadcastMyLogicalChannel::value_type::int_type value)
  : Inherited(&theInfo, id, new cancelBroadcastMyLogicalChannel::value_type(value) )
{ }

inline ConferenceCommand::ConferenceCommand(makeTerminalBroadcaster::Id id, makeTerminalBroadcaster::const_reference value)
  : Inherited(&theInfo, id, new makeTerminalBroadcaster::value_type(value) )
{ }

inline ConferenceCommand::ConferenceCommand(cancelMakeTerminalBroadcaster::Id id, cancelMakeTerminalBroadcaster::const_reference value)
  : Inherited(&theInfo, id, new cancelMakeTerminalBroadcaster::value_type(value) )
{ }

inline ConferenceCommand::ConferenceCommand(sendThisSource::Id id, sendThisSource::const_reference value)
  : Inherited(&theInfo, id, new sendThisSource::value_type(value) )
{ }

inline ConferenceCommand::ConferenceCommand(cancelSendThisSource::Id id, cancelSendThisSource::const_reference value)
  : Inherited(&theInfo, id, new cancelSendThisSource::value_type(value) )
{ }

inline ConferenceCommand::ConferenceCommand(dropConference::Id id, dropConference::const_reference value)
  : Inherited(&theInfo, id, new dropConference::value_type(value) )
{ }

inline ConferenceCommand::ConferenceCommand(substituteConferenceIDCommand::Id id, substituteConferenceIDCommand::const_reference value)
  : Inherited(&theInfo, id, new substituteConferenceIDCommand::value_type(value) )
{ }


inline void ConferenceCommand::swap(ConferenceCommand & other)
{  Inherited::swap(other); }

inline ConferenceCommand* ConferenceCommand::clone() const
{ return static_cast<ConferenceCommand*> (Inherited::clone()); }

inline bool ConferenceCommand::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223MultiplexReconfiguration::h223ModeChange::const_reference H223MultiplexReconfiguration::get_h223ModeChange () const
{
    assert(currentSelection() ==h223ModeChange::id_);
    return *static_cast<h223ModeChange::const_pointer>(choice.get());
}

inline H223MultiplexReconfiguration::h223ModeChange::reference H223MultiplexReconfiguration::ref_h223ModeChange ()
{
    assert(currentSelection() ==h223ModeChange::id_);
    return *static_cast<h223ModeChange::pointer>(choice.get());
}

inline H223MultiplexReconfiguration::h223ModeChange::reference H223MultiplexReconfiguration::select_h223ModeChange ()
{
    return *static_cast<h223ModeChange::pointer>(setSelection(h223ModeChange::id_, ASN1::AbstractData::create( &h223ModeChange::value_type::theInfo)));
}

inline H223MultiplexReconfiguration::h223ModeChange::reference H223MultiplexReconfiguration::select_h223ModeChange (H223MultiplexReconfiguration::h223ModeChange::const_reference value)
{
    return select_h223ModeChange() = value;
}

inline bool H223MultiplexReconfiguration::h223ModeChange_isSelected() const
{ 
    return currentSelection() == h223ModeChange::id_; 
}

inline H223MultiplexReconfiguration::h223AnnexADoubleFlag::const_reference H223MultiplexReconfiguration::get_h223AnnexADoubleFlag () const
{
    assert(currentSelection() ==h223AnnexADoubleFlag::id_);
    return *static_cast<h223AnnexADoubleFlag::const_pointer>(choice.get());
}

inline H223MultiplexReconfiguration::h223AnnexADoubleFlag::reference H223MultiplexReconfiguration::ref_h223AnnexADoubleFlag ()
{
    assert(currentSelection() ==h223AnnexADoubleFlag::id_);
    return *static_cast<h223AnnexADoubleFlag::pointer>(choice.get());
}

inline H223MultiplexReconfiguration::h223AnnexADoubleFlag::reference H223MultiplexReconfiguration::select_h223AnnexADoubleFlag ()
{
    return *static_cast<h223AnnexADoubleFlag::pointer>(setSelection(h223AnnexADoubleFlag::id_, ASN1::AbstractData::create( &h223AnnexADoubleFlag::value_type::theInfo)));
}

inline H223MultiplexReconfiguration::h223AnnexADoubleFlag::reference H223MultiplexReconfiguration::select_h223AnnexADoubleFlag (H223MultiplexReconfiguration::h223AnnexADoubleFlag::const_reference value)
{
    return select_h223AnnexADoubleFlag() = value;
}

inline bool H223MultiplexReconfiguration::h223AnnexADoubleFlag_isSelected() const
{ 
    return currentSelection() == h223AnnexADoubleFlag::id_; 
}

inline H223MultiplexReconfiguration::H223MultiplexReconfiguration(h223ModeChange::Id id, h223ModeChange::const_reference value)
  : Inherited(&theInfo, id, new h223ModeChange::value_type(value) )
{ }

inline H223MultiplexReconfiguration::H223MultiplexReconfiguration(h223AnnexADoubleFlag::Id id, h223AnnexADoubleFlag::const_reference value)
  : Inherited(&theInfo, id, new h223AnnexADoubleFlag::value_type(value) )
{ }


inline void H223MultiplexReconfiguration::swap(H223MultiplexReconfiguration & other)
{  Inherited::swap(other); }

inline H223MultiplexReconfiguration* H223MultiplexReconfiguration::clone() const
{ return static_cast<H223MultiplexReconfiguration*> (Inherited::clone()); }

inline bool H223MultiplexReconfiguration::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MobileMultilinkReconfigurationCommand::sampleSize::const_reference MobileMultilinkReconfigurationCommand::get_sampleSize () const
{ return *static_cast<sampleSize::const_pointer>(fields[0]);}

inline MobileMultilinkReconfigurationCommand::sampleSize::reference MobileMultilinkReconfigurationCommand::ref_sampleSize ()
{ return *static_cast<sampleSize::pointer>(fields[0]);}

inline MobileMultilinkReconfigurationCommand::sampleSize::reference MobileMultilinkReconfigurationCommand::set_sampleSize ()
{ return *static_cast<sampleSize::pointer>(fields[0]);}

inline MobileMultilinkReconfigurationCommand::sampleSize::reference MobileMultilinkReconfigurationCommand::set_sampleSize (sampleSize::value_type::int_type value)
{ return *static_cast<sampleSize::pointer>(fields[0]) = value ;}

inline MobileMultilinkReconfigurationCommand::samplesPerFrame::const_reference MobileMultilinkReconfigurationCommand::get_samplesPerFrame () const
{ return *static_cast<samplesPerFrame::const_pointer>(fields[1]);}

inline MobileMultilinkReconfigurationCommand::samplesPerFrame::reference MobileMultilinkReconfigurationCommand::ref_samplesPerFrame ()
{ return *static_cast<samplesPerFrame::pointer>(fields[1]);}

inline MobileMultilinkReconfigurationCommand::samplesPerFrame::reference MobileMultilinkReconfigurationCommand::set_samplesPerFrame ()
{ return *static_cast<samplesPerFrame::pointer>(fields[1]);}

inline MobileMultilinkReconfigurationCommand::samplesPerFrame::reference MobileMultilinkReconfigurationCommand::set_samplesPerFrame (samplesPerFrame::value_type::int_type value)
{ return *static_cast<samplesPerFrame::pointer>(fields[1]) = value ;}

inline MobileMultilinkReconfigurationCommand::status::const_reference MobileMultilinkReconfigurationCommand::get_status () const
{ return *static_cast<status::const_pointer>(fields[2]);}

inline MobileMultilinkReconfigurationCommand::status::reference MobileMultilinkReconfigurationCommand::ref_status ()
{ return *static_cast<status::pointer>(fields[2]);}

inline MobileMultilinkReconfigurationCommand::status::reference MobileMultilinkReconfigurationCommand::set_status ()
{ return *static_cast<status::pointer>(fields[2]);}

inline MobileMultilinkReconfigurationCommand::status::reference MobileMultilinkReconfigurationCommand::set_status (status::const_reference value)
{ return *static_cast<status::pointer>(fields[2]) = value ;}

inline void MobileMultilinkReconfigurationCommand::swap(MobileMultilinkReconfigurationCommand& other)
{ Inherited::swap(other); }

inline MobileMultilinkReconfigurationCommand* MobileMultilinkReconfigurationCommand::clone() const
{ return static_cast<MobileMultilinkReconfigurationCommand*> (Inherited::clone()); }

inline FunctionNotSupported::cause::const_reference FunctionNotSupported::get_cause () const
{ return *static_cast<cause::const_pointer>(fields[0]);}

inline FunctionNotSupported::cause::reference FunctionNotSupported::ref_cause ()
{ return *static_cast<cause::pointer>(fields[0]);}

inline FunctionNotSupported::cause::reference FunctionNotSupported::set_cause ()
{ return *static_cast<cause::pointer>(fields[0]);}

inline FunctionNotSupported::cause::reference FunctionNotSupported::set_cause (cause::const_reference value)
{ return *static_cast<cause::pointer>(fields[0]) = value ;}

inline FunctionNotSupported::returnedFunction::const_reference FunctionNotSupported::get_returnedFunction () const
{
  assert(hasOptionalField(e_returnedFunction));
  return *static_cast<returnedFunction::const_pointer>(fields[1]);
}

inline FunctionNotSupported::returnedFunction::reference FunctionNotSupported::ref_returnedFunction ()
{
  assert(hasOptionalField(e_returnedFunction));
  return *static_cast<returnedFunction::pointer>(fields[1]);
}

inline FunctionNotSupported::returnedFunction::reference FunctionNotSupported::set_returnedFunction ()
{
  includeOptionalField( e_returnedFunction, 1);
  return *static_cast<returnedFunction::pointer>(fields[1]);
}

inline FunctionNotSupported::returnedFunction::reference FunctionNotSupported::set_returnedFunction (const std::vector<char>& value)
{
  includeOptionalField( e_returnedFunction, 1);
  return *static_cast<returnedFunction::pointer>(fields[1]) = value;
}

inline void FunctionNotSupported::omit_returnedFunction ()
{ removeOptionalField( e_returnedFunction); }

inline bool FunctionNotSupported::returnedFunction_isPresent () const
{ return hasOptionalField( e_returnedFunction); }

inline void FunctionNotSupported::swap(FunctionNotSupported& other)
{ Inherited::swap(other); }

inline FunctionNotSupported* FunctionNotSupported::clone() const
{ return static_cast<FunctionNotSupported*> (Inherited::clone()); }

inline ConferenceIndication::sbeNumber::const_reference ConferenceIndication::get_sbeNumber () const
{
    assert(currentSelection() ==sbeNumber::id_);
    return *static_cast<sbeNumber::const_pointer>(choice.get());
}

inline ConferenceIndication::sbeNumber::reference ConferenceIndication::ref_sbeNumber ()
{
    assert(currentSelection() ==sbeNumber::id_);
    return *static_cast<sbeNumber::pointer>(choice.get());
}

inline ConferenceIndication::sbeNumber::reference ConferenceIndication::select_sbeNumber ()
{
    return *static_cast<sbeNumber::pointer>(setSelection(sbeNumber::id_, ASN1::AbstractData::create( &sbeNumber::value_type::theInfo)));
}

inline ConferenceIndication::sbeNumber::reference ConferenceIndication::select_sbeNumber (ConferenceIndication::sbeNumber::value_type::int_type value)
{
    return select_sbeNumber() = value;
}

inline bool ConferenceIndication::sbeNumber_isSelected() const
{ 
    return currentSelection() == sbeNumber::id_; 
}

inline ConferenceIndication::terminalNumberAssign::const_reference ConferenceIndication::get_terminalNumberAssign () const
{
    assert(currentSelection() ==terminalNumberAssign::id_);
    return *static_cast<terminalNumberAssign::const_pointer>(choice.get());
}

inline ConferenceIndication::terminalNumberAssign::reference ConferenceIndication::ref_terminalNumberAssign ()
{
    assert(currentSelection() ==terminalNumberAssign::id_);
    return *static_cast<terminalNumberAssign::pointer>(choice.get());
}

inline ConferenceIndication::terminalNumberAssign::reference ConferenceIndication::select_terminalNumberAssign ()
{
    return *static_cast<terminalNumberAssign::pointer>(setSelection(terminalNumberAssign::id_, ASN1::AbstractData::create( &terminalNumberAssign::value_type::theInfo)));
}

inline ConferenceIndication::terminalNumberAssign::reference ConferenceIndication::select_terminalNumberAssign (ConferenceIndication::terminalNumberAssign::const_reference value)
{
    return select_terminalNumberAssign() = value;
}

inline bool ConferenceIndication::terminalNumberAssign_isSelected() const
{ 
    return currentSelection() == terminalNumberAssign::id_; 
}

inline ConferenceIndication::terminalJoinedConference::const_reference ConferenceIndication::get_terminalJoinedConference () const
{
    assert(currentSelection() ==terminalJoinedConference::id_);
    return *static_cast<terminalJoinedConference::const_pointer>(choice.get());
}

inline ConferenceIndication::terminalJoinedConference::reference ConferenceIndication::ref_terminalJoinedConference ()
{
    assert(currentSelection() ==terminalJoinedConference::id_);
    return *static_cast<terminalJoinedConference::pointer>(choice.get());
}

inline ConferenceIndication::terminalJoinedConference::reference ConferenceIndication::select_terminalJoinedConference ()
{
    return *static_cast<terminalJoinedConference::pointer>(setSelection(terminalJoinedConference::id_, ASN1::AbstractData::create( &terminalJoinedConference::value_type::theInfo)));
}

inline ConferenceIndication::terminalJoinedConference::reference ConferenceIndication::select_terminalJoinedConference (ConferenceIndication::terminalJoinedConference::const_reference value)
{
    return select_terminalJoinedConference() = value;
}

inline bool ConferenceIndication::terminalJoinedConference_isSelected() const
{ 
    return currentSelection() == terminalJoinedConference::id_; 
}

inline ConferenceIndication::terminalLeftConference::const_reference ConferenceIndication::get_terminalLeftConference () const
{
    assert(currentSelection() ==terminalLeftConference::id_);
    return *static_cast<terminalLeftConference::const_pointer>(choice.get());
}

inline ConferenceIndication::terminalLeftConference::reference ConferenceIndication::ref_terminalLeftConference ()
{
    assert(currentSelection() ==terminalLeftConference::id_);
    return *static_cast<terminalLeftConference::pointer>(choice.get());
}

inline ConferenceIndication::terminalLeftConference::reference ConferenceIndication::select_terminalLeftConference ()
{
    return *static_cast<terminalLeftConference::pointer>(setSelection(terminalLeftConference::id_, ASN1::AbstractData::create( &terminalLeftConference::value_type::theInfo)));
}

inline ConferenceIndication::terminalLeftConference::reference ConferenceIndication::select_terminalLeftConference (ConferenceIndication::terminalLeftConference::const_reference value)
{
    return select_terminalLeftConference() = value;
}

inline bool ConferenceIndication::terminalLeftConference_isSelected() const
{ 
    return currentSelection() == terminalLeftConference::id_; 
}

inline ConferenceIndication::seenByAtLeastOneOther::reference ConferenceIndication::select_seenByAtLeastOneOther ()
{
    return *static_cast<seenByAtLeastOneOther::pointer>(setSelection(seenByAtLeastOneOther::id_, ASN1::AbstractData::create( &seenByAtLeastOneOther::value_type::theInfo)));
}

inline bool ConferenceIndication::seenByAtLeastOneOther_isSelected() const
{ 
    return currentSelection() == seenByAtLeastOneOther::id_; 
}

inline ConferenceIndication::cancelSeenByAtLeastOneOther::reference ConferenceIndication::select_cancelSeenByAtLeastOneOther ()
{
    return *static_cast<cancelSeenByAtLeastOneOther::pointer>(setSelection(cancelSeenByAtLeastOneOther::id_, ASN1::AbstractData::create( &cancelSeenByAtLeastOneOther::value_type::theInfo)));
}

inline bool ConferenceIndication::cancelSeenByAtLeastOneOther_isSelected() const
{ 
    return currentSelection() == cancelSeenByAtLeastOneOther::id_; 
}

inline ConferenceIndication::seenByAll::reference ConferenceIndication::select_seenByAll ()
{
    return *static_cast<seenByAll::pointer>(setSelection(seenByAll::id_, ASN1::AbstractData::create( &seenByAll::value_type::theInfo)));
}

inline bool ConferenceIndication::seenByAll_isSelected() const
{ 
    return currentSelection() == seenByAll::id_; 
}

inline ConferenceIndication::cancelSeenByAll::reference ConferenceIndication::select_cancelSeenByAll ()
{
    return *static_cast<cancelSeenByAll::pointer>(setSelection(cancelSeenByAll::id_, ASN1::AbstractData::create( &cancelSeenByAll::value_type::theInfo)));
}

inline bool ConferenceIndication::cancelSeenByAll_isSelected() const
{ 
    return currentSelection() == cancelSeenByAll::id_; 
}

inline ConferenceIndication::terminalYouAreSeeing::const_reference ConferenceIndication::get_terminalYouAreSeeing () const
{
    assert(currentSelection() ==terminalYouAreSeeing::id_);
    return *static_cast<terminalYouAreSeeing::const_pointer>(choice.get());
}

inline ConferenceIndication::terminalYouAreSeeing::reference ConferenceIndication::ref_terminalYouAreSeeing ()
{
    assert(currentSelection() ==terminalYouAreSeeing::id_);
    return *static_cast<terminalYouAreSeeing::pointer>(choice.get());
}

inline ConferenceIndication::terminalYouAreSeeing::reference ConferenceIndication::select_terminalYouAreSeeing ()
{
    return *static_cast<terminalYouAreSeeing::pointer>(setSelection(terminalYouAreSeeing::id_, ASN1::AbstractData::create( &terminalYouAreSeeing::value_type::theInfo)));
}

inline ConferenceIndication::terminalYouAreSeeing::reference ConferenceIndication::select_terminalYouAreSeeing (ConferenceIndication::terminalYouAreSeeing::const_reference value)
{
    return select_terminalYouAreSeeing() = value;
}

inline bool ConferenceIndication::terminalYouAreSeeing_isSelected() const
{ 
    return currentSelection() == terminalYouAreSeeing::id_; 
}

inline ConferenceIndication::requestForFloor::reference ConferenceIndication::select_requestForFloor ()
{
    return *static_cast<requestForFloor::pointer>(setSelection(requestForFloor::id_, ASN1::AbstractData::create( &requestForFloor::value_type::theInfo)));
}

inline bool ConferenceIndication::requestForFloor_isSelected() const
{ 
    return currentSelection() == requestForFloor::id_; 
}

inline ConferenceIndication::withdrawChairToken::reference ConferenceIndication::select_withdrawChairToken ()
{
    return *static_cast<withdrawChairToken::pointer>(setSelection(withdrawChairToken::id_, ASN1::AbstractData::create( &withdrawChairToken::value_type::theInfo)));
}

inline bool ConferenceIndication::withdrawChairToken_isSelected() const
{ 
    return currentSelection() == withdrawChairToken::id_; 
}

inline ConferenceIndication::floorRequested::const_reference ConferenceIndication::get_floorRequested () const
{
    assert(currentSelection() ==floorRequested::id_);
    return *static_cast<floorRequested::const_pointer>(choice.get());
}

inline ConferenceIndication::floorRequested::reference ConferenceIndication::ref_floorRequested ()
{
    assert(currentSelection() ==floorRequested::id_);
    return *static_cast<floorRequested::pointer>(choice.get());
}

inline ConferenceIndication::floorRequested::reference ConferenceIndication::select_floorRequested ()
{
    return *static_cast<floorRequested::pointer>(setSelection(floorRequested::id_, ASN1::AbstractData::create( &floorRequested::value_type::theInfo)));
}

inline ConferenceIndication::floorRequested::reference ConferenceIndication::select_floorRequested (ConferenceIndication::floorRequested::const_reference value)
{
    return select_floorRequested() = value;
}

inline bool ConferenceIndication::floorRequested_isSelected() const
{ 
    return currentSelection() == floorRequested::id_; 
}

inline ConferenceIndication::terminalYouAreSeeingInSubPictureNumber::const_reference ConferenceIndication::get_terminalYouAreSeeingInSubPictureNumber () const
{
    assert(currentSelection() ==terminalYouAreSeeingInSubPictureNumber::id_);
    return *static_cast<terminalYouAreSeeingInSubPictureNumber::const_pointer>(choice.get());
}

inline ConferenceIndication::terminalYouAreSeeingInSubPictureNumber::reference ConferenceIndication::ref_terminalYouAreSeeingInSubPictureNumber ()
{
    assert(currentSelection() ==terminalYouAreSeeingInSubPictureNumber::id_);
    return *static_cast<terminalYouAreSeeingInSubPictureNumber::pointer>(choice.get());
}

inline ConferenceIndication::terminalYouAreSeeingInSubPictureNumber::reference ConferenceIndication::select_terminalYouAreSeeingInSubPictureNumber ()
{
    return *static_cast<terminalYouAreSeeingInSubPictureNumber::pointer>(setSelection(terminalYouAreSeeingInSubPictureNumber::id_, ASN1::AbstractData::create( &terminalYouAreSeeingInSubPictureNumber::value_type::theInfo)));
}

inline ConferenceIndication::terminalYouAreSeeingInSubPictureNumber::reference ConferenceIndication::select_terminalYouAreSeeingInSubPictureNumber (ConferenceIndication::terminalYouAreSeeingInSubPictureNumber::const_reference value)
{
    return select_terminalYouAreSeeingInSubPictureNumber() = value;
}

inline bool ConferenceIndication::terminalYouAreSeeingInSubPictureNumber_isSelected() const
{ 
    return currentSelection() == terminalYouAreSeeingInSubPictureNumber::id_; 
}

inline ConferenceIndication::videoIndicateCompose::const_reference ConferenceIndication::get_videoIndicateCompose () const
{
    assert(currentSelection() ==videoIndicateCompose::id_);
    return *static_cast<videoIndicateCompose::const_pointer>(choice.get());
}

inline ConferenceIndication::videoIndicateCompose::reference ConferenceIndication::ref_videoIndicateCompose ()
{
    assert(currentSelection() ==videoIndicateCompose::id_);
    return *static_cast<videoIndicateCompose::pointer>(choice.get());
}

inline ConferenceIndication::videoIndicateCompose::reference ConferenceIndication::select_videoIndicateCompose ()
{
    return *static_cast<videoIndicateCompose::pointer>(setSelection(videoIndicateCompose::id_, ASN1::AbstractData::create( &videoIndicateCompose::value_type::theInfo)));
}

inline ConferenceIndication::videoIndicateCompose::reference ConferenceIndication::select_videoIndicateCompose (ConferenceIndication::videoIndicateCompose::const_reference value)
{
    return select_videoIndicateCompose() = value;
}

inline bool ConferenceIndication::videoIndicateCompose_isSelected() const
{ 
    return currentSelection() == videoIndicateCompose::id_; 
}

inline ConferenceIndication::ConferenceIndication(sbeNumber::Id id, sbeNumber::value_type::int_type value)
  : Inherited(&theInfo, id, new sbeNumber::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(terminalNumberAssign::Id id, terminalNumberAssign::const_reference value)
  : Inherited(&theInfo, id, new terminalNumberAssign::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(terminalJoinedConference::Id id, terminalJoinedConference::const_reference value)
  : Inherited(&theInfo, id, new terminalJoinedConference::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(terminalLeftConference::Id id, terminalLeftConference::const_reference value)
  : Inherited(&theInfo, id, new terminalLeftConference::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(seenByAtLeastOneOther::Id id, seenByAtLeastOneOther::const_reference value)
  : Inherited(&theInfo, id, new seenByAtLeastOneOther::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(cancelSeenByAtLeastOneOther::Id id, cancelSeenByAtLeastOneOther::const_reference value)
  : Inherited(&theInfo, id, new cancelSeenByAtLeastOneOther::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(seenByAll::Id id, seenByAll::const_reference value)
  : Inherited(&theInfo, id, new seenByAll::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(cancelSeenByAll::Id id, cancelSeenByAll::const_reference value)
  : Inherited(&theInfo, id, new cancelSeenByAll::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(terminalYouAreSeeing::Id id, terminalYouAreSeeing::const_reference value)
  : Inherited(&theInfo, id, new terminalYouAreSeeing::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(requestForFloor::Id id, requestForFloor::const_reference value)
  : Inherited(&theInfo, id, new requestForFloor::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(withdrawChairToken::Id id, withdrawChairToken::const_reference value)
  : Inherited(&theInfo, id, new withdrawChairToken::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(floorRequested::Id id, floorRequested::const_reference value)
  : Inherited(&theInfo, id, new floorRequested::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(terminalYouAreSeeingInSubPictureNumber::Id id, terminalYouAreSeeingInSubPictureNumber::const_reference value)
  : Inherited(&theInfo, id, new terminalYouAreSeeingInSubPictureNumber::value_type(value) )
{ }

inline ConferenceIndication::ConferenceIndication(videoIndicateCompose::Id id, videoIndicateCompose::const_reference value)
  : Inherited(&theInfo, id, new videoIndicateCompose::value_type(value) )
{ }


inline void ConferenceIndication::swap(ConferenceIndication & other)
{  Inherited::swap(other); }

inline ConferenceIndication* ConferenceIndication::clone() const
{ return static_cast<ConferenceIndication*> (Inherited::clone()); }

inline bool ConferenceIndication::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline JitterIndication::scope::const_reference JitterIndication::get_scope () const
{ return *static_cast<scope::const_pointer>(fields[0]);}

inline JitterIndication::scope::reference JitterIndication::ref_scope ()
{ return *static_cast<scope::pointer>(fields[0]);}

inline JitterIndication::scope::reference JitterIndication::set_scope ()
{ return *static_cast<scope::pointer>(fields[0]);}

inline JitterIndication::scope::reference JitterIndication::set_scope (scope::const_reference value)
{ return *static_cast<scope::pointer>(fields[0]) = value ;}

inline JitterIndication::estimatedReceivedJitterMantissa::const_reference JitterIndication::get_estimatedReceivedJitterMantissa () const
{ return *static_cast<estimatedReceivedJitterMantissa::const_pointer>(fields[1]);}

inline JitterIndication::estimatedReceivedJitterMantissa::reference JitterIndication::ref_estimatedReceivedJitterMantissa ()
{ return *static_cast<estimatedReceivedJitterMantissa::pointer>(fields[1]);}

inline JitterIndication::estimatedReceivedJitterMantissa::reference JitterIndication::set_estimatedReceivedJitterMantissa ()
{ return *static_cast<estimatedReceivedJitterMantissa::pointer>(fields[1]);}

inline JitterIndication::estimatedReceivedJitterMantissa::reference JitterIndication::set_estimatedReceivedJitterMantissa (estimatedReceivedJitterMantissa::value_type::int_type value)
{ return *static_cast<estimatedReceivedJitterMantissa::pointer>(fields[1]) = value ;}

inline JitterIndication::estimatedReceivedJitterExponent::const_reference JitterIndication::get_estimatedReceivedJitterExponent () const
{ return *static_cast<estimatedReceivedJitterExponent::const_pointer>(fields[2]);}

inline JitterIndication::estimatedReceivedJitterExponent::reference JitterIndication::ref_estimatedReceivedJitterExponent ()
{ return *static_cast<estimatedReceivedJitterExponent::pointer>(fields[2]);}

inline JitterIndication::estimatedReceivedJitterExponent::reference JitterIndication::set_estimatedReceivedJitterExponent ()
{ return *static_cast<estimatedReceivedJitterExponent::pointer>(fields[2]);}

inline JitterIndication::estimatedReceivedJitterExponent::reference JitterIndication::set_estimatedReceivedJitterExponent (estimatedReceivedJitterExponent::value_type::int_type value)
{ return *static_cast<estimatedReceivedJitterExponent::pointer>(fields[2]) = value ;}

inline JitterIndication::skippedFrameCount::const_reference JitterIndication::get_skippedFrameCount () const
{
  assert(hasOptionalField(e_skippedFrameCount));
  return *static_cast<skippedFrameCount::const_pointer>(fields[3]);
}

inline JitterIndication::skippedFrameCount::reference JitterIndication::ref_skippedFrameCount ()
{
  assert(hasOptionalField(e_skippedFrameCount));
  return *static_cast<skippedFrameCount::pointer>(fields[3]);
}

inline JitterIndication::skippedFrameCount::reference JitterIndication::set_skippedFrameCount ()
{
  includeOptionalField( e_skippedFrameCount, 3);
  return *static_cast<skippedFrameCount::pointer>(fields[3]);
}

inline JitterIndication::skippedFrameCount::reference JitterIndication::set_skippedFrameCount (skippedFrameCount::value_type::int_type value)
{
  includeOptionalField( e_skippedFrameCount, 3);
  return *static_cast<skippedFrameCount::pointer>(fields[3]) = value;
}

inline void JitterIndication::omit_skippedFrameCount ()
{ removeOptionalField( e_skippedFrameCount); }

inline bool JitterIndication::skippedFrameCount_isPresent () const
{ return hasOptionalField( e_skippedFrameCount); }

inline JitterIndication::additionalDecoderBuffer::const_reference JitterIndication::get_additionalDecoderBuffer () const
{
  assert(hasOptionalField(e_additionalDecoderBuffer));
  return *static_cast<additionalDecoderBuffer::const_pointer>(fields[4]);
}

inline JitterIndication::additionalDecoderBuffer::reference JitterIndication::ref_additionalDecoderBuffer ()
{
  assert(hasOptionalField(e_additionalDecoderBuffer));
  return *static_cast<additionalDecoderBuffer::pointer>(fields[4]);
}

inline JitterIndication::additionalDecoderBuffer::reference JitterIndication::set_additionalDecoderBuffer ()
{
  includeOptionalField( e_additionalDecoderBuffer, 4);
  return *static_cast<additionalDecoderBuffer::pointer>(fields[4]);
}

inline JitterIndication::additionalDecoderBuffer::reference JitterIndication::set_additionalDecoderBuffer (additionalDecoderBuffer::value_type::int_type value)
{
  includeOptionalField( e_additionalDecoderBuffer, 4);
  return *static_cast<additionalDecoderBuffer::pointer>(fields[4]) = value;
}

inline void JitterIndication::omit_additionalDecoderBuffer ()
{ removeOptionalField( e_additionalDecoderBuffer); }

inline bool JitterIndication::additionalDecoderBuffer_isPresent () const
{ return hasOptionalField( e_additionalDecoderBuffer); }

inline void JitterIndication::swap(JitterIndication& other)
{ Inherited::swap(other); }

inline JitterIndication* JitterIndication::clone() const
{ return static_cast<JitterIndication*> (Inherited::clone()); }

inline VendorIdentification::vendor::const_reference VendorIdentification::get_vendor () const
{ return *static_cast<vendor::const_pointer>(fields[0]);}

inline VendorIdentification::vendor::reference VendorIdentification::ref_vendor ()
{ return *static_cast<vendor::pointer>(fields[0]);}

inline VendorIdentification::vendor::reference VendorIdentification::set_vendor ()
{ return *static_cast<vendor::pointer>(fields[0]);}

inline VendorIdentification::vendor::reference VendorIdentification::set_vendor (vendor::const_reference value)
{ return *static_cast<vendor::pointer>(fields[0]) = value ;}

inline VendorIdentification::productNumber::const_reference VendorIdentification::get_productNumber () const
{
  assert(hasOptionalField(e_productNumber));
  return *static_cast<productNumber::const_pointer>(fields[1]);
}

inline VendorIdentification::productNumber::reference VendorIdentification::ref_productNumber ()
{
  assert(hasOptionalField(e_productNumber));
  return *static_cast<productNumber::pointer>(fields[1]);
}

inline VendorIdentification::productNumber::reference VendorIdentification::set_productNumber ()
{
  includeOptionalField( e_productNumber, 1);
  return *static_cast<productNumber::pointer>(fields[1]);
}

inline VendorIdentification::productNumber::reference VendorIdentification::set_productNumber (const std::vector<char>& value)
{
  includeOptionalField( e_productNumber, 1);
  return *static_cast<productNumber::pointer>(fields[1]) = value;
}

inline void VendorIdentification::omit_productNumber ()
{ removeOptionalField( e_productNumber); }

inline bool VendorIdentification::productNumber_isPresent () const
{ return hasOptionalField( e_productNumber); }

inline VendorIdentification::versionNumber::const_reference VendorIdentification::get_versionNumber () const
{
  assert(hasOptionalField(e_versionNumber));
  return *static_cast<versionNumber::const_pointer>(fields[2]);
}

inline VendorIdentification::versionNumber::reference VendorIdentification::ref_versionNumber ()
{
  assert(hasOptionalField(e_versionNumber));
  return *static_cast<versionNumber::pointer>(fields[2]);
}

inline VendorIdentification::versionNumber::reference VendorIdentification::set_versionNumber ()
{
  includeOptionalField( e_versionNumber, 2);
  return *static_cast<versionNumber::pointer>(fields[2]);
}

inline VendorIdentification::versionNumber::reference VendorIdentification::set_versionNumber (const std::vector<char>& value)
{
  includeOptionalField( e_versionNumber, 2);
  return *static_cast<versionNumber::pointer>(fields[2]) = value;
}

inline void VendorIdentification::omit_versionNumber ()
{ removeOptionalField( e_versionNumber); }

inline bool VendorIdentification::versionNumber_isPresent () const
{ return hasOptionalField( e_versionNumber); }

inline void VendorIdentification::swap(VendorIdentification& other)
{ Inherited::swap(other); }

inline VendorIdentification* VendorIdentification::clone() const
{ return static_cast<VendorIdentification*> (Inherited::clone()); }

inline FlowControlIndication::scope::const_reference FlowControlIndication::get_scope () const
{ return *static_cast<scope::const_pointer>(fields[0]);}

inline FlowControlIndication::scope::reference FlowControlIndication::ref_scope ()
{ return *static_cast<scope::pointer>(fields[0]);}

inline FlowControlIndication::scope::reference FlowControlIndication::set_scope ()
{ return *static_cast<scope::pointer>(fields[0]);}

inline FlowControlIndication::scope::reference FlowControlIndication::set_scope (scope::const_reference value)
{ return *static_cast<scope::pointer>(fields[0]) = value ;}

inline FlowControlIndication::restriction::const_reference FlowControlIndication::get_restriction () const
{ return *static_cast<restriction::const_pointer>(fields[1]);}

inline FlowControlIndication::restriction::reference FlowControlIndication::ref_restriction ()
{ return *static_cast<restriction::pointer>(fields[1]);}

inline FlowControlIndication::restriction::reference FlowControlIndication::set_restriction ()
{ return *static_cast<restriction::pointer>(fields[1]);}

inline FlowControlIndication::restriction::reference FlowControlIndication::set_restriction (restriction::const_reference value)
{ return *static_cast<restriction::pointer>(fields[1]) = value ;}

inline void FlowControlIndication::swap(FlowControlIndication& other)
{ Inherited::swap(other); }

inline FlowControlIndication* FlowControlIndication::clone() const
{ return static_cast<FlowControlIndication*> (Inherited::clone()); }

inline TerminalCapabilitySetReject_cause::unspecified::reference TerminalCapabilitySetReject_cause::select_unspecified ()
{
    return *static_cast<unspecified::pointer>(setSelection(unspecified::id_, ASN1::AbstractData::create( &unspecified::value_type::theInfo)));
}

inline bool TerminalCapabilitySetReject_cause::unspecified_isSelected() const
{ 
    return currentSelection() == unspecified::id_; 
}

inline TerminalCapabilitySetReject_cause::undefinedTableEntryUsed::reference TerminalCapabilitySetReject_cause::select_undefinedTableEntryUsed ()
{
    return *static_cast<undefinedTableEntryUsed::pointer>(setSelection(undefinedTableEntryUsed::id_, ASN1::AbstractData::create( &undefinedTableEntryUsed::value_type::theInfo)));
}

inline bool TerminalCapabilitySetReject_cause::undefinedTableEntryUsed_isSelected() const
{ 
    return currentSelection() == undefinedTableEntryUsed::id_; 
}

inline TerminalCapabilitySetReject_cause::descriptorCapacityExceeded::reference TerminalCapabilitySetReject_cause::select_descriptorCapacityExceeded ()
{
    return *static_cast<descriptorCapacityExceeded::pointer>(setSelection(descriptorCapacityExceeded::id_, ASN1::AbstractData::create( &descriptorCapacityExceeded::value_type::theInfo)));
}

inline bool TerminalCapabilitySetReject_cause::descriptorCapacityExceeded_isSelected() const
{ 
    return currentSelection() == descriptorCapacityExceeded::id_; 
}

inline TerminalCapabilitySetReject_cause::tableEntryCapacityExceeded::const_reference TerminalCapabilitySetReject_cause::get_tableEntryCapacityExceeded () const
{
    assert(currentSelection() ==tableEntryCapacityExceeded::id_);
    return *static_cast<tableEntryCapacityExceeded::const_pointer>(choice.get());
}

inline TerminalCapabilitySetReject_cause::tableEntryCapacityExceeded::reference TerminalCapabilitySetReject_cause::ref_tableEntryCapacityExceeded ()
{
    assert(currentSelection() ==tableEntryCapacityExceeded::id_);
    return *static_cast<tableEntryCapacityExceeded::pointer>(choice.get());
}

inline TerminalCapabilitySetReject_cause::tableEntryCapacityExceeded::reference TerminalCapabilitySetReject_cause::select_tableEntryCapacityExceeded ()
{
    return *static_cast<tableEntryCapacityExceeded::pointer>(setSelection(tableEntryCapacityExceeded::id_, ASN1::AbstractData::create( &tableEntryCapacityExceeded::value_type::theInfo)));
}

inline TerminalCapabilitySetReject_cause::tableEntryCapacityExceeded::reference TerminalCapabilitySetReject_cause::select_tableEntryCapacityExceeded (TerminalCapabilitySetReject_cause::tableEntryCapacityExceeded::const_reference value)
{
    return select_tableEntryCapacityExceeded() = value;
}

inline bool TerminalCapabilitySetReject_cause::tableEntryCapacityExceeded_isSelected() const
{ 
    return currentSelection() == tableEntryCapacityExceeded::id_; 
}

inline TerminalCapabilitySetReject_cause::TerminalCapabilitySetReject_cause(unspecified::Id id, unspecified::const_reference value)
  : Inherited(&theInfo, id, new unspecified::value_type(value) )
{ }

inline TerminalCapabilitySetReject_cause::TerminalCapabilitySetReject_cause(undefinedTableEntryUsed::Id id, undefinedTableEntryUsed::const_reference value)
  : Inherited(&theInfo, id, new undefinedTableEntryUsed::value_type(value) )
{ }

inline TerminalCapabilitySetReject_cause::TerminalCapabilitySetReject_cause(descriptorCapacityExceeded::Id id, descriptorCapacityExceeded::const_reference value)
  : Inherited(&theInfo, id, new descriptorCapacityExceeded::value_type(value) )
{ }

inline TerminalCapabilitySetReject_cause::TerminalCapabilitySetReject_cause(tableEntryCapacityExceeded::Id id, tableEntryCapacityExceeded::const_reference value)
  : Inherited(&theInfo, id, new tableEntryCapacityExceeded::value_type(value) )
{ }


inline void TerminalCapabilitySetReject_cause::swap(TerminalCapabilitySetReject_cause & other)
{  Inherited::swap(other); }

inline TerminalCapabilitySetReject_cause* TerminalCapabilitySetReject_cause::clone() const
{ return static_cast<TerminalCapabilitySetReject_cause*> (Inherited::clone()); }

inline bool TerminalCapabilitySetReject_cause::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline VCCapability_aal1ViaGateway::gatewayAddress::const_reference VCCapability_aal1ViaGateway::get_gatewayAddress () const
{ return *static_cast<gatewayAddress::const_pointer>(fields[0]);}

inline VCCapability_aal1ViaGateway::gatewayAddress::reference VCCapability_aal1ViaGateway::ref_gatewayAddress ()
{ return *static_cast<gatewayAddress::pointer>(fields[0]);}

inline VCCapability_aal1ViaGateway::gatewayAddress::reference VCCapability_aal1ViaGateway::set_gatewayAddress ()
{ return *static_cast<gatewayAddress::pointer>(fields[0]);}

inline VCCapability_aal1ViaGateway::gatewayAddress::reference VCCapability_aal1ViaGateway::set_gatewayAddress (gatewayAddress::const_reference value)
{ return *static_cast<gatewayAddress::pointer>(fields[0]) = value ;}

inline VCCapability_aal1ViaGateway::nullClockRecovery::const_reference VCCapability_aal1ViaGateway::get_nullClockRecovery () const
{ return *static_cast<nullClockRecovery::const_pointer>(fields[1]);}

inline VCCapability_aal1ViaGateway::nullClockRecovery::reference VCCapability_aal1ViaGateway::ref_nullClockRecovery ()
{ return *static_cast<nullClockRecovery::pointer>(fields[1]);}

inline VCCapability_aal1ViaGateway::nullClockRecovery::reference VCCapability_aal1ViaGateway::set_nullClockRecovery ()
{ return *static_cast<nullClockRecovery::pointer>(fields[1]);}

inline VCCapability_aal1ViaGateway::nullClockRecovery::reference VCCapability_aal1ViaGateway::set_nullClockRecovery (bool value)
{ return *static_cast<nullClockRecovery::pointer>(fields[1]) = value ;}

inline VCCapability_aal1ViaGateway::srtsClockRecovery::const_reference VCCapability_aal1ViaGateway::get_srtsClockRecovery () const
{ return *static_cast<srtsClockRecovery::const_pointer>(fields[2]);}

inline VCCapability_aal1ViaGateway::srtsClockRecovery::reference VCCapability_aal1ViaGateway::ref_srtsClockRecovery ()
{ return *static_cast<srtsClockRecovery::pointer>(fields[2]);}

inline VCCapability_aal1ViaGateway::srtsClockRecovery::reference VCCapability_aal1ViaGateway::set_srtsClockRecovery ()
{ return *static_cast<srtsClockRecovery::pointer>(fields[2]);}

inline VCCapability_aal1ViaGateway::srtsClockRecovery::reference VCCapability_aal1ViaGateway::set_srtsClockRecovery (bool value)
{ return *static_cast<srtsClockRecovery::pointer>(fields[2]) = value ;}

inline VCCapability_aal1ViaGateway::adaptiveClockRecovery::const_reference VCCapability_aal1ViaGateway::get_adaptiveClockRecovery () const
{ return *static_cast<adaptiveClockRecovery::const_pointer>(fields[3]);}

inline VCCapability_aal1ViaGateway::adaptiveClockRecovery::reference VCCapability_aal1ViaGateway::ref_adaptiveClockRecovery ()
{ return *static_cast<adaptiveClockRecovery::pointer>(fields[3]);}

inline VCCapability_aal1ViaGateway::adaptiveClockRecovery::reference VCCapability_aal1ViaGateway::set_adaptiveClockRecovery ()
{ return *static_cast<adaptiveClockRecovery::pointer>(fields[3]);}

inline VCCapability_aal1ViaGateway::adaptiveClockRecovery::reference VCCapability_aal1ViaGateway::set_adaptiveClockRecovery (bool value)
{ return *static_cast<adaptiveClockRecovery::pointer>(fields[3]) = value ;}

inline VCCapability_aal1ViaGateway::nullErrorCorrection::const_reference VCCapability_aal1ViaGateway::get_nullErrorCorrection () const
{ return *static_cast<nullErrorCorrection::const_pointer>(fields[4]);}

inline VCCapability_aal1ViaGateway::nullErrorCorrection::reference VCCapability_aal1ViaGateway::ref_nullErrorCorrection ()
{ return *static_cast<nullErrorCorrection::pointer>(fields[4]);}

inline VCCapability_aal1ViaGateway::nullErrorCorrection::reference VCCapability_aal1ViaGateway::set_nullErrorCorrection ()
{ return *static_cast<nullErrorCorrection::pointer>(fields[4]);}

inline VCCapability_aal1ViaGateway::nullErrorCorrection::reference VCCapability_aal1ViaGateway::set_nullErrorCorrection (bool value)
{ return *static_cast<nullErrorCorrection::pointer>(fields[4]) = value ;}

inline VCCapability_aal1ViaGateway::longInterleaver::const_reference VCCapability_aal1ViaGateway::get_longInterleaver () const
{ return *static_cast<longInterleaver::const_pointer>(fields[5]);}

inline VCCapability_aal1ViaGateway::longInterleaver::reference VCCapability_aal1ViaGateway::ref_longInterleaver ()
{ return *static_cast<longInterleaver::pointer>(fields[5]);}

inline VCCapability_aal1ViaGateway::longInterleaver::reference VCCapability_aal1ViaGateway::set_longInterleaver ()
{ return *static_cast<longInterleaver::pointer>(fields[5]);}

inline VCCapability_aal1ViaGateway::longInterleaver::reference VCCapability_aal1ViaGateway::set_longInterleaver (bool value)
{ return *static_cast<longInterleaver::pointer>(fields[5]) = value ;}

inline VCCapability_aal1ViaGateway::shortInterleaver::const_reference VCCapability_aal1ViaGateway::get_shortInterleaver () const
{ return *static_cast<shortInterleaver::const_pointer>(fields[6]);}

inline VCCapability_aal1ViaGateway::shortInterleaver::reference VCCapability_aal1ViaGateway::ref_shortInterleaver ()
{ return *static_cast<shortInterleaver::pointer>(fields[6]);}

inline VCCapability_aal1ViaGateway::shortInterleaver::reference VCCapability_aal1ViaGateway::set_shortInterleaver ()
{ return *static_cast<shortInterleaver::pointer>(fields[6]);}

inline VCCapability_aal1ViaGateway::shortInterleaver::reference VCCapability_aal1ViaGateway::set_shortInterleaver (bool value)
{ return *static_cast<shortInterleaver::pointer>(fields[6]) = value ;}

inline VCCapability_aal1ViaGateway::errorCorrectionOnly::const_reference VCCapability_aal1ViaGateway::get_errorCorrectionOnly () const
{ return *static_cast<errorCorrectionOnly::const_pointer>(fields[7]);}

inline VCCapability_aal1ViaGateway::errorCorrectionOnly::reference VCCapability_aal1ViaGateway::ref_errorCorrectionOnly ()
{ return *static_cast<errorCorrectionOnly::pointer>(fields[7]);}

inline VCCapability_aal1ViaGateway::errorCorrectionOnly::reference VCCapability_aal1ViaGateway::set_errorCorrectionOnly ()
{ return *static_cast<errorCorrectionOnly::pointer>(fields[7]);}

inline VCCapability_aal1ViaGateway::errorCorrectionOnly::reference VCCapability_aal1ViaGateway::set_errorCorrectionOnly (bool value)
{ return *static_cast<errorCorrectionOnly::pointer>(fields[7]) = value ;}

inline VCCapability_aal1ViaGateway::structuredDataTransfer::const_reference VCCapability_aal1ViaGateway::get_structuredDataTransfer () const
{ return *static_cast<structuredDataTransfer::const_pointer>(fields[8]);}

inline VCCapability_aal1ViaGateway::structuredDataTransfer::reference VCCapability_aal1ViaGateway::ref_structuredDataTransfer ()
{ return *static_cast<structuredDataTransfer::pointer>(fields[8]);}

inline VCCapability_aal1ViaGateway::structuredDataTransfer::reference VCCapability_aal1ViaGateway::set_structuredDataTransfer ()
{ return *static_cast<structuredDataTransfer::pointer>(fields[8]);}

inline VCCapability_aal1ViaGateway::structuredDataTransfer::reference VCCapability_aal1ViaGateway::set_structuredDataTransfer (bool value)
{ return *static_cast<structuredDataTransfer::pointer>(fields[8]) = value ;}

inline VCCapability_aal1ViaGateway::partiallyFilledCells::const_reference VCCapability_aal1ViaGateway::get_partiallyFilledCells () const
{ return *static_cast<partiallyFilledCells::const_pointer>(fields[9]);}

inline VCCapability_aal1ViaGateway::partiallyFilledCells::reference VCCapability_aal1ViaGateway::ref_partiallyFilledCells ()
{ return *static_cast<partiallyFilledCells::pointer>(fields[9]);}

inline VCCapability_aal1ViaGateway::partiallyFilledCells::reference VCCapability_aal1ViaGateway::set_partiallyFilledCells ()
{ return *static_cast<partiallyFilledCells::pointer>(fields[9]);}

inline VCCapability_aal1ViaGateway::partiallyFilledCells::reference VCCapability_aal1ViaGateway::set_partiallyFilledCells (bool value)
{ return *static_cast<partiallyFilledCells::pointer>(fields[9]) = value ;}

inline void VCCapability_aal1ViaGateway::swap(VCCapability_aal1ViaGateway& other)
{ Inherited::swap(other); }

inline VCCapability_aal1ViaGateway* VCCapability_aal1ViaGateway::clone() const
{ return static_cast<VCCapability_aal1ViaGateway*> (Inherited::clone()); }

inline H223Capability_h223MultiplexTableCapability::basic::reference H223Capability_h223MultiplexTableCapability::select_basic ()
{
    return *static_cast<basic::pointer>(setSelection(basic::id_, ASN1::AbstractData::create( &basic::value_type::theInfo)));
}

inline bool H223Capability_h223MultiplexTableCapability::basic_isSelected() const
{ 
    return currentSelection() == basic::id_; 
}

inline H223Capability_h223MultiplexTableCapability::enhanced::const_reference H223Capability_h223MultiplexTableCapability::get_enhanced () const
{
    assert(currentSelection() ==enhanced::id_);
    return *static_cast<enhanced::const_pointer>(choice.get());
}

inline H223Capability_h223MultiplexTableCapability::enhanced::reference H223Capability_h223MultiplexTableCapability::ref_enhanced ()
{
    assert(currentSelection() ==enhanced::id_);
    return *static_cast<enhanced::pointer>(choice.get());
}

inline H223Capability_h223MultiplexTableCapability::enhanced::reference H223Capability_h223MultiplexTableCapability::select_enhanced ()
{
    return *static_cast<enhanced::pointer>(setSelection(enhanced::id_, ASN1::AbstractData::create( &enhanced::value_type::theInfo)));
}

inline H223Capability_h223MultiplexTableCapability::enhanced::reference H223Capability_h223MultiplexTableCapability::select_enhanced (H223Capability_h223MultiplexTableCapability::enhanced::const_reference value)
{
    return select_enhanced() = value;
}

inline bool H223Capability_h223MultiplexTableCapability::enhanced_isSelected() const
{ 
    return currentSelection() == enhanced::id_; 
}

inline H223Capability_h223MultiplexTableCapability::H223Capability_h223MultiplexTableCapability(basic::Id id, basic::const_reference value)
  : Inherited(&theInfo, id, new basic::value_type(value) )
{ }

inline H223Capability_h223MultiplexTableCapability::H223Capability_h223MultiplexTableCapability(enhanced::Id id, enhanced::const_reference value)
  : Inherited(&theInfo, id, new enhanced::value_type(value) )
{ }


inline void H223Capability_h223MultiplexTableCapability::swap(H223Capability_h223MultiplexTableCapability & other)
{  Inherited::swap(other); }

inline H223Capability_h223MultiplexTableCapability* H223Capability_h223MultiplexTableCapability::clone() const
{ return static_cast<H223Capability_h223MultiplexTableCapability*> (Inherited::clone()); }

inline bool H223Capability_h223MultiplexTableCapability::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RTPH263VideoRedundancyEncoding_frameToThreadMapping::roundrobin::reference RTPH263VideoRedundancyEncoding_frameToThreadMapping::select_roundrobin ()
{
    return *static_cast<roundrobin::pointer>(setSelection(roundrobin::id_, ASN1::AbstractData::create( &roundrobin::value_type::theInfo)));
}

inline bool RTPH263VideoRedundancyEncoding_frameToThreadMapping::roundrobin_isSelected() const
{ 
    return currentSelection() == roundrobin::id_; 
}

inline RTPH263VideoRedundancyEncoding_frameToThreadMapping::custom::const_reference RTPH263VideoRedundancyEncoding_frameToThreadMapping::get_custom () const
{
    assert(currentSelection() ==custom::id_);
    return *static_cast<custom::const_pointer>(choice.get());
}

inline RTPH263VideoRedundancyEncoding_frameToThreadMapping::custom::reference RTPH263VideoRedundancyEncoding_frameToThreadMapping::ref_custom ()
{
    assert(currentSelection() ==custom::id_);
    return *static_cast<custom::pointer>(choice.get());
}

inline RTPH263VideoRedundancyEncoding_frameToThreadMapping::custom::reference RTPH263VideoRedundancyEncoding_frameToThreadMapping::select_custom ()
{
    return *static_cast<custom::pointer>(setSelection(custom::id_, ASN1::AbstractData::create( &custom::value_type::theInfo)));
}

inline RTPH263VideoRedundancyEncoding_frameToThreadMapping::custom::reference RTPH263VideoRedundancyEncoding_frameToThreadMapping::select_custom (RTPH263VideoRedundancyEncoding_frameToThreadMapping::custom::const_reference value)
{
    return select_custom() = value;
}

inline bool RTPH263VideoRedundancyEncoding_frameToThreadMapping::custom_isSelected() const
{ 
    return currentSelection() == custom::id_; 
}

inline RTPH263VideoRedundancyEncoding_frameToThreadMapping::RTPH263VideoRedundancyEncoding_frameToThreadMapping(roundrobin::Id id, roundrobin::const_reference value)
  : Inherited(&theInfo, id, new roundrobin::value_type(value) )
{ }

inline RTPH263VideoRedundancyEncoding_frameToThreadMapping::RTPH263VideoRedundancyEncoding_frameToThreadMapping(custom::Id id, custom::const_reference value)
  : Inherited(&theInfo, id, new custom::value_type(value) )
{ }


inline void RTPH263VideoRedundancyEncoding_frameToThreadMapping::swap(RTPH263VideoRedundancyEncoding_frameToThreadMapping & other)
{  Inherited::swap(other); }

inline RTPH263VideoRedundancyEncoding_frameToThreadMapping* RTPH263VideoRedundancyEncoding_frameToThreadMapping::clone() const
{ return static_cast<RTPH263VideoRedundancyEncoding_frameToThreadMapping*> (Inherited::clone()); }

inline bool RTPH263VideoRedundancyEncoding_frameToThreadMapping::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RefPictureSelection_enhancedReferencePicSelect::subPictureRemovalParameters::const_reference RefPictureSelection_enhancedReferencePicSelect::get_subPictureRemovalParameters () const
{
  assert(hasOptionalField(e_subPictureRemovalParameters));
  return *static_cast<subPictureRemovalParameters::const_pointer>(fields[0]);
}

inline RefPictureSelection_enhancedReferencePicSelect::subPictureRemovalParameters::reference RefPictureSelection_enhancedReferencePicSelect::ref_subPictureRemovalParameters ()
{
  assert(hasOptionalField(e_subPictureRemovalParameters));
  return *static_cast<subPictureRemovalParameters::pointer>(fields[0]);
}

inline RefPictureSelection_enhancedReferencePicSelect::subPictureRemovalParameters::reference RefPictureSelection_enhancedReferencePicSelect::set_subPictureRemovalParameters ()
{
  includeOptionalField( e_subPictureRemovalParameters, 0);
  return *static_cast<subPictureRemovalParameters::pointer>(fields[0]);
}

inline RefPictureSelection_enhancedReferencePicSelect::subPictureRemovalParameters::reference RefPictureSelection_enhancedReferencePicSelect::set_subPictureRemovalParameters (subPictureRemovalParameters::const_reference value)
{
  includeOptionalField( e_subPictureRemovalParameters, 0);
  return *static_cast<subPictureRemovalParameters::pointer>(fields[0]) = value;
}

inline void RefPictureSelection_enhancedReferencePicSelect::omit_subPictureRemovalParameters ()
{ removeOptionalField( e_subPictureRemovalParameters); }

inline bool RefPictureSelection_enhancedReferencePicSelect::subPictureRemovalParameters_isPresent () const
{ return hasOptionalField( e_subPictureRemovalParameters); }

inline void RefPictureSelection_enhancedReferencePicSelect::swap(RefPictureSelection_enhancedReferencePicSelect& other)
{ Inherited::swap(other); }

inline RefPictureSelection_enhancedReferencePicSelect* RefPictureSelection_enhancedReferencePicSelect::clone() const
{ return static_cast<RefPictureSelection_enhancedReferencePicSelect*> (Inherited::clone()); }

inline DataProtocolCapability_v76wCompression::transmitCompression::const_reference DataProtocolCapability_v76wCompression::get_transmitCompression () const
{
    assert(currentSelection() ==transmitCompression::id_);
    return *static_cast<transmitCompression::const_pointer>(choice.get());
}

inline DataProtocolCapability_v76wCompression::transmitCompression::reference DataProtocolCapability_v76wCompression::ref_transmitCompression ()
{
    assert(currentSelection() ==transmitCompression::id_);
    return *static_cast<transmitCompression::pointer>(choice.get());
}

inline DataProtocolCapability_v76wCompression::transmitCompression::reference DataProtocolCapability_v76wCompression::select_transmitCompression ()
{
    return *static_cast<transmitCompression::pointer>(setSelection(transmitCompression::id_, ASN1::AbstractData::create( &transmitCompression::value_type::theInfo)));
}

inline DataProtocolCapability_v76wCompression::transmitCompression::reference DataProtocolCapability_v76wCompression::select_transmitCompression (DataProtocolCapability_v76wCompression::transmitCompression::const_reference value)
{
    return select_transmitCompression() = value;
}

inline bool DataProtocolCapability_v76wCompression::transmitCompression_isSelected() const
{ 
    return currentSelection() == transmitCompression::id_; 
}

inline DataProtocolCapability_v76wCompression::receiveCompression::const_reference DataProtocolCapability_v76wCompression::get_receiveCompression () const
{
    assert(currentSelection() ==receiveCompression::id_);
    return *static_cast<receiveCompression::const_pointer>(choice.get());
}

inline DataProtocolCapability_v76wCompression::receiveCompression::reference DataProtocolCapability_v76wCompression::ref_receiveCompression ()
{
    assert(currentSelection() ==receiveCompression::id_);
    return *static_cast<receiveCompression::pointer>(choice.get());
}

inline DataProtocolCapability_v76wCompression::receiveCompression::reference DataProtocolCapability_v76wCompression::select_receiveCompression ()
{
    return *static_cast<receiveCompression::pointer>(setSelection(receiveCompression::id_, ASN1::AbstractData::create( &receiveCompression::value_type::theInfo)));
}

inline DataProtocolCapability_v76wCompression::receiveCompression::reference DataProtocolCapability_v76wCompression::select_receiveCompression (DataProtocolCapability_v76wCompression::receiveCompression::const_reference value)
{
    return select_receiveCompression() = value;
}

inline bool DataProtocolCapability_v76wCompression::receiveCompression_isSelected() const
{ 
    return currentSelection() == receiveCompression::id_; 
}

inline DataProtocolCapability_v76wCompression::transmitAndReceiveCompression::const_reference DataProtocolCapability_v76wCompression::get_transmitAndReceiveCompression () const
{
    assert(currentSelection() ==transmitAndReceiveCompression::id_);
    return *static_cast<transmitAndReceiveCompression::const_pointer>(choice.get());
}

inline DataProtocolCapability_v76wCompression::transmitAndReceiveCompression::reference DataProtocolCapability_v76wCompression::ref_transmitAndReceiveCompression ()
{
    assert(currentSelection() ==transmitAndReceiveCompression::id_);
    return *static_cast<transmitAndReceiveCompression::pointer>(choice.get());
}

inline DataProtocolCapability_v76wCompression::transmitAndReceiveCompression::reference DataProtocolCapability_v76wCompression::select_transmitAndReceiveCompression ()
{
    return *static_cast<transmitAndReceiveCompression::pointer>(setSelection(transmitAndReceiveCompression::id_, ASN1::AbstractData::create( &transmitAndReceiveCompression::value_type::theInfo)));
}

inline DataProtocolCapability_v76wCompression::transmitAndReceiveCompression::reference DataProtocolCapability_v76wCompression::select_transmitAndReceiveCompression (DataProtocolCapability_v76wCompression::transmitAndReceiveCompression::const_reference value)
{
    return select_transmitAndReceiveCompression() = value;
}

inline bool DataProtocolCapability_v76wCompression::transmitAndReceiveCompression_isSelected() const
{ 
    return currentSelection() == transmitAndReceiveCompression::id_; 
}

inline DataProtocolCapability_v76wCompression::DataProtocolCapability_v76wCompression(transmitCompression::Id id, transmitCompression::const_reference value)
  : Inherited(&theInfo, id, new transmitCompression::value_type(value) )
{ }

inline DataProtocolCapability_v76wCompression::DataProtocolCapability_v76wCompression(receiveCompression::Id id, receiveCompression::const_reference value)
  : Inherited(&theInfo, id, new receiveCompression::value_type(value) )
{ }

inline DataProtocolCapability_v76wCompression::DataProtocolCapability_v76wCompression(transmitAndReceiveCompression::Id id, transmitAndReceiveCompression::const_reference value)
  : Inherited(&theInfo, id, new transmitAndReceiveCompression::value_type(value) )
{ }


inline void DataProtocolCapability_v76wCompression::swap(DataProtocolCapability_v76wCompression & other)
{  Inherited::swap(other); }

inline DataProtocolCapability_v76wCompression* DataProtocolCapability_v76wCompression::clone() const
{ return static_cast<DataProtocolCapability_v76wCompression*> (Inherited::clone()); }

inline bool DataProtocolCapability_v76wCompression::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DepFECCapability_rfc2733::redundancyEncoding::const_reference DepFECCapability_rfc2733::get_redundancyEncoding () const
{ return *static_cast<redundancyEncoding::const_pointer>(fields[0]);}

inline DepFECCapability_rfc2733::redundancyEncoding::reference DepFECCapability_rfc2733::ref_redundancyEncoding ()
{ return *static_cast<redundancyEncoding::pointer>(fields[0]);}

inline DepFECCapability_rfc2733::redundancyEncoding::reference DepFECCapability_rfc2733::set_redundancyEncoding ()
{ return *static_cast<redundancyEncoding::pointer>(fields[0]);}

inline DepFECCapability_rfc2733::redundancyEncoding::reference DepFECCapability_rfc2733::set_redundancyEncoding (bool value)
{ return *static_cast<redundancyEncoding::pointer>(fields[0]) = value ;}

inline DepFECCapability_rfc2733::separateStream::const_reference DepFECCapability_rfc2733::get_separateStream () const
{ return *static_cast<separateStream::const_pointer>(fields[1]);}

inline DepFECCapability_rfc2733::separateStream::reference DepFECCapability_rfc2733::ref_separateStream ()
{ return *static_cast<separateStream::pointer>(fields[1]);}

inline DepFECCapability_rfc2733::separateStream::reference DepFECCapability_rfc2733::set_separateStream ()
{ return *static_cast<separateStream::pointer>(fields[1]);}

inline DepFECCapability_rfc2733::separateStream::reference DepFECCapability_rfc2733::set_separateStream (separateStream::const_reference value)
{ return *static_cast<separateStream::pointer>(fields[1]) = value ;}

inline void DepFECCapability_rfc2733::swap(DepFECCapability_rfc2733& other)
{ Inherited::swap(other); }

inline DepFECCapability_rfc2733* DepFECCapability_rfc2733::clone() const
{ return static_cast<DepFECCapability_rfc2733*> (Inherited::clone()); }

inline H223AL1MParameters_arqType::noArq::reference H223AL1MParameters_arqType::select_noArq ()
{
    return *static_cast<noArq::pointer>(setSelection(noArq::id_, ASN1::AbstractData::create( &noArq::value_type::theInfo)));
}

inline bool H223AL1MParameters_arqType::noArq_isSelected() const
{ 
    return currentSelection() == noArq::id_; 
}

inline H223AL1MParameters_arqType::typeIArq::const_reference H223AL1MParameters_arqType::get_typeIArq () const
{
    assert(currentSelection() ==typeIArq::id_);
    return *static_cast<typeIArq::const_pointer>(choice.get());
}

inline H223AL1MParameters_arqType::typeIArq::reference H223AL1MParameters_arqType::ref_typeIArq ()
{
    assert(currentSelection() ==typeIArq::id_);
    return *static_cast<typeIArq::pointer>(choice.get());
}

inline H223AL1MParameters_arqType::typeIArq::reference H223AL1MParameters_arqType::select_typeIArq ()
{
    return *static_cast<typeIArq::pointer>(setSelection(typeIArq::id_, ASN1::AbstractData::create( &typeIArq::value_type::theInfo)));
}

inline H223AL1MParameters_arqType::typeIArq::reference H223AL1MParameters_arqType::select_typeIArq (H223AL1MParameters_arqType::typeIArq::const_reference value)
{
    return select_typeIArq() = value;
}

inline bool H223AL1MParameters_arqType::typeIArq_isSelected() const
{ 
    return currentSelection() == typeIArq::id_; 
}

inline H223AL1MParameters_arqType::typeIIArq::const_reference H223AL1MParameters_arqType::get_typeIIArq () const
{
    assert(currentSelection() ==typeIIArq::id_);
    return *static_cast<typeIIArq::const_pointer>(choice.get());
}

inline H223AL1MParameters_arqType::typeIIArq::reference H223AL1MParameters_arqType::ref_typeIIArq ()
{
    assert(currentSelection() ==typeIIArq::id_);
    return *static_cast<typeIIArq::pointer>(choice.get());
}

inline H223AL1MParameters_arqType::typeIIArq::reference H223AL1MParameters_arqType::select_typeIIArq ()
{
    return *static_cast<typeIIArq::pointer>(setSelection(typeIIArq::id_, ASN1::AbstractData::create( &typeIIArq::value_type::theInfo)));
}

inline H223AL1MParameters_arqType::typeIIArq::reference H223AL1MParameters_arqType::select_typeIIArq (H223AL1MParameters_arqType::typeIIArq::const_reference value)
{
    return select_typeIIArq() = value;
}

inline bool H223AL1MParameters_arqType::typeIIArq_isSelected() const
{ 
    return currentSelection() == typeIIArq::id_; 
}

inline H223AL1MParameters_arqType::H223AL1MParameters_arqType(noArq::Id id, noArq::const_reference value)
  : Inherited(&theInfo, id, new noArq::value_type(value) )
{ }

inline H223AL1MParameters_arqType::H223AL1MParameters_arqType(typeIArq::Id id, typeIArq::const_reference value)
  : Inherited(&theInfo, id, new typeIArq::value_type(value) )
{ }

inline H223AL1MParameters_arqType::H223AL1MParameters_arqType(typeIIArq::Id id, typeIIArq::const_reference value)
  : Inherited(&theInfo, id, new typeIIArq::value_type(value) )
{ }


inline void H223AL1MParameters_arqType::swap(H223AL1MParameters_arqType & other)
{  Inherited::swap(other); }

inline H223AL1MParameters_arqType* H223AL1MParameters_arqType::clone() const
{ return static_cast<H223AL1MParameters_arqType*> (Inherited::clone()); }

inline bool H223AL1MParameters_arqType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223AL3MParameters_arqType::noArq::reference H223AL3MParameters_arqType::select_noArq ()
{
    return *static_cast<noArq::pointer>(setSelection(noArq::id_, ASN1::AbstractData::create( &noArq::value_type::theInfo)));
}

inline bool H223AL3MParameters_arqType::noArq_isSelected() const
{ 
    return currentSelection() == noArq::id_; 
}

inline H223AL3MParameters_arqType::typeIArq::const_reference H223AL3MParameters_arqType::get_typeIArq () const
{
    assert(currentSelection() ==typeIArq::id_);
    return *static_cast<typeIArq::const_pointer>(choice.get());
}

inline H223AL3MParameters_arqType::typeIArq::reference H223AL3MParameters_arqType::ref_typeIArq ()
{
    assert(currentSelection() ==typeIArq::id_);
    return *static_cast<typeIArq::pointer>(choice.get());
}

inline H223AL3MParameters_arqType::typeIArq::reference H223AL3MParameters_arqType::select_typeIArq ()
{
    return *static_cast<typeIArq::pointer>(setSelection(typeIArq::id_, ASN1::AbstractData::create( &typeIArq::value_type::theInfo)));
}

inline H223AL3MParameters_arqType::typeIArq::reference H223AL3MParameters_arqType::select_typeIArq (H223AL3MParameters_arqType::typeIArq::const_reference value)
{
    return select_typeIArq() = value;
}

inline bool H223AL3MParameters_arqType::typeIArq_isSelected() const
{ 
    return currentSelection() == typeIArq::id_; 
}

inline H223AL3MParameters_arqType::typeIIArq::const_reference H223AL3MParameters_arqType::get_typeIIArq () const
{
    assert(currentSelection() ==typeIIArq::id_);
    return *static_cast<typeIIArq::const_pointer>(choice.get());
}

inline H223AL3MParameters_arqType::typeIIArq::reference H223AL3MParameters_arqType::ref_typeIIArq ()
{
    assert(currentSelection() ==typeIIArq::id_);
    return *static_cast<typeIIArq::pointer>(choice.get());
}

inline H223AL3MParameters_arqType::typeIIArq::reference H223AL3MParameters_arqType::select_typeIIArq ()
{
    return *static_cast<typeIIArq::pointer>(setSelection(typeIIArq::id_, ASN1::AbstractData::create( &typeIIArq::value_type::theInfo)));
}

inline H223AL3MParameters_arqType::typeIIArq::reference H223AL3MParameters_arqType::select_typeIIArq (H223AL3MParameters_arqType::typeIIArq::const_reference value)
{
    return select_typeIIArq() = value;
}

inline bool H223AL3MParameters_arqType::typeIIArq_isSelected() const
{ 
    return currentSelection() == typeIIArq::id_; 
}

inline H223AL3MParameters_arqType::H223AL3MParameters_arqType(noArq::Id id, noArq::const_reference value)
  : Inherited(&theInfo, id, new noArq::value_type(value) )
{ }

inline H223AL3MParameters_arqType::H223AL3MParameters_arqType(typeIArq::Id id, typeIArq::const_reference value)
  : Inherited(&theInfo, id, new typeIArq::value_type(value) )
{ }

inline H223AL3MParameters_arqType::H223AL3MParameters_arqType(typeIIArq::Id id, typeIIArq::const_reference value)
  : Inherited(&theInfo, id, new typeIIArq::value_type(value) )
{ }


inline void H223AL3MParameters_arqType::swap(H223AL3MParameters_arqType & other)
{  Inherited::swap(other); }

inline H223AL3MParameters_arqType* H223AL3MParameters_arqType::clone() const
{ return static_cast<H223AL3MParameters_arqType*> (Inherited::clone()); }

inline bool H223AL3MParameters_arqType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline UnicastAddress_iPSourceRouteAddress::routing::const_reference UnicastAddress_iPSourceRouteAddress::get_routing () const
{ return *static_cast<routing::const_pointer>(fields[0]);}

inline UnicastAddress_iPSourceRouteAddress::routing::reference UnicastAddress_iPSourceRouteAddress::ref_routing ()
{ return *static_cast<routing::pointer>(fields[0]);}

inline UnicastAddress_iPSourceRouteAddress::routing::reference UnicastAddress_iPSourceRouteAddress::set_routing ()
{ return *static_cast<routing::pointer>(fields[0]);}

inline UnicastAddress_iPSourceRouteAddress::routing::reference UnicastAddress_iPSourceRouteAddress::set_routing (routing::const_reference value)
{ return *static_cast<routing::pointer>(fields[0]) = value ;}

inline UnicastAddress_iPSourceRouteAddress::network::const_reference UnicastAddress_iPSourceRouteAddress::get_network () const
{ return *static_cast<network::const_pointer>(fields[1]);}

inline UnicastAddress_iPSourceRouteAddress::network::reference UnicastAddress_iPSourceRouteAddress::ref_network ()
{ return *static_cast<network::pointer>(fields[1]);}

inline UnicastAddress_iPSourceRouteAddress::network::reference UnicastAddress_iPSourceRouteAddress::set_network ()
{ return *static_cast<network::pointer>(fields[1]);}

inline UnicastAddress_iPSourceRouteAddress::network::reference UnicastAddress_iPSourceRouteAddress::set_network (const std::vector<char>& value)
{ return *static_cast<network::pointer>(fields[1]) = value ;}

inline UnicastAddress_iPSourceRouteAddress::tsapIdentifier::const_reference UnicastAddress_iPSourceRouteAddress::get_tsapIdentifier () const
{ return *static_cast<tsapIdentifier::const_pointer>(fields[2]);}

inline UnicastAddress_iPSourceRouteAddress::tsapIdentifier::reference UnicastAddress_iPSourceRouteAddress::ref_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[2]);}

inline UnicastAddress_iPSourceRouteAddress::tsapIdentifier::reference UnicastAddress_iPSourceRouteAddress::set_tsapIdentifier ()
{ return *static_cast<tsapIdentifier::pointer>(fields[2]);}

inline UnicastAddress_iPSourceRouteAddress::tsapIdentifier::reference UnicastAddress_iPSourceRouteAddress::set_tsapIdentifier (tsapIdentifier::value_type::int_type value)
{ return *static_cast<tsapIdentifier::pointer>(fields[2]) = value ;}

inline UnicastAddress_iPSourceRouteAddress::route::const_reference UnicastAddress_iPSourceRouteAddress::get_route () const
{ return *static_cast<route::const_pointer>(fields[3]);}

inline UnicastAddress_iPSourceRouteAddress::route::reference UnicastAddress_iPSourceRouteAddress::ref_route ()
{ return *static_cast<route::pointer>(fields[3]);}

inline UnicastAddress_iPSourceRouteAddress::route::reference UnicastAddress_iPSourceRouteAddress::set_route ()
{ return *static_cast<route::pointer>(fields[3]);}

inline UnicastAddress_iPSourceRouteAddress::route::reference UnicastAddress_iPSourceRouteAddress::set_route (route::const_reference value)
{ return *static_cast<route::pointer>(fields[3]) = value ;}

inline void UnicastAddress_iPSourceRouteAddress::swap(UnicastAddress_iPSourceRouteAddress& other)
{ Inherited::swap(other); }

inline UnicastAddress_iPSourceRouteAddress* UnicastAddress_iPSourceRouteAddress::clone() const
{ return static_cast<UnicastAddress_iPSourceRouteAddress*> (Inherited::clone()); }

inline MultiplexElement_type::logicalChannelNumber::const_reference MultiplexElement_type::get_logicalChannelNumber () const
{
    assert(currentSelection() ==logicalChannelNumber::id_);
    return *static_cast<logicalChannelNumber::const_pointer>(choice.get());
}

inline MultiplexElement_type::logicalChannelNumber::reference MultiplexElement_type::ref_logicalChannelNumber ()
{
    assert(currentSelection() ==logicalChannelNumber::id_);
    return *static_cast<logicalChannelNumber::pointer>(choice.get());
}

inline MultiplexElement_type::logicalChannelNumber::reference MultiplexElement_type::select_logicalChannelNumber ()
{
    return *static_cast<logicalChannelNumber::pointer>(setSelection(logicalChannelNumber::id_, ASN1::AbstractData::create( &logicalChannelNumber::value_type::theInfo)));
}

inline MultiplexElement_type::logicalChannelNumber::reference MultiplexElement_type::select_logicalChannelNumber (MultiplexElement_type::logicalChannelNumber::value_type::int_type value)
{
    return select_logicalChannelNumber() = value;
}

inline bool MultiplexElement_type::logicalChannelNumber_isSelected() const
{ 
    return currentSelection() == logicalChannelNumber::id_; 
}

inline MultiplexElement_type::subElementList::const_reference MultiplexElement_type::get_subElementList () const
{
    assert(currentSelection() ==subElementList::id_);
    return *static_cast<subElementList::const_pointer>(choice.get());
}

inline MultiplexElement_type::subElementList::reference MultiplexElement_type::ref_subElementList ()
{
    assert(currentSelection() ==subElementList::id_);
    return *static_cast<subElementList::pointer>(choice.get());
}

inline MultiplexElement_type::subElementList::reference MultiplexElement_type::select_subElementList ()
{
    return *static_cast<subElementList::pointer>(setSelection(subElementList::id_, ASN1::AbstractData::create( &subElementList::value_type::theInfo)));
}

inline MultiplexElement_type::subElementList::reference MultiplexElement_type::select_subElementList (MultiplexElement_type::subElementList::const_reference value)
{
    return select_subElementList() = value;
}

inline bool MultiplexElement_type::subElementList_isSelected() const
{ 
    return currentSelection() == subElementList::id_; 
}

inline MultiplexElement_type::MultiplexElement_type(logicalChannelNumber::Id id, logicalChannelNumber::value_type::int_type value)
  : Inherited(&theInfo, id, new logicalChannelNumber::value_type(value) )
{ }

inline MultiplexElement_type::MultiplexElement_type(subElementList::Id id, subElementList::const_reference value)
  : Inherited(&theInfo, id, new subElementList::value_type(value) )
{ }


inline void MultiplexElement_type::swap(MultiplexElement_type & other)
{  Inherited::swap(other); }

inline MultiplexElement_type* MultiplexElement_type::clone() const
{ return static_cast<MultiplexElement_type*> (Inherited::clone()); }

inline bool MultiplexElement_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ConferenceRequest_requestTerminalCertificate::terminalLabel::const_reference ConferenceRequest_requestTerminalCertificate::get_terminalLabel () const
{
  assert(hasOptionalField(e_terminalLabel));
  return *static_cast<terminalLabel::const_pointer>(fields[0]);
}

inline ConferenceRequest_requestTerminalCertificate::terminalLabel::reference ConferenceRequest_requestTerminalCertificate::ref_terminalLabel ()
{
  assert(hasOptionalField(e_terminalLabel));
  return *static_cast<terminalLabel::pointer>(fields[0]);
}

inline ConferenceRequest_requestTerminalCertificate::terminalLabel::reference ConferenceRequest_requestTerminalCertificate::set_terminalLabel ()
{
  includeOptionalField( e_terminalLabel, 0);
  return *static_cast<terminalLabel::pointer>(fields[0]);
}

inline ConferenceRequest_requestTerminalCertificate::terminalLabel::reference ConferenceRequest_requestTerminalCertificate::set_terminalLabel (terminalLabel::const_reference value)
{
  includeOptionalField( e_terminalLabel, 0);
  return *static_cast<terminalLabel::pointer>(fields[0]) = value;
}

inline void ConferenceRequest_requestTerminalCertificate::omit_terminalLabel ()
{ removeOptionalField( e_terminalLabel); }

inline bool ConferenceRequest_requestTerminalCertificate::terminalLabel_isPresent () const
{ return hasOptionalField( e_terminalLabel); }

inline ConferenceRequest_requestTerminalCertificate::certSelectionCriteria::const_reference ConferenceRequest_requestTerminalCertificate::get_certSelectionCriteria () const
{
  assert(hasOptionalField(e_certSelectionCriteria));
  return *static_cast<certSelectionCriteria::const_pointer>(fields[1]);
}

inline ConferenceRequest_requestTerminalCertificate::certSelectionCriteria::reference ConferenceRequest_requestTerminalCertificate::ref_certSelectionCriteria ()
{
  assert(hasOptionalField(e_certSelectionCriteria));
  return *static_cast<certSelectionCriteria::pointer>(fields[1]);
}

inline ConferenceRequest_requestTerminalCertificate::certSelectionCriteria::reference ConferenceRequest_requestTerminalCertificate::set_certSelectionCriteria ()
{
  includeOptionalField( e_certSelectionCriteria, 1);
  return *static_cast<certSelectionCriteria::pointer>(fields[1]);
}

inline ConferenceRequest_requestTerminalCertificate::certSelectionCriteria::reference ConferenceRequest_requestTerminalCertificate::set_certSelectionCriteria (certSelectionCriteria::const_reference value)
{
  includeOptionalField( e_certSelectionCriteria, 1);
  return *static_cast<certSelectionCriteria::pointer>(fields[1]) = value;
}

inline void ConferenceRequest_requestTerminalCertificate::omit_certSelectionCriteria ()
{ removeOptionalField( e_certSelectionCriteria); }

inline bool ConferenceRequest_requestTerminalCertificate::certSelectionCriteria_isPresent () const
{ return hasOptionalField( e_certSelectionCriteria); }

inline ConferenceRequest_requestTerminalCertificate::sRandom::const_reference ConferenceRequest_requestTerminalCertificate::get_sRandom () const
{
  assert(hasOptionalField(e_sRandom));
  return *static_cast<sRandom::const_pointer>(fields[2]);
}

inline ConferenceRequest_requestTerminalCertificate::sRandom::reference ConferenceRequest_requestTerminalCertificate::ref_sRandom ()
{
  assert(hasOptionalField(e_sRandom));
  return *static_cast<sRandom::pointer>(fields[2]);
}

inline ConferenceRequest_requestTerminalCertificate::sRandom::reference ConferenceRequest_requestTerminalCertificate::set_sRandom ()
{
  includeOptionalField( e_sRandom, 2);
  return *static_cast<sRandom::pointer>(fields[2]);
}

inline ConferenceRequest_requestTerminalCertificate::sRandom::reference ConferenceRequest_requestTerminalCertificate::set_sRandom (sRandom::value_type::int_type value)
{
  includeOptionalField( e_sRandom, 2);
  return *static_cast<sRandom::pointer>(fields[2]) = value;
}

inline void ConferenceRequest_requestTerminalCertificate::omit_sRandom ()
{ removeOptionalField( e_sRandom); }

inline bool ConferenceRequest_requestTerminalCertificate::sRandom_isPresent () const
{ return hasOptionalField( e_sRandom); }

inline void ConferenceRequest_requestTerminalCertificate::swap(ConferenceRequest_requestTerminalCertificate& other)
{ Inherited::swap(other); }

inline ConferenceRequest_requestTerminalCertificate* ConferenceRequest_requestTerminalCertificate::clone() const
{ return static_cast<ConferenceRequest_requestTerminalCertificate*> (Inherited::clone()); }

inline ConferenceResponse_mCTerminalIDResponse::terminalLabel::const_reference ConferenceResponse_mCTerminalIDResponse::get_terminalLabel () const
{ return *static_cast<terminalLabel::const_pointer>(fields[0]);}

inline ConferenceResponse_mCTerminalIDResponse::terminalLabel::reference ConferenceResponse_mCTerminalIDResponse::ref_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline ConferenceResponse_mCTerminalIDResponse::terminalLabel::reference ConferenceResponse_mCTerminalIDResponse::set_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline ConferenceResponse_mCTerminalIDResponse::terminalLabel::reference ConferenceResponse_mCTerminalIDResponse::set_terminalLabel (terminalLabel::const_reference value)
{ return *static_cast<terminalLabel::pointer>(fields[0]) = value ;}

inline ConferenceResponse_mCTerminalIDResponse::terminalID::const_reference ConferenceResponse_mCTerminalIDResponse::get_terminalID () const
{ return *static_cast<terminalID::const_pointer>(fields[1]);}

inline ConferenceResponse_mCTerminalIDResponse::terminalID::reference ConferenceResponse_mCTerminalIDResponse::ref_terminalID ()
{ return *static_cast<terminalID::pointer>(fields[1]);}

inline ConferenceResponse_mCTerminalIDResponse::terminalID::reference ConferenceResponse_mCTerminalIDResponse::set_terminalID ()
{ return *static_cast<terminalID::pointer>(fields[1]);}

inline ConferenceResponse_mCTerminalIDResponse::terminalID::reference ConferenceResponse_mCTerminalIDResponse::set_terminalID (const std::vector<char>& value)
{ return *static_cast<terminalID::pointer>(fields[1]) = value ;}

inline void ConferenceResponse_mCTerminalIDResponse::swap(ConferenceResponse_mCTerminalIDResponse& other)
{ Inherited::swap(other); }

inline ConferenceResponse_mCTerminalIDResponse* ConferenceResponse_mCTerminalIDResponse::clone() const
{ return static_cast<ConferenceResponse_mCTerminalIDResponse*> (Inherited::clone()); }

inline ConferenceResponse_terminalIDResponse::terminalLabel::const_reference ConferenceResponse_terminalIDResponse::get_terminalLabel () const
{ return *static_cast<terminalLabel::const_pointer>(fields[0]);}

inline ConferenceResponse_terminalIDResponse::terminalLabel::reference ConferenceResponse_terminalIDResponse::ref_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline ConferenceResponse_terminalIDResponse::terminalLabel::reference ConferenceResponse_terminalIDResponse::set_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline ConferenceResponse_terminalIDResponse::terminalLabel::reference ConferenceResponse_terminalIDResponse::set_terminalLabel (terminalLabel::const_reference value)
{ return *static_cast<terminalLabel::pointer>(fields[0]) = value ;}

inline ConferenceResponse_terminalIDResponse::terminalID::const_reference ConferenceResponse_terminalIDResponse::get_terminalID () const
{ return *static_cast<terminalID::const_pointer>(fields[1]);}

inline ConferenceResponse_terminalIDResponse::terminalID::reference ConferenceResponse_terminalIDResponse::ref_terminalID ()
{ return *static_cast<terminalID::pointer>(fields[1]);}

inline ConferenceResponse_terminalIDResponse::terminalID::reference ConferenceResponse_terminalIDResponse::set_terminalID ()
{ return *static_cast<terminalID::pointer>(fields[1]);}

inline ConferenceResponse_terminalIDResponse::terminalID::reference ConferenceResponse_terminalIDResponse::set_terminalID (const std::vector<char>& value)
{ return *static_cast<terminalID::pointer>(fields[1]) = value ;}

inline void ConferenceResponse_terminalIDResponse::swap(ConferenceResponse_terminalIDResponse& other)
{ Inherited::swap(other); }

inline ConferenceResponse_terminalIDResponse* ConferenceResponse_terminalIDResponse::clone() const
{ return static_cast<ConferenceResponse_terminalIDResponse*> (Inherited::clone()); }

inline ConferenceResponse_conferenceIDResponse::terminalLabel::const_reference ConferenceResponse_conferenceIDResponse::get_terminalLabel () const
{ return *static_cast<terminalLabel::const_pointer>(fields[0]);}

inline ConferenceResponse_conferenceIDResponse::terminalLabel::reference ConferenceResponse_conferenceIDResponse::ref_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline ConferenceResponse_conferenceIDResponse::terminalLabel::reference ConferenceResponse_conferenceIDResponse::set_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline ConferenceResponse_conferenceIDResponse::terminalLabel::reference ConferenceResponse_conferenceIDResponse::set_terminalLabel (terminalLabel::const_reference value)
{ return *static_cast<terminalLabel::pointer>(fields[0]) = value ;}

inline ConferenceResponse_conferenceIDResponse::conferenceID::const_reference ConferenceResponse_conferenceIDResponse::get_conferenceID () const
{ return *static_cast<conferenceID::const_pointer>(fields[1]);}

inline ConferenceResponse_conferenceIDResponse::conferenceID::reference ConferenceResponse_conferenceIDResponse::ref_conferenceID ()
{ return *static_cast<conferenceID::pointer>(fields[1]);}

inline ConferenceResponse_conferenceIDResponse::conferenceID::reference ConferenceResponse_conferenceIDResponse::set_conferenceID ()
{ return *static_cast<conferenceID::pointer>(fields[1]);}

inline ConferenceResponse_conferenceIDResponse::conferenceID::reference ConferenceResponse_conferenceIDResponse::set_conferenceID (const std::vector<char>& value)
{ return *static_cast<conferenceID::pointer>(fields[1]) = value ;}

inline void ConferenceResponse_conferenceIDResponse::swap(ConferenceResponse_conferenceIDResponse& other)
{ Inherited::swap(other); }

inline ConferenceResponse_conferenceIDResponse* ConferenceResponse_conferenceIDResponse::clone() const
{ return static_cast<ConferenceResponse_conferenceIDResponse*> (Inherited::clone()); }

inline ConferenceResponse_passwordResponse::terminalLabel::const_reference ConferenceResponse_passwordResponse::get_terminalLabel () const
{ return *static_cast<terminalLabel::const_pointer>(fields[0]);}

inline ConferenceResponse_passwordResponse::terminalLabel::reference ConferenceResponse_passwordResponse::ref_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline ConferenceResponse_passwordResponse::terminalLabel::reference ConferenceResponse_passwordResponse::set_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline ConferenceResponse_passwordResponse::terminalLabel::reference ConferenceResponse_passwordResponse::set_terminalLabel (terminalLabel::const_reference value)
{ return *static_cast<terminalLabel::pointer>(fields[0]) = value ;}

inline ConferenceResponse_passwordResponse::password::const_reference ConferenceResponse_passwordResponse::get_password () const
{ return *static_cast<password::const_pointer>(fields[1]);}

inline ConferenceResponse_passwordResponse::password::reference ConferenceResponse_passwordResponse::ref_password ()
{ return *static_cast<password::pointer>(fields[1]);}

inline ConferenceResponse_passwordResponse::password::reference ConferenceResponse_passwordResponse::set_password ()
{ return *static_cast<password::pointer>(fields[1]);}

inline ConferenceResponse_passwordResponse::password::reference ConferenceResponse_passwordResponse::set_password (const std::vector<char>& value)
{ return *static_cast<password::pointer>(fields[1]) = value ;}

inline void ConferenceResponse_passwordResponse::swap(ConferenceResponse_passwordResponse& other)
{ Inherited::swap(other); }

inline ConferenceResponse_passwordResponse* ConferenceResponse_passwordResponse::clone() const
{ return static_cast<ConferenceResponse_passwordResponse*> (Inherited::clone()); }

inline ConferenceResponse_chairTokenOwnerResponse::terminalLabel::const_reference ConferenceResponse_chairTokenOwnerResponse::get_terminalLabel () const
{ return *static_cast<terminalLabel::const_pointer>(fields[0]);}

inline ConferenceResponse_chairTokenOwnerResponse::terminalLabel::reference ConferenceResponse_chairTokenOwnerResponse::ref_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline ConferenceResponse_chairTokenOwnerResponse::terminalLabel::reference ConferenceResponse_chairTokenOwnerResponse::set_terminalLabel ()
{ return *static_cast<terminalLabel::pointer>(fields[0]);}

inline ConferenceResponse_chairTokenOwnerResponse::terminalLabel::reference ConferenceResponse_chairTokenOwnerResponse::set_terminalLabel (terminalLabel::const_reference value)
{ return *static_cast<terminalLabel::pointer>(fields[0]) = value ;}

inline ConferenceResponse_chairTokenOwnerResponse::terminalID::const_reference ConferenceResponse_chairTokenOwnerResponse::get_terminalID () const
{ return *static_cast<terminalID::const_pointer>(fields[1]);}

inline ConferenceResponse_chairTokenOwnerResponse::terminalID::reference ConferenceResponse_chairTokenOwnerResponse::ref_terminalID ()
{ return *static_cast<terminalID::pointer>(fields[1]);}

inline ConferenceResponse_chairTokenOwnerResponse::terminalID::reference ConferenceResponse_chairTokenOwnerResponse::set_terminalID ()
{ return *static_cast<terminalID::pointer>(fields[1]);}

inline ConferenceResponse_chairTokenOwnerResponse::terminalID::reference ConferenceResponse_chairTokenOwnerResponse::set_terminalID (const std::vector<char>& value)
{ return *static_cast<terminalID::pointer>(fields[1]) = value ;}

inline void ConferenceResponse_chairTokenOwnerResponse::swap(ConferenceResponse_chairTokenOwnerResponse& other)
{ Inherited::swap(other); }

inline ConferenceResponse_chairTokenOwnerResponse* ConferenceResponse_chairTokenOwnerResponse::clone() const
{ return static_cast<ConferenceResponse_chairTokenOwnerResponse*> (Inherited::clone()); }

inline ConferenceResponse_terminalCertificateResponse::terminalLabel::const_reference ConferenceResponse_terminalCertificateResponse::get_terminalLabel () const
{
  assert(hasOptionalField(e_terminalLabel));
  return *static_cast<terminalLabel::const_pointer>(fields[0]);
}

inline ConferenceResponse_terminalCertificateResponse::terminalLabel::reference ConferenceResponse_terminalCertificateResponse::ref_terminalLabel ()
{
  assert(hasOptionalField(e_terminalLabel));
  return *static_cast<terminalLabel::pointer>(fields[0]);
}

inline ConferenceResponse_terminalCertificateResponse::terminalLabel::reference ConferenceResponse_terminalCertificateResponse::set_terminalLabel ()
{
  includeOptionalField( e_terminalLabel, 0);
  return *static_cast<terminalLabel::pointer>(fields[0]);
}

inline ConferenceResponse_terminalCertificateResponse::terminalLabel::reference ConferenceResponse_terminalCertificateResponse::set_terminalLabel (terminalLabel::const_reference value)
{
  includeOptionalField( e_terminalLabel, 0);
  return *static_cast<terminalLabel::pointer>(fields[0]) = value;
}

inline void ConferenceResponse_terminalCertificateResponse::omit_terminalLabel ()
{ removeOptionalField( e_terminalLabel); }

inline bool ConferenceResponse_terminalCertificateResponse::terminalLabel_isPresent () const
{ return hasOptionalField( e_terminalLabel); }

inline ConferenceResponse_terminalCertificateResponse::certificateResponse::const_reference ConferenceResponse_terminalCertificateResponse::get_certificateResponse () const
{
  assert(hasOptionalField(e_certificateResponse));
  return *static_cast<certificateResponse::const_pointer>(fields[1]);
}

inline ConferenceResponse_terminalCertificateResponse::certificateResponse::reference ConferenceResponse_terminalCertificateResponse::ref_certificateResponse ()
{
  assert(hasOptionalField(e_certificateResponse));
  return *static_cast<certificateResponse::pointer>(fields[1]);
}

inline ConferenceResponse_terminalCertificateResponse::certificateResponse::reference ConferenceResponse_terminalCertificateResponse::set_certificateResponse ()
{
  includeOptionalField( e_certificateResponse, 1);
  return *static_cast<certificateResponse::pointer>(fields[1]);
}

inline ConferenceResponse_terminalCertificateResponse::certificateResponse::reference ConferenceResponse_terminalCertificateResponse::set_certificateResponse (const std::vector<char>& value)
{
  includeOptionalField( e_certificateResponse, 1);
  return *static_cast<certificateResponse::pointer>(fields[1]) = value;
}

inline void ConferenceResponse_terminalCertificateResponse::omit_certificateResponse ()
{ removeOptionalField( e_certificateResponse); }

inline bool ConferenceResponse_terminalCertificateResponse::certificateResponse_isPresent () const
{ return hasOptionalField( e_certificateResponse); }

inline void ConferenceResponse_terminalCertificateResponse::swap(ConferenceResponse_terminalCertificateResponse& other)
{ Inherited::swap(other); }

inline ConferenceResponse_terminalCertificateResponse* ConferenceResponse_terminalCertificateResponse::clone() const
{ return static_cast<ConferenceResponse_terminalCertificateResponse*> (Inherited::clone()); }

inline MultilinkRequest_maximumHeaderInterval::requestType::const_reference MultilinkRequest_maximumHeaderInterval::get_requestType () const
{ return *static_cast<requestType::const_pointer>(fields[0]);}

inline MultilinkRequest_maximumHeaderInterval::requestType::reference MultilinkRequest_maximumHeaderInterval::ref_requestType ()
{ return *static_cast<requestType::pointer>(fields[0]);}

inline MultilinkRequest_maximumHeaderInterval::requestType::reference MultilinkRequest_maximumHeaderInterval::set_requestType ()
{ return *static_cast<requestType::pointer>(fields[0]);}

inline MultilinkRequest_maximumHeaderInterval::requestType::reference MultilinkRequest_maximumHeaderInterval::set_requestType (requestType::const_reference value)
{ return *static_cast<requestType::pointer>(fields[0]) = value ;}

inline void MultilinkRequest_maximumHeaderInterval::swap(MultilinkRequest_maximumHeaderInterval& other)
{ Inherited::swap(other); }

inline MultilinkRequest_maximumHeaderInterval* MultilinkRequest_maximumHeaderInterval::clone() const
{ return static_cast<MultilinkRequest_maximumHeaderInterval*> (Inherited::clone()); }

inline NewATMVCCommand_reverseParameters::bitRate::const_reference NewATMVCCommand_reverseParameters::get_bitRate () const
{ return *static_cast<bitRate::const_pointer>(fields[0]);}

inline NewATMVCCommand_reverseParameters::bitRate::reference NewATMVCCommand_reverseParameters::ref_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[0]);}

inline NewATMVCCommand_reverseParameters::bitRate::reference NewATMVCCommand_reverseParameters::set_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[0]);}

inline NewATMVCCommand_reverseParameters::bitRate::reference NewATMVCCommand_reverseParameters::set_bitRate (bitRate::value_type::int_type value)
{ return *static_cast<bitRate::pointer>(fields[0]) = value ;}

inline NewATMVCCommand_reverseParameters::bitRateLockedToPCRClock::const_reference NewATMVCCommand_reverseParameters::get_bitRateLockedToPCRClock () const
{ return *static_cast<bitRateLockedToPCRClock::const_pointer>(fields[1]);}

inline NewATMVCCommand_reverseParameters::bitRateLockedToPCRClock::reference NewATMVCCommand_reverseParameters::ref_bitRateLockedToPCRClock ()
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[1]);}

inline NewATMVCCommand_reverseParameters::bitRateLockedToPCRClock::reference NewATMVCCommand_reverseParameters::set_bitRateLockedToPCRClock ()
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[1]);}

inline NewATMVCCommand_reverseParameters::bitRateLockedToPCRClock::reference NewATMVCCommand_reverseParameters::set_bitRateLockedToPCRClock (bool value)
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[1]) = value ;}

inline NewATMVCCommand_reverseParameters::bitRateLockedToNetworkClock::const_reference NewATMVCCommand_reverseParameters::get_bitRateLockedToNetworkClock () const
{ return *static_cast<bitRateLockedToNetworkClock::const_pointer>(fields[2]);}

inline NewATMVCCommand_reverseParameters::bitRateLockedToNetworkClock::reference NewATMVCCommand_reverseParameters::ref_bitRateLockedToNetworkClock ()
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[2]);}

inline NewATMVCCommand_reverseParameters::bitRateLockedToNetworkClock::reference NewATMVCCommand_reverseParameters::set_bitRateLockedToNetworkClock ()
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[2]);}

inline NewATMVCCommand_reverseParameters::bitRateLockedToNetworkClock::reference NewATMVCCommand_reverseParameters::set_bitRateLockedToNetworkClock (bool value)
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[2]) = value ;}

inline NewATMVCCommand_reverseParameters::multiplex::const_reference NewATMVCCommand_reverseParameters::get_multiplex () const
{ return *static_cast<multiplex::const_pointer>(fields[3]);}

inline NewATMVCCommand_reverseParameters::multiplex::reference NewATMVCCommand_reverseParameters::ref_multiplex ()
{ return *static_cast<multiplex::pointer>(fields[3]);}

inline NewATMVCCommand_reverseParameters::multiplex::reference NewATMVCCommand_reverseParameters::set_multiplex ()
{ return *static_cast<multiplex::pointer>(fields[3]);}

inline NewATMVCCommand_reverseParameters::multiplex::reference NewATMVCCommand_reverseParameters::set_multiplex (multiplex::const_reference value)
{ return *static_cast<multiplex::pointer>(fields[3]) = value ;}

inline void NewATMVCCommand_reverseParameters::swap(NewATMVCCommand_reverseParameters& other)
{ Inherited::swap(other); }

inline NewATMVCCommand_reverseParameters* NewATMVCCommand_reverseParameters::clone() const
{ return static_cast<NewATMVCCommand_reverseParameters*> (Inherited::clone()); }

inline NewATMVCIndication_reverseParameters::bitRate::const_reference NewATMVCIndication_reverseParameters::get_bitRate () const
{ return *static_cast<bitRate::const_pointer>(fields[0]);}

inline NewATMVCIndication_reverseParameters::bitRate::reference NewATMVCIndication_reverseParameters::ref_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[0]);}

inline NewATMVCIndication_reverseParameters::bitRate::reference NewATMVCIndication_reverseParameters::set_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[0]);}

inline NewATMVCIndication_reverseParameters::bitRate::reference NewATMVCIndication_reverseParameters::set_bitRate (bitRate::value_type::int_type value)
{ return *static_cast<bitRate::pointer>(fields[0]) = value ;}

inline NewATMVCIndication_reverseParameters::bitRateLockedToPCRClock::const_reference NewATMVCIndication_reverseParameters::get_bitRateLockedToPCRClock () const
{ return *static_cast<bitRateLockedToPCRClock::const_pointer>(fields[1]);}

inline NewATMVCIndication_reverseParameters::bitRateLockedToPCRClock::reference NewATMVCIndication_reverseParameters::ref_bitRateLockedToPCRClock ()
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[1]);}

inline NewATMVCIndication_reverseParameters::bitRateLockedToPCRClock::reference NewATMVCIndication_reverseParameters::set_bitRateLockedToPCRClock ()
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[1]);}

inline NewATMVCIndication_reverseParameters::bitRateLockedToPCRClock::reference NewATMVCIndication_reverseParameters::set_bitRateLockedToPCRClock (bool value)
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[1]) = value ;}

inline NewATMVCIndication_reverseParameters::bitRateLockedToNetworkClock::const_reference NewATMVCIndication_reverseParameters::get_bitRateLockedToNetworkClock () const
{ return *static_cast<bitRateLockedToNetworkClock::const_pointer>(fields[2]);}

inline NewATMVCIndication_reverseParameters::bitRateLockedToNetworkClock::reference NewATMVCIndication_reverseParameters::ref_bitRateLockedToNetworkClock ()
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[2]);}

inline NewATMVCIndication_reverseParameters::bitRateLockedToNetworkClock::reference NewATMVCIndication_reverseParameters::set_bitRateLockedToNetworkClock ()
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[2]);}

inline NewATMVCIndication_reverseParameters::bitRateLockedToNetworkClock::reference NewATMVCIndication_reverseParameters::set_bitRateLockedToNetworkClock (bool value)
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[2]) = value ;}

inline NewATMVCIndication_reverseParameters::multiplex::const_reference NewATMVCIndication_reverseParameters::get_multiplex () const
{ return *static_cast<multiplex::const_pointer>(fields[3]);}

inline NewATMVCIndication_reverseParameters::multiplex::reference NewATMVCIndication_reverseParameters::ref_multiplex ()
{ return *static_cast<multiplex::pointer>(fields[3]);}

inline NewATMVCIndication_reverseParameters::multiplex::reference NewATMVCIndication_reverseParameters::set_multiplex ()
{ return *static_cast<multiplex::pointer>(fields[3]);}

inline NewATMVCIndication_reverseParameters::multiplex::reference NewATMVCIndication_reverseParameters::set_multiplex (multiplex::const_reference value)
{ return *static_cast<multiplex::pointer>(fields[3]) = value ;}

inline void NewATMVCIndication_reverseParameters::swap(NewATMVCIndication_reverseParameters& other)
{ Inherited::swap(other); }

inline NewATMVCIndication_reverseParameters* NewATMVCIndication_reverseParameters::clone() const
{ return static_cast<NewATMVCIndication_reverseParameters*> (Inherited::clone()); }

inline UserInputIndication_signal::signalType::value_type* UserInputIndication_signal::signalType::value_type::clone() const
{ return static_cast<value_type*> (Inherited::clone()); }

inline bool UserInputIndication_signal::signalType::value_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline UserInputIndication_signal::signalType::const_reference UserInputIndication_signal::get_signalType () const
{ return *static_cast<signalType::const_pointer>(fields[0]);}

inline UserInputIndication_signal::signalType::reference UserInputIndication_signal::ref_signalType ()
{ return *static_cast<signalType::pointer>(fields[0]);}

inline UserInputIndication_signal::signalType::reference UserInputIndication_signal::set_signalType ()
{ return *static_cast<signalType::pointer>(fields[0]);}

inline UserInputIndication_signal::signalType::reference UserInputIndication_signal::set_signalType (const std::string& value)
{ return *static_cast<signalType::pointer>(fields[0]) = value ;}

inline UserInputIndication_signal::duration::const_reference UserInputIndication_signal::get_duration () const
{
  assert(hasOptionalField(e_duration));
  return *static_cast<duration::const_pointer>(fields[1]);
}

inline UserInputIndication_signal::duration::reference UserInputIndication_signal::ref_duration ()
{
  assert(hasOptionalField(e_duration));
  return *static_cast<duration::pointer>(fields[1]);
}

inline UserInputIndication_signal::duration::reference UserInputIndication_signal::set_duration ()
{
  includeOptionalField( e_duration, 1);
  return *static_cast<duration::pointer>(fields[1]);
}

inline UserInputIndication_signal::duration::reference UserInputIndication_signal::set_duration (duration::value_type::int_type value)
{
  includeOptionalField( e_duration, 1);
  return *static_cast<duration::pointer>(fields[1]) = value;
}

inline void UserInputIndication_signal::omit_duration ()
{ removeOptionalField( e_duration); }

inline bool UserInputIndication_signal::duration_isPresent () const
{ return hasOptionalField( e_duration); }

inline UserInputIndication_signal::rtp::const_reference UserInputIndication_signal::get_rtp () const
{
  assert(hasOptionalField(e_rtp));
  return *static_cast<rtp::const_pointer>(fields[2]);
}

inline UserInputIndication_signal::rtp::reference UserInputIndication_signal::ref_rtp ()
{
  assert(hasOptionalField(e_rtp));
  return *static_cast<rtp::pointer>(fields[2]);
}

inline UserInputIndication_signal::rtp::reference UserInputIndication_signal::set_rtp ()
{
  includeOptionalField( e_rtp, 2);
  return *static_cast<rtp::pointer>(fields[2]);
}

inline UserInputIndication_signal::rtp::reference UserInputIndication_signal::set_rtp (rtp::const_reference value)
{
  includeOptionalField( e_rtp, 2);
  return *static_cast<rtp::pointer>(fields[2]) = value;
}

inline void UserInputIndication_signal::omit_rtp ()
{ removeOptionalField( e_rtp); }

inline bool UserInputIndication_signal::rtp_isPresent () const
{ return hasOptionalField( e_rtp); }

inline UserInputIndication_signal::rtpPayloadIndication::reference UserInputIndication_signal::set_rtpPayloadIndication ()
{
  includeOptionalField( e_rtpPayloadIndication, 3);
  return *static_cast<rtpPayloadIndication::pointer>(fields[3]);
}

inline void UserInputIndication_signal::omit_rtpPayloadIndication ()
{ removeOptionalField( e_rtpPayloadIndication); }

inline bool UserInputIndication_signal::rtpPayloadIndication_isPresent () const
{ return hasOptionalField( e_rtpPayloadIndication); }

inline UserInputIndication_signal::paramS::const_reference UserInputIndication_signal::get_paramS () const
{
  assert(hasOptionalField(e_paramS));
  return *static_cast<paramS::const_pointer>(fields[4]);
}

inline UserInputIndication_signal::paramS::reference UserInputIndication_signal::ref_paramS ()
{
  assert(hasOptionalField(e_paramS));
  return *static_cast<paramS::pointer>(fields[4]);
}

inline UserInputIndication_signal::paramS::reference UserInputIndication_signal::set_paramS ()
{
  includeOptionalField( e_paramS, 4);
  return *static_cast<paramS::pointer>(fields[4]);
}

inline UserInputIndication_signal::paramS::reference UserInputIndication_signal::set_paramS (paramS::const_reference value)
{
  includeOptionalField( e_paramS, 4);
  return *static_cast<paramS::pointer>(fields[4]) = value;
}

inline void UserInputIndication_signal::omit_paramS ()
{ removeOptionalField( e_paramS); }

inline bool UserInputIndication_signal::paramS_isPresent () const
{ return hasOptionalField( e_paramS); }

inline UserInputIndication_signal::encryptedSignalType::const_reference UserInputIndication_signal::get_encryptedSignalType () const
{
  assert(hasOptionalField(e_encryptedSignalType));
  return *static_cast<encryptedSignalType::const_pointer>(fields[5]);
}

inline UserInputIndication_signal::encryptedSignalType::reference UserInputIndication_signal::ref_encryptedSignalType ()
{
  assert(hasOptionalField(e_encryptedSignalType));
  return *static_cast<encryptedSignalType::pointer>(fields[5]);
}

inline UserInputIndication_signal::encryptedSignalType::reference UserInputIndication_signal::set_encryptedSignalType ()
{
  includeOptionalField( e_encryptedSignalType, 5);
  return *static_cast<encryptedSignalType::pointer>(fields[5]);
}

inline UserInputIndication_signal::encryptedSignalType::reference UserInputIndication_signal::set_encryptedSignalType (const std::vector<char>& value)
{
  includeOptionalField( e_encryptedSignalType, 5);
  return *static_cast<encryptedSignalType::pointer>(fields[5]) = value;
}

inline void UserInputIndication_signal::omit_encryptedSignalType ()
{ removeOptionalField( e_encryptedSignalType); }

inline bool UserInputIndication_signal::encryptedSignalType_isPresent () const
{ return hasOptionalField( e_encryptedSignalType); }

inline UserInputIndication_signal::algorithmOID::const_reference UserInputIndication_signal::get_algorithmOID () const
{
  assert(hasOptionalField(e_algorithmOID));
  return *static_cast<algorithmOID::const_pointer>(fields[6]);
}

inline UserInputIndication_signal::algorithmOID::reference UserInputIndication_signal::ref_algorithmOID ()
{
  assert(hasOptionalField(e_algorithmOID));
  return *static_cast<algorithmOID::pointer>(fields[6]);
}

inline UserInputIndication_signal::algorithmOID::reference UserInputIndication_signal::set_algorithmOID ()
{
  includeOptionalField( e_algorithmOID, 6);
  return *static_cast<algorithmOID::pointer>(fields[6]);
}

inline UserInputIndication_signal::algorithmOID::reference UserInputIndication_signal::set_algorithmOID (algorithmOID::const_reference value)
{
  includeOptionalField( e_algorithmOID, 6);
  return *static_cast<algorithmOID::pointer>(fields[6]) = value;
}

inline void UserInputIndication_signal::omit_algorithmOID ()
{ removeOptionalField( e_algorithmOID); }

inline bool UserInputIndication_signal::algorithmOID_isPresent () const
{ return hasOptionalField( e_algorithmOID); }

inline void UserInputIndication_signal::swap(UserInputIndication_signal& other)
{ Inherited::swap(other); }

inline UserInputIndication_signal* UserInputIndication_signal::clone() const
{ return static_cast<UserInputIndication_signal*> (Inherited::clone()); }

inline UserInputIndication_signalUpdate::duration::const_reference UserInputIndication_signalUpdate::get_duration () const
{ return *static_cast<duration::const_pointer>(fields[0]);}

inline UserInputIndication_signalUpdate::duration::reference UserInputIndication_signalUpdate::ref_duration ()
{ return *static_cast<duration::pointer>(fields[0]);}

inline UserInputIndication_signalUpdate::duration::reference UserInputIndication_signalUpdate::set_duration ()
{ return *static_cast<duration::pointer>(fields[0]);}

inline UserInputIndication_signalUpdate::duration::reference UserInputIndication_signalUpdate::set_duration (duration::value_type::int_type value)
{ return *static_cast<duration::pointer>(fields[0]) = value ;}

inline UserInputIndication_signalUpdate::rtp::const_reference UserInputIndication_signalUpdate::get_rtp () const
{
  assert(hasOptionalField(e_rtp));
  return *static_cast<rtp::const_pointer>(fields[1]);
}

inline UserInputIndication_signalUpdate::rtp::reference UserInputIndication_signalUpdate::ref_rtp ()
{
  assert(hasOptionalField(e_rtp));
  return *static_cast<rtp::pointer>(fields[1]);
}

inline UserInputIndication_signalUpdate::rtp::reference UserInputIndication_signalUpdate::set_rtp ()
{
  includeOptionalField( e_rtp, 1);
  return *static_cast<rtp::pointer>(fields[1]);
}

inline UserInputIndication_signalUpdate::rtp::reference UserInputIndication_signalUpdate::set_rtp (rtp::const_reference value)
{
  includeOptionalField( e_rtp, 1);
  return *static_cast<rtp::pointer>(fields[1]) = value;
}

inline void UserInputIndication_signalUpdate::omit_rtp ()
{ removeOptionalField( e_rtp); }

inline bool UserInputIndication_signalUpdate::rtp_isPresent () const
{ return hasOptionalField( e_rtp); }

inline void UserInputIndication_signalUpdate::swap(UserInputIndication_signalUpdate& other)
{ Inherited::swap(other); }

inline UserInputIndication_signalUpdate* UserInputIndication_signalUpdate::clone() const
{ return static_cast<UserInputIndication_signalUpdate*> (Inherited::clone()); }

inline UserInputIndication_extendedAlphanumeric::alphanumeric::const_reference UserInputIndication_extendedAlphanumeric::get_alphanumeric () const
{ return *static_cast<alphanumeric::const_pointer>(fields[0]);}

inline UserInputIndication_extendedAlphanumeric::alphanumeric::reference UserInputIndication_extendedAlphanumeric::ref_alphanumeric ()
{ return *static_cast<alphanumeric::pointer>(fields[0]);}

inline UserInputIndication_extendedAlphanumeric::alphanumeric::reference UserInputIndication_extendedAlphanumeric::set_alphanumeric ()
{ return *static_cast<alphanumeric::pointer>(fields[0]);}

inline UserInputIndication_extendedAlphanumeric::alphanumeric::reference UserInputIndication_extendedAlphanumeric::set_alphanumeric (const std::string& value)
{ return *static_cast<alphanumeric::pointer>(fields[0]) = value ;}

inline UserInputIndication_extendedAlphanumeric::rtpPayloadIndication::reference UserInputIndication_extendedAlphanumeric::set_rtpPayloadIndication ()
{
  includeOptionalField( e_rtpPayloadIndication, 1);
  return *static_cast<rtpPayloadIndication::pointer>(fields[1]);
}

inline void UserInputIndication_extendedAlphanumeric::omit_rtpPayloadIndication ()
{ removeOptionalField( e_rtpPayloadIndication); }

inline bool UserInputIndication_extendedAlphanumeric::rtpPayloadIndication_isPresent () const
{ return hasOptionalField( e_rtpPayloadIndication); }

inline UserInputIndication_extendedAlphanumeric::encryptedAlphanumeric::const_reference UserInputIndication_extendedAlphanumeric::get_encryptedAlphanumeric () const
{
  assert(hasOptionalField(e_encryptedAlphanumeric));
  return *static_cast<encryptedAlphanumeric::const_pointer>(fields[2]);
}

inline UserInputIndication_extendedAlphanumeric::encryptedAlphanumeric::reference UserInputIndication_extendedAlphanumeric::ref_encryptedAlphanumeric ()
{
  assert(hasOptionalField(e_encryptedAlphanumeric));
  return *static_cast<encryptedAlphanumeric::pointer>(fields[2]);
}

inline UserInputIndication_extendedAlphanumeric::encryptedAlphanumeric::reference UserInputIndication_extendedAlphanumeric::set_encryptedAlphanumeric ()
{
  includeOptionalField( e_encryptedAlphanumeric, 2);
  return *static_cast<encryptedAlphanumeric::pointer>(fields[2]);
}

inline UserInputIndication_extendedAlphanumeric::encryptedAlphanumeric::reference UserInputIndication_extendedAlphanumeric::set_encryptedAlphanumeric (encryptedAlphanumeric::const_reference value)
{
  includeOptionalField( e_encryptedAlphanumeric, 2);
  return *static_cast<encryptedAlphanumeric::pointer>(fields[2]) = value;
}

inline void UserInputIndication_extendedAlphanumeric::omit_encryptedAlphanumeric ()
{ removeOptionalField( e_encryptedAlphanumeric); }

inline bool UserInputIndication_extendedAlphanumeric::encryptedAlphanumeric_isPresent () const
{ return hasOptionalField( e_encryptedAlphanumeric); }

inline void UserInputIndication_extendedAlphanumeric::swap(UserInputIndication_extendedAlphanumeric& other)
{ Inherited::swap(other); }

inline UserInputIndication_extendedAlphanumeric* UserInputIndication_extendedAlphanumeric::clone() const
{ return static_cast<UserInputIndication_extendedAlphanumeric*> (Inherited::clone()); }

inline VCCapability_availableBitRates_type::singleBitRate::const_reference VCCapability_availableBitRates_type::get_singleBitRate () const
{
    assert(currentSelection() ==singleBitRate::id_);
    return *static_cast<singleBitRate::const_pointer>(choice.get());
}

inline VCCapability_availableBitRates_type::singleBitRate::reference VCCapability_availableBitRates_type::ref_singleBitRate ()
{
    assert(currentSelection() ==singleBitRate::id_);
    return *static_cast<singleBitRate::pointer>(choice.get());
}

inline VCCapability_availableBitRates_type::singleBitRate::reference VCCapability_availableBitRates_type::select_singleBitRate ()
{
    return *static_cast<singleBitRate::pointer>(setSelection(singleBitRate::id_, ASN1::AbstractData::create( &singleBitRate::value_type::theInfo)));
}

inline VCCapability_availableBitRates_type::singleBitRate::reference VCCapability_availableBitRates_type::select_singleBitRate (VCCapability_availableBitRates_type::singleBitRate::value_type::int_type value)
{
    return select_singleBitRate() = value;
}

inline bool VCCapability_availableBitRates_type::singleBitRate_isSelected() const
{ 
    return currentSelection() == singleBitRate::id_; 
}

inline VCCapability_availableBitRates_type::rangeOfBitRates::const_reference VCCapability_availableBitRates_type::get_rangeOfBitRates () const
{
    assert(currentSelection() ==rangeOfBitRates::id_);
    return *static_cast<rangeOfBitRates::const_pointer>(choice.get());
}

inline VCCapability_availableBitRates_type::rangeOfBitRates::reference VCCapability_availableBitRates_type::ref_rangeOfBitRates ()
{
    assert(currentSelection() ==rangeOfBitRates::id_);
    return *static_cast<rangeOfBitRates::pointer>(choice.get());
}

inline VCCapability_availableBitRates_type::rangeOfBitRates::reference VCCapability_availableBitRates_type::select_rangeOfBitRates ()
{
    return *static_cast<rangeOfBitRates::pointer>(setSelection(rangeOfBitRates::id_, ASN1::AbstractData::create( &rangeOfBitRates::value_type::theInfo)));
}

inline VCCapability_availableBitRates_type::rangeOfBitRates::reference VCCapability_availableBitRates_type::select_rangeOfBitRates (VCCapability_availableBitRates_type::rangeOfBitRates::const_reference value)
{
    return select_rangeOfBitRates() = value;
}

inline bool VCCapability_availableBitRates_type::rangeOfBitRates_isSelected() const
{ 
    return currentSelection() == rangeOfBitRates::id_; 
}

inline VCCapability_availableBitRates_type::VCCapability_availableBitRates_type(singleBitRate::Id id, singleBitRate::value_type::int_type value)
  : Inherited(&theInfo, id, new singleBitRate::value_type(value) )
{ }

inline VCCapability_availableBitRates_type::VCCapability_availableBitRates_type(rangeOfBitRates::Id id, rangeOfBitRates::const_reference value)
  : Inherited(&theInfo, id, new rangeOfBitRates::value_type(value) )
{ }


inline void VCCapability_availableBitRates_type::swap(VCCapability_availableBitRates_type & other)
{  Inherited::swap(other); }

inline VCCapability_availableBitRates_type* VCCapability_availableBitRates_type::clone() const
{ return static_cast<VCCapability_availableBitRates_type*> (Inherited::clone()); }

inline bool VCCapability_availableBitRates_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline V76LogicalChannelParameters_mode_eRM::windowSize::const_reference V76LogicalChannelParameters_mode_eRM::get_windowSize () const
{ return *static_cast<windowSize::const_pointer>(fields[0]);}

inline V76LogicalChannelParameters_mode_eRM::windowSize::reference V76LogicalChannelParameters_mode_eRM::ref_windowSize ()
{ return *static_cast<windowSize::pointer>(fields[0]);}

inline V76LogicalChannelParameters_mode_eRM::windowSize::reference V76LogicalChannelParameters_mode_eRM::set_windowSize ()
{ return *static_cast<windowSize::pointer>(fields[0]);}

inline V76LogicalChannelParameters_mode_eRM::windowSize::reference V76LogicalChannelParameters_mode_eRM::set_windowSize (windowSize::value_type::int_type value)
{ return *static_cast<windowSize::pointer>(fields[0]) = value ;}

inline V76LogicalChannelParameters_mode_eRM::recovery::const_reference V76LogicalChannelParameters_mode_eRM::get_recovery () const
{ return *static_cast<recovery::const_pointer>(fields[1]);}

inline V76LogicalChannelParameters_mode_eRM::recovery::reference V76LogicalChannelParameters_mode_eRM::ref_recovery ()
{ return *static_cast<recovery::pointer>(fields[1]);}

inline V76LogicalChannelParameters_mode_eRM::recovery::reference V76LogicalChannelParameters_mode_eRM::set_recovery ()
{ return *static_cast<recovery::pointer>(fields[1]);}

inline V76LogicalChannelParameters_mode_eRM::recovery::reference V76LogicalChannelParameters_mode_eRM::set_recovery (recovery::const_reference value)
{ return *static_cast<recovery::pointer>(fields[1]) = value ;}

inline void V76LogicalChannelParameters_mode_eRM::swap(V76LogicalChannelParameters_mode_eRM& other)
{ Inherited::swap(other); }

inline V76LogicalChannelParameters_mode_eRM* V76LogicalChannelParameters_mode_eRM::clone() const
{ return static_cast<V76LogicalChannelParameters_mode_eRM*> (Inherited::clone()); }

inline FECData_rfc2733_pktMode::rfc2198coding::reference FECData_rfc2733_pktMode::select_rfc2198coding ()
{
    return *static_cast<rfc2198coding::pointer>(setSelection(rfc2198coding::id_, ASN1::AbstractData::create( &rfc2198coding::value_type::theInfo)));
}

inline bool FECData_rfc2733_pktMode::rfc2198coding_isSelected() const
{ 
    return currentSelection() == rfc2198coding::id_; 
}

inline FECData_rfc2733_pktMode::rfc2733sameport::const_reference FECData_rfc2733_pktMode::get_rfc2733sameport () const
{
    assert(currentSelection() ==rfc2733sameport::id_);
    return *static_cast<rfc2733sameport::const_pointer>(choice.get());
}

inline FECData_rfc2733_pktMode::rfc2733sameport::reference FECData_rfc2733_pktMode::ref_rfc2733sameport ()
{
    assert(currentSelection() ==rfc2733sameport::id_);
    return *static_cast<rfc2733sameport::pointer>(choice.get());
}

inline FECData_rfc2733_pktMode::rfc2733sameport::reference FECData_rfc2733_pktMode::select_rfc2733sameport ()
{
    return *static_cast<rfc2733sameport::pointer>(setSelection(rfc2733sameport::id_, ASN1::AbstractData::create( &rfc2733sameport::value_type::theInfo)));
}

inline FECData_rfc2733_pktMode::rfc2733sameport::reference FECData_rfc2733_pktMode::select_rfc2733sameport (FECData_rfc2733_pktMode::rfc2733sameport::const_reference value)
{
    return select_rfc2733sameport() = value;
}

inline bool FECData_rfc2733_pktMode::rfc2733sameport_isSelected() const
{ 
    return currentSelection() == rfc2733sameport::id_; 
}

inline FECData_rfc2733_pktMode::rfc2733diffport::const_reference FECData_rfc2733_pktMode::get_rfc2733diffport () const
{
    assert(currentSelection() ==rfc2733diffport::id_);
    return *static_cast<rfc2733diffport::const_pointer>(choice.get());
}

inline FECData_rfc2733_pktMode::rfc2733diffport::reference FECData_rfc2733_pktMode::ref_rfc2733diffport ()
{
    assert(currentSelection() ==rfc2733diffport::id_);
    return *static_cast<rfc2733diffport::pointer>(choice.get());
}

inline FECData_rfc2733_pktMode::rfc2733diffport::reference FECData_rfc2733_pktMode::select_rfc2733diffport ()
{
    return *static_cast<rfc2733diffport::pointer>(setSelection(rfc2733diffport::id_, ASN1::AbstractData::create( &rfc2733diffport::value_type::theInfo)));
}

inline FECData_rfc2733_pktMode::rfc2733diffport::reference FECData_rfc2733_pktMode::select_rfc2733diffport (FECData_rfc2733_pktMode::rfc2733diffport::const_reference value)
{
    return select_rfc2733diffport() = value;
}

inline bool FECData_rfc2733_pktMode::rfc2733diffport_isSelected() const
{ 
    return currentSelection() == rfc2733diffport::id_; 
}

inline FECData_rfc2733_pktMode::FECData_rfc2733_pktMode(rfc2198coding::Id id, rfc2198coding::const_reference value)
  : Inherited(&theInfo, id, new rfc2198coding::value_type(value) )
{ }

inline FECData_rfc2733_pktMode::FECData_rfc2733_pktMode(rfc2733sameport::Id id, rfc2733sameport::const_reference value)
  : Inherited(&theInfo, id, new rfc2733sameport::value_type(value) )
{ }

inline FECData_rfc2733_pktMode::FECData_rfc2733_pktMode(rfc2733diffport::Id id, rfc2733diffport::const_reference value)
  : Inherited(&theInfo, id, new rfc2733diffport::value_type(value) )
{ }


inline void FECData_rfc2733_pktMode::swap(FECData_rfc2733_pktMode & other)
{  Inherited::swap(other); }

inline FECData_rfc2733_pktMode* FECData_rfc2733_pktMode::clone() const
{ return static_cast<FECData_rfc2733_pktMode*> (Inherited::clone()); }

inline bool FECData_rfc2733_pktMode::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MultilinkResponse_addConnection_responseCode::accepted::reference MultilinkResponse_addConnection_responseCode::select_accepted ()
{
    return *static_cast<accepted::pointer>(setSelection(accepted::id_, ASN1::AbstractData::create( &accepted::value_type::theInfo)));
}

inline bool MultilinkResponse_addConnection_responseCode::accepted_isSelected() const
{ 
    return currentSelection() == accepted::id_; 
}

inline MultilinkResponse_addConnection_responseCode::rejected::const_reference MultilinkResponse_addConnection_responseCode::get_rejected () const
{
    assert(currentSelection() ==rejected::id_);
    return *static_cast<rejected::const_pointer>(choice.get());
}

inline MultilinkResponse_addConnection_responseCode::rejected::reference MultilinkResponse_addConnection_responseCode::ref_rejected ()
{
    assert(currentSelection() ==rejected::id_);
    return *static_cast<rejected::pointer>(choice.get());
}

inline MultilinkResponse_addConnection_responseCode::rejected::reference MultilinkResponse_addConnection_responseCode::select_rejected ()
{
    return *static_cast<rejected::pointer>(setSelection(rejected::id_, ASN1::AbstractData::create( &rejected::value_type::theInfo)));
}

inline MultilinkResponse_addConnection_responseCode::rejected::reference MultilinkResponse_addConnection_responseCode::select_rejected (MultilinkResponse_addConnection_responseCode::rejected::const_reference value)
{
    return select_rejected() = value;
}

inline bool MultilinkResponse_addConnection_responseCode::rejected_isSelected() const
{ 
    return currentSelection() == rejected::id_; 
}

inline MultilinkResponse_addConnection_responseCode::MultilinkResponse_addConnection_responseCode(accepted::Id id, accepted::const_reference value)
  : Inherited(&theInfo, id, new accepted::value_type(value) )
{ }

inline MultilinkResponse_addConnection_responseCode::MultilinkResponse_addConnection_responseCode(rejected::Id id, rejected::const_reference value)
  : Inherited(&theInfo, id, new rejected::value_type(value) )
{ }


inline void MultilinkResponse_addConnection_responseCode::swap(MultilinkResponse_addConnection_responseCode & other)
{  Inherited::swap(other); }

inline MultilinkResponse_addConnection_responseCode* MultilinkResponse_addConnection_responseCode::clone() const
{ return static_cast<MultilinkResponse_addConnection_responseCode*> (Inherited::clone()); }

inline bool MultilinkResponse_addConnection_responseCode::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MiscellaneousCommand_type_progressiveRefinementStart::repeatCount::const_reference MiscellaneousCommand_type_progressiveRefinementStart::get_repeatCount () const
{ return *static_cast<repeatCount::const_pointer>(fields[0]);}

inline MiscellaneousCommand_type_progressiveRefinementStart::repeatCount::reference MiscellaneousCommand_type_progressiveRefinementStart::ref_repeatCount ()
{ return *static_cast<repeatCount::pointer>(fields[0]);}

inline MiscellaneousCommand_type_progressiveRefinementStart::repeatCount::reference MiscellaneousCommand_type_progressiveRefinementStart::set_repeatCount ()
{ return *static_cast<repeatCount::pointer>(fields[0]);}

inline MiscellaneousCommand_type_progressiveRefinementStart::repeatCount::reference MiscellaneousCommand_type_progressiveRefinementStart::set_repeatCount (repeatCount::const_reference value)
{ return *static_cast<repeatCount::pointer>(fields[0]) = value ;}

inline void MiscellaneousCommand_type_progressiveRefinementStart::swap(MiscellaneousCommand_type_progressiveRefinementStart& other)
{ Inherited::swap(other); }

inline MiscellaneousCommand_type_progressiveRefinementStart* MiscellaneousCommand_type_progressiveRefinementStart::clone() const
{ return static_cast<MiscellaneousCommand_type_progressiveRefinementStart*> (Inherited::clone()); }

inline NewATMVCCommand_aal_aal1::clockRecovery::const_reference NewATMVCCommand_aal_aal1::get_clockRecovery () const
{ return *static_cast<clockRecovery::const_pointer>(fields[0]);}

inline NewATMVCCommand_aal_aal1::clockRecovery::reference NewATMVCCommand_aal_aal1::ref_clockRecovery ()
{ return *static_cast<clockRecovery::pointer>(fields[0]);}

inline NewATMVCCommand_aal_aal1::clockRecovery::reference NewATMVCCommand_aal_aal1::set_clockRecovery ()
{ return *static_cast<clockRecovery::pointer>(fields[0]);}

inline NewATMVCCommand_aal_aal1::clockRecovery::reference NewATMVCCommand_aal_aal1::set_clockRecovery (clockRecovery::const_reference value)
{ return *static_cast<clockRecovery::pointer>(fields[0]) = value ;}

inline NewATMVCCommand_aal_aal1::errorCorrection::const_reference NewATMVCCommand_aal_aal1::get_errorCorrection () const
{ return *static_cast<errorCorrection::const_pointer>(fields[1]);}

inline NewATMVCCommand_aal_aal1::errorCorrection::reference NewATMVCCommand_aal_aal1::ref_errorCorrection ()
{ return *static_cast<errorCorrection::pointer>(fields[1]);}

inline NewATMVCCommand_aal_aal1::errorCorrection::reference NewATMVCCommand_aal_aal1::set_errorCorrection ()
{ return *static_cast<errorCorrection::pointer>(fields[1]);}

inline NewATMVCCommand_aal_aal1::errorCorrection::reference NewATMVCCommand_aal_aal1::set_errorCorrection (errorCorrection::const_reference value)
{ return *static_cast<errorCorrection::pointer>(fields[1]) = value ;}

inline NewATMVCCommand_aal_aal1::structuredDataTransfer::const_reference NewATMVCCommand_aal_aal1::get_structuredDataTransfer () const
{ return *static_cast<structuredDataTransfer::const_pointer>(fields[2]);}

inline NewATMVCCommand_aal_aal1::structuredDataTransfer::reference NewATMVCCommand_aal_aal1::ref_structuredDataTransfer ()
{ return *static_cast<structuredDataTransfer::pointer>(fields[2]);}

inline NewATMVCCommand_aal_aal1::structuredDataTransfer::reference NewATMVCCommand_aal_aal1::set_structuredDataTransfer ()
{ return *static_cast<structuredDataTransfer::pointer>(fields[2]);}

inline NewATMVCCommand_aal_aal1::structuredDataTransfer::reference NewATMVCCommand_aal_aal1::set_structuredDataTransfer (bool value)
{ return *static_cast<structuredDataTransfer::pointer>(fields[2]) = value ;}

inline NewATMVCCommand_aal_aal1::partiallyFilledCells::const_reference NewATMVCCommand_aal_aal1::get_partiallyFilledCells () const
{ return *static_cast<partiallyFilledCells::const_pointer>(fields[3]);}

inline NewATMVCCommand_aal_aal1::partiallyFilledCells::reference NewATMVCCommand_aal_aal1::ref_partiallyFilledCells ()
{ return *static_cast<partiallyFilledCells::pointer>(fields[3]);}

inline NewATMVCCommand_aal_aal1::partiallyFilledCells::reference NewATMVCCommand_aal_aal1::set_partiallyFilledCells ()
{ return *static_cast<partiallyFilledCells::pointer>(fields[3]);}

inline NewATMVCCommand_aal_aal1::partiallyFilledCells::reference NewATMVCCommand_aal_aal1::set_partiallyFilledCells (bool value)
{ return *static_cast<partiallyFilledCells::pointer>(fields[3]) = value ;}

inline void NewATMVCCommand_aal_aal1::swap(NewATMVCCommand_aal_aal1& other)
{ Inherited::swap(other); }

inline NewATMVCCommand_aal_aal1* NewATMVCCommand_aal_aal1::clone() const
{ return static_cast<NewATMVCCommand_aal_aal1*> (Inherited::clone()); }

inline NewATMVCIndication_aal_aal1::clockRecovery::const_reference NewATMVCIndication_aal_aal1::get_clockRecovery () const
{ return *static_cast<clockRecovery::const_pointer>(fields[0]);}

inline NewATMVCIndication_aal_aal1::clockRecovery::reference NewATMVCIndication_aal_aal1::ref_clockRecovery ()
{ return *static_cast<clockRecovery::pointer>(fields[0]);}

inline NewATMVCIndication_aal_aal1::clockRecovery::reference NewATMVCIndication_aal_aal1::set_clockRecovery ()
{ return *static_cast<clockRecovery::pointer>(fields[0]);}

inline NewATMVCIndication_aal_aal1::clockRecovery::reference NewATMVCIndication_aal_aal1::set_clockRecovery (clockRecovery::const_reference value)
{ return *static_cast<clockRecovery::pointer>(fields[0]) = value ;}

inline NewATMVCIndication_aal_aal1::errorCorrection::const_reference NewATMVCIndication_aal_aal1::get_errorCorrection () const
{ return *static_cast<errorCorrection::const_pointer>(fields[1]);}

inline NewATMVCIndication_aal_aal1::errorCorrection::reference NewATMVCIndication_aal_aal1::ref_errorCorrection ()
{ return *static_cast<errorCorrection::pointer>(fields[1]);}

inline NewATMVCIndication_aal_aal1::errorCorrection::reference NewATMVCIndication_aal_aal1::set_errorCorrection ()
{ return *static_cast<errorCorrection::pointer>(fields[1]);}

inline NewATMVCIndication_aal_aal1::errorCorrection::reference NewATMVCIndication_aal_aal1::set_errorCorrection (errorCorrection::const_reference value)
{ return *static_cast<errorCorrection::pointer>(fields[1]) = value ;}

inline NewATMVCIndication_aal_aal1::structuredDataTransfer::const_reference NewATMVCIndication_aal_aal1::get_structuredDataTransfer () const
{ return *static_cast<structuredDataTransfer::const_pointer>(fields[2]);}

inline NewATMVCIndication_aal_aal1::structuredDataTransfer::reference NewATMVCIndication_aal_aal1::ref_structuredDataTransfer ()
{ return *static_cast<structuredDataTransfer::pointer>(fields[2]);}

inline NewATMVCIndication_aal_aal1::structuredDataTransfer::reference NewATMVCIndication_aal_aal1::set_structuredDataTransfer ()
{ return *static_cast<structuredDataTransfer::pointer>(fields[2]);}

inline NewATMVCIndication_aal_aal1::structuredDataTransfer::reference NewATMVCIndication_aal_aal1::set_structuredDataTransfer (bool value)
{ return *static_cast<structuredDataTransfer::pointer>(fields[2]) = value ;}

inline NewATMVCIndication_aal_aal1::partiallyFilledCells::const_reference NewATMVCIndication_aal_aal1::get_partiallyFilledCells () const
{ return *static_cast<partiallyFilledCells::const_pointer>(fields[3]);}

inline NewATMVCIndication_aal_aal1::partiallyFilledCells::reference NewATMVCIndication_aal_aal1::ref_partiallyFilledCells ()
{ return *static_cast<partiallyFilledCells::pointer>(fields[3]);}

inline NewATMVCIndication_aal_aal1::partiallyFilledCells::reference NewATMVCIndication_aal_aal1::set_partiallyFilledCells ()
{ return *static_cast<partiallyFilledCells::pointer>(fields[3]);}

inline NewATMVCIndication_aal_aal1::partiallyFilledCells::reference NewATMVCIndication_aal_aal1::set_partiallyFilledCells (bool value)
{ return *static_cast<partiallyFilledCells::pointer>(fields[3]) = value ;}

inline void NewATMVCIndication_aal_aal1::swap(NewATMVCIndication_aal_aal1& other)
{ Inherited::swap(other); }

inline NewATMVCIndication_aal_aal1* NewATMVCIndication_aal_aal1::clone() const
{ return static_cast<NewATMVCIndication_aal_aal1*> (Inherited::clone()); }

inline DepFECData_rfc2733_mode_separateStream::differentPort::const_reference DepFECData_rfc2733_mode_separateStream::get_differentPort () const
{
    assert(currentSelection() ==differentPort::id_);
    return *static_cast<differentPort::const_pointer>(choice.get());
}

inline DepFECData_rfc2733_mode_separateStream::differentPort::reference DepFECData_rfc2733_mode_separateStream::ref_differentPort ()
{
    assert(currentSelection() ==differentPort::id_);
    return *static_cast<differentPort::pointer>(choice.get());
}

inline DepFECData_rfc2733_mode_separateStream::differentPort::reference DepFECData_rfc2733_mode_separateStream::select_differentPort ()
{
    return *static_cast<differentPort::pointer>(setSelection(differentPort::id_, ASN1::AbstractData::create( &differentPort::value_type::theInfo)));
}

inline DepFECData_rfc2733_mode_separateStream::differentPort::reference DepFECData_rfc2733_mode_separateStream::select_differentPort (DepFECData_rfc2733_mode_separateStream::differentPort::const_reference value)
{
    return select_differentPort() = value;
}

inline bool DepFECData_rfc2733_mode_separateStream::differentPort_isSelected() const
{ 
    return currentSelection() == differentPort::id_; 
}

inline DepFECData_rfc2733_mode_separateStream::samePort::const_reference DepFECData_rfc2733_mode_separateStream::get_samePort () const
{
    assert(currentSelection() ==samePort::id_);
    return *static_cast<samePort::const_pointer>(choice.get());
}

inline DepFECData_rfc2733_mode_separateStream::samePort::reference DepFECData_rfc2733_mode_separateStream::ref_samePort ()
{
    assert(currentSelection() ==samePort::id_);
    return *static_cast<samePort::pointer>(choice.get());
}

inline DepFECData_rfc2733_mode_separateStream::samePort::reference DepFECData_rfc2733_mode_separateStream::select_samePort ()
{
    return *static_cast<samePort::pointer>(setSelection(samePort::id_, ASN1::AbstractData::create( &samePort::value_type::theInfo)));
}

inline DepFECData_rfc2733_mode_separateStream::samePort::reference DepFECData_rfc2733_mode_separateStream::select_samePort (DepFECData_rfc2733_mode_separateStream::samePort::const_reference value)
{
    return select_samePort() = value;
}

inline bool DepFECData_rfc2733_mode_separateStream::samePort_isSelected() const
{ 
    return currentSelection() == samePort::id_; 
}

inline DepFECData_rfc2733_mode_separateStream::DepFECData_rfc2733_mode_separateStream(differentPort::Id id, differentPort::const_reference value)
  : Inherited(&theInfo, id, new differentPort::value_type(value) )
{ }

inline DepFECData_rfc2733_mode_separateStream::DepFECData_rfc2733_mode_separateStream(samePort::Id id, samePort::const_reference value)
  : Inherited(&theInfo, id, new samePort::value_type(value) )
{ }


inline void DepFECData_rfc2733_mode_separateStream::swap(DepFECData_rfc2733_mode_separateStream & other)
{  Inherited::swap(other); }

inline DepFECData_rfc2733_mode_separateStream* DepFECData_rfc2733_mode_separateStream::clone() const
{ return static_cast<DepFECData_rfc2733_mode_separateStream*> (Inherited::clone()); }

inline bool DepFECData_rfc2733_mode_separateStream::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NonStandardParameter::nonStandardIdentifier::const_reference NonStandardParameter::get_nonStandardIdentifier () const
{ return *static_cast<nonStandardIdentifier::const_pointer>(fields[0]);}

inline NonStandardParameter::nonStandardIdentifier::reference NonStandardParameter::ref_nonStandardIdentifier ()
{ return *static_cast<nonStandardIdentifier::pointer>(fields[0]);}

inline NonStandardParameter::nonStandardIdentifier::reference NonStandardParameter::set_nonStandardIdentifier ()
{ return *static_cast<nonStandardIdentifier::pointer>(fields[0]);}

inline NonStandardParameter::nonStandardIdentifier::reference NonStandardParameter::set_nonStandardIdentifier (nonStandardIdentifier::const_reference value)
{ return *static_cast<nonStandardIdentifier::pointer>(fields[0]) = value ;}

inline NonStandardParameter::data::const_reference NonStandardParameter::get_data () const
{ return *static_cast<data::const_pointer>(fields[1]);}

inline NonStandardParameter::data::reference NonStandardParameter::ref_data ()
{ return *static_cast<data::pointer>(fields[1]);}

inline NonStandardParameter::data::reference NonStandardParameter::set_data ()
{ return *static_cast<data::pointer>(fields[1]);}

inline NonStandardParameter::data::reference NonStandardParameter::set_data (const std::vector<char>& value)
{ return *static_cast<data::pointer>(fields[1]) = value ;}

inline void NonStandardParameter::swap(NonStandardParameter& other)
{ Inherited::swap(other); }

inline NonStandardParameter* NonStandardParameter::clone() const
{ return static_cast<NonStandardParameter*> (Inherited::clone()); }

inline CapabilityDescriptor::capabilityDescriptorNumber::const_reference CapabilityDescriptor::get_capabilityDescriptorNumber () const
{ return *static_cast<capabilityDescriptorNumber::const_pointer>(fields[0]);}

inline CapabilityDescriptor::capabilityDescriptorNumber::reference CapabilityDescriptor::ref_capabilityDescriptorNumber ()
{ return *static_cast<capabilityDescriptorNumber::pointer>(fields[0]);}

inline CapabilityDescriptor::capabilityDescriptorNumber::reference CapabilityDescriptor::set_capabilityDescriptorNumber ()
{ return *static_cast<capabilityDescriptorNumber::pointer>(fields[0]);}

inline CapabilityDescriptor::capabilityDescriptorNumber::reference CapabilityDescriptor::set_capabilityDescriptorNumber (capabilityDescriptorNumber::value_type::int_type value)
{ return *static_cast<capabilityDescriptorNumber::pointer>(fields[0]) = value ;}

inline CapabilityDescriptor::simultaneousCapabilities::const_reference CapabilityDescriptor::get_simultaneousCapabilities () const
{
  assert(hasOptionalField(e_simultaneousCapabilities));
  return *static_cast<simultaneousCapabilities::const_pointer>(fields[1]);
}

inline CapabilityDescriptor::simultaneousCapabilities::reference CapabilityDescriptor::ref_simultaneousCapabilities ()
{
  assert(hasOptionalField(e_simultaneousCapabilities));
  return *static_cast<simultaneousCapabilities::pointer>(fields[1]);
}

inline CapabilityDescriptor::simultaneousCapabilities::reference CapabilityDescriptor::set_simultaneousCapabilities ()
{
  includeOptionalField( e_simultaneousCapabilities, 1);
  return *static_cast<simultaneousCapabilities::pointer>(fields[1]);
}

inline CapabilityDescriptor::simultaneousCapabilities::reference CapabilityDescriptor::set_simultaneousCapabilities (simultaneousCapabilities::const_reference value)
{
  includeOptionalField( e_simultaneousCapabilities, 1);
  return *static_cast<simultaneousCapabilities::pointer>(fields[1]) = value;
}

inline void CapabilityDescriptor::omit_simultaneousCapabilities ()
{ removeOptionalField( e_simultaneousCapabilities); }

inline bool CapabilityDescriptor::simultaneousCapabilities_isPresent () const
{ return hasOptionalField( e_simultaneousCapabilities); }

inline void CapabilityDescriptor::swap(CapabilityDescriptor& other)
{ Inherited::swap(other); }

inline CapabilityDescriptor* CapabilityDescriptor::clone() const
{ return static_cast<CapabilityDescriptor*> (Inherited::clone()); }

inline H223Capability::transportWithI_frames::const_reference H223Capability::get_transportWithI_frames () const
{ return *static_cast<transportWithI_frames::const_pointer>(fields[0]);}

inline H223Capability::transportWithI_frames::reference H223Capability::ref_transportWithI_frames ()
{ return *static_cast<transportWithI_frames::pointer>(fields[0]);}

inline H223Capability::transportWithI_frames::reference H223Capability::set_transportWithI_frames ()
{ return *static_cast<transportWithI_frames::pointer>(fields[0]);}

inline H223Capability::transportWithI_frames::reference H223Capability::set_transportWithI_frames (bool value)
{ return *static_cast<transportWithI_frames::pointer>(fields[0]) = value ;}

inline H223Capability::videoWithAL1::const_reference H223Capability::get_videoWithAL1 () const
{ return *static_cast<videoWithAL1::const_pointer>(fields[1]);}

inline H223Capability::videoWithAL1::reference H223Capability::ref_videoWithAL1 ()
{ return *static_cast<videoWithAL1::pointer>(fields[1]);}

inline H223Capability::videoWithAL1::reference H223Capability::set_videoWithAL1 ()
{ return *static_cast<videoWithAL1::pointer>(fields[1]);}

inline H223Capability::videoWithAL1::reference H223Capability::set_videoWithAL1 (bool value)
{ return *static_cast<videoWithAL1::pointer>(fields[1]) = value ;}

inline H223Capability::videoWithAL2::const_reference H223Capability::get_videoWithAL2 () const
{ return *static_cast<videoWithAL2::const_pointer>(fields[2]);}

inline H223Capability::videoWithAL2::reference H223Capability::ref_videoWithAL2 ()
{ return *static_cast<videoWithAL2::pointer>(fields[2]);}

inline H223Capability::videoWithAL2::reference H223Capability::set_videoWithAL2 ()
{ return *static_cast<videoWithAL2::pointer>(fields[2]);}

inline H223Capability::videoWithAL2::reference H223Capability::set_videoWithAL2 (bool value)
{ return *static_cast<videoWithAL2::pointer>(fields[2]) = value ;}

inline H223Capability::videoWithAL3::const_reference H223Capability::get_videoWithAL3 () const
{ return *static_cast<videoWithAL3::const_pointer>(fields[3]);}

inline H223Capability::videoWithAL3::reference H223Capability::ref_videoWithAL3 ()
{ return *static_cast<videoWithAL3::pointer>(fields[3]);}

inline H223Capability::videoWithAL3::reference H223Capability::set_videoWithAL3 ()
{ return *static_cast<videoWithAL3::pointer>(fields[3]);}

inline H223Capability::videoWithAL3::reference H223Capability::set_videoWithAL3 (bool value)
{ return *static_cast<videoWithAL3::pointer>(fields[3]) = value ;}

inline H223Capability::audioWithAL1::const_reference H223Capability::get_audioWithAL1 () const
{ return *static_cast<audioWithAL1::const_pointer>(fields[4]);}

inline H223Capability::audioWithAL1::reference H223Capability::ref_audioWithAL1 ()
{ return *static_cast<audioWithAL1::pointer>(fields[4]);}

inline H223Capability::audioWithAL1::reference H223Capability::set_audioWithAL1 ()
{ return *static_cast<audioWithAL1::pointer>(fields[4]);}

inline H223Capability::audioWithAL1::reference H223Capability::set_audioWithAL1 (bool value)
{ return *static_cast<audioWithAL1::pointer>(fields[4]) = value ;}

inline H223Capability::audioWithAL2::const_reference H223Capability::get_audioWithAL2 () const
{ return *static_cast<audioWithAL2::const_pointer>(fields[5]);}

inline H223Capability::audioWithAL2::reference H223Capability::ref_audioWithAL2 ()
{ return *static_cast<audioWithAL2::pointer>(fields[5]);}

inline H223Capability::audioWithAL2::reference H223Capability::set_audioWithAL2 ()
{ return *static_cast<audioWithAL2::pointer>(fields[5]);}

inline H223Capability::audioWithAL2::reference H223Capability::set_audioWithAL2 (bool value)
{ return *static_cast<audioWithAL2::pointer>(fields[5]) = value ;}

inline H223Capability::audioWithAL3::const_reference H223Capability::get_audioWithAL3 () const
{ return *static_cast<audioWithAL3::const_pointer>(fields[6]);}

inline H223Capability::audioWithAL3::reference H223Capability::ref_audioWithAL3 ()
{ return *static_cast<audioWithAL3::pointer>(fields[6]);}

inline H223Capability::audioWithAL3::reference H223Capability::set_audioWithAL3 ()
{ return *static_cast<audioWithAL3::pointer>(fields[6]);}

inline H223Capability::audioWithAL3::reference H223Capability::set_audioWithAL3 (bool value)
{ return *static_cast<audioWithAL3::pointer>(fields[6]) = value ;}

inline H223Capability::dataWithAL1::const_reference H223Capability::get_dataWithAL1 () const
{ return *static_cast<dataWithAL1::const_pointer>(fields[7]);}

inline H223Capability::dataWithAL1::reference H223Capability::ref_dataWithAL1 ()
{ return *static_cast<dataWithAL1::pointer>(fields[7]);}

inline H223Capability::dataWithAL1::reference H223Capability::set_dataWithAL1 ()
{ return *static_cast<dataWithAL1::pointer>(fields[7]);}

inline H223Capability::dataWithAL1::reference H223Capability::set_dataWithAL1 (bool value)
{ return *static_cast<dataWithAL1::pointer>(fields[7]) = value ;}

inline H223Capability::dataWithAL2::const_reference H223Capability::get_dataWithAL2 () const
{ return *static_cast<dataWithAL2::const_pointer>(fields[8]);}

inline H223Capability::dataWithAL2::reference H223Capability::ref_dataWithAL2 ()
{ return *static_cast<dataWithAL2::pointer>(fields[8]);}

inline H223Capability::dataWithAL2::reference H223Capability::set_dataWithAL2 ()
{ return *static_cast<dataWithAL2::pointer>(fields[8]);}

inline H223Capability::dataWithAL2::reference H223Capability::set_dataWithAL2 (bool value)
{ return *static_cast<dataWithAL2::pointer>(fields[8]) = value ;}

inline H223Capability::dataWithAL3::const_reference H223Capability::get_dataWithAL3 () const
{ return *static_cast<dataWithAL3::const_pointer>(fields[9]);}

inline H223Capability::dataWithAL3::reference H223Capability::ref_dataWithAL3 ()
{ return *static_cast<dataWithAL3::pointer>(fields[9]);}

inline H223Capability::dataWithAL3::reference H223Capability::set_dataWithAL3 ()
{ return *static_cast<dataWithAL3::pointer>(fields[9]);}

inline H223Capability::dataWithAL3::reference H223Capability::set_dataWithAL3 (bool value)
{ return *static_cast<dataWithAL3::pointer>(fields[9]) = value ;}

inline H223Capability::maximumAl2SDUSize::const_reference H223Capability::get_maximumAl2SDUSize () const
{ return *static_cast<maximumAl2SDUSize::const_pointer>(fields[10]);}

inline H223Capability::maximumAl2SDUSize::reference H223Capability::ref_maximumAl2SDUSize ()
{ return *static_cast<maximumAl2SDUSize::pointer>(fields[10]);}

inline H223Capability::maximumAl2SDUSize::reference H223Capability::set_maximumAl2SDUSize ()
{ return *static_cast<maximumAl2SDUSize::pointer>(fields[10]);}

inline H223Capability::maximumAl2SDUSize::reference H223Capability::set_maximumAl2SDUSize (maximumAl2SDUSize::value_type::int_type value)
{ return *static_cast<maximumAl2SDUSize::pointer>(fields[10]) = value ;}

inline H223Capability::maximumAl3SDUSize::const_reference H223Capability::get_maximumAl3SDUSize () const
{ return *static_cast<maximumAl3SDUSize::const_pointer>(fields[11]);}

inline H223Capability::maximumAl3SDUSize::reference H223Capability::ref_maximumAl3SDUSize ()
{ return *static_cast<maximumAl3SDUSize::pointer>(fields[11]);}

inline H223Capability::maximumAl3SDUSize::reference H223Capability::set_maximumAl3SDUSize ()
{ return *static_cast<maximumAl3SDUSize::pointer>(fields[11]);}

inline H223Capability::maximumAl3SDUSize::reference H223Capability::set_maximumAl3SDUSize (maximumAl3SDUSize::value_type::int_type value)
{ return *static_cast<maximumAl3SDUSize::pointer>(fields[11]) = value ;}

inline H223Capability::maximumDelayJitter::const_reference H223Capability::get_maximumDelayJitter () const
{ return *static_cast<maximumDelayJitter::const_pointer>(fields[12]);}

inline H223Capability::maximumDelayJitter::reference H223Capability::ref_maximumDelayJitter ()
{ return *static_cast<maximumDelayJitter::pointer>(fields[12]);}

inline H223Capability::maximumDelayJitter::reference H223Capability::set_maximumDelayJitter ()
{ return *static_cast<maximumDelayJitter::pointer>(fields[12]);}

inline H223Capability::maximumDelayJitter::reference H223Capability::set_maximumDelayJitter (maximumDelayJitter::value_type::int_type value)
{ return *static_cast<maximumDelayJitter::pointer>(fields[12]) = value ;}

inline H223Capability::h223MultiplexTableCapability::const_reference H223Capability::get_h223MultiplexTableCapability () const
{ return *static_cast<h223MultiplexTableCapability::const_pointer>(fields[13]);}

inline H223Capability::h223MultiplexTableCapability::reference H223Capability::ref_h223MultiplexTableCapability ()
{ return *static_cast<h223MultiplexTableCapability::pointer>(fields[13]);}

inline H223Capability::h223MultiplexTableCapability::reference H223Capability::set_h223MultiplexTableCapability ()
{ return *static_cast<h223MultiplexTableCapability::pointer>(fields[13]);}

inline H223Capability::h223MultiplexTableCapability::reference H223Capability::set_h223MultiplexTableCapability (h223MultiplexTableCapability::const_reference value)
{ return *static_cast<h223MultiplexTableCapability::pointer>(fields[13]) = value ;}

inline H223Capability::maxMUXPDUSizeCapability::const_reference H223Capability::get_maxMUXPDUSizeCapability () const
{
  assert(hasOptionalField(e_maxMUXPDUSizeCapability));
  return *static_cast<maxMUXPDUSizeCapability::const_pointer>(fields[14]);
}

inline H223Capability::maxMUXPDUSizeCapability::reference H223Capability::ref_maxMUXPDUSizeCapability ()
{
  assert(hasOptionalField(e_maxMUXPDUSizeCapability));
  return *static_cast<maxMUXPDUSizeCapability::pointer>(fields[14]);
}

inline H223Capability::maxMUXPDUSizeCapability::reference H223Capability::set_maxMUXPDUSizeCapability ()
{
  includeOptionalField( e_maxMUXPDUSizeCapability, 14);
  return *static_cast<maxMUXPDUSizeCapability::pointer>(fields[14]);
}

inline H223Capability::maxMUXPDUSizeCapability::reference H223Capability::set_maxMUXPDUSizeCapability (bool value)
{
  includeOptionalField( e_maxMUXPDUSizeCapability, 14);
  return *static_cast<maxMUXPDUSizeCapability::pointer>(fields[14]) = value;
}

inline void H223Capability::omit_maxMUXPDUSizeCapability ()
{ removeOptionalField( e_maxMUXPDUSizeCapability); }

inline bool H223Capability::maxMUXPDUSizeCapability_isPresent () const
{ return hasOptionalField( e_maxMUXPDUSizeCapability); }

inline H223Capability::nsrpSupport::const_reference H223Capability::get_nsrpSupport () const
{
  assert(hasOptionalField(e_nsrpSupport));
  return *static_cast<nsrpSupport::const_pointer>(fields[15]);
}

inline H223Capability::nsrpSupport::reference H223Capability::ref_nsrpSupport ()
{
  assert(hasOptionalField(e_nsrpSupport));
  return *static_cast<nsrpSupport::pointer>(fields[15]);
}

inline H223Capability::nsrpSupport::reference H223Capability::set_nsrpSupport ()
{
  includeOptionalField( e_nsrpSupport, 15);
  return *static_cast<nsrpSupport::pointer>(fields[15]);
}

inline H223Capability::nsrpSupport::reference H223Capability::set_nsrpSupport (bool value)
{
  includeOptionalField( e_nsrpSupport, 15);
  return *static_cast<nsrpSupport::pointer>(fields[15]) = value;
}

inline void H223Capability::omit_nsrpSupport ()
{ removeOptionalField( e_nsrpSupport); }

inline bool H223Capability::nsrpSupport_isPresent () const
{ return hasOptionalField( e_nsrpSupport); }

inline H223Capability::mobileOperationTransmitCapability::const_reference H223Capability::get_mobileOperationTransmitCapability () const
{
  assert(hasOptionalField(e_mobileOperationTransmitCapability));
  return *static_cast<mobileOperationTransmitCapability::const_pointer>(fields[16]);
}

inline H223Capability::mobileOperationTransmitCapability::reference H223Capability::ref_mobileOperationTransmitCapability ()
{
  assert(hasOptionalField(e_mobileOperationTransmitCapability));
  return *static_cast<mobileOperationTransmitCapability::pointer>(fields[16]);
}

inline H223Capability::mobileOperationTransmitCapability::reference H223Capability::set_mobileOperationTransmitCapability ()
{
  includeOptionalField( e_mobileOperationTransmitCapability, 16);
  return *static_cast<mobileOperationTransmitCapability::pointer>(fields[16]);
}

inline H223Capability::mobileOperationTransmitCapability::reference H223Capability::set_mobileOperationTransmitCapability (mobileOperationTransmitCapability::const_reference value)
{
  includeOptionalField( e_mobileOperationTransmitCapability, 16);
  return *static_cast<mobileOperationTransmitCapability::pointer>(fields[16]) = value;
}

inline void H223Capability::omit_mobileOperationTransmitCapability ()
{ removeOptionalField( e_mobileOperationTransmitCapability); }

inline bool H223Capability::mobileOperationTransmitCapability_isPresent () const
{ return hasOptionalField( e_mobileOperationTransmitCapability); }

inline H223Capability::h223AnnexCCapability::const_reference H223Capability::get_h223AnnexCCapability () const
{
  assert(hasOptionalField(e_h223AnnexCCapability));
  return *static_cast<h223AnnexCCapability::const_pointer>(fields[17]);
}

inline H223Capability::h223AnnexCCapability::reference H223Capability::ref_h223AnnexCCapability ()
{
  assert(hasOptionalField(e_h223AnnexCCapability));
  return *static_cast<h223AnnexCCapability::pointer>(fields[17]);
}

inline H223Capability::h223AnnexCCapability::reference H223Capability::set_h223AnnexCCapability ()
{
  includeOptionalField( e_h223AnnexCCapability, 17);
  return *static_cast<h223AnnexCCapability::pointer>(fields[17]);
}

inline H223Capability::h223AnnexCCapability::reference H223Capability::set_h223AnnexCCapability (h223AnnexCCapability::const_reference value)
{
  includeOptionalField( e_h223AnnexCCapability, 17);
  return *static_cast<h223AnnexCCapability::pointer>(fields[17]) = value;
}

inline void H223Capability::omit_h223AnnexCCapability ()
{ removeOptionalField( e_h223AnnexCCapability); }

inline bool H223Capability::h223AnnexCCapability_isPresent () const
{ return hasOptionalField( e_h223AnnexCCapability); }

inline H223Capability::bitRate::const_reference H223Capability::get_bitRate () const
{
  assert(hasOptionalField(e_bitRate));
  return *static_cast<bitRate::const_pointer>(fields[18]);
}

inline H223Capability::bitRate::reference H223Capability::ref_bitRate ()
{
  assert(hasOptionalField(e_bitRate));
  return *static_cast<bitRate::pointer>(fields[18]);
}

inline H223Capability::bitRate::reference H223Capability::set_bitRate ()
{
  includeOptionalField( e_bitRate, 18);
  return *static_cast<bitRate::pointer>(fields[18]);
}

inline H223Capability::bitRate::reference H223Capability::set_bitRate (bitRate::value_type::int_type value)
{
  includeOptionalField( e_bitRate, 18);
  return *static_cast<bitRate::pointer>(fields[18]) = value;
}

inline void H223Capability::omit_bitRate ()
{ removeOptionalField( e_bitRate); }

inline bool H223Capability::bitRate_isPresent () const
{ return hasOptionalField( e_bitRate); }

inline H223Capability::mobileMultilinkFrameCapability::const_reference H223Capability::get_mobileMultilinkFrameCapability () const
{
  assert(hasOptionalField(e_mobileMultilinkFrameCapability));
  return *static_cast<mobileMultilinkFrameCapability::const_pointer>(fields[19]);
}

inline H223Capability::mobileMultilinkFrameCapability::reference H223Capability::ref_mobileMultilinkFrameCapability ()
{
  assert(hasOptionalField(e_mobileMultilinkFrameCapability));
  return *static_cast<mobileMultilinkFrameCapability::pointer>(fields[19]);
}

inline H223Capability::mobileMultilinkFrameCapability::reference H223Capability::set_mobileMultilinkFrameCapability ()
{
  includeOptionalField( e_mobileMultilinkFrameCapability, 19);
  return *static_cast<mobileMultilinkFrameCapability::pointer>(fields[19]);
}

inline H223Capability::mobileMultilinkFrameCapability::reference H223Capability::set_mobileMultilinkFrameCapability (mobileMultilinkFrameCapability::const_reference value)
{
  includeOptionalField( e_mobileMultilinkFrameCapability, 19);
  return *static_cast<mobileMultilinkFrameCapability::pointer>(fields[19]) = value;
}

inline void H223Capability::omit_mobileMultilinkFrameCapability ()
{ removeOptionalField( e_mobileMultilinkFrameCapability); }

inline bool H223Capability::mobileMultilinkFrameCapability_isPresent () const
{ return hasOptionalField( e_mobileMultilinkFrameCapability); }

inline void H223Capability::swap(H223Capability& other)
{ Inherited::swap(other); }

inline H223Capability* H223Capability::clone() const
{ return static_cast<H223Capability*> (Inherited::clone()); }

inline QOSCapability::nonStandardData::const_reference QOSCapability::get_nonStandardData () const
{
  assert(hasOptionalField(e_nonStandardData));
  return *static_cast<nonStandardData::const_pointer>(fields[0]);
}

inline QOSCapability::nonStandardData::reference QOSCapability::ref_nonStandardData ()
{
  assert(hasOptionalField(e_nonStandardData));
  return *static_cast<nonStandardData::pointer>(fields[0]);
}

inline QOSCapability::nonStandardData::reference QOSCapability::set_nonStandardData ()
{
  includeOptionalField( e_nonStandardData, 0);
  return *static_cast<nonStandardData::pointer>(fields[0]);
}

inline QOSCapability::nonStandardData::reference QOSCapability::set_nonStandardData (nonStandardData::const_reference value)
{
  includeOptionalField( e_nonStandardData, 0);
  return *static_cast<nonStandardData::pointer>(fields[0]) = value;
}

inline void QOSCapability::omit_nonStandardData ()
{ removeOptionalField( e_nonStandardData); }

inline bool QOSCapability::nonStandardData_isPresent () const
{ return hasOptionalField( e_nonStandardData); }

inline QOSCapability::rsvpParameters::const_reference QOSCapability::get_rsvpParameters () const
{
  assert(hasOptionalField(e_rsvpParameters));
  return *static_cast<rsvpParameters::const_pointer>(fields[1]);
}

inline QOSCapability::rsvpParameters::reference QOSCapability::ref_rsvpParameters ()
{
  assert(hasOptionalField(e_rsvpParameters));
  return *static_cast<rsvpParameters::pointer>(fields[1]);
}

inline QOSCapability::rsvpParameters::reference QOSCapability::set_rsvpParameters ()
{
  includeOptionalField( e_rsvpParameters, 1);
  return *static_cast<rsvpParameters::pointer>(fields[1]);
}

inline QOSCapability::rsvpParameters::reference QOSCapability::set_rsvpParameters (rsvpParameters::const_reference value)
{
  includeOptionalField( e_rsvpParameters, 1);
  return *static_cast<rsvpParameters::pointer>(fields[1]) = value;
}

inline void QOSCapability::omit_rsvpParameters ()
{ removeOptionalField( e_rsvpParameters); }

inline bool QOSCapability::rsvpParameters_isPresent () const
{ return hasOptionalField( e_rsvpParameters); }

inline QOSCapability::atmParameters::const_reference QOSCapability::get_atmParameters () const
{
  assert(hasOptionalField(e_atmParameters));
  return *static_cast<atmParameters::const_pointer>(fields[2]);
}

inline QOSCapability::atmParameters::reference QOSCapability::ref_atmParameters ()
{
  assert(hasOptionalField(e_atmParameters));
  return *static_cast<atmParameters::pointer>(fields[2]);
}

inline QOSCapability::atmParameters::reference QOSCapability::set_atmParameters ()
{
  includeOptionalField( e_atmParameters, 2);
  return *static_cast<atmParameters::pointer>(fields[2]);
}

inline QOSCapability::atmParameters::reference QOSCapability::set_atmParameters (atmParameters::const_reference value)
{
  includeOptionalField( e_atmParameters, 2);
  return *static_cast<atmParameters::pointer>(fields[2]) = value;
}

inline void QOSCapability::omit_atmParameters ()
{ removeOptionalField( e_atmParameters); }

inline bool QOSCapability::atmParameters_isPresent () const
{ return hasOptionalField( e_atmParameters); }

inline void QOSCapability::swap(QOSCapability& other)
{ Inherited::swap(other); }

inline QOSCapability* QOSCapability::clone() const
{ return static_cast<QOSCapability*> (Inherited::clone()); }

inline TransportCapability::nonStandard::const_reference TransportCapability::get_nonStandard () const
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::const_pointer>(fields[0]);
}

inline TransportCapability::nonStandard::reference TransportCapability::ref_nonStandard ()
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline TransportCapability::nonStandard::reference TransportCapability::set_nonStandard ()
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline TransportCapability::nonStandard::reference TransportCapability::set_nonStandard (nonStandard::const_reference value)
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]) = value;
}

inline void TransportCapability::omit_nonStandard ()
{ removeOptionalField( e_nonStandard); }

inline bool TransportCapability::nonStandard_isPresent () const
{ return hasOptionalField( e_nonStandard); }

inline TransportCapability::qOSCapabilities::const_reference TransportCapability::get_qOSCapabilities () const
{
  assert(hasOptionalField(e_qOSCapabilities));
  return *static_cast<qOSCapabilities::const_pointer>(fields[1]);
}

inline TransportCapability::qOSCapabilities::reference TransportCapability::ref_qOSCapabilities ()
{
  assert(hasOptionalField(e_qOSCapabilities));
  return *static_cast<qOSCapabilities::pointer>(fields[1]);
}

inline TransportCapability::qOSCapabilities::reference TransportCapability::set_qOSCapabilities ()
{
  includeOptionalField( e_qOSCapabilities, 1);
  return *static_cast<qOSCapabilities::pointer>(fields[1]);
}

inline TransportCapability::qOSCapabilities::reference TransportCapability::set_qOSCapabilities (qOSCapabilities::const_reference value)
{
  includeOptionalField( e_qOSCapabilities, 1);
  return *static_cast<qOSCapabilities::pointer>(fields[1]) = value;
}

inline void TransportCapability::omit_qOSCapabilities ()
{ removeOptionalField( e_qOSCapabilities); }

inline bool TransportCapability::qOSCapabilities_isPresent () const
{ return hasOptionalField( e_qOSCapabilities); }

inline TransportCapability::mediaChannelCapabilities::const_reference TransportCapability::get_mediaChannelCapabilities () const
{
  assert(hasOptionalField(e_mediaChannelCapabilities));
  return *static_cast<mediaChannelCapabilities::const_pointer>(fields[2]);
}

inline TransportCapability::mediaChannelCapabilities::reference TransportCapability::ref_mediaChannelCapabilities ()
{
  assert(hasOptionalField(e_mediaChannelCapabilities));
  return *static_cast<mediaChannelCapabilities::pointer>(fields[2]);
}

inline TransportCapability::mediaChannelCapabilities::reference TransportCapability::set_mediaChannelCapabilities ()
{
  includeOptionalField( e_mediaChannelCapabilities, 2);
  return *static_cast<mediaChannelCapabilities::pointer>(fields[2]);
}

inline TransportCapability::mediaChannelCapabilities::reference TransportCapability::set_mediaChannelCapabilities (mediaChannelCapabilities::const_reference value)
{
  includeOptionalField( e_mediaChannelCapabilities, 2);
  return *static_cast<mediaChannelCapabilities::pointer>(fields[2]) = value;
}

inline void TransportCapability::omit_mediaChannelCapabilities ()
{ removeOptionalField( e_mediaChannelCapabilities); }

inline bool TransportCapability::mediaChannelCapabilities_isPresent () const
{ return hasOptionalField( e_mediaChannelCapabilities); }

inline void TransportCapability::swap(TransportCapability& other)
{ Inherited::swap(other); }

inline TransportCapability* TransportCapability::clone() const
{ return static_cast<TransportCapability*> (Inherited::clone()); }

inline RTPH263VideoRedundancyEncoding::numberOfThreads::const_reference RTPH263VideoRedundancyEncoding::get_numberOfThreads () const
{ return *static_cast<numberOfThreads::const_pointer>(fields[0]);}

inline RTPH263VideoRedundancyEncoding::numberOfThreads::reference RTPH263VideoRedundancyEncoding::ref_numberOfThreads ()
{ return *static_cast<numberOfThreads::pointer>(fields[0]);}

inline RTPH263VideoRedundancyEncoding::numberOfThreads::reference RTPH263VideoRedundancyEncoding::set_numberOfThreads ()
{ return *static_cast<numberOfThreads::pointer>(fields[0]);}

inline RTPH263VideoRedundancyEncoding::numberOfThreads::reference RTPH263VideoRedundancyEncoding::set_numberOfThreads (numberOfThreads::value_type::int_type value)
{ return *static_cast<numberOfThreads::pointer>(fields[0]) = value ;}

inline RTPH263VideoRedundancyEncoding::framesBetweenSyncPoints::const_reference RTPH263VideoRedundancyEncoding::get_framesBetweenSyncPoints () const
{ return *static_cast<framesBetweenSyncPoints::const_pointer>(fields[1]);}

inline RTPH263VideoRedundancyEncoding::framesBetweenSyncPoints::reference RTPH263VideoRedundancyEncoding::ref_framesBetweenSyncPoints ()
{ return *static_cast<framesBetweenSyncPoints::pointer>(fields[1]);}

inline RTPH263VideoRedundancyEncoding::framesBetweenSyncPoints::reference RTPH263VideoRedundancyEncoding::set_framesBetweenSyncPoints ()
{ return *static_cast<framesBetweenSyncPoints::pointer>(fields[1]);}

inline RTPH263VideoRedundancyEncoding::framesBetweenSyncPoints::reference RTPH263VideoRedundancyEncoding::set_framesBetweenSyncPoints (framesBetweenSyncPoints::value_type::int_type value)
{ return *static_cast<framesBetweenSyncPoints::pointer>(fields[1]) = value ;}

inline RTPH263VideoRedundancyEncoding::frameToThreadMapping::const_reference RTPH263VideoRedundancyEncoding::get_frameToThreadMapping () const
{ return *static_cast<frameToThreadMapping::const_pointer>(fields[2]);}

inline RTPH263VideoRedundancyEncoding::frameToThreadMapping::reference RTPH263VideoRedundancyEncoding::ref_frameToThreadMapping ()
{ return *static_cast<frameToThreadMapping::pointer>(fields[2]);}

inline RTPH263VideoRedundancyEncoding::frameToThreadMapping::reference RTPH263VideoRedundancyEncoding::set_frameToThreadMapping ()
{ return *static_cast<frameToThreadMapping::pointer>(fields[2]);}

inline RTPH263VideoRedundancyEncoding::frameToThreadMapping::reference RTPH263VideoRedundancyEncoding::set_frameToThreadMapping (frameToThreadMapping::const_reference value)
{ return *static_cast<frameToThreadMapping::pointer>(fields[2]) = value ;}

inline RTPH263VideoRedundancyEncoding::containedThreads::const_reference RTPH263VideoRedundancyEncoding::get_containedThreads () const
{
  assert(hasOptionalField(e_containedThreads));
  return *static_cast<containedThreads::const_pointer>(fields[3]);
}

inline RTPH263VideoRedundancyEncoding::containedThreads::reference RTPH263VideoRedundancyEncoding::ref_containedThreads ()
{
  assert(hasOptionalField(e_containedThreads));
  return *static_cast<containedThreads::pointer>(fields[3]);
}

inline RTPH263VideoRedundancyEncoding::containedThreads::reference RTPH263VideoRedundancyEncoding::set_containedThreads ()
{
  includeOptionalField( e_containedThreads, 3);
  return *static_cast<containedThreads::pointer>(fields[3]);
}

inline RTPH263VideoRedundancyEncoding::containedThreads::reference RTPH263VideoRedundancyEncoding::set_containedThreads (containedThreads::const_reference value)
{
  includeOptionalField( e_containedThreads, 3);
  return *static_cast<containedThreads::pointer>(fields[3]) = value;
}

inline void RTPH263VideoRedundancyEncoding::omit_containedThreads ()
{ removeOptionalField( e_containedThreads); }

inline bool RTPH263VideoRedundancyEncoding::containedThreads_isPresent () const
{ return hasOptionalField( e_containedThreads); }

inline void RTPH263VideoRedundancyEncoding::swap(RTPH263VideoRedundancyEncoding& other)
{ Inherited::swap(other); }

inline RTPH263VideoRedundancyEncoding* RTPH263VideoRedundancyEncoding::clone() const
{ return static_cast<RTPH263VideoRedundancyEncoding*> (Inherited::clone()); }

inline RefPictureSelection::additionalPictureMemory::const_reference RefPictureSelection::get_additionalPictureMemory () const
{
  assert(hasOptionalField(e_additionalPictureMemory));
  return *static_cast<additionalPictureMemory::const_pointer>(fields[0]);
}

inline RefPictureSelection::additionalPictureMemory::reference RefPictureSelection::ref_additionalPictureMemory ()
{
  assert(hasOptionalField(e_additionalPictureMemory));
  return *static_cast<additionalPictureMemory::pointer>(fields[0]);
}

inline RefPictureSelection::additionalPictureMemory::reference RefPictureSelection::set_additionalPictureMemory ()
{
  includeOptionalField( e_additionalPictureMemory, 0);
  return *static_cast<additionalPictureMemory::pointer>(fields[0]);
}

inline RefPictureSelection::additionalPictureMemory::reference RefPictureSelection::set_additionalPictureMemory (additionalPictureMemory::const_reference value)
{
  includeOptionalField( e_additionalPictureMemory, 0);
  return *static_cast<additionalPictureMemory::pointer>(fields[0]) = value;
}

inline void RefPictureSelection::omit_additionalPictureMemory ()
{ removeOptionalField( e_additionalPictureMemory); }

inline bool RefPictureSelection::additionalPictureMemory_isPresent () const
{ return hasOptionalField( e_additionalPictureMemory); }

inline RefPictureSelection::videoMux::const_reference RefPictureSelection::get_videoMux () const
{ return *static_cast<videoMux::const_pointer>(fields[1]);}

inline RefPictureSelection::videoMux::reference RefPictureSelection::ref_videoMux ()
{ return *static_cast<videoMux::pointer>(fields[1]);}

inline RefPictureSelection::videoMux::reference RefPictureSelection::set_videoMux ()
{ return *static_cast<videoMux::pointer>(fields[1]);}

inline RefPictureSelection::videoMux::reference RefPictureSelection::set_videoMux (bool value)
{ return *static_cast<videoMux::pointer>(fields[1]) = value ;}

inline RefPictureSelection::videoBackChannelSend::const_reference RefPictureSelection::get_videoBackChannelSend () const
{ return *static_cast<videoBackChannelSend::const_pointer>(fields[2]);}

inline RefPictureSelection::videoBackChannelSend::reference RefPictureSelection::ref_videoBackChannelSend ()
{ return *static_cast<videoBackChannelSend::pointer>(fields[2]);}

inline RefPictureSelection::videoBackChannelSend::reference RefPictureSelection::set_videoBackChannelSend ()
{ return *static_cast<videoBackChannelSend::pointer>(fields[2]);}

inline RefPictureSelection::videoBackChannelSend::reference RefPictureSelection::set_videoBackChannelSend (videoBackChannelSend::const_reference value)
{ return *static_cast<videoBackChannelSend::pointer>(fields[2]) = value ;}

inline RefPictureSelection::enhancedReferencePicSelect::const_reference RefPictureSelection::get_enhancedReferencePicSelect () const
{
  assert(hasOptionalField(e_enhancedReferencePicSelect));
  return *static_cast<enhancedReferencePicSelect::const_pointer>(fields[3]);
}

inline RefPictureSelection::enhancedReferencePicSelect::reference RefPictureSelection::ref_enhancedReferencePicSelect ()
{
  assert(hasOptionalField(e_enhancedReferencePicSelect));
  return *static_cast<enhancedReferencePicSelect::pointer>(fields[3]);
}

inline RefPictureSelection::enhancedReferencePicSelect::reference RefPictureSelection::set_enhancedReferencePicSelect ()
{
  includeOptionalField( e_enhancedReferencePicSelect, 3);
  return *static_cast<enhancedReferencePicSelect::pointer>(fields[3]);
}

inline RefPictureSelection::enhancedReferencePicSelect::reference RefPictureSelection::set_enhancedReferencePicSelect (enhancedReferencePicSelect::const_reference value)
{
  includeOptionalField( e_enhancedReferencePicSelect, 3);
  return *static_cast<enhancedReferencePicSelect::pointer>(fields[3]) = value;
}

inline void RefPictureSelection::omit_enhancedReferencePicSelect ()
{ removeOptionalField( e_enhancedReferencePicSelect); }

inline bool RefPictureSelection::enhancedReferencePicSelect_isPresent () const
{ return hasOptionalField( e_enhancedReferencePicSelect); }

inline void RefPictureSelection::swap(RefPictureSelection& other)
{ Inherited::swap(other); }

inline RefPictureSelection* RefPictureSelection::clone() const
{ return static_cast<RefPictureSelection*> (Inherited::clone()); }

inline H263VideoModeCombos::h263VideoUncoupledModes::const_reference H263VideoModeCombos::get_h263VideoUncoupledModes () const
{ return *static_cast<h263VideoUncoupledModes::const_pointer>(fields[0]);}

inline H263VideoModeCombos::h263VideoUncoupledModes::reference H263VideoModeCombos::ref_h263VideoUncoupledModes ()
{ return *static_cast<h263VideoUncoupledModes::pointer>(fields[0]);}

inline H263VideoModeCombos::h263VideoUncoupledModes::reference H263VideoModeCombos::set_h263VideoUncoupledModes ()
{ return *static_cast<h263VideoUncoupledModes::pointer>(fields[0]);}

inline H263VideoModeCombos::h263VideoUncoupledModes::reference H263VideoModeCombos::set_h263VideoUncoupledModes (h263VideoUncoupledModes::const_reference value)
{ return *static_cast<h263VideoUncoupledModes::pointer>(fields[0]) = value ;}

inline H263VideoModeCombos::h263VideoCoupledModes::const_reference H263VideoModeCombos::get_h263VideoCoupledModes () const
{ return *static_cast<h263VideoCoupledModes::const_pointer>(fields[1]);}

inline H263VideoModeCombos::h263VideoCoupledModes::reference H263VideoModeCombos::ref_h263VideoCoupledModes ()
{ return *static_cast<h263VideoCoupledModes::pointer>(fields[1]);}

inline H263VideoModeCombos::h263VideoCoupledModes::reference H263VideoModeCombos::set_h263VideoCoupledModes ()
{ return *static_cast<h263VideoCoupledModes::pointer>(fields[1]);}

inline H263VideoModeCombos::h263VideoCoupledModes::reference H263VideoModeCombos::set_h263VideoCoupledModes (h263VideoCoupledModes::const_reference value)
{ return *static_cast<h263VideoCoupledModes::pointer>(fields[1]) = value ;}

inline void H263VideoModeCombos::swap(H263VideoModeCombos& other)
{ Inherited::swap(other); }

inline H263VideoModeCombos* H263VideoModeCombos::clone() const
{ return static_cast<H263VideoModeCombos*> (Inherited::clone()); }

inline DataProtocolCapability::nonStandard::const_reference DataProtocolCapability::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline DataProtocolCapability::nonStandard::reference DataProtocolCapability::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline DataProtocolCapability::nonStandard::reference DataProtocolCapability::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline DataProtocolCapability::nonStandard::reference DataProtocolCapability::select_nonStandard (DataProtocolCapability::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool DataProtocolCapability::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline DataProtocolCapability::v14buffered::reference DataProtocolCapability::select_v14buffered ()
{
    return *static_cast<v14buffered::pointer>(setSelection(v14buffered::id_, ASN1::AbstractData::create( &v14buffered::value_type::theInfo)));
}

inline bool DataProtocolCapability::v14buffered_isSelected() const
{ 
    return currentSelection() == v14buffered::id_; 
}

inline DataProtocolCapability::v42lapm::reference DataProtocolCapability::select_v42lapm ()
{
    return *static_cast<v42lapm::pointer>(setSelection(v42lapm::id_, ASN1::AbstractData::create( &v42lapm::value_type::theInfo)));
}

inline bool DataProtocolCapability::v42lapm_isSelected() const
{ 
    return currentSelection() == v42lapm::id_; 
}

inline DataProtocolCapability::hdlcFrameTunnelling::reference DataProtocolCapability::select_hdlcFrameTunnelling ()
{
    return *static_cast<hdlcFrameTunnelling::pointer>(setSelection(hdlcFrameTunnelling::id_, ASN1::AbstractData::create( &hdlcFrameTunnelling::value_type::theInfo)));
}

inline bool DataProtocolCapability::hdlcFrameTunnelling_isSelected() const
{ 
    return currentSelection() == hdlcFrameTunnelling::id_; 
}

inline DataProtocolCapability::h310SeparateVCStack::reference DataProtocolCapability::select_h310SeparateVCStack ()
{
    return *static_cast<h310SeparateVCStack::pointer>(setSelection(h310SeparateVCStack::id_, ASN1::AbstractData::create( &h310SeparateVCStack::value_type::theInfo)));
}

inline bool DataProtocolCapability::h310SeparateVCStack_isSelected() const
{ 
    return currentSelection() == h310SeparateVCStack::id_; 
}

inline DataProtocolCapability::h310SingleVCStack::reference DataProtocolCapability::select_h310SingleVCStack ()
{
    return *static_cast<h310SingleVCStack::pointer>(setSelection(h310SingleVCStack::id_, ASN1::AbstractData::create( &h310SingleVCStack::value_type::theInfo)));
}

inline bool DataProtocolCapability::h310SingleVCStack_isSelected() const
{ 
    return currentSelection() == h310SingleVCStack::id_; 
}

inline DataProtocolCapability::transparent::reference DataProtocolCapability::select_transparent ()
{
    return *static_cast<transparent::pointer>(setSelection(transparent::id_, ASN1::AbstractData::create( &transparent::value_type::theInfo)));
}

inline bool DataProtocolCapability::transparent_isSelected() const
{ 
    return currentSelection() == transparent::id_; 
}

inline DataProtocolCapability::segmentationAndReassembly::reference DataProtocolCapability::select_segmentationAndReassembly ()
{
    return *static_cast<segmentationAndReassembly::pointer>(setSelection(segmentationAndReassembly::id_, ASN1::AbstractData::create( &segmentationAndReassembly::value_type::theInfo)));
}

inline bool DataProtocolCapability::segmentationAndReassembly_isSelected() const
{ 
    return currentSelection() == segmentationAndReassembly::id_; 
}

inline DataProtocolCapability::hdlcFrameTunnelingwSAR::reference DataProtocolCapability::select_hdlcFrameTunnelingwSAR ()
{
    return *static_cast<hdlcFrameTunnelingwSAR::pointer>(setSelection(hdlcFrameTunnelingwSAR::id_, ASN1::AbstractData::create( &hdlcFrameTunnelingwSAR::value_type::theInfo)));
}

inline bool DataProtocolCapability::hdlcFrameTunnelingwSAR_isSelected() const
{ 
    return currentSelection() == hdlcFrameTunnelingwSAR::id_; 
}

inline DataProtocolCapability::v120::reference DataProtocolCapability::select_v120 ()
{
    return *static_cast<v120::pointer>(setSelection(v120::id_, ASN1::AbstractData::create( &v120::value_type::theInfo)));
}

inline bool DataProtocolCapability::v120_isSelected() const
{ 
    return currentSelection() == v120::id_; 
}

inline DataProtocolCapability::separateLANStack::reference DataProtocolCapability::select_separateLANStack ()
{
    return *static_cast<separateLANStack::pointer>(setSelection(separateLANStack::id_, ASN1::AbstractData::create( &separateLANStack::value_type::theInfo)));
}

inline bool DataProtocolCapability::separateLANStack_isSelected() const
{ 
    return currentSelection() == separateLANStack::id_; 
}

inline DataProtocolCapability::v76wCompression::const_reference DataProtocolCapability::get_v76wCompression () const
{
    assert(currentSelection() ==v76wCompression::id_);
    return *static_cast<v76wCompression::const_pointer>(choice.get());
}

inline DataProtocolCapability::v76wCompression::reference DataProtocolCapability::ref_v76wCompression ()
{
    assert(currentSelection() ==v76wCompression::id_);
    return *static_cast<v76wCompression::pointer>(choice.get());
}

inline DataProtocolCapability::v76wCompression::reference DataProtocolCapability::select_v76wCompression ()
{
    return *static_cast<v76wCompression::pointer>(setSelection(v76wCompression::id_, ASN1::AbstractData::create( &v76wCompression::value_type::theInfo)));
}

inline DataProtocolCapability::v76wCompression::reference DataProtocolCapability::select_v76wCompression (DataProtocolCapability::v76wCompression::const_reference value)
{
    return select_v76wCompression() = value;
}

inline bool DataProtocolCapability::v76wCompression_isSelected() const
{ 
    return currentSelection() == v76wCompression::id_; 
}

inline DataProtocolCapability::tcp::reference DataProtocolCapability::select_tcp ()
{
    return *static_cast<tcp::pointer>(setSelection(tcp::id_, ASN1::AbstractData::create( &tcp::value_type::theInfo)));
}

inline bool DataProtocolCapability::tcp_isSelected() const
{ 
    return currentSelection() == tcp::id_; 
}

inline DataProtocolCapability::udp::reference DataProtocolCapability::select_udp ()
{
    return *static_cast<udp::pointer>(setSelection(udp::id_, ASN1::AbstractData::create( &udp::value_type::theInfo)));
}

inline bool DataProtocolCapability::udp_isSelected() const
{ 
    return currentSelection() == udp::id_; 
}

inline DataProtocolCapability::DataProtocolCapability(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(v14buffered::Id id, v14buffered::const_reference value)
  : Inherited(&theInfo, id, new v14buffered::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(v42lapm::Id id, v42lapm::const_reference value)
  : Inherited(&theInfo, id, new v42lapm::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(hdlcFrameTunnelling::Id id, hdlcFrameTunnelling::const_reference value)
  : Inherited(&theInfo, id, new hdlcFrameTunnelling::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(h310SeparateVCStack::Id id, h310SeparateVCStack::const_reference value)
  : Inherited(&theInfo, id, new h310SeparateVCStack::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(h310SingleVCStack::Id id, h310SingleVCStack::const_reference value)
  : Inherited(&theInfo, id, new h310SingleVCStack::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(transparent::Id id, transparent::const_reference value)
  : Inherited(&theInfo, id, new transparent::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(segmentationAndReassembly::Id id, segmentationAndReassembly::const_reference value)
  : Inherited(&theInfo, id, new segmentationAndReassembly::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(hdlcFrameTunnelingwSAR::Id id, hdlcFrameTunnelingwSAR::const_reference value)
  : Inherited(&theInfo, id, new hdlcFrameTunnelingwSAR::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(v120::Id id, v120::const_reference value)
  : Inherited(&theInfo, id, new v120::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(separateLANStack::Id id, separateLANStack::const_reference value)
  : Inherited(&theInfo, id, new separateLANStack::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(v76wCompression::Id id, v76wCompression::const_reference value)
  : Inherited(&theInfo, id, new v76wCompression::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(tcp::Id id, tcp::const_reference value)
  : Inherited(&theInfo, id, new tcp::value_type(value) )
{ }

inline DataProtocolCapability::DataProtocolCapability(udp::Id id, udp::const_reference value)
  : Inherited(&theInfo, id, new udp::value_type(value) )
{ }


inline void DataProtocolCapability::swap(DataProtocolCapability & other)
{  Inherited::swap(other); }

inline DataProtocolCapability* DataProtocolCapability::clone() const
{ return static_cast<DataProtocolCapability*> (Inherited::clone()); }

inline bool DataProtocolCapability::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline T38FaxProfile::fillBitRemoval::const_reference T38FaxProfile::get_fillBitRemoval () const
{ return *static_cast<fillBitRemoval::const_pointer>(fields[0]);}

inline T38FaxProfile::fillBitRemoval::reference T38FaxProfile::ref_fillBitRemoval ()
{ return *static_cast<fillBitRemoval::pointer>(fields[0]);}

inline T38FaxProfile::fillBitRemoval::reference T38FaxProfile::set_fillBitRemoval ()
{ return *static_cast<fillBitRemoval::pointer>(fields[0]);}

inline T38FaxProfile::fillBitRemoval::reference T38FaxProfile::set_fillBitRemoval (bool value)
{ return *static_cast<fillBitRemoval::pointer>(fields[0]) = value ;}

inline T38FaxProfile::transcodingJBIG::const_reference T38FaxProfile::get_transcodingJBIG () const
{ return *static_cast<transcodingJBIG::const_pointer>(fields[1]);}

inline T38FaxProfile::transcodingJBIG::reference T38FaxProfile::ref_transcodingJBIG ()
{ return *static_cast<transcodingJBIG::pointer>(fields[1]);}

inline T38FaxProfile::transcodingJBIG::reference T38FaxProfile::set_transcodingJBIG ()
{ return *static_cast<transcodingJBIG::pointer>(fields[1]);}

inline T38FaxProfile::transcodingJBIG::reference T38FaxProfile::set_transcodingJBIG (bool value)
{ return *static_cast<transcodingJBIG::pointer>(fields[1]) = value ;}

inline T38FaxProfile::transcodingMMR::const_reference T38FaxProfile::get_transcodingMMR () const
{ return *static_cast<transcodingMMR::const_pointer>(fields[2]);}

inline T38FaxProfile::transcodingMMR::reference T38FaxProfile::ref_transcodingMMR ()
{ return *static_cast<transcodingMMR::pointer>(fields[2]);}

inline T38FaxProfile::transcodingMMR::reference T38FaxProfile::set_transcodingMMR ()
{ return *static_cast<transcodingMMR::pointer>(fields[2]);}

inline T38FaxProfile::transcodingMMR::reference T38FaxProfile::set_transcodingMMR (bool value)
{ return *static_cast<transcodingMMR::pointer>(fields[2]) = value ;}

inline T38FaxProfile::version::const_reference T38FaxProfile::get_version () const
{
  assert(hasOptionalField(e_version));
  return *static_cast<version::const_pointer>(fields[3]);
}

inline T38FaxProfile::version::reference T38FaxProfile::ref_version ()
{
  assert(hasOptionalField(e_version));
  return *static_cast<version::pointer>(fields[3]);
}

inline T38FaxProfile::version::reference T38FaxProfile::set_version ()
{
  includeOptionalField( e_version, 3);
  return *static_cast<version::pointer>(fields[3]);
}

inline T38FaxProfile::version::reference T38FaxProfile::set_version (version::value_type::int_type value)
{
  includeOptionalField( e_version, 3);
  return *static_cast<version::pointer>(fields[3]) = value;
}

inline void T38FaxProfile::omit_version ()
{ removeOptionalField( e_version); }

inline bool T38FaxProfile::version_isPresent () const
{ return hasOptionalField( e_version); }

inline T38FaxProfile::t38FaxRateManagement::const_reference T38FaxProfile::get_t38FaxRateManagement () const
{
  assert(hasOptionalField(e_t38FaxRateManagement));
  return *static_cast<t38FaxRateManagement::const_pointer>(fields[4]);
}

inline T38FaxProfile::t38FaxRateManagement::reference T38FaxProfile::ref_t38FaxRateManagement ()
{
  assert(hasOptionalField(e_t38FaxRateManagement));
  return *static_cast<t38FaxRateManagement::pointer>(fields[4]);
}

inline T38FaxProfile::t38FaxRateManagement::reference T38FaxProfile::set_t38FaxRateManagement ()
{
  includeOptionalField( e_t38FaxRateManagement, 4);
  return *static_cast<t38FaxRateManagement::pointer>(fields[4]);
}

inline T38FaxProfile::t38FaxRateManagement::reference T38FaxProfile::set_t38FaxRateManagement (t38FaxRateManagement::const_reference value)
{
  includeOptionalField( e_t38FaxRateManagement, 4);
  return *static_cast<t38FaxRateManagement::pointer>(fields[4]) = value;
}

inline void T38FaxProfile::omit_t38FaxRateManagement ()
{ removeOptionalField( e_t38FaxRateManagement); }

inline bool T38FaxProfile::t38FaxRateManagement_isPresent () const
{ return hasOptionalField( e_t38FaxRateManagement); }

inline T38FaxProfile::t38FaxUdpOptions::const_reference T38FaxProfile::get_t38FaxUdpOptions () const
{
  assert(hasOptionalField(e_t38FaxUdpOptions));
  return *static_cast<t38FaxUdpOptions::const_pointer>(fields[5]);
}

inline T38FaxProfile::t38FaxUdpOptions::reference T38FaxProfile::ref_t38FaxUdpOptions ()
{
  assert(hasOptionalField(e_t38FaxUdpOptions));
  return *static_cast<t38FaxUdpOptions::pointer>(fields[5]);
}

inline T38FaxProfile::t38FaxUdpOptions::reference T38FaxProfile::set_t38FaxUdpOptions ()
{
  includeOptionalField( e_t38FaxUdpOptions, 5);
  return *static_cast<t38FaxUdpOptions::pointer>(fields[5]);
}

inline T38FaxProfile::t38FaxUdpOptions::reference T38FaxProfile::set_t38FaxUdpOptions (t38FaxUdpOptions::const_reference value)
{
  includeOptionalField( e_t38FaxUdpOptions, 5);
  return *static_cast<t38FaxUdpOptions::pointer>(fields[5]) = value;
}

inline void T38FaxProfile::omit_t38FaxUdpOptions ()
{ removeOptionalField( e_t38FaxUdpOptions); }

inline bool T38FaxProfile::t38FaxUdpOptions_isPresent () const
{ return hasOptionalField( e_t38FaxUdpOptions); }

inline T38FaxProfile::t38FaxTcpOptions::const_reference T38FaxProfile::get_t38FaxTcpOptions () const
{
  assert(hasOptionalField(e_t38FaxTcpOptions));
  return *static_cast<t38FaxTcpOptions::const_pointer>(fields[6]);
}

inline T38FaxProfile::t38FaxTcpOptions::reference T38FaxProfile::ref_t38FaxTcpOptions ()
{
  assert(hasOptionalField(e_t38FaxTcpOptions));
  return *static_cast<t38FaxTcpOptions::pointer>(fields[6]);
}

inline T38FaxProfile::t38FaxTcpOptions::reference T38FaxProfile::set_t38FaxTcpOptions ()
{
  includeOptionalField( e_t38FaxTcpOptions, 6);
  return *static_cast<t38FaxTcpOptions::pointer>(fields[6]);
}

inline T38FaxProfile::t38FaxTcpOptions::reference T38FaxProfile::set_t38FaxTcpOptions (t38FaxTcpOptions::const_reference value)
{
  includeOptionalField( e_t38FaxTcpOptions, 6);
  return *static_cast<t38FaxTcpOptions::pointer>(fields[6]) = value;
}

inline void T38FaxProfile::omit_t38FaxTcpOptions ()
{ removeOptionalField( e_t38FaxTcpOptions); }

inline bool T38FaxProfile::t38FaxTcpOptions_isPresent () const
{ return hasOptionalField( e_t38FaxTcpOptions); }

inline void T38FaxProfile::swap(T38FaxProfile& other)
{ Inherited::swap(other); }

inline T38FaxProfile* T38FaxProfile::clone() const
{ return static_cast<T38FaxProfile*> (Inherited::clone()); }

inline MediaEncryptionAlgorithm::nonStandard::const_reference MediaEncryptionAlgorithm::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline MediaEncryptionAlgorithm::nonStandard::reference MediaEncryptionAlgorithm::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline MediaEncryptionAlgorithm::nonStandard::reference MediaEncryptionAlgorithm::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline MediaEncryptionAlgorithm::nonStandard::reference MediaEncryptionAlgorithm::select_nonStandard (MediaEncryptionAlgorithm::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool MediaEncryptionAlgorithm::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline MediaEncryptionAlgorithm::algorithm::const_reference MediaEncryptionAlgorithm::get_algorithm () const
{
    assert(currentSelection() ==algorithm::id_);
    return *static_cast<algorithm::const_pointer>(choice.get());
}

inline MediaEncryptionAlgorithm::algorithm::reference MediaEncryptionAlgorithm::ref_algorithm ()
{
    assert(currentSelection() ==algorithm::id_);
    return *static_cast<algorithm::pointer>(choice.get());
}

inline MediaEncryptionAlgorithm::algorithm::reference MediaEncryptionAlgorithm::select_algorithm ()
{
    return *static_cast<algorithm::pointer>(setSelection(algorithm::id_, ASN1::AbstractData::create( &algorithm::value_type::theInfo)));
}

inline MediaEncryptionAlgorithm::algorithm::reference MediaEncryptionAlgorithm::select_algorithm (MediaEncryptionAlgorithm::algorithm::const_reference value)
{
    return select_algorithm() = value;
}

inline bool MediaEncryptionAlgorithm::algorithm_isSelected() const
{ 
    return currentSelection() == algorithm::id_; 
}

inline MediaEncryptionAlgorithm::MediaEncryptionAlgorithm(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline MediaEncryptionAlgorithm::MediaEncryptionAlgorithm(algorithm::Id id, algorithm::const_reference value)
  : Inherited(&theInfo, id, new algorithm::value_type(value) )
{ }


inline void MediaEncryptionAlgorithm::swap(MediaEncryptionAlgorithm & other)
{  Inherited::swap(other); }

inline MediaEncryptionAlgorithm* MediaEncryptionAlgorithm::clone() const
{ return static_cast<MediaEncryptionAlgorithm*> (Inherited::clone()); }

inline bool MediaEncryptionAlgorithm::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline AuthenticationCapability::nonStandard::const_reference AuthenticationCapability::get_nonStandard () const
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::const_pointer>(fields[0]);
}

inline AuthenticationCapability::nonStandard::reference AuthenticationCapability::ref_nonStandard ()
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline AuthenticationCapability::nonStandard::reference AuthenticationCapability::set_nonStandard ()
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline AuthenticationCapability::nonStandard::reference AuthenticationCapability::set_nonStandard (nonStandard::const_reference value)
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]) = value;
}

inline void AuthenticationCapability::omit_nonStandard ()
{ removeOptionalField( e_nonStandard); }

inline bool AuthenticationCapability::nonStandard_isPresent () const
{ return hasOptionalField( e_nonStandard); }

inline AuthenticationCapability::antiSpamAlgorithm::const_reference AuthenticationCapability::get_antiSpamAlgorithm () const
{
  assert(hasOptionalField(e_antiSpamAlgorithm));
  return *static_cast<antiSpamAlgorithm::const_pointer>(fields[1]);
}

inline AuthenticationCapability::antiSpamAlgorithm::reference AuthenticationCapability::ref_antiSpamAlgorithm ()
{
  assert(hasOptionalField(e_antiSpamAlgorithm));
  return *static_cast<antiSpamAlgorithm::pointer>(fields[1]);
}

inline AuthenticationCapability::antiSpamAlgorithm::reference AuthenticationCapability::set_antiSpamAlgorithm ()
{
  includeOptionalField( e_antiSpamAlgorithm, 1);
  return *static_cast<antiSpamAlgorithm::pointer>(fields[1]);
}

inline AuthenticationCapability::antiSpamAlgorithm::reference AuthenticationCapability::set_antiSpamAlgorithm (antiSpamAlgorithm::const_reference value)
{
  includeOptionalField( e_antiSpamAlgorithm, 1);
  return *static_cast<antiSpamAlgorithm::pointer>(fields[1]) = value;
}

inline void AuthenticationCapability::omit_antiSpamAlgorithm ()
{ removeOptionalField( e_antiSpamAlgorithm); }

inline bool AuthenticationCapability::antiSpamAlgorithm_isPresent () const
{ return hasOptionalField( e_antiSpamAlgorithm); }

inline void AuthenticationCapability::swap(AuthenticationCapability& other)
{ Inherited::swap(other); }

inline AuthenticationCapability* AuthenticationCapability::clone() const
{ return static_cast<AuthenticationCapability*> (Inherited::clone()); }

inline IntegrityCapability::nonStandard::const_reference IntegrityCapability::get_nonStandard () const
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::const_pointer>(fields[0]);
}

inline IntegrityCapability::nonStandard::reference IntegrityCapability::ref_nonStandard ()
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline IntegrityCapability::nonStandard::reference IntegrityCapability::set_nonStandard ()
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline IntegrityCapability::nonStandard::reference IntegrityCapability::set_nonStandard (nonStandard::const_reference value)
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]) = value;
}

inline void IntegrityCapability::omit_nonStandard ()
{ removeOptionalField( e_nonStandard); }

inline bool IntegrityCapability::nonStandard_isPresent () const
{ return hasOptionalField( e_nonStandard); }

inline void IntegrityCapability::swap(IntegrityCapability& other)
{ Inherited::swap(other); }

inline IntegrityCapability* IntegrityCapability::clone() const
{ return static_cast<IntegrityCapability*> (Inherited::clone()); }

inline ConferenceCapability::nonStandardData::const_reference ConferenceCapability::get_nonStandardData () const
{
  assert(hasOptionalField(e_nonStandardData));
  return *static_cast<nonStandardData::const_pointer>(fields[0]);
}

inline ConferenceCapability::nonStandardData::reference ConferenceCapability::ref_nonStandardData ()
{
  assert(hasOptionalField(e_nonStandardData));
  return *static_cast<nonStandardData::pointer>(fields[0]);
}

inline ConferenceCapability::nonStandardData::reference ConferenceCapability::set_nonStandardData ()
{
  includeOptionalField( e_nonStandardData, 0);
  return *static_cast<nonStandardData::pointer>(fields[0]);
}

inline ConferenceCapability::nonStandardData::reference ConferenceCapability::set_nonStandardData (nonStandardData::const_reference value)
{
  includeOptionalField( e_nonStandardData, 0);
  return *static_cast<nonStandardData::pointer>(fields[0]) = value;
}

inline void ConferenceCapability::omit_nonStandardData ()
{ removeOptionalField( e_nonStandardData); }

inline bool ConferenceCapability::nonStandardData_isPresent () const
{ return hasOptionalField( e_nonStandardData); }

inline ConferenceCapability::chairControlCapability::const_reference ConferenceCapability::get_chairControlCapability () const
{ return *static_cast<chairControlCapability::const_pointer>(fields[1]);}

inline ConferenceCapability::chairControlCapability::reference ConferenceCapability::ref_chairControlCapability ()
{ return *static_cast<chairControlCapability::pointer>(fields[1]);}

inline ConferenceCapability::chairControlCapability::reference ConferenceCapability::set_chairControlCapability ()
{ return *static_cast<chairControlCapability::pointer>(fields[1]);}

inline ConferenceCapability::chairControlCapability::reference ConferenceCapability::set_chairControlCapability (bool value)
{ return *static_cast<chairControlCapability::pointer>(fields[1]) = value ;}

inline ConferenceCapability::videoIndicateMixingCapability::const_reference ConferenceCapability::get_videoIndicateMixingCapability () const
{
  assert(hasOptionalField(e_videoIndicateMixingCapability));
  return *static_cast<videoIndicateMixingCapability::const_pointer>(fields[2]);
}

inline ConferenceCapability::videoIndicateMixingCapability::reference ConferenceCapability::ref_videoIndicateMixingCapability ()
{
  assert(hasOptionalField(e_videoIndicateMixingCapability));
  return *static_cast<videoIndicateMixingCapability::pointer>(fields[2]);
}

inline ConferenceCapability::videoIndicateMixingCapability::reference ConferenceCapability::set_videoIndicateMixingCapability ()
{
  includeOptionalField( e_videoIndicateMixingCapability, 2);
  return *static_cast<videoIndicateMixingCapability::pointer>(fields[2]);
}

inline ConferenceCapability::videoIndicateMixingCapability::reference ConferenceCapability::set_videoIndicateMixingCapability (bool value)
{
  includeOptionalField( e_videoIndicateMixingCapability, 2);
  return *static_cast<videoIndicateMixingCapability::pointer>(fields[2]) = value;
}

inline void ConferenceCapability::omit_videoIndicateMixingCapability ()
{ removeOptionalField( e_videoIndicateMixingCapability); }

inline bool ConferenceCapability::videoIndicateMixingCapability_isPresent () const
{ return hasOptionalField( e_videoIndicateMixingCapability); }

inline ConferenceCapability::multipointVisualizationCapability::const_reference ConferenceCapability::get_multipointVisualizationCapability () const
{
  assert(hasOptionalField(e_multipointVisualizationCapability));
  return *static_cast<multipointVisualizationCapability::const_pointer>(fields[3]);
}

inline ConferenceCapability::multipointVisualizationCapability::reference ConferenceCapability::ref_multipointVisualizationCapability ()
{
  assert(hasOptionalField(e_multipointVisualizationCapability));
  return *static_cast<multipointVisualizationCapability::pointer>(fields[3]);
}

inline ConferenceCapability::multipointVisualizationCapability::reference ConferenceCapability::set_multipointVisualizationCapability ()
{
  includeOptionalField( e_multipointVisualizationCapability, 3);
  return *static_cast<multipointVisualizationCapability::pointer>(fields[3]);
}

inline ConferenceCapability::multipointVisualizationCapability::reference ConferenceCapability::set_multipointVisualizationCapability (bool value)
{
  includeOptionalField( e_multipointVisualizationCapability, 3);
  return *static_cast<multipointVisualizationCapability::pointer>(fields[3]) = value;
}

inline void ConferenceCapability::omit_multipointVisualizationCapability ()
{ removeOptionalField( e_multipointVisualizationCapability); }

inline bool ConferenceCapability::multipointVisualizationCapability_isPresent () const
{ return hasOptionalField( e_multipointVisualizationCapability); }

inline void ConferenceCapability::swap(ConferenceCapability& other)
{ Inherited::swap(other); }

inline ConferenceCapability* ConferenceCapability::clone() const
{ return static_cast<ConferenceCapability*> (Inherited::clone()); }

inline CapabilityIdentifier::standard::const_reference CapabilityIdentifier::get_standard () const
{
    assert(currentSelection() ==standard::id_);
    return *static_cast<standard::const_pointer>(choice.get());
}

inline CapabilityIdentifier::standard::reference CapabilityIdentifier::ref_standard ()
{
    assert(currentSelection() ==standard::id_);
    return *static_cast<standard::pointer>(choice.get());
}

inline CapabilityIdentifier::standard::reference CapabilityIdentifier::select_standard ()
{
    return *static_cast<standard::pointer>(setSelection(standard::id_, ASN1::AbstractData::create( &standard::value_type::theInfo)));
}

inline CapabilityIdentifier::standard::reference CapabilityIdentifier::select_standard (CapabilityIdentifier::standard::const_reference value)
{
    return select_standard() = value;
}

inline bool CapabilityIdentifier::standard_isSelected() const
{ 
    return currentSelection() == standard::id_; 
}

inline CapabilityIdentifier::h221NonStandard::const_reference CapabilityIdentifier::get_h221NonStandard () const
{
    assert(currentSelection() ==h221NonStandard::id_);
    return *static_cast<h221NonStandard::const_pointer>(choice.get());
}

inline CapabilityIdentifier::h221NonStandard::reference CapabilityIdentifier::ref_h221NonStandard ()
{
    assert(currentSelection() ==h221NonStandard::id_);
    return *static_cast<h221NonStandard::pointer>(choice.get());
}

inline CapabilityIdentifier::h221NonStandard::reference CapabilityIdentifier::select_h221NonStandard ()
{
    return *static_cast<h221NonStandard::pointer>(setSelection(h221NonStandard::id_, ASN1::AbstractData::create( &h221NonStandard::value_type::theInfo)));
}

inline CapabilityIdentifier::h221NonStandard::reference CapabilityIdentifier::select_h221NonStandard (CapabilityIdentifier::h221NonStandard::const_reference value)
{
    return select_h221NonStandard() = value;
}

inline bool CapabilityIdentifier::h221NonStandard_isSelected() const
{ 
    return currentSelection() == h221NonStandard::id_; 
}

inline CapabilityIdentifier::uuid::const_reference CapabilityIdentifier::get_uuid () const
{
    assert(currentSelection() ==uuid::id_);
    return *static_cast<uuid::const_pointer>(choice.get());
}

inline CapabilityIdentifier::uuid::reference CapabilityIdentifier::ref_uuid ()
{
    assert(currentSelection() ==uuid::id_);
    return *static_cast<uuid::pointer>(choice.get());
}

inline CapabilityIdentifier::uuid::reference CapabilityIdentifier::select_uuid ()
{
    return *static_cast<uuid::pointer>(setSelection(uuid::id_, ASN1::AbstractData::create( &uuid::value_type::theInfo)));
}

inline CapabilityIdentifier::uuid::reference CapabilityIdentifier::select_uuid (const std::vector<char>& value)
{
    return select_uuid() = value;
}

inline bool CapabilityIdentifier::uuid_isSelected() const
{ 
    return currentSelection() == uuid::id_; 
}

inline CapabilityIdentifier::domainBased::value_type* CapabilityIdentifier::domainBased::value_type::clone() const
{ return static_cast<value_type*> (Inherited::clone()); }

inline bool CapabilityIdentifier::domainBased::value_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline CapabilityIdentifier::domainBased::const_reference CapabilityIdentifier::get_domainBased () const
{
    assert(currentSelection() ==domainBased::id_);
    return *static_cast<domainBased::const_pointer>(choice.get());
}

inline CapabilityIdentifier::domainBased::reference CapabilityIdentifier::ref_domainBased ()
{
    assert(currentSelection() ==domainBased::id_);
    return *static_cast<domainBased::pointer>(choice.get());
}

inline CapabilityIdentifier::domainBased::reference CapabilityIdentifier::select_domainBased ()
{
    return *static_cast<domainBased::pointer>(setSelection(domainBased::id_, ASN1::AbstractData::create( &domainBased::value_type::theInfo)));
}

inline CapabilityIdentifier::domainBased::reference CapabilityIdentifier::select_domainBased (const std::string& value)
{
    return select_domainBased() = value;
}

inline bool CapabilityIdentifier::domainBased_isSelected() const
{ 
    return currentSelection() == domainBased::id_; 
}

inline CapabilityIdentifier::CapabilityIdentifier(standard::Id id, standard::const_reference value)
  : Inherited(&theInfo, id, new standard::value_type(value) )
{ }

inline CapabilityIdentifier::CapabilityIdentifier(h221NonStandard::Id id, h221NonStandard::const_reference value)
  : Inherited(&theInfo, id, new h221NonStandard::value_type(value) )
{ }

inline CapabilityIdentifier::CapabilityIdentifier(uuid::Id id, const std::vector<char>& value)
  : Inherited(&theInfo, id, new uuid::value_type(value) )
{ }

inline CapabilityIdentifier::CapabilityIdentifier(domainBased::Id id, const std::string& value)
  : Inherited(&theInfo, id, new domainBased::value_type(value) )
{ }


inline void CapabilityIdentifier::swap(CapabilityIdentifier & other)
{  Inherited::swap(other); }

inline CapabilityIdentifier* CapabilityIdentifier::clone() const
{ return static_cast<CapabilityIdentifier*> (Inherited::clone()); }

inline bool CapabilityIdentifier::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ParameterIdentifier::standard::const_reference ParameterIdentifier::get_standard () const
{
    assert(currentSelection() ==standard::id_);
    return *static_cast<standard::const_pointer>(choice.get());
}

inline ParameterIdentifier::standard::reference ParameterIdentifier::ref_standard ()
{
    assert(currentSelection() ==standard::id_);
    return *static_cast<standard::pointer>(choice.get());
}

inline ParameterIdentifier::standard::reference ParameterIdentifier::select_standard ()
{
    return *static_cast<standard::pointer>(setSelection(standard::id_, ASN1::AbstractData::create( &standard::value_type::theInfo)));
}

inline ParameterIdentifier::standard::reference ParameterIdentifier::select_standard (ParameterIdentifier::standard::value_type::int_type value)
{
    return select_standard() = value;
}

inline bool ParameterIdentifier::standard_isSelected() const
{ 
    return currentSelection() == standard::id_; 
}

inline ParameterIdentifier::h221NonStandard::const_reference ParameterIdentifier::get_h221NonStandard () const
{
    assert(currentSelection() ==h221NonStandard::id_);
    return *static_cast<h221NonStandard::const_pointer>(choice.get());
}

inline ParameterIdentifier::h221NonStandard::reference ParameterIdentifier::ref_h221NonStandard ()
{
    assert(currentSelection() ==h221NonStandard::id_);
    return *static_cast<h221NonStandard::pointer>(choice.get());
}

inline ParameterIdentifier::h221NonStandard::reference ParameterIdentifier::select_h221NonStandard ()
{
    return *static_cast<h221NonStandard::pointer>(setSelection(h221NonStandard::id_, ASN1::AbstractData::create( &h221NonStandard::value_type::theInfo)));
}

inline ParameterIdentifier::h221NonStandard::reference ParameterIdentifier::select_h221NonStandard (ParameterIdentifier::h221NonStandard::const_reference value)
{
    return select_h221NonStandard() = value;
}

inline bool ParameterIdentifier::h221NonStandard_isSelected() const
{ 
    return currentSelection() == h221NonStandard::id_; 
}

inline ParameterIdentifier::uuid::const_reference ParameterIdentifier::get_uuid () const
{
    assert(currentSelection() ==uuid::id_);
    return *static_cast<uuid::const_pointer>(choice.get());
}

inline ParameterIdentifier::uuid::reference ParameterIdentifier::ref_uuid ()
{
    assert(currentSelection() ==uuid::id_);
    return *static_cast<uuid::pointer>(choice.get());
}

inline ParameterIdentifier::uuid::reference ParameterIdentifier::select_uuid ()
{
    return *static_cast<uuid::pointer>(setSelection(uuid::id_, ASN1::AbstractData::create( &uuid::value_type::theInfo)));
}

inline ParameterIdentifier::uuid::reference ParameterIdentifier::select_uuid (const std::vector<char>& value)
{
    return select_uuid() = value;
}

inline bool ParameterIdentifier::uuid_isSelected() const
{ 
    return currentSelection() == uuid::id_; 
}

inline ParameterIdentifier::domainBased::value_type* ParameterIdentifier::domainBased::value_type::clone() const
{ return static_cast<value_type*> (Inherited::clone()); }

inline bool ParameterIdentifier::domainBased::value_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ParameterIdentifier::domainBased::const_reference ParameterIdentifier::get_domainBased () const
{
    assert(currentSelection() ==domainBased::id_);
    return *static_cast<domainBased::const_pointer>(choice.get());
}

inline ParameterIdentifier::domainBased::reference ParameterIdentifier::ref_domainBased ()
{
    assert(currentSelection() ==domainBased::id_);
    return *static_cast<domainBased::pointer>(choice.get());
}

inline ParameterIdentifier::domainBased::reference ParameterIdentifier::select_domainBased ()
{
    return *static_cast<domainBased::pointer>(setSelection(domainBased::id_, ASN1::AbstractData::create( &domainBased::value_type::theInfo)));
}

inline ParameterIdentifier::domainBased::reference ParameterIdentifier::select_domainBased (const std::string& value)
{
    return select_domainBased() = value;
}

inline bool ParameterIdentifier::domainBased_isSelected() const
{ 
    return currentSelection() == domainBased::id_; 
}

inline ParameterIdentifier::ParameterIdentifier(standard::Id id, standard::value_type::int_type value)
  : Inherited(&theInfo, id, new standard::value_type(value) )
{ }

inline ParameterIdentifier::ParameterIdentifier(h221NonStandard::Id id, h221NonStandard::const_reference value)
  : Inherited(&theInfo, id, new h221NonStandard::value_type(value) )
{ }

inline ParameterIdentifier::ParameterIdentifier(uuid::Id id, const std::vector<char>& value)
  : Inherited(&theInfo, id, new uuid::value_type(value) )
{ }

inline ParameterIdentifier::ParameterIdentifier(domainBased::Id id, const std::string& value)
  : Inherited(&theInfo, id, new domainBased::value_type(value) )
{ }


inline void ParameterIdentifier::swap(ParameterIdentifier & other)
{  Inherited::swap(other); }

inline ParameterIdentifier* ParameterIdentifier::clone() const
{ return static_cast<ParameterIdentifier*> (Inherited::clone()); }

inline bool ParameterIdentifier::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DepFECCapability::rfc2733::const_reference DepFECCapability::get_rfc2733 () const
{
    assert(currentSelection() ==rfc2733::id_);
    return *static_cast<rfc2733::const_pointer>(choice.get());
}

inline DepFECCapability::rfc2733::reference DepFECCapability::ref_rfc2733 ()
{
    assert(currentSelection() ==rfc2733::id_);
    return *static_cast<rfc2733::pointer>(choice.get());
}

inline DepFECCapability::rfc2733::reference DepFECCapability::select_rfc2733 ()
{
    return *static_cast<rfc2733::pointer>(setSelection(rfc2733::id_, ASN1::AbstractData::create( &rfc2733::value_type::theInfo)));
}

inline DepFECCapability::rfc2733::reference DepFECCapability::select_rfc2733 (DepFECCapability::rfc2733::const_reference value)
{
    return select_rfc2733() = value;
}

inline bool DepFECCapability::rfc2733_isSelected() const
{ 
    return currentSelection() == rfc2733::id_; 
}

inline DepFECCapability::DepFECCapability(rfc2733::Id id, rfc2733::const_reference value)
  : Inherited(&theInfo, id, new rfc2733::value_type(value) )
{ }


inline void DepFECCapability::swap(DepFECCapability & other)
{  Inherited::swap(other); }

inline DepFECCapability* DepFECCapability::clone() const
{ return static_cast<DepFECCapability*> (Inherited::clone()); }

inline bool DepFECCapability::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223AL1MParameters::transferMode::const_reference H223AL1MParameters::get_transferMode () const
{ return *static_cast<transferMode::const_pointer>(fields[0]);}

inline H223AL1MParameters::transferMode::reference H223AL1MParameters::ref_transferMode ()
{ return *static_cast<transferMode::pointer>(fields[0]);}

inline H223AL1MParameters::transferMode::reference H223AL1MParameters::set_transferMode ()
{ return *static_cast<transferMode::pointer>(fields[0]);}

inline H223AL1MParameters::transferMode::reference H223AL1MParameters::set_transferMode (transferMode::const_reference value)
{ return *static_cast<transferMode::pointer>(fields[0]) = value ;}

inline H223AL1MParameters::headerFEC::const_reference H223AL1MParameters::get_headerFEC () const
{ return *static_cast<headerFEC::const_pointer>(fields[1]);}

inline H223AL1MParameters::headerFEC::reference H223AL1MParameters::ref_headerFEC ()
{ return *static_cast<headerFEC::pointer>(fields[1]);}

inline H223AL1MParameters::headerFEC::reference H223AL1MParameters::set_headerFEC ()
{ return *static_cast<headerFEC::pointer>(fields[1]);}

inline H223AL1MParameters::headerFEC::reference H223AL1MParameters::set_headerFEC (headerFEC::const_reference value)
{ return *static_cast<headerFEC::pointer>(fields[1]) = value ;}

inline H223AL1MParameters::crcLength::const_reference H223AL1MParameters::get_crcLength () const
{ return *static_cast<crcLength::const_pointer>(fields[2]);}

inline H223AL1MParameters::crcLength::reference H223AL1MParameters::ref_crcLength ()
{ return *static_cast<crcLength::pointer>(fields[2]);}

inline H223AL1MParameters::crcLength::reference H223AL1MParameters::set_crcLength ()
{ return *static_cast<crcLength::pointer>(fields[2]);}

inline H223AL1MParameters::crcLength::reference H223AL1MParameters::set_crcLength (crcLength::const_reference value)
{ return *static_cast<crcLength::pointer>(fields[2]) = value ;}

inline H223AL1MParameters::rcpcCodeRate::const_reference H223AL1MParameters::get_rcpcCodeRate () const
{ return *static_cast<rcpcCodeRate::const_pointer>(fields[3]);}

inline H223AL1MParameters::rcpcCodeRate::reference H223AL1MParameters::ref_rcpcCodeRate ()
{ return *static_cast<rcpcCodeRate::pointer>(fields[3]);}

inline H223AL1MParameters::rcpcCodeRate::reference H223AL1MParameters::set_rcpcCodeRate ()
{ return *static_cast<rcpcCodeRate::pointer>(fields[3]);}

inline H223AL1MParameters::rcpcCodeRate::reference H223AL1MParameters::set_rcpcCodeRate (rcpcCodeRate::value_type::int_type value)
{ return *static_cast<rcpcCodeRate::pointer>(fields[3]) = value ;}

inline H223AL1MParameters::arqType::const_reference H223AL1MParameters::get_arqType () const
{ return *static_cast<arqType::const_pointer>(fields[4]);}

inline H223AL1MParameters::arqType::reference H223AL1MParameters::ref_arqType ()
{ return *static_cast<arqType::pointer>(fields[4]);}

inline H223AL1MParameters::arqType::reference H223AL1MParameters::set_arqType ()
{ return *static_cast<arqType::pointer>(fields[4]);}

inline H223AL1MParameters::arqType::reference H223AL1MParameters::set_arqType (arqType::const_reference value)
{ return *static_cast<arqType::pointer>(fields[4]) = value ;}

inline H223AL1MParameters::alpduInterleaving::const_reference H223AL1MParameters::get_alpduInterleaving () const
{ return *static_cast<alpduInterleaving::const_pointer>(fields[5]);}

inline H223AL1MParameters::alpduInterleaving::reference H223AL1MParameters::ref_alpduInterleaving ()
{ return *static_cast<alpduInterleaving::pointer>(fields[5]);}

inline H223AL1MParameters::alpduInterleaving::reference H223AL1MParameters::set_alpduInterleaving ()
{ return *static_cast<alpduInterleaving::pointer>(fields[5]);}

inline H223AL1MParameters::alpduInterleaving::reference H223AL1MParameters::set_alpduInterleaving (bool value)
{ return *static_cast<alpduInterleaving::pointer>(fields[5]) = value ;}

inline H223AL1MParameters::alsduSplitting::const_reference H223AL1MParameters::get_alsduSplitting () const
{ return *static_cast<alsduSplitting::const_pointer>(fields[6]);}

inline H223AL1MParameters::alsduSplitting::reference H223AL1MParameters::ref_alsduSplitting ()
{ return *static_cast<alsduSplitting::pointer>(fields[6]);}

inline H223AL1MParameters::alsduSplitting::reference H223AL1MParameters::set_alsduSplitting ()
{ return *static_cast<alsduSplitting::pointer>(fields[6]);}

inline H223AL1MParameters::alsduSplitting::reference H223AL1MParameters::set_alsduSplitting (bool value)
{ return *static_cast<alsduSplitting::pointer>(fields[6]) = value ;}

inline H223AL1MParameters::rsCodeCorrection::const_reference H223AL1MParameters::get_rsCodeCorrection () const
{
  assert(hasOptionalField(e_rsCodeCorrection));
  return *static_cast<rsCodeCorrection::const_pointer>(fields[7]);
}

inline H223AL1MParameters::rsCodeCorrection::reference H223AL1MParameters::ref_rsCodeCorrection ()
{
  assert(hasOptionalField(e_rsCodeCorrection));
  return *static_cast<rsCodeCorrection::pointer>(fields[7]);
}

inline H223AL1MParameters::rsCodeCorrection::reference H223AL1MParameters::set_rsCodeCorrection ()
{
  includeOptionalField( e_rsCodeCorrection, 7);
  return *static_cast<rsCodeCorrection::pointer>(fields[7]);
}

inline H223AL1MParameters::rsCodeCorrection::reference H223AL1MParameters::set_rsCodeCorrection (rsCodeCorrection::value_type::int_type value)
{
  includeOptionalField( e_rsCodeCorrection, 7);
  return *static_cast<rsCodeCorrection::pointer>(fields[7]) = value;
}

inline void H223AL1MParameters::omit_rsCodeCorrection ()
{ removeOptionalField( e_rsCodeCorrection); }

inline bool H223AL1MParameters::rsCodeCorrection_isPresent () const
{ return hasOptionalField( e_rsCodeCorrection); }

inline void H223AL1MParameters::swap(H223AL1MParameters& other)
{ Inherited::swap(other); }

inline H223AL1MParameters* H223AL1MParameters::clone() const
{ return static_cast<H223AL1MParameters*> (Inherited::clone()); }

inline H223AL3MParameters::headerFormat::const_reference H223AL3MParameters::get_headerFormat () const
{ return *static_cast<headerFormat::const_pointer>(fields[0]);}

inline H223AL3MParameters::headerFormat::reference H223AL3MParameters::ref_headerFormat ()
{ return *static_cast<headerFormat::pointer>(fields[0]);}

inline H223AL3MParameters::headerFormat::reference H223AL3MParameters::set_headerFormat ()
{ return *static_cast<headerFormat::pointer>(fields[0]);}

inline H223AL3MParameters::headerFormat::reference H223AL3MParameters::set_headerFormat (headerFormat::const_reference value)
{ return *static_cast<headerFormat::pointer>(fields[0]) = value ;}

inline H223AL3MParameters::crcLength::const_reference H223AL3MParameters::get_crcLength () const
{ return *static_cast<crcLength::const_pointer>(fields[1]);}

inline H223AL3MParameters::crcLength::reference H223AL3MParameters::ref_crcLength ()
{ return *static_cast<crcLength::pointer>(fields[1]);}

inline H223AL3MParameters::crcLength::reference H223AL3MParameters::set_crcLength ()
{ return *static_cast<crcLength::pointer>(fields[1]);}

inline H223AL3MParameters::crcLength::reference H223AL3MParameters::set_crcLength (crcLength::const_reference value)
{ return *static_cast<crcLength::pointer>(fields[1]) = value ;}

inline H223AL3MParameters::rcpcCodeRate::const_reference H223AL3MParameters::get_rcpcCodeRate () const
{ return *static_cast<rcpcCodeRate::const_pointer>(fields[2]);}

inline H223AL3MParameters::rcpcCodeRate::reference H223AL3MParameters::ref_rcpcCodeRate ()
{ return *static_cast<rcpcCodeRate::pointer>(fields[2]);}

inline H223AL3MParameters::rcpcCodeRate::reference H223AL3MParameters::set_rcpcCodeRate ()
{ return *static_cast<rcpcCodeRate::pointer>(fields[2]);}

inline H223AL3MParameters::rcpcCodeRate::reference H223AL3MParameters::set_rcpcCodeRate (rcpcCodeRate::value_type::int_type value)
{ return *static_cast<rcpcCodeRate::pointer>(fields[2]) = value ;}

inline H223AL3MParameters::arqType::const_reference H223AL3MParameters::get_arqType () const
{ return *static_cast<arqType::const_pointer>(fields[3]);}

inline H223AL3MParameters::arqType::reference H223AL3MParameters::ref_arqType ()
{ return *static_cast<arqType::pointer>(fields[3]);}

inline H223AL3MParameters::arqType::reference H223AL3MParameters::set_arqType ()
{ return *static_cast<arqType::pointer>(fields[3]);}

inline H223AL3MParameters::arqType::reference H223AL3MParameters::set_arqType (arqType::const_reference value)
{ return *static_cast<arqType::pointer>(fields[3]) = value ;}

inline H223AL3MParameters::alpduInterleaving::const_reference H223AL3MParameters::get_alpduInterleaving () const
{ return *static_cast<alpduInterleaving::const_pointer>(fields[4]);}

inline H223AL3MParameters::alpduInterleaving::reference H223AL3MParameters::ref_alpduInterleaving ()
{ return *static_cast<alpduInterleaving::pointer>(fields[4]);}

inline H223AL3MParameters::alpduInterleaving::reference H223AL3MParameters::set_alpduInterleaving ()
{ return *static_cast<alpduInterleaving::pointer>(fields[4]);}

inline H223AL3MParameters::alpduInterleaving::reference H223AL3MParameters::set_alpduInterleaving (bool value)
{ return *static_cast<alpduInterleaving::pointer>(fields[4]) = value ;}

inline H223AL3MParameters::rsCodeCorrection::const_reference H223AL3MParameters::get_rsCodeCorrection () const
{
  assert(hasOptionalField(e_rsCodeCorrection));
  return *static_cast<rsCodeCorrection::const_pointer>(fields[5]);
}

inline H223AL3MParameters::rsCodeCorrection::reference H223AL3MParameters::ref_rsCodeCorrection ()
{
  assert(hasOptionalField(e_rsCodeCorrection));
  return *static_cast<rsCodeCorrection::pointer>(fields[5]);
}

inline H223AL3MParameters::rsCodeCorrection::reference H223AL3MParameters::set_rsCodeCorrection ()
{
  includeOptionalField( e_rsCodeCorrection, 5);
  return *static_cast<rsCodeCorrection::pointer>(fields[5]);
}

inline H223AL3MParameters::rsCodeCorrection::reference H223AL3MParameters::set_rsCodeCorrection (rsCodeCorrection::value_type::int_type value)
{
  includeOptionalField( e_rsCodeCorrection, 5);
  return *static_cast<rsCodeCorrection::pointer>(fields[5]) = value;
}

inline void H223AL3MParameters::omit_rsCodeCorrection ()
{ removeOptionalField( e_rsCodeCorrection); }

inline bool H223AL3MParameters::rsCodeCorrection_isPresent () const
{ return hasOptionalField( e_rsCodeCorrection); }

inline void H223AL3MParameters::swap(H223AL3MParameters& other)
{ Inherited::swap(other); }

inline H223AL3MParameters* H223AL3MParameters::clone() const
{ return static_cast<H223AL3MParameters*> (Inherited::clone()); }

inline UnicastAddress::iPAddress::const_reference UnicastAddress::get_iPAddress () const
{
    assert(currentSelection() ==iPAddress::id_);
    return *static_cast<iPAddress::const_pointer>(choice.get());
}

inline UnicastAddress::iPAddress::reference UnicastAddress::ref_iPAddress ()
{
    assert(currentSelection() ==iPAddress::id_);
    return *static_cast<iPAddress::pointer>(choice.get());
}

inline UnicastAddress::iPAddress::reference UnicastAddress::select_iPAddress ()
{
    return *static_cast<iPAddress::pointer>(setSelection(iPAddress::id_, ASN1::AbstractData::create( &iPAddress::value_type::theInfo)));
}

inline UnicastAddress::iPAddress::reference UnicastAddress::select_iPAddress (UnicastAddress::iPAddress::const_reference value)
{
    return select_iPAddress() = value;
}

inline bool UnicastAddress::iPAddress_isSelected() const
{ 
    return currentSelection() == iPAddress::id_; 
}

inline UnicastAddress::iPXAddress::const_reference UnicastAddress::get_iPXAddress () const
{
    assert(currentSelection() ==iPXAddress::id_);
    return *static_cast<iPXAddress::const_pointer>(choice.get());
}

inline UnicastAddress::iPXAddress::reference UnicastAddress::ref_iPXAddress ()
{
    assert(currentSelection() ==iPXAddress::id_);
    return *static_cast<iPXAddress::pointer>(choice.get());
}

inline UnicastAddress::iPXAddress::reference UnicastAddress::select_iPXAddress ()
{
    return *static_cast<iPXAddress::pointer>(setSelection(iPXAddress::id_, ASN1::AbstractData::create( &iPXAddress::value_type::theInfo)));
}

inline UnicastAddress::iPXAddress::reference UnicastAddress::select_iPXAddress (UnicastAddress::iPXAddress::const_reference value)
{
    return select_iPXAddress() = value;
}

inline bool UnicastAddress::iPXAddress_isSelected() const
{ 
    return currentSelection() == iPXAddress::id_; 
}

inline UnicastAddress::iP6Address::const_reference UnicastAddress::get_iP6Address () const
{
    assert(currentSelection() ==iP6Address::id_);
    return *static_cast<iP6Address::const_pointer>(choice.get());
}

inline UnicastAddress::iP6Address::reference UnicastAddress::ref_iP6Address ()
{
    assert(currentSelection() ==iP6Address::id_);
    return *static_cast<iP6Address::pointer>(choice.get());
}

inline UnicastAddress::iP6Address::reference UnicastAddress::select_iP6Address ()
{
    return *static_cast<iP6Address::pointer>(setSelection(iP6Address::id_, ASN1::AbstractData::create( &iP6Address::value_type::theInfo)));
}

inline UnicastAddress::iP6Address::reference UnicastAddress::select_iP6Address (UnicastAddress::iP6Address::const_reference value)
{
    return select_iP6Address() = value;
}

inline bool UnicastAddress::iP6Address_isSelected() const
{ 
    return currentSelection() == iP6Address::id_; 
}

inline UnicastAddress::netBios::const_reference UnicastAddress::get_netBios () const
{
    assert(currentSelection() ==netBios::id_);
    return *static_cast<netBios::const_pointer>(choice.get());
}

inline UnicastAddress::netBios::reference UnicastAddress::ref_netBios ()
{
    assert(currentSelection() ==netBios::id_);
    return *static_cast<netBios::pointer>(choice.get());
}

inline UnicastAddress::netBios::reference UnicastAddress::select_netBios ()
{
    return *static_cast<netBios::pointer>(setSelection(netBios::id_, ASN1::AbstractData::create( &netBios::value_type::theInfo)));
}

inline UnicastAddress::netBios::reference UnicastAddress::select_netBios (const std::vector<char>& value)
{
    return select_netBios() = value;
}

inline bool UnicastAddress::netBios_isSelected() const
{ 
    return currentSelection() == netBios::id_; 
}

inline UnicastAddress::iPSourceRouteAddress::const_reference UnicastAddress::get_iPSourceRouteAddress () const
{
    assert(currentSelection() ==iPSourceRouteAddress::id_);
    return *static_cast<iPSourceRouteAddress::const_pointer>(choice.get());
}

inline UnicastAddress::iPSourceRouteAddress::reference UnicastAddress::ref_iPSourceRouteAddress ()
{
    assert(currentSelection() ==iPSourceRouteAddress::id_);
    return *static_cast<iPSourceRouteAddress::pointer>(choice.get());
}

inline UnicastAddress::iPSourceRouteAddress::reference UnicastAddress::select_iPSourceRouteAddress ()
{
    return *static_cast<iPSourceRouteAddress::pointer>(setSelection(iPSourceRouteAddress::id_, ASN1::AbstractData::create( &iPSourceRouteAddress::value_type::theInfo)));
}

inline UnicastAddress::iPSourceRouteAddress::reference UnicastAddress::select_iPSourceRouteAddress (UnicastAddress::iPSourceRouteAddress::const_reference value)
{
    return select_iPSourceRouteAddress() = value;
}

inline bool UnicastAddress::iPSourceRouteAddress_isSelected() const
{ 
    return currentSelection() == iPSourceRouteAddress::id_; 
}

inline UnicastAddress::nsap::const_reference UnicastAddress::get_nsap () const
{
    assert(currentSelection() ==nsap::id_);
    return *static_cast<nsap::const_pointer>(choice.get());
}

inline UnicastAddress::nsap::reference UnicastAddress::ref_nsap ()
{
    assert(currentSelection() ==nsap::id_);
    return *static_cast<nsap::pointer>(choice.get());
}

inline UnicastAddress::nsap::reference UnicastAddress::select_nsap ()
{
    return *static_cast<nsap::pointer>(setSelection(nsap::id_, ASN1::AbstractData::create( &nsap::value_type::theInfo)));
}

inline UnicastAddress::nsap::reference UnicastAddress::select_nsap (const std::vector<char>& value)
{
    return select_nsap() = value;
}

inline bool UnicastAddress::nsap_isSelected() const
{ 
    return currentSelection() == nsap::id_; 
}

inline UnicastAddress::nonStandardAddress::const_reference UnicastAddress::get_nonStandardAddress () const
{
    assert(currentSelection() ==nonStandardAddress::id_);
    return *static_cast<nonStandardAddress::const_pointer>(choice.get());
}

inline UnicastAddress::nonStandardAddress::reference UnicastAddress::ref_nonStandardAddress ()
{
    assert(currentSelection() ==nonStandardAddress::id_);
    return *static_cast<nonStandardAddress::pointer>(choice.get());
}

inline UnicastAddress::nonStandardAddress::reference UnicastAddress::select_nonStandardAddress ()
{
    return *static_cast<nonStandardAddress::pointer>(setSelection(nonStandardAddress::id_, ASN1::AbstractData::create( &nonStandardAddress::value_type::theInfo)));
}

inline UnicastAddress::nonStandardAddress::reference UnicastAddress::select_nonStandardAddress (UnicastAddress::nonStandardAddress::const_reference value)
{
    return select_nonStandardAddress() = value;
}

inline bool UnicastAddress::nonStandardAddress_isSelected() const
{ 
    return currentSelection() == nonStandardAddress::id_; 
}

inline UnicastAddress::UnicastAddress(iPAddress::Id id, iPAddress::const_reference value)
  : Inherited(&theInfo, id, new iPAddress::value_type(value) )
{ }

inline UnicastAddress::UnicastAddress(iPXAddress::Id id, iPXAddress::const_reference value)
  : Inherited(&theInfo, id, new iPXAddress::value_type(value) )
{ }

inline UnicastAddress::UnicastAddress(iP6Address::Id id, iP6Address::const_reference value)
  : Inherited(&theInfo, id, new iP6Address::value_type(value) )
{ }

inline UnicastAddress::UnicastAddress(netBios::Id id, const std::vector<char>& value)
  : Inherited(&theInfo, id, new netBios::value_type(value) )
{ }

inline UnicastAddress::UnicastAddress(iPSourceRouteAddress::Id id, iPSourceRouteAddress::const_reference value)
  : Inherited(&theInfo, id, new iPSourceRouteAddress::value_type(value) )
{ }

inline UnicastAddress::UnicastAddress(nsap::Id id, const std::vector<char>& value)
  : Inherited(&theInfo, id, new nsap::value_type(value) )
{ }

inline UnicastAddress::UnicastAddress(nonStandardAddress::Id id, nonStandardAddress::const_reference value)
  : Inherited(&theInfo, id, new nonStandardAddress::value_type(value) )
{ }


inline void UnicastAddress::swap(UnicastAddress & other)
{  Inherited::swap(other); }

inline UnicastAddress* UnicastAddress::clone() const
{ return static_cast<UnicastAddress*> (Inherited::clone()); }

inline bool UnicastAddress::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MulticastAddress::iPAddress::const_reference MulticastAddress::get_iPAddress () const
{
    assert(currentSelection() ==iPAddress::id_);
    return *static_cast<iPAddress::const_pointer>(choice.get());
}

inline MulticastAddress::iPAddress::reference MulticastAddress::ref_iPAddress ()
{
    assert(currentSelection() ==iPAddress::id_);
    return *static_cast<iPAddress::pointer>(choice.get());
}

inline MulticastAddress::iPAddress::reference MulticastAddress::select_iPAddress ()
{
    return *static_cast<iPAddress::pointer>(setSelection(iPAddress::id_, ASN1::AbstractData::create( &iPAddress::value_type::theInfo)));
}

inline MulticastAddress::iPAddress::reference MulticastAddress::select_iPAddress (MulticastAddress::iPAddress::const_reference value)
{
    return select_iPAddress() = value;
}

inline bool MulticastAddress::iPAddress_isSelected() const
{ 
    return currentSelection() == iPAddress::id_; 
}

inline MulticastAddress::iP6Address::const_reference MulticastAddress::get_iP6Address () const
{
    assert(currentSelection() ==iP6Address::id_);
    return *static_cast<iP6Address::const_pointer>(choice.get());
}

inline MulticastAddress::iP6Address::reference MulticastAddress::ref_iP6Address ()
{
    assert(currentSelection() ==iP6Address::id_);
    return *static_cast<iP6Address::pointer>(choice.get());
}

inline MulticastAddress::iP6Address::reference MulticastAddress::select_iP6Address ()
{
    return *static_cast<iP6Address::pointer>(setSelection(iP6Address::id_, ASN1::AbstractData::create( &iP6Address::value_type::theInfo)));
}

inline MulticastAddress::iP6Address::reference MulticastAddress::select_iP6Address (MulticastAddress::iP6Address::const_reference value)
{
    return select_iP6Address() = value;
}

inline bool MulticastAddress::iP6Address_isSelected() const
{ 
    return currentSelection() == iP6Address::id_; 
}

inline MulticastAddress::nsap::const_reference MulticastAddress::get_nsap () const
{
    assert(currentSelection() ==nsap::id_);
    return *static_cast<nsap::const_pointer>(choice.get());
}

inline MulticastAddress::nsap::reference MulticastAddress::ref_nsap ()
{
    assert(currentSelection() ==nsap::id_);
    return *static_cast<nsap::pointer>(choice.get());
}

inline MulticastAddress::nsap::reference MulticastAddress::select_nsap ()
{
    return *static_cast<nsap::pointer>(setSelection(nsap::id_, ASN1::AbstractData::create( &nsap::value_type::theInfo)));
}

inline MulticastAddress::nsap::reference MulticastAddress::select_nsap (const std::vector<char>& value)
{
    return select_nsap() = value;
}

inline bool MulticastAddress::nsap_isSelected() const
{ 
    return currentSelection() == nsap::id_; 
}

inline MulticastAddress::nonStandardAddress::const_reference MulticastAddress::get_nonStandardAddress () const
{
    assert(currentSelection() ==nonStandardAddress::id_);
    return *static_cast<nonStandardAddress::const_pointer>(choice.get());
}

inline MulticastAddress::nonStandardAddress::reference MulticastAddress::ref_nonStandardAddress ()
{
    assert(currentSelection() ==nonStandardAddress::id_);
    return *static_cast<nonStandardAddress::pointer>(choice.get());
}

inline MulticastAddress::nonStandardAddress::reference MulticastAddress::select_nonStandardAddress ()
{
    return *static_cast<nonStandardAddress::pointer>(setSelection(nonStandardAddress::id_, ASN1::AbstractData::create( &nonStandardAddress::value_type::theInfo)));
}

inline MulticastAddress::nonStandardAddress::reference MulticastAddress::select_nonStandardAddress (MulticastAddress::nonStandardAddress::const_reference value)
{
    return select_nonStandardAddress() = value;
}

inline bool MulticastAddress::nonStandardAddress_isSelected() const
{ 
    return currentSelection() == nonStandardAddress::id_; 
}

inline MulticastAddress::MulticastAddress(iPAddress::Id id, iPAddress::const_reference value)
  : Inherited(&theInfo, id, new iPAddress::value_type(value) )
{ }

inline MulticastAddress::MulticastAddress(iP6Address::Id id, iP6Address::const_reference value)
  : Inherited(&theInfo, id, new iP6Address::value_type(value) )
{ }

inline MulticastAddress::MulticastAddress(nsap::Id id, const std::vector<char>& value)
  : Inherited(&theInfo, id, new nsap::value_type(value) )
{ }

inline MulticastAddress::MulticastAddress(nonStandardAddress::Id id, nonStandardAddress::const_reference value)
  : Inherited(&theInfo, id, new nonStandardAddress::value_type(value) )
{ }


inline void MulticastAddress::swap(MulticastAddress & other)
{  Inherited::swap(other); }

inline MulticastAddress* MulticastAddress::clone() const
{ return static_cast<MulticastAddress*> (Inherited::clone()); }

inline bool MulticastAddress::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RequestChannelClose::forwardLogicalChannelNumber::const_reference RequestChannelClose::get_forwardLogicalChannelNumber () const
{ return *static_cast<forwardLogicalChannelNumber::const_pointer>(fields[0]);}

inline RequestChannelClose::forwardLogicalChannelNumber::reference RequestChannelClose::ref_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline RequestChannelClose::forwardLogicalChannelNumber::reference RequestChannelClose::set_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline RequestChannelClose::forwardLogicalChannelNumber::reference RequestChannelClose::set_forwardLogicalChannelNumber (forwardLogicalChannelNumber::value_type::int_type value)
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]) = value ;}

inline RequestChannelClose::qosCapability::const_reference RequestChannelClose::get_qosCapability () const
{
  assert(hasOptionalField(e_qosCapability));
  return *static_cast<qosCapability::const_pointer>(fields[1]);
}

inline RequestChannelClose::qosCapability::reference RequestChannelClose::ref_qosCapability ()
{
  assert(hasOptionalField(e_qosCapability));
  return *static_cast<qosCapability::pointer>(fields[1]);
}

inline RequestChannelClose::qosCapability::reference RequestChannelClose::set_qosCapability ()
{
  includeOptionalField( e_qosCapability, 1);
  return *static_cast<qosCapability::pointer>(fields[1]);
}

inline RequestChannelClose::qosCapability::reference RequestChannelClose::set_qosCapability (qosCapability::const_reference value)
{
  includeOptionalField( e_qosCapability, 1);
  return *static_cast<qosCapability::pointer>(fields[1]) = value;
}

inline void RequestChannelClose::omit_qosCapability ()
{ removeOptionalField( e_qosCapability); }

inline bool RequestChannelClose::qosCapability_isPresent () const
{ return hasOptionalField( e_qosCapability); }

inline RequestChannelClose::reason::const_reference RequestChannelClose::get_reason () const
{
  assert(hasOptionalField(e_reason));
  return *static_cast<reason::const_pointer>(fields[2]);
}

inline RequestChannelClose::reason::reference RequestChannelClose::ref_reason ()
{
  assert(hasOptionalField(e_reason));
  return *static_cast<reason::pointer>(fields[2]);
}

inline RequestChannelClose::reason::reference RequestChannelClose::set_reason ()
{
  includeOptionalField( e_reason, 2);
  return *static_cast<reason::pointer>(fields[2]);
}

inline RequestChannelClose::reason::reference RequestChannelClose::set_reason (reason::const_reference value)
{
  includeOptionalField( e_reason, 2);
  return *static_cast<reason::pointer>(fields[2]) = value;
}

inline void RequestChannelClose::omit_reason ()
{ removeOptionalField( e_reason); }

inline bool RequestChannelClose::reason_isPresent () const
{ return hasOptionalField( e_reason); }

inline void RequestChannelClose::swap(RequestChannelClose& other)
{ Inherited::swap(other); }

inline RequestChannelClose* RequestChannelClose::clone() const
{ return static_cast<RequestChannelClose*> (Inherited::clone()); }

inline MultiplexEntryDescriptor::multiplexTableEntryNumber::const_reference MultiplexEntryDescriptor::get_multiplexTableEntryNumber () const
{ return *static_cast<multiplexTableEntryNumber::const_pointer>(fields[0]);}

inline MultiplexEntryDescriptor::multiplexTableEntryNumber::reference MultiplexEntryDescriptor::ref_multiplexTableEntryNumber ()
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]);}

inline MultiplexEntryDescriptor::multiplexTableEntryNumber::reference MultiplexEntryDescriptor::set_multiplexTableEntryNumber ()
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]);}

inline MultiplexEntryDescriptor::multiplexTableEntryNumber::reference MultiplexEntryDescriptor::set_multiplexTableEntryNumber (multiplexTableEntryNumber::value_type::int_type value)
{ return *static_cast<multiplexTableEntryNumber::pointer>(fields[0]) = value ;}

inline MultiplexEntryDescriptor::elementList::const_reference MultiplexEntryDescriptor::get_elementList () const
{
  assert(hasOptionalField(e_elementList));
  return *static_cast<elementList::const_pointer>(fields[1]);
}

inline MultiplexEntryDescriptor::elementList::reference MultiplexEntryDescriptor::ref_elementList ()
{
  assert(hasOptionalField(e_elementList));
  return *static_cast<elementList::pointer>(fields[1]);
}

inline MultiplexEntryDescriptor::elementList::reference MultiplexEntryDescriptor::set_elementList ()
{
  includeOptionalField( e_elementList, 1);
  return *static_cast<elementList::pointer>(fields[1]);
}

inline MultiplexEntryDescriptor::elementList::reference MultiplexEntryDescriptor::set_elementList (elementList::const_reference value)
{
  includeOptionalField( e_elementList, 1);
  return *static_cast<elementList::pointer>(fields[1]) = value;
}

inline void MultiplexEntryDescriptor::omit_elementList ()
{ removeOptionalField( e_elementList); }

inline bool MultiplexEntryDescriptor::elementList_isPresent () const
{ return hasOptionalField( e_elementList); }

inline void MultiplexEntryDescriptor::swap(MultiplexEntryDescriptor& other)
{ Inherited::swap(other); }

inline MultiplexEntryDescriptor* MultiplexEntryDescriptor::clone() const
{ return static_cast<MultiplexEntryDescriptor*> (Inherited::clone()); }

inline MultiplexEntrySendReject::sequenceNumber::const_reference MultiplexEntrySendReject::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline MultiplexEntrySendReject::sequenceNumber::reference MultiplexEntrySendReject::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline MultiplexEntrySendReject::sequenceNumber::reference MultiplexEntrySendReject::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline MultiplexEntrySendReject::sequenceNumber::reference MultiplexEntrySendReject::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline MultiplexEntrySendReject::rejectionDescriptions::const_reference MultiplexEntrySendReject::get_rejectionDescriptions () const
{ return *static_cast<rejectionDescriptions::const_pointer>(fields[1]);}

inline MultiplexEntrySendReject::rejectionDescriptions::reference MultiplexEntrySendReject::ref_rejectionDescriptions ()
{ return *static_cast<rejectionDescriptions::pointer>(fields[1]);}

inline MultiplexEntrySendReject::rejectionDescriptions::reference MultiplexEntrySendReject::set_rejectionDescriptions ()
{ return *static_cast<rejectionDescriptions::pointer>(fields[1]);}

inline MultiplexEntrySendReject::rejectionDescriptions::reference MultiplexEntrySendReject::set_rejectionDescriptions (rejectionDescriptions::const_reference value)
{ return *static_cast<rejectionDescriptions::pointer>(fields[1]) = value ;}

inline void MultiplexEntrySendReject::swap(MultiplexEntrySendReject& other)
{ Inherited::swap(other); }

inline MultiplexEntrySendReject* MultiplexEntrySendReject::clone() const
{ return static_cast<MultiplexEntrySendReject*> (Inherited::clone()); }

inline RequestMultiplexEntryReject::entryNumbers::const_reference RequestMultiplexEntryReject::get_entryNumbers () const
{ return *static_cast<entryNumbers::const_pointer>(fields[0]);}

inline RequestMultiplexEntryReject::entryNumbers::reference RequestMultiplexEntryReject::ref_entryNumbers ()
{ return *static_cast<entryNumbers::pointer>(fields[0]);}

inline RequestMultiplexEntryReject::entryNumbers::reference RequestMultiplexEntryReject::set_entryNumbers ()
{ return *static_cast<entryNumbers::pointer>(fields[0]);}

inline RequestMultiplexEntryReject::entryNumbers::reference RequestMultiplexEntryReject::set_entryNumbers (entryNumbers::const_reference value)
{ return *static_cast<entryNumbers::pointer>(fields[0]) = value ;}

inline RequestMultiplexEntryReject::rejectionDescriptions::const_reference RequestMultiplexEntryReject::get_rejectionDescriptions () const
{ return *static_cast<rejectionDescriptions::const_pointer>(fields[1]);}

inline RequestMultiplexEntryReject::rejectionDescriptions::reference RequestMultiplexEntryReject::ref_rejectionDescriptions ()
{ return *static_cast<rejectionDescriptions::pointer>(fields[1]);}

inline RequestMultiplexEntryReject::rejectionDescriptions::reference RequestMultiplexEntryReject::set_rejectionDescriptions ()
{ return *static_cast<rejectionDescriptions::pointer>(fields[1]);}

inline RequestMultiplexEntryReject::rejectionDescriptions::reference RequestMultiplexEntryReject::set_rejectionDescriptions (rejectionDescriptions::const_reference value)
{ return *static_cast<rejectionDescriptions::pointer>(fields[1]) = value ;}

inline void RequestMultiplexEntryReject::swap(RequestMultiplexEntryReject& other)
{ Inherited::swap(other); }

inline RequestMultiplexEntryReject* RequestMultiplexEntryReject::clone() const
{ return static_cast<RequestMultiplexEntryReject*> (Inherited::clone()); }

inline EncryptionMode::nonStandard::const_reference EncryptionMode::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline EncryptionMode::nonStandard::reference EncryptionMode::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline EncryptionMode::nonStandard::reference EncryptionMode::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline EncryptionMode::nonStandard::reference EncryptionMode::select_nonStandard (EncryptionMode::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool EncryptionMode::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline EncryptionMode::h233Encryption::reference EncryptionMode::select_h233Encryption ()
{
    return *static_cast<h233Encryption::pointer>(setSelection(h233Encryption::id_, ASN1::AbstractData::create( &h233Encryption::value_type::theInfo)));
}

inline bool EncryptionMode::h233Encryption_isSelected() const
{ 
    return currentSelection() == h233Encryption::id_; 
}

inline EncryptionMode::EncryptionMode(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline EncryptionMode::EncryptionMode(h233Encryption::Id id, h233Encryption::const_reference value)
  : Inherited(&theInfo, id, new h233Encryption::value_type(value) )
{ }


inline void EncryptionMode::swap(EncryptionMode & other)
{  Inherited::swap(other); }

inline EncryptionMode* EncryptionMode::clone() const
{ return static_cast<EncryptionMode*> (Inherited::clone()); }

inline bool EncryptionMode::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ConferenceRequest::terminalListRequest::reference ConferenceRequest::select_terminalListRequest ()
{
    return *static_cast<terminalListRequest::pointer>(setSelection(terminalListRequest::id_, ASN1::AbstractData::create( &terminalListRequest::value_type::theInfo)));
}

inline bool ConferenceRequest::terminalListRequest_isSelected() const
{ 
    return currentSelection() == terminalListRequest::id_; 
}

inline ConferenceRequest::makeMeChair::reference ConferenceRequest::select_makeMeChair ()
{
    return *static_cast<makeMeChair::pointer>(setSelection(makeMeChair::id_, ASN1::AbstractData::create( &makeMeChair::value_type::theInfo)));
}

inline bool ConferenceRequest::makeMeChair_isSelected() const
{ 
    return currentSelection() == makeMeChair::id_; 
}

inline ConferenceRequest::cancelMakeMeChair::reference ConferenceRequest::select_cancelMakeMeChair ()
{
    return *static_cast<cancelMakeMeChair::pointer>(setSelection(cancelMakeMeChair::id_, ASN1::AbstractData::create( &cancelMakeMeChair::value_type::theInfo)));
}

inline bool ConferenceRequest::cancelMakeMeChair_isSelected() const
{ 
    return currentSelection() == cancelMakeMeChair::id_; 
}

inline ConferenceRequest::dropTerminal::const_reference ConferenceRequest::get_dropTerminal () const
{
    assert(currentSelection() ==dropTerminal::id_);
    return *static_cast<dropTerminal::const_pointer>(choice.get());
}

inline ConferenceRequest::dropTerminal::reference ConferenceRequest::ref_dropTerminal ()
{
    assert(currentSelection() ==dropTerminal::id_);
    return *static_cast<dropTerminal::pointer>(choice.get());
}

inline ConferenceRequest::dropTerminal::reference ConferenceRequest::select_dropTerminal ()
{
    return *static_cast<dropTerminal::pointer>(setSelection(dropTerminal::id_, ASN1::AbstractData::create( &dropTerminal::value_type::theInfo)));
}

inline ConferenceRequest::dropTerminal::reference ConferenceRequest::select_dropTerminal (ConferenceRequest::dropTerminal::const_reference value)
{
    return select_dropTerminal() = value;
}

inline bool ConferenceRequest::dropTerminal_isSelected() const
{ 
    return currentSelection() == dropTerminal::id_; 
}

inline ConferenceRequest::requestTerminalID::const_reference ConferenceRequest::get_requestTerminalID () const
{
    assert(currentSelection() ==requestTerminalID::id_);
    return *static_cast<requestTerminalID::const_pointer>(choice.get());
}

inline ConferenceRequest::requestTerminalID::reference ConferenceRequest::ref_requestTerminalID ()
{
    assert(currentSelection() ==requestTerminalID::id_);
    return *static_cast<requestTerminalID::pointer>(choice.get());
}

inline ConferenceRequest::requestTerminalID::reference ConferenceRequest::select_requestTerminalID ()
{
    return *static_cast<requestTerminalID::pointer>(setSelection(requestTerminalID::id_, ASN1::AbstractData::create( &requestTerminalID::value_type::theInfo)));
}

inline ConferenceRequest::requestTerminalID::reference ConferenceRequest::select_requestTerminalID (ConferenceRequest::requestTerminalID::const_reference value)
{
    return select_requestTerminalID() = value;
}

inline bool ConferenceRequest::requestTerminalID_isSelected() const
{ 
    return currentSelection() == requestTerminalID::id_; 
}

inline ConferenceRequest::enterH243Password::reference ConferenceRequest::select_enterH243Password ()
{
    return *static_cast<enterH243Password::pointer>(setSelection(enterH243Password::id_, ASN1::AbstractData::create( &enterH243Password::value_type::theInfo)));
}

inline bool ConferenceRequest::enterH243Password_isSelected() const
{ 
    return currentSelection() == enterH243Password::id_; 
}

inline ConferenceRequest::enterH243TerminalID::reference ConferenceRequest::select_enterH243TerminalID ()
{
    return *static_cast<enterH243TerminalID::pointer>(setSelection(enterH243TerminalID::id_, ASN1::AbstractData::create( &enterH243TerminalID::value_type::theInfo)));
}

inline bool ConferenceRequest::enterH243TerminalID_isSelected() const
{ 
    return currentSelection() == enterH243TerminalID::id_; 
}

inline ConferenceRequest::enterH243ConferenceID::reference ConferenceRequest::select_enterH243ConferenceID ()
{
    return *static_cast<enterH243ConferenceID::pointer>(setSelection(enterH243ConferenceID::id_, ASN1::AbstractData::create( &enterH243ConferenceID::value_type::theInfo)));
}

inline bool ConferenceRequest::enterH243ConferenceID_isSelected() const
{ 
    return currentSelection() == enterH243ConferenceID::id_; 
}

inline ConferenceRequest::enterExtensionAddress::reference ConferenceRequest::select_enterExtensionAddress ()
{
    return *static_cast<enterExtensionAddress::pointer>(setSelection(enterExtensionAddress::id_, ASN1::AbstractData::create( &enterExtensionAddress::value_type::theInfo)));
}

inline bool ConferenceRequest::enterExtensionAddress_isSelected() const
{ 
    return currentSelection() == enterExtensionAddress::id_; 
}

inline ConferenceRequest::requestChairTokenOwner::reference ConferenceRequest::select_requestChairTokenOwner ()
{
    return *static_cast<requestChairTokenOwner::pointer>(setSelection(requestChairTokenOwner::id_, ASN1::AbstractData::create( &requestChairTokenOwner::value_type::theInfo)));
}

inline bool ConferenceRequest::requestChairTokenOwner_isSelected() const
{ 
    return currentSelection() == requestChairTokenOwner::id_; 
}

inline ConferenceRequest::requestTerminalCertificate::const_reference ConferenceRequest::get_requestTerminalCertificate () const
{
    assert(currentSelection() ==requestTerminalCertificate::id_);
    return *static_cast<requestTerminalCertificate::const_pointer>(choice.get());
}

inline ConferenceRequest::requestTerminalCertificate::reference ConferenceRequest::ref_requestTerminalCertificate ()
{
    assert(currentSelection() ==requestTerminalCertificate::id_);
    return *static_cast<requestTerminalCertificate::pointer>(choice.get());
}

inline ConferenceRequest::requestTerminalCertificate::reference ConferenceRequest::select_requestTerminalCertificate ()
{
    return *static_cast<requestTerminalCertificate::pointer>(setSelection(requestTerminalCertificate::id_, ASN1::AbstractData::create( &requestTerminalCertificate::value_type::theInfo)));
}

inline ConferenceRequest::requestTerminalCertificate::reference ConferenceRequest::select_requestTerminalCertificate (ConferenceRequest::requestTerminalCertificate::const_reference value)
{
    return select_requestTerminalCertificate() = value;
}

inline bool ConferenceRequest::requestTerminalCertificate_isSelected() const
{ 
    return currentSelection() == requestTerminalCertificate::id_; 
}

inline ConferenceRequest::broadcastMyLogicalChannel::const_reference ConferenceRequest::get_broadcastMyLogicalChannel () const
{
    assert(currentSelection() ==broadcastMyLogicalChannel::id_);
    return *static_cast<broadcastMyLogicalChannel::const_pointer>(choice.get());
}

inline ConferenceRequest::broadcastMyLogicalChannel::reference ConferenceRequest::ref_broadcastMyLogicalChannel ()
{
    assert(currentSelection() ==broadcastMyLogicalChannel::id_);
    return *static_cast<broadcastMyLogicalChannel::pointer>(choice.get());
}

inline ConferenceRequest::broadcastMyLogicalChannel::reference ConferenceRequest::select_broadcastMyLogicalChannel ()
{
    return *static_cast<broadcastMyLogicalChannel::pointer>(setSelection(broadcastMyLogicalChannel::id_, ASN1::AbstractData::create( &broadcastMyLogicalChannel::value_type::theInfo)));
}

inline ConferenceRequest::broadcastMyLogicalChannel::reference ConferenceRequest::select_broadcastMyLogicalChannel (ConferenceRequest::broadcastMyLogicalChannel::value_type::int_type value)
{
    return select_broadcastMyLogicalChannel() = value;
}

inline bool ConferenceRequest::broadcastMyLogicalChannel_isSelected() const
{ 
    return currentSelection() == broadcastMyLogicalChannel::id_; 
}

inline ConferenceRequest::makeTerminalBroadcaster::const_reference ConferenceRequest::get_makeTerminalBroadcaster () const
{
    assert(currentSelection() ==makeTerminalBroadcaster::id_);
    return *static_cast<makeTerminalBroadcaster::const_pointer>(choice.get());
}

inline ConferenceRequest::makeTerminalBroadcaster::reference ConferenceRequest::ref_makeTerminalBroadcaster ()
{
    assert(currentSelection() ==makeTerminalBroadcaster::id_);
    return *static_cast<makeTerminalBroadcaster::pointer>(choice.get());
}

inline ConferenceRequest::makeTerminalBroadcaster::reference ConferenceRequest::select_makeTerminalBroadcaster ()
{
    return *static_cast<makeTerminalBroadcaster::pointer>(setSelection(makeTerminalBroadcaster::id_, ASN1::AbstractData::create( &makeTerminalBroadcaster::value_type::theInfo)));
}

inline ConferenceRequest::makeTerminalBroadcaster::reference ConferenceRequest::select_makeTerminalBroadcaster (ConferenceRequest::makeTerminalBroadcaster::const_reference value)
{
    return select_makeTerminalBroadcaster() = value;
}

inline bool ConferenceRequest::makeTerminalBroadcaster_isSelected() const
{ 
    return currentSelection() == makeTerminalBroadcaster::id_; 
}

inline ConferenceRequest::sendThisSource::const_reference ConferenceRequest::get_sendThisSource () const
{
    assert(currentSelection() ==sendThisSource::id_);
    return *static_cast<sendThisSource::const_pointer>(choice.get());
}

inline ConferenceRequest::sendThisSource::reference ConferenceRequest::ref_sendThisSource ()
{
    assert(currentSelection() ==sendThisSource::id_);
    return *static_cast<sendThisSource::pointer>(choice.get());
}

inline ConferenceRequest::sendThisSource::reference ConferenceRequest::select_sendThisSource ()
{
    return *static_cast<sendThisSource::pointer>(setSelection(sendThisSource::id_, ASN1::AbstractData::create( &sendThisSource::value_type::theInfo)));
}

inline ConferenceRequest::sendThisSource::reference ConferenceRequest::select_sendThisSource (ConferenceRequest::sendThisSource::const_reference value)
{
    return select_sendThisSource() = value;
}

inline bool ConferenceRequest::sendThisSource_isSelected() const
{ 
    return currentSelection() == sendThisSource::id_; 
}

inline ConferenceRequest::requestAllTerminalIDs::reference ConferenceRequest::select_requestAllTerminalIDs ()
{
    return *static_cast<requestAllTerminalIDs::pointer>(setSelection(requestAllTerminalIDs::id_, ASN1::AbstractData::create( &requestAllTerminalIDs::value_type::theInfo)));
}

inline bool ConferenceRequest::requestAllTerminalIDs_isSelected() const
{ 
    return currentSelection() == requestAllTerminalIDs::id_; 
}

inline ConferenceRequest::remoteMCRequest::const_reference ConferenceRequest::get_remoteMCRequest () const
{
    assert(currentSelection() ==remoteMCRequest::id_);
    return *static_cast<remoteMCRequest::const_pointer>(choice.get());
}

inline ConferenceRequest::remoteMCRequest::reference ConferenceRequest::ref_remoteMCRequest ()
{
    assert(currentSelection() ==remoteMCRequest::id_);
    return *static_cast<remoteMCRequest::pointer>(choice.get());
}

inline ConferenceRequest::remoteMCRequest::reference ConferenceRequest::select_remoteMCRequest ()
{
    return *static_cast<remoteMCRequest::pointer>(setSelection(remoteMCRequest::id_, ASN1::AbstractData::create( &remoteMCRequest::value_type::theInfo)));
}

inline ConferenceRequest::remoteMCRequest::reference ConferenceRequest::select_remoteMCRequest (ConferenceRequest::remoteMCRequest::const_reference value)
{
    return select_remoteMCRequest() = value;
}

inline bool ConferenceRequest::remoteMCRequest_isSelected() const
{ 
    return currentSelection() == remoteMCRequest::id_; 
}

inline ConferenceRequest::ConferenceRequest(terminalListRequest::Id id, terminalListRequest::const_reference value)
  : Inherited(&theInfo, id, new terminalListRequest::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(makeMeChair::Id id, makeMeChair::const_reference value)
  : Inherited(&theInfo, id, new makeMeChair::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(cancelMakeMeChair::Id id, cancelMakeMeChair::const_reference value)
  : Inherited(&theInfo, id, new cancelMakeMeChair::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(dropTerminal::Id id, dropTerminal::const_reference value)
  : Inherited(&theInfo, id, new dropTerminal::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(requestTerminalID::Id id, requestTerminalID::const_reference value)
  : Inherited(&theInfo, id, new requestTerminalID::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(enterH243Password::Id id, enterH243Password::const_reference value)
  : Inherited(&theInfo, id, new enterH243Password::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(enterH243TerminalID::Id id, enterH243TerminalID::const_reference value)
  : Inherited(&theInfo, id, new enterH243TerminalID::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(enterH243ConferenceID::Id id, enterH243ConferenceID::const_reference value)
  : Inherited(&theInfo, id, new enterH243ConferenceID::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(enterExtensionAddress::Id id, enterExtensionAddress::const_reference value)
  : Inherited(&theInfo, id, new enterExtensionAddress::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(requestChairTokenOwner::Id id, requestChairTokenOwner::const_reference value)
  : Inherited(&theInfo, id, new requestChairTokenOwner::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(requestTerminalCertificate::Id id, requestTerminalCertificate::const_reference value)
  : Inherited(&theInfo, id, new requestTerminalCertificate::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(broadcastMyLogicalChannel::Id id, broadcastMyLogicalChannel::value_type::int_type value)
  : Inherited(&theInfo, id, new broadcastMyLogicalChannel::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(makeTerminalBroadcaster::Id id, makeTerminalBroadcaster::const_reference value)
  : Inherited(&theInfo, id, new makeTerminalBroadcaster::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(sendThisSource::Id id, sendThisSource::const_reference value)
  : Inherited(&theInfo, id, new sendThisSource::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(requestAllTerminalIDs::Id id, requestAllTerminalIDs::const_reference value)
  : Inherited(&theInfo, id, new requestAllTerminalIDs::value_type(value) )
{ }

inline ConferenceRequest::ConferenceRequest(remoteMCRequest::Id id, remoteMCRequest::const_reference value)
  : Inherited(&theInfo, id, new remoteMCRequest::value_type(value) )
{ }


inline void ConferenceRequest::swap(ConferenceRequest & other)
{  Inherited::swap(other); }

inline ConferenceRequest* ConferenceRequest::clone() const
{ return static_cast<ConferenceRequest*> (Inherited::clone()); }

inline bool ConferenceRequest::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RequestAllTerminalIDsResponse::terminalInformation::const_reference RequestAllTerminalIDsResponse::get_terminalInformation () const
{ return *static_cast<terminalInformation::const_pointer>(fields[0]);}

inline RequestAllTerminalIDsResponse::terminalInformation::reference RequestAllTerminalIDsResponse::ref_terminalInformation ()
{ return *static_cast<terminalInformation::pointer>(fields[0]);}

inline RequestAllTerminalIDsResponse::terminalInformation::reference RequestAllTerminalIDsResponse::set_terminalInformation ()
{ return *static_cast<terminalInformation::pointer>(fields[0]);}

inline RequestAllTerminalIDsResponse::terminalInformation::reference RequestAllTerminalIDsResponse::set_terminalInformation (terminalInformation::const_reference value)
{ return *static_cast<terminalInformation::pointer>(fields[0]) = value ;}

inline void RequestAllTerminalIDsResponse::swap(RequestAllTerminalIDsResponse& other)
{ Inherited::swap(other); }

inline RequestAllTerminalIDsResponse* RequestAllTerminalIDsResponse::clone() const
{ return static_cast<RequestAllTerminalIDsResponse*> (Inherited::clone()); }

inline VCCapability_availableBitRates::type::const_reference VCCapability_availableBitRates::get_type () const
{ return *static_cast<type::const_pointer>(fields[0]);}

inline VCCapability_availableBitRates::type::reference VCCapability_availableBitRates::ref_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline VCCapability_availableBitRates::type::reference VCCapability_availableBitRates::set_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline VCCapability_availableBitRates::type::reference VCCapability_availableBitRates::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[0]) = value ;}

inline void VCCapability_availableBitRates::swap(VCCapability_availableBitRates& other)
{ Inherited::swap(other); }

inline VCCapability_availableBitRates* VCCapability_availableBitRates::clone() const
{ return static_cast<VCCapability_availableBitRates*> (Inherited::clone()); }

inline CustomPictureFormat_mPI::standardMPI::const_reference CustomPictureFormat_mPI::get_standardMPI () const
{
  assert(hasOptionalField(e_standardMPI));
  return *static_cast<standardMPI::const_pointer>(fields[0]);
}

inline CustomPictureFormat_mPI::standardMPI::reference CustomPictureFormat_mPI::ref_standardMPI ()
{
  assert(hasOptionalField(e_standardMPI));
  return *static_cast<standardMPI::pointer>(fields[0]);
}

inline CustomPictureFormat_mPI::standardMPI::reference CustomPictureFormat_mPI::set_standardMPI ()
{
  includeOptionalField( e_standardMPI, 0);
  return *static_cast<standardMPI::pointer>(fields[0]);
}

inline CustomPictureFormat_mPI::standardMPI::reference CustomPictureFormat_mPI::set_standardMPI (standardMPI::value_type::int_type value)
{
  includeOptionalField( e_standardMPI, 0);
  return *static_cast<standardMPI::pointer>(fields[0]) = value;
}

inline void CustomPictureFormat_mPI::omit_standardMPI ()
{ removeOptionalField( e_standardMPI); }

inline bool CustomPictureFormat_mPI::standardMPI_isPresent () const
{ return hasOptionalField( e_standardMPI); }

inline CustomPictureFormat_mPI::customPCF::const_reference CustomPictureFormat_mPI::get_customPCF () const
{
  assert(hasOptionalField(e_customPCF));
  return *static_cast<customPCF::const_pointer>(fields[1]);
}

inline CustomPictureFormat_mPI::customPCF::reference CustomPictureFormat_mPI::ref_customPCF ()
{
  assert(hasOptionalField(e_customPCF));
  return *static_cast<customPCF::pointer>(fields[1]);
}

inline CustomPictureFormat_mPI::customPCF::reference CustomPictureFormat_mPI::set_customPCF ()
{
  includeOptionalField( e_customPCF, 1);
  return *static_cast<customPCF::pointer>(fields[1]);
}

inline CustomPictureFormat_mPI::customPCF::reference CustomPictureFormat_mPI::set_customPCF (customPCF::const_reference value)
{
  includeOptionalField( e_customPCF, 1);
  return *static_cast<customPCF::pointer>(fields[1]) = value;
}

inline void CustomPictureFormat_mPI::omit_customPCF ()
{ removeOptionalField( e_customPCF); }

inline bool CustomPictureFormat_mPI::customPCF_isPresent () const
{ return hasOptionalField( e_customPCF); }

inline void CustomPictureFormat_mPI::swap(CustomPictureFormat_mPI& other)
{ Inherited::swap(other); }

inline CustomPictureFormat_mPI* CustomPictureFormat_mPI::clone() const
{ return static_cast<CustomPictureFormat_mPI*> (Inherited::clone()); }

inline CustomPictureFormat_pixelAspectInformation::anyPixelAspectRatio::const_reference CustomPictureFormat_pixelAspectInformation::get_anyPixelAspectRatio () const
{
    assert(currentSelection() ==anyPixelAspectRatio::id_);
    return *static_cast<anyPixelAspectRatio::const_pointer>(choice.get());
}

inline CustomPictureFormat_pixelAspectInformation::anyPixelAspectRatio::reference CustomPictureFormat_pixelAspectInformation::ref_anyPixelAspectRatio ()
{
    assert(currentSelection() ==anyPixelAspectRatio::id_);
    return *static_cast<anyPixelAspectRatio::pointer>(choice.get());
}

inline CustomPictureFormat_pixelAspectInformation::anyPixelAspectRatio::reference CustomPictureFormat_pixelAspectInformation::select_anyPixelAspectRatio ()
{
    return *static_cast<anyPixelAspectRatio::pointer>(setSelection(anyPixelAspectRatio::id_, ASN1::AbstractData::create( &anyPixelAspectRatio::value_type::theInfo)));
}

inline CustomPictureFormat_pixelAspectInformation::anyPixelAspectRatio::reference CustomPictureFormat_pixelAspectInformation::select_anyPixelAspectRatio (bool value)
{
    return select_anyPixelAspectRatio() = value;
}

inline bool CustomPictureFormat_pixelAspectInformation::anyPixelAspectRatio_isSelected() const
{ 
    return currentSelection() == anyPixelAspectRatio::id_; 
}

inline CustomPictureFormat_pixelAspectInformation::pixelAspectCode::const_reference CustomPictureFormat_pixelAspectInformation::get_pixelAspectCode () const
{
    assert(currentSelection() ==pixelAspectCode::id_);
    return *static_cast<pixelAspectCode::const_pointer>(choice.get());
}

inline CustomPictureFormat_pixelAspectInformation::pixelAspectCode::reference CustomPictureFormat_pixelAspectInformation::ref_pixelAspectCode ()
{
    assert(currentSelection() ==pixelAspectCode::id_);
    return *static_cast<pixelAspectCode::pointer>(choice.get());
}

inline CustomPictureFormat_pixelAspectInformation::pixelAspectCode::reference CustomPictureFormat_pixelAspectInformation::select_pixelAspectCode ()
{
    return *static_cast<pixelAspectCode::pointer>(setSelection(pixelAspectCode::id_, ASN1::AbstractData::create( &pixelAspectCode::value_type::theInfo)));
}

inline CustomPictureFormat_pixelAspectInformation::pixelAspectCode::reference CustomPictureFormat_pixelAspectInformation::select_pixelAspectCode (CustomPictureFormat_pixelAspectInformation::pixelAspectCode::const_reference value)
{
    return select_pixelAspectCode() = value;
}

inline bool CustomPictureFormat_pixelAspectInformation::pixelAspectCode_isSelected() const
{ 
    return currentSelection() == pixelAspectCode::id_; 
}

inline CustomPictureFormat_pixelAspectInformation::extendedPAR::const_reference CustomPictureFormat_pixelAspectInformation::get_extendedPAR () const
{
    assert(currentSelection() ==extendedPAR::id_);
    return *static_cast<extendedPAR::const_pointer>(choice.get());
}

inline CustomPictureFormat_pixelAspectInformation::extendedPAR::reference CustomPictureFormat_pixelAspectInformation::ref_extendedPAR ()
{
    assert(currentSelection() ==extendedPAR::id_);
    return *static_cast<extendedPAR::pointer>(choice.get());
}

inline CustomPictureFormat_pixelAspectInformation::extendedPAR::reference CustomPictureFormat_pixelAspectInformation::select_extendedPAR ()
{
    return *static_cast<extendedPAR::pointer>(setSelection(extendedPAR::id_, ASN1::AbstractData::create( &extendedPAR::value_type::theInfo)));
}

inline CustomPictureFormat_pixelAspectInformation::extendedPAR::reference CustomPictureFormat_pixelAspectInformation::select_extendedPAR (CustomPictureFormat_pixelAspectInformation::extendedPAR::const_reference value)
{
    return select_extendedPAR() = value;
}

inline bool CustomPictureFormat_pixelAspectInformation::extendedPAR_isSelected() const
{ 
    return currentSelection() == extendedPAR::id_; 
}

inline CustomPictureFormat_pixelAspectInformation::CustomPictureFormat_pixelAspectInformation(anyPixelAspectRatio::Id id, bool value)
  : Inherited(&theInfo, id, new anyPixelAspectRatio::value_type(value) )
{ }

inline CustomPictureFormat_pixelAspectInformation::CustomPictureFormat_pixelAspectInformation(pixelAspectCode::Id id, pixelAspectCode::const_reference value)
  : Inherited(&theInfo, id, new pixelAspectCode::value_type(value) )
{ }

inline CustomPictureFormat_pixelAspectInformation::CustomPictureFormat_pixelAspectInformation(extendedPAR::Id id, extendedPAR::const_reference value)
  : Inherited(&theInfo, id, new extendedPAR::value_type(value) )
{ }


inline void CustomPictureFormat_pixelAspectInformation::swap(CustomPictureFormat_pixelAspectInformation & other)
{  Inherited::swap(other); }

inline CustomPictureFormat_pixelAspectInformation* CustomPictureFormat_pixelAspectInformation::clone() const
{ return static_cast<CustomPictureFormat_pixelAspectInformation*> (Inherited::clone()); }

inline bool CustomPictureFormat_pixelAspectInformation::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223LogicalChannelParameters_adaptationLayerType::nonStandard::const_reference H223LogicalChannelParameters_adaptationLayerType::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline H223LogicalChannelParameters_adaptationLayerType::nonStandard::reference H223LogicalChannelParameters_adaptationLayerType::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline H223LogicalChannelParameters_adaptationLayerType::nonStandard::reference H223LogicalChannelParameters_adaptationLayerType::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline H223LogicalChannelParameters_adaptationLayerType::nonStandard::reference H223LogicalChannelParameters_adaptationLayerType::select_nonStandard (H223LogicalChannelParameters_adaptationLayerType::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool H223LogicalChannelParameters_adaptationLayerType::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline H223LogicalChannelParameters_adaptationLayerType::al1Framed::reference H223LogicalChannelParameters_adaptationLayerType::select_al1Framed ()
{
    return *static_cast<al1Framed::pointer>(setSelection(al1Framed::id_, ASN1::AbstractData::create( &al1Framed::value_type::theInfo)));
}

inline bool H223LogicalChannelParameters_adaptationLayerType::al1Framed_isSelected() const
{ 
    return currentSelection() == al1Framed::id_; 
}

inline H223LogicalChannelParameters_adaptationLayerType::al1NotFramed::reference H223LogicalChannelParameters_adaptationLayerType::select_al1NotFramed ()
{
    return *static_cast<al1NotFramed::pointer>(setSelection(al1NotFramed::id_, ASN1::AbstractData::create( &al1NotFramed::value_type::theInfo)));
}

inline bool H223LogicalChannelParameters_adaptationLayerType::al1NotFramed_isSelected() const
{ 
    return currentSelection() == al1NotFramed::id_; 
}

inline H223LogicalChannelParameters_adaptationLayerType::al2WithoutSequenceNumbers::reference H223LogicalChannelParameters_adaptationLayerType::select_al2WithoutSequenceNumbers ()
{
    return *static_cast<al2WithoutSequenceNumbers::pointer>(setSelection(al2WithoutSequenceNumbers::id_, ASN1::AbstractData::create( &al2WithoutSequenceNumbers::value_type::theInfo)));
}

inline bool H223LogicalChannelParameters_adaptationLayerType::al2WithoutSequenceNumbers_isSelected() const
{ 
    return currentSelection() == al2WithoutSequenceNumbers::id_; 
}

inline H223LogicalChannelParameters_adaptationLayerType::al2WithSequenceNumbers::reference H223LogicalChannelParameters_adaptationLayerType::select_al2WithSequenceNumbers ()
{
    return *static_cast<al2WithSequenceNumbers::pointer>(setSelection(al2WithSequenceNumbers::id_, ASN1::AbstractData::create( &al2WithSequenceNumbers::value_type::theInfo)));
}

inline bool H223LogicalChannelParameters_adaptationLayerType::al2WithSequenceNumbers_isSelected() const
{ 
    return currentSelection() == al2WithSequenceNumbers::id_; 
}

inline H223LogicalChannelParameters_adaptationLayerType::al3::const_reference H223LogicalChannelParameters_adaptationLayerType::get_al3 () const
{
    assert(currentSelection() ==al3::id_);
    return *static_cast<al3::const_pointer>(choice.get());
}

inline H223LogicalChannelParameters_adaptationLayerType::al3::reference H223LogicalChannelParameters_adaptationLayerType::ref_al3 ()
{
    assert(currentSelection() ==al3::id_);
    return *static_cast<al3::pointer>(choice.get());
}

inline H223LogicalChannelParameters_adaptationLayerType::al3::reference H223LogicalChannelParameters_adaptationLayerType::select_al3 ()
{
    return *static_cast<al3::pointer>(setSelection(al3::id_, ASN1::AbstractData::create( &al3::value_type::theInfo)));
}

inline H223LogicalChannelParameters_adaptationLayerType::al3::reference H223LogicalChannelParameters_adaptationLayerType::select_al3 (H223LogicalChannelParameters_adaptationLayerType::al3::const_reference value)
{
    return select_al3() = value;
}

inline bool H223LogicalChannelParameters_adaptationLayerType::al3_isSelected() const
{ 
    return currentSelection() == al3::id_; 
}

inline H223LogicalChannelParameters_adaptationLayerType::al1M::const_reference H223LogicalChannelParameters_adaptationLayerType::get_al1M () const
{
    assert(currentSelection() ==al1M::id_);
    return *static_cast<al1M::const_pointer>(choice.get());
}

inline H223LogicalChannelParameters_adaptationLayerType::al1M::reference H223LogicalChannelParameters_adaptationLayerType::ref_al1M ()
{
    assert(currentSelection() ==al1M::id_);
    return *static_cast<al1M::pointer>(choice.get());
}

inline H223LogicalChannelParameters_adaptationLayerType::al1M::reference H223LogicalChannelParameters_adaptationLayerType::select_al1M ()
{
    return *static_cast<al1M::pointer>(setSelection(al1M::id_, ASN1::AbstractData::create( &al1M::value_type::theInfo)));
}

inline H223LogicalChannelParameters_adaptationLayerType::al1M::reference H223LogicalChannelParameters_adaptationLayerType::select_al1M (H223LogicalChannelParameters_adaptationLayerType::al1M::const_reference value)
{
    return select_al1M() = value;
}

inline bool H223LogicalChannelParameters_adaptationLayerType::al1M_isSelected() const
{ 
    return currentSelection() == al1M::id_; 
}

inline H223LogicalChannelParameters_adaptationLayerType::al2M::const_reference H223LogicalChannelParameters_adaptationLayerType::get_al2M () const
{
    assert(currentSelection() ==al2M::id_);
    return *static_cast<al2M::const_pointer>(choice.get());
}

inline H223LogicalChannelParameters_adaptationLayerType::al2M::reference H223LogicalChannelParameters_adaptationLayerType::ref_al2M ()
{
    assert(currentSelection() ==al2M::id_);
    return *static_cast<al2M::pointer>(choice.get());
}

inline H223LogicalChannelParameters_adaptationLayerType::al2M::reference H223LogicalChannelParameters_adaptationLayerType::select_al2M ()
{
    return *static_cast<al2M::pointer>(setSelection(al2M::id_, ASN1::AbstractData::create( &al2M::value_type::theInfo)));
}

inline H223LogicalChannelParameters_adaptationLayerType::al2M::reference H223LogicalChannelParameters_adaptationLayerType::select_al2M (H223LogicalChannelParameters_adaptationLayerType::al2M::const_reference value)
{
    return select_al2M() = value;
}

inline bool H223LogicalChannelParameters_adaptationLayerType::al2M_isSelected() const
{ 
    return currentSelection() == al2M::id_; 
}

inline H223LogicalChannelParameters_adaptationLayerType::al3M::const_reference H223LogicalChannelParameters_adaptationLayerType::get_al3M () const
{
    assert(currentSelection() ==al3M::id_);
    return *static_cast<al3M::const_pointer>(choice.get());
}

inline H223LogicalChannelParameters_adaptationLayerType::al3M::reference H223LogicalChannelParameters_adaptationLayerType::ref_al3M ()
{
    assert(currentSelection() ==al3M::id_);
    return *static_cast<al3M::pointer>(choice.get());
}

inline H223LogicalChannelParameters_adaptationLayerType::al3M::reference H223LogicalChannelParameters_adaptationLayerType::select_al3M ()
{
    return *static_cast<al3M::pointer>(setSelection(al3M::id_, ASN1::AbstractData::create( &al3M::value_type::theInfo)));
}

inline H223LogicalChannelParameters_adaptationLayerType::al3M::reference H223LogicalChannelParameters_adaptationLayerType::select_al3M (H223LogicalChannelParameters_adaptationLayerType::al3M::const_reference value)
{
    return select_al3M() = value;
}

inline bool H223LogicalChannelParameters_adaptationLayerType::al3M_isSelected() const
{ 
    return currentSelection() == al3M::id_; 
}

inline H223LogicalChannelParameters_adaptationLayerType::H223LogicalChannelParameters_adaptationLayerType(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline H223LogicalChannelParameters_adaptationLayerType::H223LogicalChannelParameters_adaptationLayerType(al1Framed::Id id, al1Framed::const_reference value)
  : Inherited(&theInfo, id, new al1Framed::value_type(value) )
{ }

inline H223LogicalChannelParameters_adaptationLayerType::H223LogicalChannelParameters_adaptationLayerType(al1NotFramed::Id id, al1NotFramed::const_reference value)
  : Inherited(&theInfo, id, new al1NotFramed::value_type(value) )
{ }

inline H223LogicalChannelParameters_adaptationLayerType::H223LogicalChannelParameters_adaptationLayerType(al2WithoutSequenceNumbers::Id id, al2WithoutSequenceNumbers::const_reference value)
  : Inherited(&theInfo, id, new al2WithoutSequenceNumbers::value_type(value) )
{ }

inline H223LogicalChannelParameters_adaptationLayerType::H223LogicalChannelParameters_adaptationLayerType(al2WithSequenceNumbers::Id id, al2WithSequenceNumbers::const_reference value)
  : Inherited(&theInfo, id, new al2WithSequenceNumbers::value_type(value) )
{ }

inline H223LogicalChannelParameters_adaptationLayerType::H223LogicalChannelParameters_adaptationLayerType(al3::Id id, al3::const_reference value)
  : Inherited(&theInfo, id, new al3::value_type(value) )
{ }

inline H223LogicalChannelParameters_adaptationLayerType::H223LogicalChannelParameters_adaptationLayerType(al1M::Id id, al1M::const_reference value)
  : Inherited(&theInfo, id, new al1M::value_type(value) )
{ }

inline H223LogicalChannelParameters_adaptationLayerType::H223LogicalChannelParameters_adaptationLayerType(al2M::Id id, al2M::const_reference value)
  : Inherited(&theInfo, id, new al2M::value_type(value) )
{ }

inline H223LogicalChannelParameters_adaptationLayerType::H223LogicalChannelParameters_adaptationLayerType(al3M::Id id, al3M::const_reference value)
  : Inherited(&theInfo, id, new al3M::value_type(value) )
{ }


inline void H223LogicalChannelParameters_adaptationLayerType::swap(H223LogicalChannelParameters_adaptationLayerType & other)
{  Inherited::swap(other); }

inline H223LogicalChannelParameters_adaptationLayerType* H223LogicalChannelParameters_adaptationLayerType::clone() const
{ return static_cast<H223LogicalChannelParameters_adaptationLayerType*> (Inherited::clone()); }

inline bool H223LogicalChannelParameters_adaptationLayerType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline V76LogicalChannelParameters_mode::eRM::const_reference V76LogicalChannelParameters_mode::get_eRM () const
{
    assert(currentSelection() ==eRM::id_);
    return *static_cast<eRM::const_pointer>(choice.get());
}

inline V76LogicalChannelParameters_mode::eRM::reference V76LogicalChannelParameters_mode::ref_eRM ()
{
    assert(currentSelection() ==eRM::id_);
    return *static_cast<eRM::pointer>(choice.get());
}

inline V76LogicalChannelParameters_mode::eRM::reference V76LogicalChannelParameters_mode::select_eRM ()
{
    return *static_cast<eRM::pointer>(setSelection(eRM::id_, ASN1::AbstractData::create( &eRM::value_type::theInfo)));
}

inline V76LogicalChannelParameters_mode::eRM::reference V76LogicalChannelParameters_mode::select_eRM (V76LogicalChannelParameters_mode::eRM::const_reference value)
{
    return select_eRM() = value;
}

inline bool V76LogicalChannelParameters_mode::eRM_isSelected() const
{ 
    return currentSelection() == eRM::id_; 
}

inline V76LogicalChannelParameters_mode::uNERM::reference V76LogicalChannelParameters_mode::select_uNERM ()
{
    return *static_cast<uNERM::pointer>(setSelection(uNERM::id_, ASN1::AbstractData::create( &uNERM::value_type::theInfo)));
}

inline bool V76LogicalChannelParameters_mode::uNERM_isSelected() const
{ 
    return currentSelection() == uNERM::id_; 
}

inline V76LogicalChannelParameters_mode::V76LogicalChannelParameters_mode(eRM::Id id, eRM::const_reference value)
  : Inherited(&theInfo, id, new eRM::value_type(value) )
{ }

inline V76LogicalChannelParameters_mode::V76LogicalChannelParameters_mode(uNERM::Id id, uNERM::const_reference value)
  : Inherited(&theInfo, id, new uNERM::value_type(value) )
{ }


inline void V76LogicalChannelParameters_mode::swap(V76LogicalChannelParameters_mode & other)
{  Inherited::swap(other); }

inline V76LogicalChannelParameters_mode* V76LogicalChannelParameters_mode::clone() const
{ return static_cast<V76LogicalChannelParameters_mode*> (Inherited::clone()); }

inline bool V76LogicalChannelParameters_mode::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RTPPayloadType_payloadDescriptor::nonStandardIdentifier::const_reference RTPPayloadType_payloadDescriptor::get_nonStandardIdentifier () const
{
    assert(currentSelection() ==nonStandardIdentifier::id_);
    return *static_cast<nonStandardIdentifier::const_pointer>(choice.get());
}

inline RTPPayloadType_payloadDescriptor::nonStandardIdentifier::reference RTPPayloadType_payloadDescriptor::ref_nonStandardIdentifier ()
{
    assert(currentSelection() ==nonStandardIdentifier::id_);
    return *static_cast<nonStandardIdentifier::pointer>(choice.get());
}

inline RTPPayloadType_payloadDescriptor::nonStandardIdentifier::reference RTPPayloadType_payloadDescriptor::select_nonStandardIdentifier ()
{
    return *static_cast<nonStandardIdentifier::pointer>(setSelection(nonStandardIdentifier::id_, ASN1::AbstractData::create( &nonStandardIdentifier::value_type::theInfo)));
}

inline RTPPayloadType_payloadDescriptor::nonStandardIdentifier::reference RTPPayloadType_payloadDescriptor::select_nonStandardIdentifier (RTPPayloadType_payloadDescriptor::nonStandardIdentifier::const_reference value)
{
    return select_nonStandardIdentifier() = value;
}

inline bool RTPPayloadType_payloadDescriptor::nonStandardIdentifier_isSelected() const
{ 
    return currentSelection() == nonStandardIdentifier::id_; 
}

inline RTPPayloadType_payloadDescriptor::rfc_number::const_reference RTPPayloadType_payloadDescriptor::get_rfc_number () const
{
    assert(currentSelection() ==rfc_number::id_);
    return *static_cast<rfc_number::const_pointer>(choice.get());
}

inline RTPPayloadType_payloadDescriptor::rfc_number::reference RTPPayloadType_payloadDescriptor::ref_rfc_number ()
{
    assert(currentSelection() ==rfc_number::id_);
    return *static_cast<rfc_number::pointer>(choice.get());
}

inline RTPPayloadType_payloadDescriptor::rfc_number::reference RTPPayloadType_payloadDescriptor::select_rfc_number ()
{
    return *static_cast<rfc_number::pointer>(setSelection(rfc_number::id_, ASN1::AbstractData::create( &rfc_number::value_type::theInfo)));
}

inline RTPPayloadType_payloadDescriptor::rfc_number::reference RTPPayloadType_payloadDescriptor::select_rfc_number (RTPPayloadType_payloadDescriptor::rfc_number::value_type::int_type value)
{
    return select_rfc_number() = value;
}

inline bool RTPPayloadType_payloadDescriptor::rfc_number_isSelected() const
{ 
    return currentSelection() == rfc_number::id_; 
}

inline RTPPayloadType_payloadDescriptor::oid::const_reference RTPPayloadType_payloadDescriptor::get_oid () const
{
    assert(currentSelection() ==oid::id_);
    return *static_cast<oid::const_pointer>(choice.get());
}

inline RTPPayloadType_payloadDescriptor::oid::reference RTPPayloadType_payloadDescriptor::ref_oid ()
{
    assert(currentSelection() ==oid::id_);
    return *static_cast<oid::pointer>(choice.get());
}

inline RTPPayloadType_payloadDescriptor::oid::reference RTPPayloadType_payloadDescriptor::select_oid ()
{
    return *static_cast<oid::pointer>(setSelection(oid::id_, ASN1::AbstractData::create( &oid::value_type::theInfo)));
}

inline RTPPayloadType_payloadDescriptor::oid::reference RTPPayloadType_payloadDescriptor::select_oid (RTPPayloadType_payloadDescriptor::oid::const_reference value)
{
    return select_oid() = value;
}

inline bool RTPPayloadType_payloadDescriptor::oid_isSelected() const
{ 
    return currentSelection() == oid::id_; 
}

inline RTPPayloadType_payloadDescriptor::RTPPayloadType_payloadDescriptor(nonStandardIdentifier::Id id, nonStandardIdentifier::const_reference value)
  : Inherited(&theInfo, id, new nonStandardIdentifier::value_type(value) )
{ }

inline RTPPayloadType_payloadDescriptor::RTPPayloadType_payloadDescriptor(rfc_number::Id id, rfc_number::value_type::int_type value)
  : Inherited(&theInfo, id, new rfc_number::value_type(value) )
{ }

inline RTPPayloadType_payloadDescriptor::RTPPayloadType_payloadDescriptor(oid::Id id, oid::const_reference value)
  : Inherited(&theInfo, id, new oid::value_type(value) )
{ }


inline void RTPPayloadType_payloadDescriptor::swap(RTPPayloadType_payloadDescriptor & other)
{  Inherited::swap(other); }

inline RTPPayloadType_payloadDescriptor* RTPPayloadType_payloadDescriptor::clone() const
{ return static_cast<RTPPayloadType_payloadDescriptor*> (Inherited::clone()); }

inline bool RTPPayloadType_payloadDescriptor::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline FECData_rfc2733::protectedPayloadType::const_reference FECData_rfc2733::get_protectedPayloadType () const
{ return *static_cast<protectedPayloadType::const_pointer>(fields[0]);}

inline FECData_rfc2733::protectedPayloadType::reference FECData_rfc2733::ref_protectedPayloadType ()
{ return *static_cast<protectedPayloadType::pointer>(fields[0]);}

inline FECData_rfc2733::protectedPayloadType::reference FECData_rfc2733::set_protectedPayloadType ()
{ return *static_cast<protectedPayloadType::pointer>(fields[0]);}

inline FECData_rfc2733::protectedPayloadType::reference FECData_rfc2733::set_protectedPayloadType (protectedPayloadType::value_type::int_type value)
{ return *static_cast<protectedPayloadType::pointer>(fields[0]) = value ;}

inline FECData_rfc2733::fecScheme::const_reference FECData_rfc2733::get_fecScheme () const
{
  assert(hasOptionalField(e_fecScheme));
  return *static_cast<fecScheme::const_pointer>(fields[1]);
}

inline FECData_rfc2733::fecScheme::reference FECData_rfc2733::ref_fecScheme ()
{
  assert(hasOptionalField(e_fecScheme));
  return *static_cast<fecScheme::pointer>(fields[1]);
}

inline FECData_rfc2733::fecScheme::reference FECData_rfc2733::set_fecScheme ()
{
  includeOptionalField( e_fecScheme, 1);
  return *static_cast<fecScheme::pointer>(fields[1]);
}

inline FECData_rfc2733::fecScheme::reference FECData_rfc2733::set_fecScheme (fecScheme::const_reference value)
{
  includeOptionalField( e_fecScheme, 1);
  return *static_cast<fecScheme::pointer>(fields[1]) = value;
}

inline void FECData_rfc2733::omit_fecScheme ()
{ removeOptionalField( e_fecScheme); }

inline bool FECData_rfc2733::fecScheme_isPresent () const
{ return hasOptionalField( e_fecScheme); }

inline FECData_rfc2733::pktMode::const_reference FECData_rfc2733::get_pktMode () const
{ return *static_cast<pktMode::const_pointer>(fields[2]);}

inline FECData_rfc2733::pktMode::reference FECData_rfc2733::ref_pktMode ()
{ return *static_cast<pktMode::pointer>(fields[2]);}

inline FECData_rfc2733::pktMode::reference FECData_rfc2733::set_pktMode ()
{ return *static_cast<pktMode::pointer>(fields[2]);}

inline FECData_rfc2733::pktMode::reference FECData_rfc2733::set_pktMode (pktMode::const_reference value)
{ return *static_cast<pktMode::pointer>(fields[2]) = value ;}

inline void FECData_rfc2733::swap(FECData_rfc2733& other)
{ Inherited::swap(other); }

inline FECData_rfc2733* FECData_rfc2733::clone() const
{ return static_cast<FECData_rfc2733*> (Inherited::clone()); }

inline H223ModeParameters_adaptationLayerType::nonStandard::const_reference H223ModeParameters_adaptationLayerType::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline H223ModeParameters_adaptationLayerType::nonStandard::reference H223ModeParameters_adaptationLayerType::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline H223ModeParameters_adaptationLayerType::nonStandard::reference H223ModeParameters_adaptationLayerType::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline H223ModeParameters_adaptationLayerType::nonStandard::reference H223ModeParameters_adaptationLayerType::select_nonStandard (H223ModeParameters_adaptationLayerType::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool H223ModeParameters_adaptationLayerType::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline H223ModeParameters_adaptationLayerType::al1Framed::reference H223ModeParameters_adaptationLayerType::select_al1Framed ()
{
    return *static_cast<al1Framed::pointer>(setSelection(al1Framed::id_, ASN1::AbstractData::create( &al1Framed::value_type::theInfo)));
}

inline bool H223ModeParameters_adaptationLayerType::al1Framed_isSelected() const
{ 
    return currentSelection() == al1Framed::id_; 
}

inline H223ModeParameters_adaptationLayerType::al1NotFramed::reference H223ModeParameters_adaptationLayerType::select_al1NotFramed ()
{
    return *static_cast<al1NotFramed::pointer>(setSelection(al1NotFramed::id_, ASN1::AbstractData::create( &al1NotFramed::value_type::theInfo)));
}

inline bool H223ModeParameters_adaptationLayerType::al1NotFramed_isSelected() const
{ 
    return currentSelection() == al1NotFramed::id_; 
}

inline H223ModeParameters_adaptationLayerType::al2WithoutSequenceNumbers::reference H223ModeParameters_adaptationLayerType::select_al2WithoutSequenceNumbers ()
{
    return *static_cast<al2WithoutSequenceNumbers::pointer>(setSelection(al2WithoutSequenceNumbers::id_, ASN1::AbstractData::create( &al2WithoutSequenceNumbers::value_type::theInfo)));
}

inline bool H223ModeParameters_adaptationLayerType::al2WithoutSequenceNumbers_isSelected() const
{ 
    return currentSelection() == al2WithoutSequenceNumbers::id_; 
}

inline H223ModeParameters_adaptationLayerType::al2WithSequenceNumbers::reference H223ModeParameters_adaptationLayerType::select_al2WithSequenceNumbers ()
{
    return *static_cast<al2WithSequenceNumbers::pointer>(setSelection(al2WithSequenceNumbers::id_, ASN1::AbstractData::create( &al2WithSequenceNumbers::value_type::theInfo)));
}

inline bool H223ModeParameters_adaptationLayerType::al2WithSequenceNumbers_isSelected() const
{ 
    return currentSelection() == al2WithSequenceNumbers::id_; 
}

inline H223ModeParameters_adaptationLayerType::al3::const_reference H223ModeParameters_adaptationLayerType::get_al3 () const
{
    assert(currentSelection() ==al3::id_);
    return *static_cast<al3::const_pointer>(choice.get());
}

inline H223ModeParameters_adaptationLayerType::al3::reference H223ModeParameters_adaptationLayerType::ref_al3 ()
{
    assert(currentSelection() ==al3::id_);
    return *static_cast<al3::pointer>(choice.get());
}

inline H223ModeParameters_adaptationLayerType::al3::reference H223ModeParameters_adaptationLayerType::select_al3 ()
{
    return *static_cast<al3::pointer>(setSelection(al3::id_, ASN1::AbstractData::create( &al3::value_type::theInfo)));
}

inline H223ModeParameters_adaptationLayerType::al3::reference H223ModeParameters_adaptationLayerType::select_al3 (H223ModeParameters_adaptationLayerType::al3::const_reference value)
{
    return select_al3() = value;
}

inline bool H223ModeParameters_adaptationLayerType::al3_isSelected() const
{ 
    return currentSelection() == al3::id_; 
}

inline H223ModeParameters_adaptationLayerType::al1M::const_reference H223ModeParameters_adaptationLayerType::get_al1M () const
{
    assert(currentSelection() ==al1M::id_);
    return *static_cast<al1M::const_pointer>(choice.get());
}

inline H223ModeParameters_adaptationLayerType::al1M::reference H223ModeParameters_adaptationLayerType::ref_al1M ()
{
    assert(currentSelection() ==al1M::id_);
    return *static_cast<al1M::pointer>(choice.get());
}

inline H223ModeParameters_adaptationLayerType::al1M::reference H223ModeParameters_adaptationLayerType::select_al1M ()
{
    return *static_cast<al1M::pointer>(setSelection(al1M::id_, ASN1::AbstractData::create( &al1M::value_type::theInfo)));
}

inline H223ModeParameters_adaptationLayerType::al1M::reference H223ModeParameters_adaptationLayerType::select_al1M (H223ModeParameters_adaptationLayerType::al1M::const_reference value)
{
    return select_al1M() = value;
}

inline bool H223ModeParameters_adaptationLayerType::al1M_isSelected() const
{ 
    return currentSelection() == al1M::id_; 
}

inline H223ModeParameters_adaptationLayerType::al2M::const_reference H223ModeParameters_adaptationLayerType::get_al2M () const
{
    assert(currentSelection() ==al2M::id_);
    return *static_cast<al2M::const_pointer>(choice.get());
}

inline H223ModeParameters_adaptationLayerType::al2M::reference H223ModeParameters_adaptationLayerType::ref_al2M ()
{
    assert(currentSelection() ==al2M::id_);
    return *static_cast<al2M::pointer>(choice.get());
}

inline H223ModeParameters_adaptationLayerType::al2M::reference H223ModeParameters_adaptationLayerType::select_al2M ()
{
    return *static_cast<al2M::pointer>(setSelection(al2M::id_, ASN1::AbstractData::create( &al2M::value_type::theInfo)));
}

inline H223ModeParameters_adaptationLayerType::al2M::reference H223ModeParameters_adaptationLayerType::select_al2M (H223ModeParameters_adaptationLayerType::al2M::const_reference value)
{
    return select_al2M() = value;
}

inline bool H223ModeParameters_adaptationLayerType::al2M_isSelected() const
{ 
    return currentSelection() == al2M::id_; 
}

inline H223ModeParameters_adaptationLayerType::al3M::const_reference H223ModeParameters_adaptationLayerType::get_al3M () const
{
    assert(currentSelection() ==al3M::id_);
    return *static_cast<al3M::const_pointer>(choice.get());
}

inline H223ModeParameters_adaptationLayerType::al3M::reference H223ModeParameters_adaptationLayerType::ref_al3M ()
{
    assert(currentSelection() ==al3M::id_);
    return *static_cast<al3M::pointer>(choice.get());
}

inline H223ModeParameters_adaptationLayerType::al3M::reference H223ModeParameters_adaptationLayerType::select_al3M ()
{
    return *static_cast<al3M::pointer>(setSelection(al3M::id_, ASN1::AbstractData::create( &al3M::value_type::theInfo)));
}

inline H223ModeParameters_adaptationLayerType::al3M::reference H223ModeParameters_adaptationLayerType::select_al3M (H223ModeParameters_adaptationLayerType::al3M::const_reference value)
{
    return select_al3M() = value;
}

inline bool H223ModeParameters_adaptationLayerType::al3M_isSelected() const
{ 
    return currentSelection() == al3M::id_; 
}

inline H223ModeParameters_adaptationLayerType::H223ModeParameters_adaptationLayerType(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline H223ModeParameters_adaptationLayerType::H223ModeParameters_adaptationLayerType(al1Framed::Id id, al1Framed::const_reference value)
  : Inherited(&theInfo, id, new al1Framed::value_type(value) )
{ }

inline H223ModeParameters_adaptationLayerType::H223ModeParameters_adaptationLayerType(al1NotFramed::Id id, al1NotFramed::const_reference value)
  : Inherited(&theInfo, id, new al1NotFramed::value_type(value) )
{ }

inline H223ModeParameters_adaptationLayerType::H223ModeParameters_adaptationLayerType(al2WithoutSequenceNumbers::Id id, al2WithoutSequenceNumbers::const_reference value)
  : Inherited(&theInfo, id, new al2WithoutSequenceNumbers::value_type(value) )
{ }

inline H223ModeParameters_adaptationLayerType::H223ModeParameters_adaptationLayerType(al2WithSequenceNumbers::Id id, al2WithSequenceNumbers::const_reference value)
  : Inherited(&theInfo, id, new al2WithSequenceNumbers::value_type(value) )
{ }

inline H223ModeParameters_adaptationLayerType::H223ModeParameters_adaptationLayerType(al3::Id id, al3::const_reference value)
  : Inherited(&theInfo, id, new al3::value_type(value) )
{ }

inline H223ModeParameters_adaptationLayerType::H223ModeParameters_adaptationLayerType(al1M::Id id, al1M::const_reference value)
  : Inherited(&theInfo, id, new al1M::value_type(value) )
{ }

inline H223ModeParameters_adaptationLayerType::H223ModeParameters_adaptationLayerType(al2M::Id id, al2M::const_reference value)
  : Inherited(&theInfo, id, new al2M::value_type(value) )
{ }

inline H223ModeParameters_adaptationLayerType::H223ModeParameters_adaptationLayerType(al3M::Id id, al3M::const_reference value)
  : Inherited(&theInfo, id, new al3M::value_type(value) )
{ }


inline void H223ModeParameters_adaptationLayerType::swap(H223ModeParameters_adaptationLayerType & other)
{  Inherited::swap(other); }

inline H223ModeParameters_adaptationLayerType* H223ModeParameters_adaptationLayerType::clone() const
{ return static_cast<H223ModeParameters_adaptationLayerType*> (Inherited::clone()); }

inline bool H223ModeParameters_adaptationLayerType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MultilinkResponse_addConnection::sequenceNumber::const_reference MultilinkResponse_addConnection::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline MultilinkResponse_addConnection::sequenceNumber::reference MultilinkResponse_addConnection::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline MultilinkResponse_addConnection::sequenceNumber::reference MultilinkResponse_addConnection::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline MultilinkResponse_addConnection::sequenceNumber::reference MultilinkResponse_addConnection::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline MultilinkResponse_addConnection::responseCode::const_reference MultilinkResponse_addConnection::get_responseCode () const
{ return *static_cast<responseCode::const_pointer>(fields[1]);}

inline MultilinkResponse_addConnection::responseCode::reference MultilinkResponse_addConnection::ref_responseCode ()
{ return *static_cast<responseCode::pointer>(fields[1]);}

inline MultilinkResponse_addConnection::responseCode::reference MultilinkResponse_addConnection::set_responseCode ()
{ return *static_cast<responseCode::pointer>(fields[1]);}

inline MultilinkResponse_addConnection::responseCode::reference MultilinkResponse_addConnection::set_responseCode (responseCode::const_reference value)
{ return *static_cast<responseCode::pointer>(fields[1]) = value ;}

inline void MultilinkResponse_addConnection::swap(MultilinkResponse_addConnection& other)
{ Inherited::swap(other); }

inline MultilinkResponse_addConnection* MultilinkResponse_addConnection::clone() const
{ return static_cast<MultilinkResponse_addConnection*> (Inherited::clone()); }

inline EncryptionCommand_encryptionAlgorithmID::h233AlgorithmIdentifier::const_reference EncryptionCommand_encryptionAlgorithmID::get_h233AlgorithmIdentifier () const
{ return *static_cast<h233AlgorithmIdentifier::const_pointer>(fields[0]);}

inline EncryptionCommand_encryptionAlgorithmID::h233AlgorithmIdentifier::reference EncryptionCommand_encryptionAlgorithmID::ref_h233AlgorithmIdentifier ()
{ return *static_cast<h233AlgorithmIdentifier::pointer>(fields[0]);}

inline EncryptionCommand_encryptionAlgorithmID::h233AlgorithmIdentifier::reference EncryptionCommand_encryptionAlgorithmID::set_h233AlgorithmIdentifier ()
{ return *static_cast<h233AlgorithmIdentifier::pointer>(fields[0]);}

inline EncryptionCommand_encryptionAlgorithmID::h233AlgorithmIdentifier::reference EncryptionCommand_encryptionAlgorithmID::set_h233AlgorithmIdentifier (h233AlgorithmIdentifier::value_type::int_type value)
{ return *static_cast<h233AlgorithmIdentifier::pointer>(fields[0]) = value ;}

inline EncryptionCommand_encryptionAlgorithmID::associatedAlgorithm::const_reference EncryptionCommand_encryptionAlgorithmID::get_associatedAlgorithm () const
{ return *static_cast<associatedAlgorithm::const_pointer>(fields[1]);}

inline EncryptionCommand_encryptionAlgorithmID::associatedAlgorithm::reference EncryptionCommand_encryptionAlgorithmID::ref_associatedAlgorithm ()
{ return *static_cast<associatedAlgorithm::pointer>(fields[1]);}

inline EncryptionCommand_encryptionAlgorithmID::associatedAlgorithm::reference EncryptionCommand_encryptionAlgorithmID::set_associatedAlgorithm ()
{ return *static_cast<associatedAlgorithm::pointer>(fields[1]);}

inline EncryptionCommand_encryptionAlgorithmID::associatedAlgorithm::reference EncryptionCommand_encryptionAlgorithmID::set_associatedAlgorithm (associatedAlgorithm::const_reference value)
{ return *static_cast<associatedAlgorithm::pointer>(fields[1]) = value ;}

inline void EncryptionCommand_encryptionAlgorithmID::swap(EncryptionCommand_encryptionAlgorithmID& other)
{ Inherited::swap(other); }

inline EncryptionCommand_encryptionAlgorithmID* EncryptionCommand_encryptionAlgorithmID::clone() const
{ return static_cast<EncryptionCommand_encryptionAlgorithmID*> (Inherited::clone()); }

inline NewATMVCCommand_aal::aal1::const_reference NewATMVCCommand_aal::get_aal1 () const
{
    assert(currentSelection() ==aal1::id_);
    return *static_cast<aal1::const_pointer>(choice.get());
}

inline NewATMVCCommand_aal::aal1::reference NewATMVCCommand_aal::ref_aal1 ()
{
    assert(currentSelection() ==aal1::id_);
    return *static_cast<aal1::pointer>(choice.get());
}

inline NewATMVCCommand_aal::aal1::reference NewATMVCCommand_aal::select_aal1 ()
{
    return *static_cast<aal1::pointer>(setSelection(aal1::id_, ASN1::AbstractData::create( &aal1::value_type::theInfo)));
}

inline NewATMVCCommand_aal::aal1::reference NewATMVCCommand_aal::select_aal1 (NewATMVCCommand_aal::aal1::const_reference value)
{
    return select_aal1() = value;
}

inline bool NewATMVCCommand_aal::aal1_isSelected() const
{ 
    return currentSelection() == aal1::id_; 
}

inline NewATMVCCommand_aal::aal5::const_reference NewATMVCCommand_aal::get_aal5 () const
{
    assert(currentSelection() ==aal5::id_);
    return *static_cast<aal5::const_pointer>(choice.get());
}

inline NewATMVCCommand_aal::aal5::reference NewATMVCCommand_aal::ref_aal5 ()
{
    assert(currentSelection() ==aal5::id_);
    return *static_cast<aal5::pointer>(choice.get());
}

inline NewATMVCCommand_aal::aal5::reference NewATMVCCommand_aal::select_aal5 ()
{
    return *static_cast<aal5::pointer>(setSelection(aal5::id_, ASN1::AbstractData::create( &aal5::value_type::theInfo)));
}

inline NewATMVCCommand_aal::aal5::reference NewATMVCCommand_aal::select_aal5 (NewATMVCCommand_aal::aal5::const_reference value)
{
    return select_aal5() = value;
}

inline bool NewATMVCCommand_aal::aal5_isSelected() const
{ 
    return currentSelection() == aal5::id_; 
}

inline NewATMVCCommand_aal::NewATMVCCommand_aal(aal1::Id id, aal1::const_reference value)
  : Inherited(&theInfo, id, new aal1::value_type(value) )
{ }

inline NewATMVCCommand_aal::NewATMVCCommand_aal(aal5::Id id, aal5::const_reference value)
  : Inherited(&theInfo, id, new aal5::value_type(value) )
{ }


inline void NewATMVCCommand_aal::swap(NewATMVCCommand_aal & other)
{  Inherited::swap(other); }

inline NewATMVCCommand_aal* NewATMVCCommand_aal::clone() const
{ return static_cast<NewATMVCCommand_aal*> (Inherited::clone()); }

inline bool NewATMVCCommand_aal::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MiscellaneousIndication_type::logicalChannelActive::reference MiscellaneousIndication_type::select_logicalChannelActive ()
{
    return *static_cast<logicalChannelActive::pointer>(setSelection(logicalChannelActive::id_, ASN1::AbstractData::create( &logicalChannelActive::value_type::theInfo)));
}

inline bool MiscellaneousIndication_type::logicalChannelActive_isSelected() const
{ 
    return currentSelection() == logicalChannelActive::id_; 
}

inline MiscellaneousIndication_type::logicalChannelInactive::reference MiscellaneousIndication_type::select_logicalChannelInactive ()
{
    return *static_cast<logicalChannelInactive::pointer>(setSelection(logicalChannelInactive::id_, ASN1::AbstractData::create( &logicalChannelInactive::value_type::theInfo)));
}

inline bool MiscellaneousIndication_type::logicalChannelInactive_isSelected() const
{ 
    return currentSelection() == logicalChannelInactive::id_; 
}

inline MiscellaneousIndication_type::multipointConference::reference MiscellaneousIndication_type::select_multipointConference ()
{
    return *static_cast<multipointConference::pointer>(setSelection(multipointConference::id_, ASN1::AbstractData::create( &multipointConference::value_type::theInfo)));
}

inline bool MiscellaneousIndication_type::multipointConference_isSelected() const
{ 
    return currentSelection() == multipointConference::id_; 
}

inline MiscellaneousIndication_type::cancelMultipointConference::reference MiscellaneousIndication_type::select_cancelMultipointConference ()
{
    return *static_cast<cancelMultipointConference::pointer>(setSelection(cancelMultipointConference::id_, ASN1::AbstractData::create( &cancelMultipointConference::value_type::theInfo)));
}

inline bool MiscellaneousIndication_type::cancelMultipointConference_isSelected() const
{ 
    return currentSelection() == cancelMultipointConference::id_; 
}

inline MiscellaneousIndication_type::multipointZeroComm::reference MiscellaneousIndication_type::select_multipointZeroComm ()
{
    return *static_cast<multipointZeroComm::pointer>(setSelection(multipointZeroComm::id_, ASN1::AbstractData::create( &multipointZeroComm::value_type::theInfo)));
}

inline bool MiscellaneousIndication_type::multipointZeroComm_isSelected() const
{ 
    return currentSelection() == multipointZeroComm::id_; 
}

inline MiscellaneousIndication_type::cancelMultipointZeroComm::reference MiscellaneousIndication_type::select_cancelMultipointZeroComm ()
{
    return *static_cast<cancelMultipointZeroComm::pointer>(setSelection(cancelMultipointZeroComm::id_, ASN1::AbstractData::create( &cancelMultipointZeroComm::value_type::theInfo)));
}

inline bool MiscellaneousIndication_type::cancelMultipointZeroComm_isSelected() const
{ 
    return currentSelection() == cancelMultipointZeroComm::id_; 
}

inline MiscellaneousIndication_type::multipointSecondaryStatus::reference MiscellaneousIndication_type::select_multipointSecondaryStatus ()
{
    return *static_cast<multipointSecondaryStatus::pointer>(setSelection(multipointSecondaryStatus::id_, ASN1::AbstractData::create( &multipointSecondaryStatus::value_type::theInfo)));
}

inline bool MiscellaneousIndication_type::multipointSecondaryStatus_isSelected() const
{ 
    return currentSelection() == multipointSecondaryStatus::id_; 
}

inline MiscellaneousIndication_type::cancelMultipointSecondaryStatus::reference MiscellaneousIndication_type::select_cancelMultipointSecondaryStatus ()
{
    return *static_cast<cancelMultipointSecondaryStatus::pointer>(setSelection(cancelMultipointSecondaryStatus::id_, ASN1::AbstractData::create( &cancelMultipointSecondaryStatus::value_type::theInfo)));
}

inline bool MiscellaneousIndication_type::cancelMultipointSecondaryStatus_isSelected() const
{ 
    return currentSelection() == cancelMultipointSecondaryStatus::id_; 
}

inline MiscellaneousIndication_type::videoIndicateReadyToActivate::reference MiscellaneousIndication_type::select_videoIndicateReadyToActivate ()
{
    return *static_cast<videoIndicateReadyToActivate::pointer>(setSelection(videoIndicateReadyToActivate::id_, ASN1::AbstractData::create( &videoIndicateReadyToActivate::value_type::theInfo)));
}

inline bool MiscellaneousIndication_type::videoIndicateReadyToActivate_isSelected() const
{ 
    return currentSelection() == videoIndicateReadyToActivate::id_; 
}

inline MiscellaneousIndication_type::videoTemporalSpatialTradeOff::const_reference MiscellaneousIndication_type::get_videoTemporalSpatialTradeOff () const
{
    assert(currentSelection() ==videoTemporalSpatialTradeOff::id_);
    return *static_cast<videoTemporalSpatialTradeOff::const_pointer>(choice.get());
}

inline MiscellaneousIndication_type::videoTemporalSpatialTradeOff::reference MiscellaneousIndication_type::ref_videoTemporalSpatialTradeOff ()
{
    assert(currentSelection() ==videoTemporalSpatialTradeOff::id_);
    return *static_cast<videoTemporalSpatialTradeOff::pointer>(choice.get());
}

inline MiscellaneousIndication_type::videoTemporalSpatialTradeOff::reference MiscellaneousIndication_type::select_videoTemporalSpatialTradeOff ()
{
    return *static_cast<videoTemporalSpatialTradeOff::pointer>(setSelection(videoTemporalSpatialTradeOff::id_, ASN1::AbstractData::create( &videoTemporalSpatialTradeOff::value_type::theInfo)));
}

inline MiscellaneousIndication_type::videoTemporalSpatialTradeOff::reference MiscellaneousIndication_type::select_videoTemporalSpatialTradeOff (MiscellaneousIndication_type::videoTemporalSpatialTradeOff::value_type::int_type value)
{
    return select_videoTemporalSpatialTradeOff() = value;
}

inline bool MiscellaneousIndication_type::videoTemporalSpatialTradeOff_isSelected() const
{ 
    return currentSelection() == videoTemporalSpatialTradeOff::id_; 
}

inline MiscellaneousIndication_type::videoNotDecodedMBs::const_reference MiscellaneousIndication_type::get_videoNotDecodedMBs () const
{
    assert(currentSelection() ==videoNotDecodedMBs::id_);
    return *static_cast<videoNotDecodedMBs::const_pointer>(choice.get());
}

inline MiscellaneousIndication_type::videoNotDecodedMBs::reference MiscellaneousIndication_type::ref_videoNotDecodedMBs ()
{
    assert(currentSelection() ==videoNotDecodedMBs::id_);
    return *static_cast<videoNotDecodedMBs::pointer>(choice.get());
}

inline MiscellaneousIndication_type::videoNotDecodedMBs::reference MiscellaneousIndication_type::select_videoNotDecodedMBs ()
{
    return *static_cast<videoNotDecodedMBs::pointer>(setSelection(videoNotDecodedMBs::id_, ASN1::AbstractData::create( &videoNotDecodedMBs::value_type::theInfo)));
}

inline MiscellaneousIndication_type::videoNotDecodedMBs::reference MiscellaneousIndication_type::select_videoNotDecodedMBs (MiscellaneousIndication_type::videoNotDecodedMBs::const_reference value)
{
    return select_videoNotDecodedMBs() = value;
}

inline bool MiscellaneousIndication_type::videoNotDecodedMBs_isSelected() const
{ 
    return currentSelection() == videoNotDecodedMBs::id_; 
}

inline MiscellaneousIndication_type::transportCapability::const_reference MiscellaneousIndication_type::get_transportCapability () const
{
    assert(currentSelection() ==transportCapability::id_);
    return *static_cast<transportCapability::const_pointer>(choice.get());
}

inline MiscellaneousIndication_type::transportCapability::reference MiscellaneousIndication_type::ref_transportCapability ()
{
    assert(currentSelection() ==transportCapability::id_);
    return *static_cast<transportCapability::pointer>(choice.get());
}

inline MiscellaneousIndication_type::transportCapability::reference MiscellaneousIndication_type::select_transportCapability ()
{
    return *static_cast<transportCapability::pointer>(setSelection(transportCapability::id_, ASN1::AbstractData::create( &transportCapability::value_type::theInfo)));
}

inline MiscellaneousIndication_type::transportCapability::reference MiscellaneousIndication_type::select_transportCapability (MiscellaneousIndication_type::transportCapability::const_reference value)
{
    return select_transportCapability() = value;
}

inline bool MiscellaneousIndication_type::transportCapability_isSelected() const
{ 
    return currentSelection() == transportCapability::id_; 
}

inline MiscellaneousIndication_type::MiscellaneousIndication_type(logicalChannelActive::Id id, logicalChannelActive::const_reference value)
  : Inherited(&theInfo, id, new logicalChannelActive::value_type(value) )
{ }

inline MiscellaneousIndication_type::MiscellaneousIndication_type(logicalChannelInactive::Id id, logicalChannelInactive::const_reference value)
  : Inherited(&theInfo, id, new logicalChannelInactive::value_type(value) )
{ }

inline MiscellaneousIndication_type::MiscellaneousIndication_type(multipointConference::Id id, multipointConference::const_reference value)
  : Inherited(&theInfo, id, new multipointConference::value_type(value) )
{ }

inline MiscellaneousIndication_type::MiscellaneousIndication_type(cancelMultipointConference::Id id, cancelMultipointConference::const_reference value)
  : Inherited(&theInfo, id, new cancelMultipointConference::value_type(value) )
{ }

inline MiscellaneousIndication_type::MiscellaneousIndication_type(multipointZeroComm::Id id, multipointZeroComm::const_reference value)
  : Inherited(&theInfo, id, new multipointZeroComm::value_type(value) )
{ }

inline MiscellaneousIndication_type::MiscellaneousIndication_type(cancelMultipointZeroComm::Id id, cancelMultipointZeroComm::const_reference value)
  : Inherited(&theInfo, id, new cancelMultipointZeroComm::value_type(value) )
{ }

inline MiscellaneousIndication_type::MiscellaneousIndication_type(multipointSecondaryStatus::Id id, multipointSecondaryStatus::const_reference value)
  : Inherited(&theInfo, id, new multipointSecondaryStatus::value_type(value) )
{ }

inline MiscellaneousIndication_type::MiscellaneousIndication_type(cancelMultipointSecondaryStatus::Id id, cancelMultipointSecondaryStatus::const_reference value)
  : Inherited(&theInfo, id, new cancelMultipointSecondaryStatus::value_type(value) )
{ }

inline MiscellaneousIndication_type::MiscellaneousIndication_type(videoIndicateReadyToActivate::Id id, videoIndicateReadyToActivate::const_reference value)
  : Inherited(&theInfo, id, new videoIndicateReadyToActivate::value_type(value) )
{ }

inline MiscellaneousIndication_type::MiscellaneousIndication_type(videoTemporalSpatialTradeOff::Id id, videoTemporalSpatialTradeOff::value_type::int_type value)
  : Inherited(&theInfo, id, new videoTemporalSpatialTradeOff::value_type(value) )
{ }

inline MiscellaneousIndication_type::MiscellaneousIndication_type(videoNotDecodedMBs::Id id, videoNotDecodedMBs::const_reference value)
  : Inherited(&theInfo, id, new videoNotDecodedMBs::value_type(value) )
{ }

inline MiscellaneousIndication_type::MiscellaneousIndication_type(transportCapability::Id id, transportCapability::const_reference value)
  : Inherited(&theInfo, id, new transportCapability::value_type(value) )
{ }


inline void MiscellaneousIndication_type::swap(MiscellaneousIndication_type & other)
{  Inherited::swap(other); }

inline MiscellaneousIndication_type* MiscellaneousIndication_type::clone() const
{ return static_cast<MiscellaneousIndication_type*> (Inherited::clone()); }

inline bool MiscellaneousIndication_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NewATMVCIndication_aal::aal1::const_reference NewATMVCIndication_aal::get_aal1 () const
{
    assert(currentSelection() ==aal1::id_);
    return *static_cast<aal1::const_pointer>(choice.get());
}

inline NewATMVCIndication_aal::aal1::reference NewATMVCIndication_aal::ref_aal1 ()
{
    assert(currentSelection() ==aal1::id_);
    return *static_cast<aal1::pointer>(choice.get());
}

inline NewATMVCIndication_aal::aal1::reference NewATMVCIndication_aal::select_aal1 ()
{
    return *static_cast<aal1::pointer>(setSelection(aal1::id_, ASN1::AbstractData::create( &aal1::value_type::theInfo)));
}

inline NewATMVCIndication_aal::aal1::reference NewATMVCIndication_aal::select_aal1 (NewATMVCIndication_aal::aal1::const_reference value)
{
    return select_aal1() = value;
}

inline bool NewATMVCIndication_aal::aal1_isSelected() const
{ 
    return currentSelection() == aal1::id_; 
}

inline NewATMVCIndication_aal::aal5::const_reference NewATMVCIndication_aal::get_aal5 () const
{
    assert(currentSelection() ==aal5::id_);
    return *static_cast<aal5::const_pointer>(choice.get());
}

inline NewATMVCIndication_aal::aal5::reference NewATMVCIndication_aal::ref_aal5 ()
{
    assert(currentSelection() ==aal5::id_);
    return *static_cast<aal5::pointer>(choice.get());
}

inline NewATMVCIndication_aal::aal5::reference NewATMVCIndication_aal::select_aal5 ()
{
    return *static_cast<aal5::pointer>(setSelection(aal5::id_, ASN1::AbstractData::create( &aal5::value_type::theInfo)));
}

inline NewATMVCIndication_aal::aal5::reference NewATMVCIndication_aal::select_aal5 (NewATMVCIndication_aal::aal5::const_reference value)
{
    return select_aal5() = value;
}

inline bool NewATMVCIndication_aal::aal5_isSelected() const
{ 
    return currentSelection() == aal5::id_; 
}

inline NewATMVCIndication_aal::NewATMVCIndication_aal(aal1::Id id, aal1::const_reference value)
  : Inherited(&theInfo, id, new aal1::value_type(value) )
{ }

inline NewATMVCIndication_aal::NewATMVCIndication_aal(aal5::Id id, aal5::const_reference value)
  : Inherited(&theInfo, id, new aal5::value_type(value) )
{ }


inline void NewATMVCIndication_aal::swap(NewATMVCIndication_aal & other)
{  Inherited::swap(other); }

inline NewATMVCIndication_aal* NewATMVCIndication_aal::clone() const
{ return static_cast<NewATMVCIndication_aal*> (Inherited::clone()); }

inline bool NewATMVCIndication_aal::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline UserInputIndication_userInputSupportIndication::nonStandard::const_reference UserInputIndication_userInputSupportIndication::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline UserInputIndication_userInputSupportIndication::nonStandard::reference UserInputIndication_userInputSupportIndication::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline UserInputIndication_userInputSupportIndication::nonStandard::reference UserInputIndication_userInputSupportIndication::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline UserInputIndication_userInputSupportIndication::nonStandard::reference UserInputIndication_userInputSupportIndication::select_nonStandard (UserInputIndication_userInputSupportIndication::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool UserInputIndication_userInputSupportIndication::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline UserInputIndication_userInputSupportIndication::basicString::reference UserInputIndication_userInputSupportIndication::select_basicString ()
{
    return *static_cast<basicString::pointer>(setSelection(basicString::id_, ASN1::AbstractData::create( &basicString::value_type::theInfo)));
}

inline bool UserInputIndication_userInputSupportIndication::basicString_isSelected() const
{ 
    return currentSelection() == basicString::id_; 
}

inline UserInputIndication_userInputSupportIndication::iA5String::reference UserInputIndication_userInputSupportIndication::select_iA5String ()
{
    return *static_cast<iA5String::pointer>(setSelection(iA5String::id_, ASN1::AbstractData::create( &iA5String::value_type::theInfo)));
}

inline bool UserInputIndication_userInputSupportIndication::iA5String_isSelected() const
{ 
    return currentSelection() == iA5String::id_; 
}

inline UserInputIndication_userInputSupportIndication::generalString::reference UserInputIndication_userInputSupportIndication::select_generalString ()
{
    return *static_cast<generalString::pointer>(setSelection(generalString::id_, ASN1::AbstractData::create( &generalString::value_type::theInfo)));
}

inline bool UserInputIndication_userInputSupportIndication::generalString_isSelected() const
{ 
    return currentSelection() == generalString::id_; 
}

inline UserInputIndication_userInputSupportIndication::encryptedBasicString::reference UserInputIndication_userInputSupportIndication::select_encryptedBasicString ()
{
    return *static_cast<encryptedBasicString::pointer>(setSelection(encryptedBasicString::id_, ASN1::AbstractData::create( &encryptedBasicString::value_type::theInfo)));
}

inline bool UserInputIndication_userInputSupportIndication::encryptedBasicString_isSelected() const
{ 
    return currentSelection() == encryptedBasicString::id_; 
}

inline UserInputIndication_userInputSupportIndication::encryptedIA5String::reference UserInputIndication_userInputSupportIndication::select_encryptedIA5String ()
{
    return *static_cast<encryptedIA5String::pointer>(setSelection(encryptedIA5String::id_, ASN1::AbstractData::create( &encryptedIA5String::value_type::theInfo)));
}

inline bool UserInputIndication_userInputSupportIndication::encryptedIA5String_isSelected() const
{ 
    return currentSelection() == encryptedIA5String::id_; 
}

inline UserInputIndication_userInputSupportIndication::encryptedGeneralString::reference UserInputIndication_userInputSupportIndication::select_encryptedGeneralString ()
{
    return *static_cast<encryptedGeneralString::pointer>(setSelection(encryptedGeneralString::id_, ASN1::AbstractData::create( &encryptedGeneralString::value_type::theInfo)));
}

inline bool UserInputIndication_userInputSupportIndication::encryptedGeneralString_isSelected() const
{ 
    return currentSelection() == encryptedGeneralString::id_; 
}

inline UserInputIndication_userInputSupportIndication::UserInputIndication_userInputSupportIndication(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline UserInputIndication_userInputSupportIndication::UserInputIndication_userInputSupportIndication(basicString::Id id, basicString::const_reference value)
  : Inherited(&theInfo, id, new basicString::value_type(value) )
{ }

inline UserInputIndication_userInputSupportIndication::UserInputIndication_userInputSupportIndication(iA5String::Id id, iA5String::const_reference value)
  : Inherited(&theInfo, id, new iA5String::value_type(value) )
{ }

inline UserInputIndication_userInputSupportIndication::UserInputIndication_userInputSupportIndication(generalString::Id id, generalString::const_reference value)
  : Inherited(&theInfo, id, new generalString::value_type(value) )
{ }

inline UserInputIndication_userInputSupportIndication::UserInputIndication_userInputSupportIndication(encryptedBasicString::Id id, encryptedBasicString::const_reference value)
  : Inherited(&theInfo, id, new encryptedBasicString::value_type(value) )
{ }

inline UserInputIndication_userInputSupportIndication::UserInputIndication_userInputSupportIndication(encryptedIA5String::Id id, encryptedIA5String::const_reference value)
  : Inherited(&theInfo, id, new encryptedIA5String::value_type(value) )
{ }

inline UserInputIndication_userInputSupportIndication::UserInputIndication_userInputSupportIndication(encryptedGeneralString::Id id, encryptedGeneralString::const_reference value)
  : Inherited(&theInfo, id, new encryptedGeneralString::value_type(value) )
{ }


inline void UserInputIndication_userInputSupportIndication::swap(UserInputIndication_userInputSupportIndication & other)
{  Inherited::swap(other); }

inline UserInputIndication_userInputSupportIndication* UserInputIndication_userInputSupportIndication::clone() const
{ return static_cast<UserInputIndication_userInputSupportIndication*> (Inherited::clone()); }

inline bool UserInputIndication_userInputSupportIndication::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DataApplicationCapability_application_t84::t84Protocol::const_reference DataApplicationCapability_application_t84::get_t84Protocol () const
{ return *static_cast<t84Protocol::const_pointer>(fields[0]);}

inline DataApplicationCapability_application_t84::t84Protocol::reference DataApplicationCapability_application_t84::ref_t84Protocol ()
{ return *static_cast<t84Protocol::pointer>(fields[0]);}

inline DataApplicationCapability_application_t84::t84Protocol::reference DataApplicationCapability_application_t84::set_t84Protocol ()
{ return *static_cast<t84Protocol::pointer>(fields[0]);}

inline DataApplicationCapability_application_t84::t84Protocol::reference DataApplicationCapability_application_t84::set_t84Protocol (t84Protocol::const_reference value)
{ return *static_cast<t84Protocol::pointer>(fields[0]) = value ;}

inline DataApplicationCapability_application_t84::t84Profile::const_reference DataApplicationCapability_application_t84::get_t84Profile () const
{ return *static_cast<t84Profile::const_pointer>(fields[1]);}

inline DataApplicationCapability_application_t84::t84Profile::reference DataApplicationCapability_application_t84::ref_t84Profile ()
{ return *static_cast<t84Profile::pointer>(fields[1]);}

inline DataApplicationCapability_application_t84::t84Profile::reference DataApplicationCapability_application_t84::set_t84Profile ()
{ return *static_cast<t84Profile::pointer>(fields[1]);}

inline DataApplicationCapability_application_t84::t84Profile::reference DataApplicationCapability_application_t84::set_t84Profile (t84Profile::const_reference value)
{ return *static_cast<t84Profile::pointer>(fields[1]) = value ;}

inline void DataApplicationCapability_application_t84::swap(DataApplicationCapability_application_t84& other)
{ Inherited::swap(other); }

inline DataApplicationCapability_application_t84* DataApplicationCapability_application_t84::clone() const
{ return static_cast<DataApplicationCapability_application_t84*> (Inherited::clone()); }

inline DataApplicationCapability_application_nlpid::nlpidProtocol::const_reference DataApplicationCapability_application_nlpid::get_nlpidProtocol () const
{ return *static_cast<nlpidProtocol::const_pointer>(fields[0]);}

inline DataApplicationCapability_application_nlpid::nlpidProtocol::reference DataApplicationCapability_application_nlpid::ref_nlpidProtocol ()
{ return *static_cast<nlpidProtocol::pointer>(fields[0]);}

inline DataApplicationCapability_application_nlpid::nlpidProtocol::reference DataApplicationCapability_application_nlpid::set_nlpidProtocol ()
{ return *static_cast<nlpidProtocol::pointer>(fields[0]);}

inline DataApplicationCapability_application_nlpid::nlpidProtocol::reference DataApplicationCapability_application_nlpid::set_nlpidProtocol (nlpidProtocol::const_reference value)
{ return *static_cast<nlpidProtocol::pointer>(fields[0]) = value ;}

inline DataApplicationCapability_application_nlpid::nlpidData::const_reference DataApplicationCapability_application_nlpid::get_nlpidData () const
{ return *static_cast<nlpidData::const_pointer>(fields[1]);}

inline DataApplicationCapability_application_nlpid::nlpidData::reference DataApplicationCapability_application_nlpid::ref_nlpidData ()
{ return *static_cast<nlpidData::pointer>(fields[1]);}

inline DataApplicationCapability_application_nlpid::nlpidData::reference DataApplicationCapability_application_nlpid::set_nlpidData ()
{ return *static_cast<nlpidData::pointer>(fields[1]);}

inline DataApplicationCapability_application_nlpid::nlpidData::reference DataApplicationCapability_application_nlpid::set_nlpidData (const std::vector<char>& value)
{ return *static_cast<nlpidData::pointer>(fields[1]) = value ;}

inline void DataApplicationCapability_application_nlpid::swap(DataApplicationCapability_application_nlpid& other)
{ Inherited::swap(other); }

inline DataApplicationCapability_application_nlpid* DataApplicationCapability_application_nlpid::clone() const
{ return static_cast<DataApplicationCapability_application_nlpid*> (Inherited::clone()); }

inline DataApplicationCapability_application_t38fax::t38FaxProtocol::const_reference DataApplicationCapability_application_t38fax::get_t38FaxProtocol () const
{ return *static_cast<t38FaxProtocol::const_pointer>(fields[0]);}

inline DataApplicationCapability_application_t38fax::t38FaxProtocol::reference DataApplicationCapability_application_t38fax::ref_t38FaxProtocol ()
{ return *static_cast<t38FaxProtocol::pointer>(fields[0]);}

inline DataApplicationCapability_application_t38fax::t38FaxProtocol::reference DataApplicationCapability_application_t38fax::set_t38FaxProtocol ()
{ return *static_cast<t38FaxProtocol::pointer>(fields[0]);}

inline DataApplicationCapability_application_t38fax::t38FaxProtocol::reference DataApplicationCapability_application_t38fax::set_t38FaxProtocol (t38FaxProtocol::const_reference value)
{ return *static_cast<t38FaxProtocol::pointer>(fields[0]) = value ;}

inline DataApplicationCapability_application_t38fax::t38FaxProfile::const_reference DataApplicationCapability_application_t38fax::get_t38FaxProfile () const
{ return *static_cast<t38FaxProfile::const_pointer>(fields[1]);}

inline DataApplicationCapability_application_t38fax::t38FaxProfile::reference DataApplicationCapability_application_t38fax::ref_t38FaxProfile ()
{ return *static_cast<t38FaxProfile::pointer>(fields[1]);}

inline DataApplicationCapability_application_t38fax::t38FaxProfile::reference DataApplicationCapability_application_t38fax::set_t38FaxProfile ()
{ return *static_cast<t38FaxProfile::pointer>(fields[1]);}

inline DataApplicationCapability_application_t38fax::t38FaxProfile::reference DataApplicationCapability_application_t38fax::set_t38FaxProfile (t38FaxProfile::const_reference value)
{ return *static_cast<t38FaxProfile::pointer>(fields[1]) = value ;}

inline void DataApplicationCapability_application_t38fax::swap(DataApplicationCapability_application_t38fax& other)
{ Inherited::swap(other); }

inline DataApplicationCapability_application_t38fax* DataApplicationCapability_application_t38fax::clone() const
{ return static_cast<DataApplicationCapability_application_t38fax*> (Inherited::clone()); }

inline DepFECData_rfc2733_mode::redundancyEncoding::reference DepFECData_rfc2733_mode::select_redundancyEncoding ()
{
    return *static_cast<redundancyEncoding::pointer>(setSelection(redundancyEncoding::id_, ASN1::AbstractData::create( &redundancyEncoding::value_type::theInfo)));
}

inline bool DepFECData_rfc2733_mode::redundancyEncoding_isSelected() const
{ 
    return currentSelection() == redundancyEncoding::id_; 
}

inline DepFECData_rfc2733_mode::separateStream::const_reference DepFECData_rfc2733_mode::get_separateStream () const
{
    assert(currentSelection() ==separateStream::id_);
    return *static_cast<separateStream::const_pointer>(choice.get());
}

inline DepFECData_rfc2733_mode::separateStream::reference DepFECData_rfc2733_mode::ref_separateStream ()
{
    assert(currentSelection() ==separateStream::id_);
    return *static_cast<separateStream::pointer>(choice.get());
}

inline DepFECData_rfc2733_mode::separateStream::reference DepFECData_rfc2733_mode::select_separateStream ()
{
    return *static_cast<separateStream::pointer>(setSelection(separateStream::id_, ASN1::AbstractData::create( &separateStream::value_type::theInfo)));
}

inline DepFECData_rfc2733_mode::separateStream::reference DepFECData_rfc2733_mode::select_separateStream (DepFECData_rfc2733_mode::separateStream::const_reference value)
{
    return select_separateStream() = value;
}

inline bool DepFECData_rfc2733_mode::separateStream_isSelected() const
{ 
    return currentSelection() == separateStream::id_; 
}

inline DepFECData_rfc2733_mode::DepFECData_rfc2733_mode(redundancyEncoding::Id id, redundancyEncoding::const_reference value)
  : Inherited(&theInfo, id, new redundancyEncoding::value_type(value) )
{ }

inline DepFECData_rfc2733_mode::DepFECData_rfc2733_mode(separateStream::Id id, separateStream::const_reference value)
  : Inherited(&theInfo, id, new separateStream::value_type(value) )
{ }


inline void DepFECData_rfc2733_mode::swap(DepFECData_rfc2733_mode & other)
{  Inherited::swap(other); }

inline DepFECData_rfc2733_mode* DepFECData_rfc2733_mode::clone() const
{ return static_cast<DepFECData_rfc2733_mode*> (Inherited::clone()); }

inline bool DepFECData_rfc2733_mode::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DataMode_application_nlpid::nlpidProtocol::const_reference DataMode_application_nlpid::get_nlpidProtocol () const
{ return *static_cast<nlpidProtocol::const_pointer>(fields[0]);}

inline DataMode_application_nlpid::nlpidProtocol::reference DataMode_application_nlpid::ref_nlpidProtocol ()
{ return *static_cast<nlpidProtocol::pointer>(fields[0]);}

inline DataMode_application_nlpid::nlpidProtocol::reference DataMode_application_nlpid::set_nlpidProtocol ()
{ return *static_cast<nlpidProtocol::pointer>(fields[0]);}

inline DataMode_application_nlpid::nlpidProtocol::reference DataMode_application_nlpid::set_nlpidProtocol (nlpidProtocol::const_reference value)
{ return *static_cast<nlpidProtocol::pointer>(fields[0]) = value ;}

inline DataMode_application_nlpid::nlpidData::const_reference DataMode_application_nlpid::get_nlpidData () const
{ return *static_cast<nlpidData::const_pointer>(fields[1]);}

inline DataMode_application_nlpid::nlpidData::reference DataMode_application_nlpid::ref_nlpidData ()
{ return *static_cast<nlpidData::pointer>(fields[1]);}

inline DataMode_application_nlpid::nlpidData::reference DataMode_application_nlpid::set_nlpidData ()
{ return *static_cast<nlpidData::pointer>(fields[1]);}

inline DataMode_application_nlpid::nlpidData::reference DataMode_application_nlpid::set_nlpidData (const std::vector<char>& value)
{ return *static_cast<nlpidData::pointer>(fields[1]) = value ;}

inline void DataMode_application_nlpid::swap(DataMode_application_nlpid& other)
{ Inherited::swap(other); }

inline DataMode_application_nlpid* DataMode_application_nlpid::clone() const
{ return static_cast<DataMode_application_nlpid*> (Inherited::clone()); }

inline DataMode_application_t38fax::t38FaxProtocol::const_reference DataMode_application_t38fax::get_t38FaxProtocol () const
{ return *static_cast<t38FaxProtocol::const_pointer>(fields[0]);}

inline DataMode_application_t38fax::t38FaxProtocol::reference DataMode_application_t38fax::ref_t38FaxProtocol ()
{ return *static_cast<t38FaxProtocol::pointer>(fields[0]);}

inline DataMode_application_t38fax::t38FaxProtocol::reference DataMode_application_t38fax::set_t38FaxProtocol ()
{ return *static_cast<t38FaxProtocol::pointer>(fields[0]);}

inline DataMode_application_t38fax::t38FaxProtocol::reference DataMode_application_t38fax::set_t38FaxProtocol (t38FaxProtocol::const_reference value)
{ return *static_cast<t38FaxProtocol::pointer>(fields[0]) = value ;}

inline DataMode_application_t38fax::t38FaxProfile::const_reference DataMode_application_t38fax::get_t38FaxProfile () const
{ return *static_cast<t38FaxProfile::const_pointer>(fields[1]);}

inline DataMode_application_t38fax::t38FaxProfile::reference DataMode_application_t38fax::ref_t38FaxProfile ()
{ return *static_cast<t38FaxProfile::pointer>(fields[1]);}

inline DataMode_application_t38fax::t38FaxProfile::reference DataMode_application_t38fax::set_t38FaxProfile ()
{ return *static_cast<t38FaxProfile::pointer>(fields[1]);}

inline DataMode_application_t38fax::t38FaxProfile::reference DataMode_application_t38fax::set_t38FaxProfile (t38FaxProfile::const_reference value)
{ return *static_cast<t38FaxProfile::pointer>(fields[1]) = value ;}

inline void DataMode_application_t38fax::swap(DataMode_application_t38fax& other)
{ Inherited::swap(other); }

inline DataMode_application_t38fax* DataMode_application_t38fax::clone() const
{ return static_cast<DataMode_application_t38fax*> (Inherited::clone()); }

inline NonStandardMessage::nonStandardData::const_reference NonStandardMessage::get_nonStandardData () const
{ return *static_cast<nonStandardData::const_pointer>(fields[0]);}

inline NonStandardMessage::nonStandardData::reference NonStandardMessage::ref_nonStandardData ()
{ return *static_cast<nonStandardData::pointer>(fields[0]);}

inline NonStandardMessage::nonStandardData::reference NonStandardMessage::set_nonStandardData ()
{ return *static_cast<nonStandardData::pointer>(fields[0]);}

inline NonStandardMessage::nonStandardData::reference NonStandardMessage::set_nonStandardData (nonStandardData::const_reference value)
{ return *static_cast<nonStandardData::pointer>(fields[0]) = value ;}

inline void NonStandardMessage::swap(NonStandardMessage& other)
{ Inherited::swap(other); }

inline NonStandardMessage* NonStandardMessage::clone() const
{ return static_cast<NonStandardMessage*> (Inherited::clone()); }

inline VCCapability::aal1::const_reference VCCapability::get_aal1 () const
{
  assert(hasOptionalField(e_aal1));
  return *static_cast<aal1::const_pointer>(fields[0]);
}

inline VCCapability::aal1::reference VCCapability::ref_aal1 ()
{
  assert(hasOptionalField(e_aal1));
  return *static_cast<aal1::pointer>(fields[0]);
}

inline VCCapability::aal1::reference VCCapability::set_aal1 ()
{
  includeOptionalField( e_aal1, 0);
  return *static_cast<aal1::pointer>(fields[0]);
}

inline VCCapability::aal1::reference VCCapability::set_aal1 (aal1::const_reference value)
{
  includeOptionalField( e_aal1, 0);
  return *static_cast<aal1::pointer>(fields[0]) = value;
}

inline void VCCapability::omit_aal1 ()
{ removeOptionalField( e_aal1); }

inline bool VCCapability::aal1_isPresent () const
{ return hasOptionalField( e_aal1); }

inline VCCapability::aal5::const_reference VCCapability::get_aal5 () const
{
  assert(hasOptionalField(e_aal5));
  return *static_cast<aal5::const_pointer>(fields[1]);
}

inline VCCapability::aal5::reference VCCapability::ref_aal5 ()
{
  assert(hasOptionalField(e_aal5));
  return *static_cast<aal5::pointer>(fields[1]);
}

inline VCCapability::aal5::reference VCCapability::set_aal5 ()
{
  includeOptionalField( e_aal5, 1);
  return *static_cast<aal5::pointer>(fields[1]);
}

inline VCCapability::aal5::reference VCCapability::set_aal5 (aal5::const_reference value)
{
  includeOptionalField( e_aal5, 1);
  return *static_cast<aal5::pointer>(fields[1]) = value;
}

inline void VCCapability::omit_aal5 ()
{ removeOptionalField( e_aal5); }

inline bool VCCapability::aal5_isPresent () const
{ return hasOptionalField( e_aal5); }

inline VCCapability::transportStream::const_reference VCCapability::get_transportStream () const
{ return *static_cast<transportStream::const_pointer>(fields[2]);}

inline VCCapability::transportStream::reference VCCapability::ref_transportStream ()
{ return *static_cast<transportStream::pointer>(fields[2]);}

inline VCCapability::transportStream::reference VCCapability::set_transportStream ()
{ return *static_cast<transportStream::pointer>(fields[2]);}

inline VCCapability::transportStream::reference VCCapability::set_transportStream (bool value)
{ return *static_cast<transportStream::pointer>(fields[2]) = value ;}

inline VCCapability::programStream::const_reference VCCapability::get_programStream () const
{ return *static_cast<programStream::const_pointer>(fields[3]);}

inline VCCapability::programStream::reference VCCapability::ref_programStream ()
{ return *static_cast<programStream::pointer>(fields[3]);}

inline VCCapability::programStream::reference VCCapability::set_programStream ()
{ return *static_cast<programStream::pointer>(fields[3]);}

inline VCCapability::programStream::reference VCCapability::set_programStream (bool value)
{ return *static_cast<programStream::pointer>(fields[3]) = value ;}

inline VCCapability::availableBitRates::const_reference VCCapability::get_availableBitRates () const
{ return *static_cast<availableBitRates::const_pointer>(fields[4]);}

inline VCCapability::availableBitRates::reference VCCapability::ref_availableBitRates ()
{ return *static_cast<availableBitRates::pointer>(fields[4]);}

inline VCCapability::availableBitRates::reference VCCapability::set_availableBitRates ()
{ return *static_cast<availableBitRates::pointer>(fields[4]);}

inline VCCapability::availableBitRates::reference VCCapability::set_availableBitRates (availableBitRates::const_reference value)
{ return *static_cast<availableBitRates::pointer>(fields[4]) = value ;}

inline VCCapability::aal1ViaGateway::const_reference VCCapability::get_aal1ViaGateway () const
{
  assert(hasOptionalField(e_aal1ViaGateway));
  return *static_cast<aal1ViaGateway::const_pointer>(fields[5]);
}

inline VCCapability::aal1ViaGateway::reference VCCapability::ref_aal1ViaGateway ()
{
  assert(hasOptionalField(e_aal1ViaGateway));
  return *static_cast<aal1ViaGateway::pointer>(fields[5]);
}

inline VCCapability::aal1ViaGateway::reference VCCapability::set_aal1ViaGateway ()
{
  includeOptionalField( e_aal1ViaGateway, 5);
  return *static_cast<aal1ViaGateway::pointer>(fields[5]);
}

inline VCCapability::aal1ViaGateway::reference VCCapability::set_aal1ViaGateway (aal1ViaGateway::const_reference value)
{
  includeOptionalField( e_aal1ViaGateway, 5);
  return *static_cast<aal1ViaGateway::pointer>(fields[5]) = value;
}

inline void VCCapability::omit_aal1ViaGateway ()
{ removeOptionalField( e_aal1ViaGateway); }

inline bool VCCapability::aal1ViaGateway_isPresent () const
{ return hasOptionalField( e_aal1ViaGateway); }

inline void VCCapability::swap(VCCapability& other)
{ Inherited::swap(other); }

inline VCCapability* VCCapability::clone() const
{ return static_cast<VCCapability*> (Inherited::clone()); }

inline RedundancyEncodingMethod::nonStandard::const_reference RedundancyEncodingMethod::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline RedundancyEncodingMethod::nonStandard::reference RedundancyEncodingMethod::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline RedundancyEncodingMethod::nonStandard::reference RedundancyEncodingMethod::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline RedundancyEncodingMethod::nonStandard::reference RedundancyEncodingMethod::select_nonStandard (RedundancyEncodingMethod::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool RedundancyEncodingMethod::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline RedundancyEncodingMethod::rtpAudioRedundancyEncoding::reference RedundancyEncodingMethod::select_rtpAudioRedundancyEncoding ()
{
    return *static_cast<rtpAudioRedundancyEncoding::pointer>(setSelection(rtpAudioRedundancyEncoding::id_, ASN1::AbstractData::create( &rtpAudioRedundancyEncoding::value_type::theInfo)));
}

inline bool RedundancyEncodingMethod::rtpAudioRedundancyEncoding_isSelected() const
{ 
    return currentSelection() == rtpAudioRedundancyEncoding::id_; 
}

inline RedundancyEncodingMethod::rtpH263VideoRedundancyEncoding::const_reference RedundancyEncodingMethod::get_rtpH263VideoRedundancyEncoding () const
{
    assert(currentSelection() ==rtpH263VideoRedundancyEncoding::id_);
    return *static_cast<rtpH263VideoRedundancyEncoding::const_pointer>(choice.get());
}

inline RedundancyEncodingMethod::rtpH263VideoRedundancyEncoding::reference RedundancyEncodingMethod::ref_rtpH263VideoRedundancyEncoding ()
{
    assert(currentSelection() ==rtpH263VideoRedundancyEncoding::id_);
    return *static_cast<rtpH263VideoRedundancyEncoding::pointer>(choice.get());
}

inline RedundancyEncodingMethod::rtpH263VideoRedundancyEncoding::reference RedundancyEncodingMethod::select_rtpH263VideoRedundancyEncoding ()
{
    return *static_cast<rtpH263VideoRedundancyEncoding::pointer>(setSelection(rtpH263VideoRedundancyEncoding::id_, ASN1::AbstractData::create( &rtpH263VideoRedundancyEncoding::value_type::theInfo)));
}

inline RedundancyEncodingMethod::rtpH263VideoRedundancyEncoding::reference RedundancyEncodingMethod::select_rtpH263VideoRedundancyEncoding (RedundancyEncodingMethod::rtpH263VideoRedundancyEncoding::const_reference value)
{
    return select_rtpH263VideoRedundancyEncoding() = value;
}

inline bool RedundancyEncodingMethod::rtpH263VideoRedundancyEncoding_isSelected() const
{ 
    return currentSelection() == rtpH263VideoRedundancyEncoding::id_; 
}

inline RedundancyEncodingMethod::RedundancyEncodingMethod(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline RedundancyEncodingMethod::RedundancyEncodingMethod(rtpAudioRedundancyEncoding::Id id, rtpAudioRedundancyEncoding::const_reference value)
  : Inherited(&theInfo, id, new rtpAudioRedundancyEncoding::value_type(value) )
{ }

inline RedundancyEncodingMethod::RedundancyEncodingMethod(rtpH263VideoRedundancyEncoding::Id id, rtpH263VideoRedundancyEncoding::const_reference value)
  : Inherited(&theInfo, id, new rtpH263VideoRedundancyEncoding::value_type(value) )
{ }


inline void RedundancyEncodingMethod::swap(RedundancyEncodingMethod & other)
{  Inherited::swap(other); }

inline RedundancyEncodingMethod* RedundancyEncodingMethod::clone() const
{ return static_cast<RedundancyEncodingMethod*> (Inherited::clone()); }

inline bool RedundancyEncodingMethod::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline CustomPictureFormat::maxCustomPictureWidth::const_reference CustomPictureFormat::get_maxCustomPictureWidth () const
{ return *static_cast<maxCustomPictureWidth::const_pointer>(fields[0]);}

inline CustomPictureFormat::maxCustomPictureWidth::reference CustomPictureFormat::ref_maxCustomPictureWidth ()
{ return *static_cast<maxCustomPictureWidth::pointer>(fields[0]);}

inline CustomPictureFormat::maxCustomPictureWidth::reference CustomPictureFormat::set_maxCustomPictureWidth ()
{ return *static_cast<maxCustomPictureWidth::pointer>(fields[0]);}

inline CustomPictureFormat::maxCustomPictureWidth::reference CustomPictureFormat::set_maxCustomPictureWidth (maxCustomPictureWidth::value_type::int_type value)
{ return *static_cast<maxCustomPictureWidth::pointer>(fields[0]) = value ;}

inline CustomPictureFormat::maxCustomPictureHeight::const_reference CustomPictureFormat::get_maxCustomPictureHeight () const
{ return *static_cast<maxCustomPictureHeight::const_pointer>(fields[1]);}

inline CustomPictureFormat::maxCustomPictureHeight::reference CustomPictureFormat::ref_maxCustomPictureHeight ()
{ return *static_cast<maxCustomPictureHeight::pointer>(fields[1]);}

inline CustomPictureFormat::maxCustomPictureHeight::reference CustomPictureFormat::set_maxCustomPictureHeight ()
{ return *static_cast<maxCustomPictureHeight::pointer>(fields[1]);}

inline CustomPictureFormat::maxCustomPictureHeight::reference CustomPictureFormat::set_maxCustomPictureHeight (maxCustomPictureHeight::value_type::int_type value)
{ return *static_cast<maxCustomPictureHeight::pointer>(fields[1]) = value ;}

inline CustomPictureFormat::minCustomPictureWidth::const_reference CustomPictureFormat::get_minCustomPictureWidth () const
{ return *static_cast<minCustomPictureWidth::const_pointer>(fields[2]);}

inline CustomPictureFormat::minCustomPictureWidth::reference CustomPictureFormat::ref_minCustomPictureWidth ()
{ return *static_cast<minCustomPictureWidth::pointer>(fields[2]);}

inline CustomPictureFormat::minCustomPictureWidth::reference CustomPictureFormat::set_minCustomPictureWidth ()
{ return *static_cast<minCustomPictureWidth::pointer>(fields[2]);}

inline CustomPictureFormat::minCustomPictureWidth::reference CustomPictureFormat::set_minCustomPictureWidth (minCustomPictureWidth::value_type::int_type value)
{ return *static_cast<minCustomPictureWidth::pointer>(fields[2]) = value ;}

inline CustomPictureFormat::minCustomPictureHeight::const_reference CustomPictureFormat::get_minCustomPictureHeight () const
{ return *static_cast<minCustomPictureHeight::const_pointer>(fields[3]);}

inline CustomPictureFormat::minCustomPictureHeight::reference CustomPictureFormat::ref_minCustomPictureHeight ()
{ return *static_cast<minCustomPictureHeight::pointer>(fields[3]);}

inline CustomPictureFormat::minCustomPictureHeight::reference CustomPictureFormat::set_minCustomPictureHeight ()
{ return *static_cast<minCustomPictureHeight::pointer>(fields[3]);}

inline CustomPictureFormat::minCustomPictureHeight::reference CustomPictureFormat::set_minCustomPictureHeight (minCustomPictureHeight::value_type::int_type value)
{ return *static_cast<minCustomPictureHeight::pointer>(fields[3]) = value ;}

inline CustomPictureFormat::mPI::const_reference CustomPictureFormat::get_mPI () const
{ return *static_cast<mPI::const_pointer>(fields[4]);}

inline CustomPictureFormat::mPI::reference CustomPictureFormat::ref_mPI ()
{ return *static_cast<mPI::pointer>(fields[4]);}

inline CustomPictureFormat::mPI::reference CustomPictureFormat::set_mPI ()
{ return *static_cast<mPI::pointer>(fields[4]);}

inline CustomPictureFormat::mPI::reference CustomPictureFormat::set_mPI (mPI::const_reference value)
{ return *static_cast<mPI::pointer>(fields[4]) = value ;}

inline CustomPictureFormat::pixelAspectInformation::const_reference CustomPictureFormat::get_pixelAspectInformation () const
{ return *static_cast<pixelAspectInformation::const_pointer>(fields[5]);}

inline CustomPictureFormat::pixelAspectInformation::reference CustomPictureFormat::ref_pixelAspectInformation ()
{ return *static_cast<pixelAspectInformation::pointer>(fields[5]);}

inline CustomPictureFormat::pixelAspectInformation::reference CustomPictureFormat::set_pixelAspectInformation ()
{ return *static_cast<pixelAspectInformation::pointer>(fields[5]);}

inline CustomPictureFormat::pixelAspectInformation::reference CustomPictureFormat::set_pixelAspectInformation (pixelAspectInformation::const_reference value)
{ return *static_cast<pixelAspectInformation::pointer>(fields[5]) = value ;}

inline void CustomPictureFormat::swap(CustomPictureFormat& other)
{ Inherited::swap(other); }

inline CustomPictureFormat* CustomPictureFormat::clone() const
{ return static_cast<CustomPictureFormat*> (Inherited::clone()); }

inline GenericParameter::parameterIdentifier::const_reference GenericParameter::get_parameterIdentifier () const
{ return *static_cast<parameterIdentifier::const_pointer>(fields[0]);}

inline GenericParameter::parameterIdentifier::reference GenericParameter::ref_parameterIdentifier ()
{ return *static_cast<parameterIdentifier::pointer>(fields[0]);}

inline GenericParameter::parameterIdentifier::reference GenericParameter::set_parameterIdentifier ()
{ return *static_cast<parameterIdentifier::pointer>(fields[0]);}

inline GenericParameter::parameterIdentifier::reference GenericParameter::set_parameterIdentifier (parameterIdentifier::const_reference value)
{ return *static_cast<parameterIdentifier::pointer>(fields[0]) = value ;}

inline GenericParameter::parameterValue::const_reference GenericParameter::get_parameterValue () const
{ return *static_cast<parameterValue::const_pointer>(fields[1]);}

inline GenericParameter::parameterValue::reference GenericParameter::ref_parameterValue ()
{ return *static_cast<parameterValue::pointer>(fields[1]);}

inline GenericParameter::parameterValue::reference GenericParameter::set_parameterValue ()
{ return *static_cast<parameterValue::pointer>(fields[1]);}

inline GenericParameter::parameterValue::reference GenericParameter::set_parameterValue (parameterValue::const_reference value)
{ return *static_cast<parameterValue::pointer>(fields[1]) = value ;}

inline GenericParameter::supersedes::const_reference GenericParameter::get_supersedes () const
{
  assert(hasOptionalField(e_supersedes));
  return *static_cast<supersedes::const_pointer>(fields[2]);
}

inline GenericParameter::supersedes::reference GenericParameter::ref_supersedes ()
{
  assert(hasOptionalField(e_supersedes));
  return *static_cast<supersedes::pointer>(fields[2]);
}

inline GenericParameter::supersedes::reference GenericParameter::set_supersedes ()
{
  includeOptionalField( e_supersedes, 2);
  return *static_cast<supersedes::pointer>(fields[2]);
}

inline GenericParameter::supersedes::reference GenericParameter::set_supersedes (supersedes::const_reference value)
{
  includeOptionalField( e_supersedes, 2);
  return *static_cast<supersedes::pointer>(fields[2]) = value;
}

inline void GenericParameter::omit_supersedes ()
{ removeOptionalField( e_supersedes); }

inline bool GenericParameter::supersedes_isPresent () const
{ return hasOptionalField( e_supersedes); }

inline void GenericParameter::swap(GenericParameter& other)
{ Inherited::swap(other); }

inline GenericParameter* GenericParameter::clone() const
{ return static_cast<GenericParameter*> (Inherited::clone()); }

inline ParameterValue::logical::reference ParameterValue::select_logical ()
{
    return *static_cast<logical::pointer>(setSelection(logical::id_, ASN1::AbstractData::create( &logical::value_type::theInfo)));
}

inline bool ParameterValue::logical_isSelected() const
{ 
    return currentSelection() == logical::id_; 
}

inline ParameterValue::booleanArray::const_reference ParameterValue::get_booleanArray () const
{
    assert(currentSelection() ==booleanArray::id_);
    return *static_cast<booleanArray::const_pointer>(choice.get());
}

inline ParameterValue::booleanArray::reference ParameterValue::ref_booleanArray ()
{
    assert(currentSelection() ==booleanArray::id_);
    return *static_cast<booleanArray::pointer>(choice.get());
}

inline ParameterValue::booleanArray::reference ParameterValue::select_booleanArray ()
{
    return *static_cast<booleanArray::pointer>(setSelection(booleanArray::id_, ASN1::AbstractData::create( &booleanArray::value_type::theInfo)));
}

inline ParameterValue::booleanArray::reference ParameterValue::select_booleanArray (ParameterValue::booleanArray::value_type::int_type value)
{
    return select_booleanArray() = value;
}

inline bool ParameterValue::booleanArray_isSelected() const
{ 
    return currentSelection() == booleanArray::id_; 
}

inline ParameterValue::unsignedMin::const_reference ParameterValue::get_unsignedMin () const
{
    assert(currentSelection() ==unsignedMin::id_);
    return *static_cast<unsignedMin::const_pointer>(choice.get());
}

inline ParameterValue::unsignedMin::reference ParameterValue::ref_unsignedMin ()
{
    assert(currentSelection() ==unsignedMin::id_);
    return *static_cast<unsignedMin::pointer>(choice.get());
}

inline ParameterValue::unsignedMin::reference ParameterValue::select_unsignedMin ()
{
    return *static_cast<unsignedMin::pointer>(setSelection(unsignedMin::id_, ASN1::AbstractData::create( &unsignedMin::value_type::theInfo)));
}

inline ParameterValue::unsignedMin::reference ParameterValue::select_unsignedMin (ParameterValue::unsignedMin::value_type::int_type value)
{
    return select_unsignedMin() = value;
}

inline bool ParameterValue::unsignedMin_isSelected() const
{ 
    return currentSelection() == unsignedMin::id_; 
}

inline ParameterValue::unsignedMax::const_reference ParameterValue::get_unsignedMax () const
{
    assert(currentSelection() ==unsignedMax::id_);
    return *static_cast<unsignedMax::const_pointer>(choice.get());
}

inline ParameterValue::unsignedMax::reference ParameterValue::ref_unsignedMax ()
{
    assert(currentSelection() ==unsignedMax::id_);
    return *static_cast<unsignedMax::pointer>(choice.get());
}

inline ParameterValue::unsignedMax::reference ParameterValue::select_unsignedMax ()
{
    return *static_cast<unsignedMax::pointer>(setSelection(unsignedMax::id_, ASN1::AbstractData::create( &unsignedMax::value_type::theInfo)));
}

inline ParameterValue::unsignedMax::reference ParameterValue::select_unsignedMax (ParameterValue::unsignedMax::value_type::int_type value)
{
    return select_unsignedMax() = value;
}

inline bool ParameterValue::unsignedMax_isSelected() const
{ 
    return currentSelection() == unsignedMax::id_; 
}

inline ParameterValue::unsigned32Min::const_reference ParameterValue::get_unsigned32Min () const
{
    assert(currentSelection() ==unsigned32Min::id_);
    return *static_cast<unsigned32Min::const_pointer>(choice.get());
}

inline ParameterValue::unsigned32Min::reference ParameterValue::ref_unsigned32Min ()
{
    assert(currentSelection() ==unsigned32Min::id_);
    return *static_cast<unsigned32Min::pointer>(choice.get());
}

inline ParameterValue::unsigned32Min::reference ParameterValue::select_unsigned32Min ()
{
    return *static_cast<unsigned32Min::pointer>(setSelection(unsigned32Min::id_, ASN1::AbstractData::create( &unsigned32Min::value_type::theInfo)));
}

inline ParameterValue::unsigned32Min::reference ParameterValue::select_unsigned32Min (ParameterValue::unsigned32Min::value_type::int_type value)
{
    return select_unsigned32Min() = value;
}

inline bool ParameterValue::unsigned32Min_isSelected() const
{ 
    return currentSelection() == unsigned32Min::id_; 
}

inline ParameterValue::unsigned32Max::const_reference ParameterValue::get_unsigned32Max () const
{
    assert(currentSelection() ==unsigned32Max::id_);
    return *static_cast<unsigned32Max::const_pointer>(choice.get());
}

inline ParameterValue::unsigned32Max::reference ParameterValue::ref_unsigned32Max ()
{
    assert(currentSelection() ==unsigned32Max::id_);
    return *static_cast<unsigned32Max::pointer>(choice.get());
}

inline ParameterValue::unsigned32Max::reference ParameterValue::select_unsigned32Max ()
{
    return *static_cast<unsigned32Max::pointer>(setSelection(unsigned32Max::id_, ASN1::AbstractData::create( &unsigned32Max::value_type::theInfo)));
}

inline ParameterValue::unsigned32Max::reference ParameterValue::select_unsigned32Max (ParameterValue::unsigned32Max::value_type::int_type value)
{
    return select_unsigned32Max() = value;
}

inline bool ParameterValue::unsigned32Max_isSelected() const
{ 
    return currentSelection() == unsigned32Max::id_; 
}

inline ParameterValue::octetString::const_reference ParameterValue::get_octetString () const
{
    assert(currentSelection() ==octetString::id_);
    return *static_cast<octetString::const_pointer>(choice.get());
}

inline ParameterValue::octetString::reference ParameterValue::ref_octetString ()
{
    assert(currentSelection() ==octetString::id_);
    return *static_cast<octetString::pointer>(choice.get());
}

inline ParameterValue::octetString::reference ParameterValue::select_octetString ()
{
    return *static_cast<octetString::pointer>(setSelection(octetString::id_, ASN1::AbstractData::create( &octetString::value_type::theInfo)));
}

inline ParameterValue::octetString::reference ParameterValue::select_octetString (const std::vector<char>& value)
{
    return select_octetString() = value;
}

inline bool ParameterValue::octetString_isSelected() const
{ 
    return currentSelection() == octetString::id_; 
}

inline ParameterValue::genericParameter::const_reference ParameterValue::get_genericParameter () const
{
    assert(currentSelection() ==genericParameter::id_);
    return *static_cast<genericParameter::const_pointer>(choice.get());
}

inline ParameterValue::genericParameter::reference ParameterValue::ref_genericParameter ()
{
    assert(currentSelection() ==genericParameter::id_);
    return *static_cast<genericParameter::pointer>(choice.get());
}

inline ParameterValue::genericParameter::reference ParameterValue::select_genericParameter ()
{
    return *static_cast<genericParameter::pointer>(setSelection(genericParameter::id_, ASN1::AbstractData::create( &genericParameter::value_type::theInfo)));
}

inline ParameterValue::genericParameter::reference ParameterValue::select_genericParameter (ParameterValue::genericParameter::const_reference value)
{
    return select_genericParameter() = value;
}

inline bool ParameterValue::genericParameter_isSelected() const
{ 
    return currentSelection() == genericParameter::id_; 
}

inline ParameterValue::ParameterValue(logical::Id id, logical::const_reference value)
  : Inherited(&theInfo, id, new logical::value_type(value) )
{ }

inline ParameterValue::ParameterValue(booleanArray::Id id, booleanArray::value_type::int_type value)
  : Inherited(&theInfo, id, new booleanArray::value_type(value) )
{ }

inline ParameterValue::ParameterValue(unsignedMin::Id id, unsignedMin::value_type::int_type value)
  : Inherited(&theInfo, id, new unsignedMin::value_type(value) )
{ }

inline ParameterValue::ParameterValue(unsignedMax::Id id, unsignedMax::value_type::int_type value)
  : Inherited(&theInfo, id, new unsignedMax::value_type(value) )
{ }

inline ParameterValue::ParameterValue(unsigned32Min::Id id, unsigned32Min::value_type::int_type value)
  : Inherited(&theInfo, id, new unsigned32Min::value_type(value) )
{ }

inline ParameterValue::ParameterValue(unsigned32Max::Id id, unsigned32Max::value_type::int_type value)
  : Inherited(&theInfo, id, new unsigned32Max::value_type(value) )
{ }

inline ParameterValue::ParameterValue(octetString::Id id, const std::vector<char>& value)
  : Inherited(&theInfo, id, new octetString::value_type(value) )
{ }

inline ParameterValue::ParameterValue(genericParameter::Id id, genericParameter::const_reference value)
  : Inherited(&theInfo, id, new genericParameter::value_type(value) )
{ }


inline void ParameterValue::swap(ParameterValue & other)
{  Inherited::swap(other); }

inline ParameterValue* ParameterValue::clone() const
{ return static_cast<ParameterValue*> (Inherited::clone()); }

inline bool ParameterValue::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H223LogicalChannelParameters::adaptationLayerType::const_reference H223LogicalChannelParameters::get_adaptationLayerType () const
{ return *static_cast<adaptationLayerType::const_pointer>(fields[0]);}

inline H223LogicalChannelParameters::adaptationLayerType::reference H223LogicalChannelParameters::ref_adaptationLayerType ()
{ return *static_cast<adaptationLayerType::pointer>(fields[0]);}

inline H223LogicalChannelParameters::adaptationLayerType::reference H223LogicalChannelParameters::set_adaptationLayerType ()
{ return *static_cast<adaptationLayerType::pointer>(fields[0]);}

inline H223LogicalChannelParameters::adaptationLayerType::reference H223LogicalChannelParameters::set_adaptationLayerType (adaptationLayerType::const_reference value)
{ return *static_cast<adaptationLayerType::pointer>(fields[0]) = value ;}

inline H223LogicalChannelParameters::segmentableFlag::const_reference H223LogicalChannelParameters::get_segmentableFlag () const
{ return *static_cast<segmentableFlag::const_pointer>(fields[1]);}

inline H223LogicalChannelParameters::segmentableFlag::reference H223LogicalChannelParameters::ref_segmentableFlag ()
{ return *static_cast<segmentableFlag::pointer>(fields[1]);}

inline H223LogicalChannelParameters::segmentableFlag::reference H223LogicalChannelParameters::set_segmentableFlag ()
{ return *static_cast<segmentableFlag::pointer>(fields[1]);}

inline H223LogicalChannelParameters::segmentableFlag::reference H223LogicalChannelParameters::set_segmentableFlag (bool value)
{ return *static_cast<segmentableFlag::pointer>(fields[1]) = value ;}

inline void H223LogicalChannelParameters::swap(H223LogicalChannelParameters& other)
{ Inherited::swap(other); }

inline H223LogicalChannelParameters* H223LogicalChannelParameters::clone() const
{ return static_cast<H223LogicalChannelParameters*> (Inherited::clone()); }

inline V76LogicalChannelParameters::hdlcParameters::const_reference V76LogicalChannelParameters::get_hdlcParameters () const
{ return *static_cast<hdlcParameters::const_pointer>(fields[0]);}

inline V76LogicalChannelParameters::hdlcParameters::reference V76LogicalChannelParameters::ref_hdlcParameters ()
{ return *static_cast<hdlcParameters::pointer>(fields[0]);}

inline V76LogicalChannelParameters::hdlcParameters::reference V76LogicalChannelParameters::set_hdlcParameters ()
{ return *static_cast<hdlcParameters::pointer>(fields[0]);}

inline V76LogicalChannelParameters::hdlcParameters::reference V76LogicalChannelParameters::set_hdlcParameters (hdlcParameters::const_reference value)
{ return *static_cast<hdlcParameters::pointer>(fields[0]) = value ;}

inline V76LogicalChannelParameters::suspendResume::const_reference V76LogicalChannelParameters::get_suspendResume () const
{ return *static_cast<suspendResume::const_pointer>(fields[1]);}

inline V76LogicalChannelParameters::suspendResume::reference V76LogicalChannelParameters::ref_suspendResume ()
{ return *static_cast<suspendResume::pointer>(fields[1]);}

inline V76LogicalChannelParameters::suspendResume::reference V76LogicalChannelParameters::set_suspendResume ()
{ return *static_cast<suspendResume::pointer>(fields[1]);}

inline V76LogicalChannelParameters::suspendResume::reference V76LogicalChannelParameters::set_suspendResume (suspendResume::const_reference value)
{ return *static_cast<suspendResume::pointer>(fields[1]) = value ;}

inline V76LogicalChannelParameters::uIH::const_reference V76LogicalChannelParameters::get_uIH () const
{ return *static_cast<uIH::const_pointer>(fields[2]);}

inline V76LogicalChannelParameters::uIH::reference V76LogicalChannelParameters::ref_uIH ()
{ return *static_cast<uIH::pointer>(fields[2]);}

inline V76LogicalChannelParameters::uIH::reference V76LogicalChannelParameters::set_uIH ()
{ return *static_cast<uIH::pointer>(fields[2]);}

inline V76LogicalChannelParameters::uIH::reference V76LogicalChannelParameters::set_uIH (bool value)
{ return *static_cast<uIH::pointer>(fields[2]) = value ;}

inline V76LogicalChannelParameters::mode::const_reference V76LogicalChannelParameters::get_mode () const
{ return *static_cast<mode::const_pointer>(fields[3]);}

inline V76LogicalChannelParameters::mode::reference V76LogicalChannelParameters::ref_mode ()
{ return *static_cast<mode::pointer>(fields[3]);}

inline V76LogicalChannelParameters::mode::reference V76LogicalChannelParameters::set_mode ()
{ return *static_cast<mode::pointer>(fields[3]);}

inline V76LogicalChannelParameters::mode::reference V76LogicalChannelParameters::set_mode (mode::const_reference value)
{ return *static_cast<mode::pointer>(fields[3]) = value ;}

inline V76LogicalChannelParameters::v75Parameters::const_reference V76LogicalChannelParameters::get_v75Parameters () const
{ return *static_cast<v75Parameters::const_pointer>(fields[4]);}

inline V76LogicalChannelParameters::v75Parameters::reference V76LogicalChannelParameters::ref_v75Parameters ()
{ return *static_cast<v75Parameters::pointer>(fields[4]);}

inline V76LogicalChannelParameters::v75Parameters::reference V76LogicalChannelParameters::set_v75Parameters ()
{ return *static_cast<v75Parameters::pointer>(fields[4]);}

inline V76LogicalChannelParameters::v75Parameters::reference V76LogicalChannelParameters::set_v75Parameters (v75Parameters::const_reference value)
{ return *static_cast<v75Parameters::pointer>(fields[4]) = value ;}

inline void V76LogicalChannelParameters::swap(V76LogicalChannelParameters& other)
{ Inherited::swap(other); }

inline V76LogicalChannelParameters* V76LogicalChannelParameters::clone() const
{ return static_cast<V76LogicalChannelParameters*> (Inherited::clone()); }

inline RTPPayloadType::payloadDescriptor::const_reference RTPPayloadType::get_payloadDescriptor () const
{ return *static_cast<payloadDescriptor::const_pointer>(fields[0]);}

inline RTPPayloadType::payloadDescriptor::reference RTPPayloadType::ref_payloadDescriptor ()
{ return *static_cast<payloadDescriptor::pointer>(fields[0]);}

inline RTPPayloadType::payloadDescriptor::reference RTPPayloadType::set_payloadDescriptor ()
{ return *static_cast<payloadDescriptor::pointer>(fields[0]);}

inline RTPPayloadType::payloadDescriptor::reference RTPPayloadType::set_payloadDescriptor (payloadDescriptor::const_reference value)
{ return *static_cast<payloadDescriptor::pointer>(fields[0]) = value ;}

inline RTPPayloadType::payloadType::const_reference RTPPayloadType::get_payloadType () const
{
  assert(hasOptionalField(e_payloadType));
  return *static_cast<payloadType::const_pointer>(fields[1]);
}

inline RTPPayloadType::payloadType::reference RTPPayloadType::ref_payloadType ()
{
  assert(hasOptionalField(e_payloadType));
  return *static_cast<payloadType::pointer>(fields[1]);
}

inline RTPPayloadType::payloadType::reference RTPPayloadType::set_payloadType ()
{
  includeOptionalField( e_payloadType, 1);
  return *static_cast<payloadType::pointer>(fields[1]);
}

inline RTPPayloadType::payloadType::reference RTPPayloadType::set_payloadType (payloadType::value_type::int_type value)
{
  includeOptionalField( e_payloadType, 1);
  return *static_cast<payloadType::pointer>(fields[1]) = value;
}

inline void RTPPayloadType::omit_payloadType ()
{ removeOptionalField( e_payloadType); }

inline bool RTPPayloadType::payloadType_isPresent () const
{ return hasOptionalField( e_payloadType); }

inline void RTPPayloadType::swap(RTPPayloadType& other)
{ Inherited::swap(other); }

inline RTPPayloadType* RTPPayloadType::clone() const
{ return static_cast<RTPPayloadType*> (Inherited::clone()); }

inline RedundancyEncoding::redundancyEncodingMethod::const_reference RedundancyEncoding::get_redundancyEncodingMethod () const
{ return *static_cast<redundancyEncodingMethod::const_pointer>(fields[0]);}

inline RedundancyEncoding::redundancyEncodingMethod::reference RedundancyEncoding::ref_redundancyEncodingMethod ()
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]);}

inline RedundancyEncoding::redundancyEncodingMethod::reference RedundancyEncoding::set_redundancyEncodingMethod ()
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]);}

inline RedundancyEncoding::redundancyEncodingMethod::reference RedundancyEncoding::set_redundancyEncodingMethod (redundancyEncodingMethod::const_reference value)
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]) = value ;}

inline RedundancyEncoding::secondaryEncoding::const_reference RedundancyEncoding::get_secondaryEncoding () const
{
  assert(hasOptionalField(e_secondaryEncoding));
  return *static_cast<secondaryEncoding::const_pointer>(fields[1]);
}

inline RedundancyEncoding::secondaryEncoding::reference RedundancyEncoding::ref_secondaryEncoding ()
{
  assert(hasOptionalField(e_secondaryEncoding));
  return *static_cast<secondaryEncoding::pointer>(fields[1]);
}

inline RedundancyEncoding::secondaryEncoding::reference RedundancyEncoding::set_secondaryEncoding ()
{
  includeOptionalField( e_secondaryEncoding, 1);
  return *static_cast<secondaryEncoding::pointer>(fields[1]);
}

inline RedundancyEncoding::secondaryEncoding::reference RedundancyEncoding::set_secondaryEncoding (secondaryEncoding::const_reference value)
{
  includeOptionalField( e_secondaryEncoding, 1);
  return *static_cast<secondaryEncoding::pointer>(fields[1]) = value;
}

inline void RedundancyEncoding::omit_secondaryEncoding ()
{ removeOptionalField( e_secondaryEncoding); }

inline bool RedundancyEncoding::secondaryEncoding_isPresent () const
{ return hasOptionalField( e_secondaryEncoding); }

inline void RedundancyEncoding::swap(RedundancyEncoding& other)
{ Inherited::swap(other); }

inline RedundancyEncoding* RedundancyEncoding::clone() const
{ return static_cast<RedundancyEncoding*> (Inherited::clone()); }

inline FECData::rfc2733::const_reference FECData::get_rfc2733 () const
{
    assert(currentSelection() ==rfc2733::id_);
    return *static_cast<rfc2733::const_pointer>(choice.get());
}

inline FECData::rfc2733::reference FECData::ref_rfc2733 ()
{
    assert(currentSelection() ==rfc2733::id_);
    return *static_cast<rfc2733::pointer>(choice.get());
}

inline FECData::rfc2733::reference FECData::select_rfc2733 ()
{
    return *static_cast<rfc2733::pointer>(setSelection(rfc2733::id_, ASN1::AbstractData::create( &rfc2733::value_type::theInfo)));
}

inline FECData::rfc2733::reference FECData::select_rfc2733 (FECData::rfc2733::const_reference value)
{
    return select_rfc2733() = value;
}

inline bool FECData::rfc2733_isSelected() const
{ 
    return currentSelection() == rfc2733::id_; 
}

inline FECData::FECData(rfc2733::Id id, rfc2733::const_reference value)
  : Inherited(&theInfo, id, new rfc2733::value_type(value) )
{ }


inline void FECData::swap(FECData & other)
{  Inherited::swap(other); }

inline FECData* FECData::clone() const
{ return static_cast<FECData*> (Inherited::clone()); }

inline bool FECData::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline TransportAddress::unicastAddress::const_reference TransportAddress::get_unicastAddress () const
{
    assert(currentSelection() ==unicastAddress::id_);
    return *static_cast<unicastAddress::const_pointer>(choice.get());
}

inline TransportAddress::unicastAddress::reference TransportAddress::ref_unicastAddress ()
{
    assert(currentSelection() ==unicastAddress::id_);
    return *static_cast<unicastAddress::pointer>(choice.get());
}

inline TransportAddress::unicastAddress::reference TransportAddress::select_unicastAddress ()
{
    return *static_cast<unicastAddress::pointer>(setSelection(unicastAddress::id_, ASN1::AbstractData::create( &unicastAddress::value_type::theInfo)));
}

inline TransportAddress::unicastAddress::reference TransportAddress::select_unicastAddress (TransportAddress::unicastAddress::const_reference value)
{
    return select_unicastAddress() = value;
}

inline bool TransportAddress::unicastAddress_isSelected() const
{ 
    return currentSelection() == unicastAddress::id_; 
}

inline TransportAddress::multicastAddress::const_reference TransportAddress::get_multicastAddress () const
{
    assert(currentSelection() ==multicastAddress::id_);
    return *static_cast<multicastAddress::const_pointer>(choice.get());
}

inline TransportAddress::multicastAddress::reference TransportAddress::ref_multicastAddress ()
{
    assert(currentSelection() ==multicastAddress::id_);
    return *static_cast<multicastAddress::pointer>(choice.get());
}

inline TransportAddress::multicastAddress::reference TransportAddress::select_multicastAddress ()
{
    return *static_cast<multicastAddress::pointer>(setSelection(multicastAddress::id_, ASN1::AbstractData::create( &multicastAddress::value_type::theInfo)));
}

inline TransportAddress::multicastAddress::reference TransportAddress::select_multicastAddress (TransportAddress::multicastAddress::const_reference value)
{
    return select_multicastAddress() = value;
}

inline bool TransportAddress::multicastAddress_isSelected() const
{ 
    return currentSelection() == multicastAddress::id_; 
}

inline TransportAddress::TransportAddress(unicastAddress::Id id, unicastAddress::const_reference value)
  : Inherited(&theInfo, id, new unicastAddress::value_type(value) )
{ }

inline TransportAddress::TransportAddress(multicastAddress::Id id, multicastAddress::const_reference value)
  : Inherited(&theInfo, id, new multicastAddress::value_type(value) )
{ }


inline void TransportAddress::swap(TransportAddress & other)
{  Inherited::swap(other); }

inline TransportAddress* TransportAddress::clone() const
{ return static_cast<TransportAddress*> (Inherited::clone()); }

inline bool TransportAddress::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline EncryptionSync::nonStandard::const_reference EncryptionSync::get_nonStandard () const
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::const_pointer>(fields[0]);
}

inline EncryptionSync::nonStandard::reference EncryptionSync::ref_nonStandard ()
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline EncryptionSync::nonStandard::reference EncryptionSync::set_nonStandard ()
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline EncryptionSync::nonStandard::reference EncryptionSync::set_nonStandard (nonStandard::const_reference value)
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]) = value;
}

inline void EncryptionSync::omit_nonStandard ()
{ removeOptionalField( e_nonStandard); }

inline bool EncryptionSync::nonStandard_isPresent () const
{ return hasOptionalField( e_nonStandard); }

inline EncryptionSync::synchFlag::const_reference EncryptionSync::get_synchFlag () const
{ return *static_cast<synchFlag::const_pointer>(fields[1]);}

inline EncryptionSync::synchFlag::reference EncryptionSync::ref_synchFlag ()
{ return *static_cast<synchFlag::pointer>(fields[1]);}

inline EncryptionSync::synchFlag::reference EncryptionSync::set_synchFlag ()
{ return *static_cast<synchFlag::pointer>(fields[1]);}

inline EncryptionSync::synchFlag::reference EncryptionSync::set_synchFlag (synchFlag::value_type::int_type value)
{ return *static_cast<synchFlag::pointer>(fields[1]) = value ;}

inline EncryptionSync::h235Key::const_reference EncryptionSync::get_h235Key () const
{ return *static_cast<h235Key::const_pointer>(fields[2]);}

inline EncryptionSync::h235Key::reference EncryptionSync::ref_h235Key ()
{ return *static_cast<h235Key::pointer>(fields[2]);}

inline EncryptionSync::h235Key::reference EncryptionSync::set_h235Key ()
{ return *static_cast<h235Key::pointer>(fields[2]);}

inline EncryptionSync::h235Key::reference EncryptionSync::set_h235Key (const std::vector<char>& value)
{ return *static_cast<h235Key::pointer>(fields[2]) = value ;}

inline EncryptionSync::escrowentry::const_reference EncryptionSync::get_escrowentry () const
{
  assert(hasOptionalField(e_escrowentry));
  return *static_cast<escrowentry::const_pointer>(fields[3]);
}

inline EncryptionSync::escrowentry::reference EncryptionSync::ref_escrowentry ()
{
  assert(hasOptionalField(e_escrowentry));
  return *static_cast<escrowentry::pointer>(fields[3]);
}

inline EncryptionSync::escrowentry::reference EncryptionSync::set_escrowentry ()
{
  includeOptionalField( e_escrowentry, 3);
  return *static_cast<escrowentry::pointer>(fields[3]);
}

inline EncryptionSync::escrowentry::reference EncryptionSync::set_escrowentry (escrowentry::const_reference value)
{
  includeOptionalField( e_escrowentry, 3);
  return *static_cast<escrowentry::pointer>(fields[3]) = value;
}

inline void EncryptionSync::omit_escrowentry ()
{ removeOptionalField( e_escrowentry); }

inline bool EncryptionSync::escrowentry_isPresent () const
{ return hasOptionalField( e_escrowentry); }

inline EncryptionSync::genericParameter::const_reference EncryptionSync::get_genericParameter () const
{
  assert(hasOptionalField(e_genericParameter));
  return *static_cast<genericParameter::const_pointer>(fields[4]);
}

inline EncryptionSync::genericParameter::reference EncryptionSync::ref_genericParameter ()
{
  assert(hasOptionalField(e_genericParameter));
  return *static_cast<genericParameter::pointer>(fields[4]);
}

inline EncryptionSync::genericParameter::reference EncryptionSync::set_genericParameter ()
{
  includeOptionalField( e_genericParameter, 4);
  return *static_cast<genericParameter::pointer>(fields[4]);
}

inline EncryptionSync::genericParameter::reference EncryptionSync::set_genericParameter (genericParameter::const_reference value)
{
  includeOptionalField( e_genericParameter, 4);
  return *static_cast<genericParameter::pointer>(fields[4]) = value;
}

inline void EncryptionSync::omit_genericParameter ()
{ removeOptionalField( e_genericParameter); }

inline bool EncryptionSync::genericParameter_isPresent () const
{ return hasOptionalField( e_genericParameter); }

inline void EncryptionSync::swap(EncryptionSync& other)
{ Inherited::swap(other); }

inline EncryptionSync* EncryptionSync::clone() const
{ return static_cast<EncryptionSync*> (Inherited::clone()); }

inline H2250LogicalChannelAckParameters::nonStandard::const_reference H2250LogicalChannelAckParameters::get_nonStandard () const
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::const_pointer>(fields[0]);
}

inline H2250LogicalChannelAckParameters::nonStandard::reference H2250LogicalChannelAckParameters::ref_nonStandard ()
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline H2250LogicalChannelAckParameters::nonStandard::reference H2250LogicalChannelAckParameters::set_nonStandard ()
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline H2250LogicalChannelAckParameters::nonStandard::reference H2250LogicalChannelAckParameters::set_nonStandard (nonStandard::const_reference value)
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]) = value;
}

inline void H2250LogicalChannelAckParameters::omit_nonStandard ()
{ removeOptionalField( e_nonStandard); }

inline bool H2250LogicalChannelAckParameters::nonStandard_isPresent () const
{ return hasOptionalField( e_nonStandard); }

inline H2250LogicalChannelAckParameters::sessionID::const_reference H2250LogicalChannelAckParameters::get_sessionID () const
{
  assert(hasOptionalField(e_sessionID));
  return *static_cast<sessionID::const_pointer>(fields[1]);
}

inline H2250LogicalChannelAckParameters::sessionID::reference H2250LogicalChannelAckParameters::ref_sessionID ()
{
  assert(hasOptionalField(e_sessionID));
  return *static_cast<sessionID::pointer>(fields[1]);
}

inline H2250LogicalChannelAckParameters::sessionID::reference H2250LogicalChannelAckParameters::set_sessionID ()
{
  includeOptionalField( e_sessionID, 1);
  return *static_cast<sessionID::pointer>(fields[1]);
}

inline H2250LogicalChannelAckParameters::sessionID::reference H2250LogicalChannelAckParameters::set_sessionID (sessionID::value_type::int_type value)
{
  includeOptionalField( e_sessionID, 1);
  return *static_cast<sessionID::pointer>(fields[1]) = value;
}

inline void H2250LogicalChannelAckParameters::omit_sessionID ()
{ removeOptionalField( e_sessionID); }

inline bool H2250LogicalChannelAckParameters::sessionID_isPresent () const
{ return hasOptionalField( e_sessionID); }

inline H2250LogicalChannelAckParameters::mediaChannel::const_reference H2250LogicalChannelAckParameters::get_mediaChannel () const
{
  assert(hasOptionalField(e_mediaChannel));
  return *static_cast<mediaChannel::const_pointer>(fields[2]);
}

inline H2250LogicalChannelAckParameters::mediaChannel::reference H2250LogicalChannelAckParameters::ref_mediaChannel ()
{
  assert(hasOptionalField(e_mediaChannel));
  return *static_cast<mediaChannel::pointer>(fields[2]);
}

inline H2250LogicalChannelAckParameters::mediaChannel::reference H2250LogicalChannelAckParameters::set_mediaChannel ()
{
  includeOptionalField( e_mediaChannel, 2);
  return *static_cast<mediaChannel::pointer>(fields[2]);
}

inline H2250LogicalChannelAckParameters::mediaChannel::reference H2250LogicalChannelAckParameters::set_mediaChannel (mediaChannel::const_reference value)
{
  includeOptionalField( e_mediaChannel, 2);
  return *static_cast<mediaChannel::pointer>(fields[2]) = value;
}

inline void H2250LogicalChannelAckParameters::omit_mediaChannel ()
{ removeOptionalField( e_mediaChannel); }

inline bool H2250LogicalChannelAckParameters::mediaChannel_isPresent () const
{ return hasOptionalField( e_mediaChannel); }

inline H2250LogicalChannelAckParameters::mediaControlChannel::const_reference H2250LogicalChannelAckParameters::get_mediaControlChannel () const
{
  assert(hasOptionalField(e_mediaControlChannel));
  return *static_cast<mediaControlChannel::const_pointer>(fields[3]);
}

inline H2250LogicalChannelAckParameters::mediaControlChannel::reference H2250LogicalChannelAckParameters::ref_mediaControlChannel ()
{
  assert(hasOptionalField(e_mediaControlChannel));
  return *static_cast<mediaControlChannel::pointer>(fields[3]);
}

inline H2250LogicalChannelAckParameters::mediaControlChannel::reference H2250LogicalChannelAckParameters::set_mediaControlChannel ()
{
  includeOptionalField( e_mediaControlChannel, 3);
  return *static_cast<mediaControlChannel::pointer>(fields[3]);
}

inline H2250LogicalChannelAckParameters::mediaControlChannel::reference H2250LogicalChannelAckParameters::set_mediaControlChannel (mediaControlChannel::const_reference value)
{
  includeOptionalField( e_mediaControlChannel, 3);
  return *static_cast<mediaControlChannel::pointer>(fields[3]) = value;
}

inline void H2250LogicalChannelAckParameters::omit_mediaControlChannel ()
{ removeOptionalField( e_mediaControlChannel); }

inline bool H2250LogicalChannelAckParameters::mediaControlChannel_isPresent () const
{ return hasOptionalField( e_mediaControlChannel); }

inline H2250LogicalChannelAckParameters::dynamicRTPPayloadType::const_reference H2250LogicalChannelAckParameters::get_dynamicRTPPayloadType () const
{
  assert(hasOptionalField(e_dynamicRTPPayloadType));
  return *static_cast<dynamicRTPPayloadType::const_pointer>(fields[4]);
}

inline H2250LogicalChannelAckParameters::dynamicRTPPayloadType::reference H2250LogicalChannelAckParameters::ref_dynamicRTPPayloadType ()
{
  assert(hasOptionalField(e_dynamicRTPPayloadType));
  return *static_cast<dynamicRTPPayloadType::pointer>(fields[4]);
}

inline H2250LogicalChannelAckParameters::dynamicRTPPayloadType::reference H2250LogicalChannelAckParameters::set_dynamicRTPPayloadType ()
{
  includeOptionalField( e_dynamicRTPPayloadType, 4);
  return *static_cast<dynamicRTPPayloadType::pointer>(fields[4]);
}

inline H2250LogicalChannelAckParameters::dynamicRTPPayloadType::reference H2250LogicalChannelAckParameters::set_dynamicRTPPayloadType (dynamicRTPPayloadType::value_type::int_type value)
{
  includeOptionalField( e_dynamicRTPPayloadType, 4);
  return *static_cast<dynamicRTPPayloadType::pointer>(fields[4]) = value;
}

inline void H2250LogicalChannelAckParameters::omit_dynamicRTPPayloadType ()
{ removeOptionalField( e_dynamicRTPPayloadType); }

inline bool H2250LogicalChannelAckParameters::dynamicRTPPayloadType_isPresent () const
{ return hasOptionalField( e_dynamicRTPPayloadType); }

inline H2250LogicalChannelAckParameters::flowControlToZero::const_reference H2250LogicalChannelAckParameters::get_flowControlToZero () const
{
  assert(hasOptionalField(e_flowControlToZero));
  return *static_cast<flowControlToZero::const_pointer>(fields[5]);
}

inline H2250LogicalChannelAckParameters::flowControlToZero::reference H2250LogicalChannelAckParameters::ref_flowControlToZero ()
{
  assert(hasOptionalField(e_flowControlToZero));
  return *static_cast<flowControlToZero::pointer>(fields[5]);
}

inline H2250LogicalChannelAckParameters::flowControlToZero::reference H2250LogicalChannelAckParameters::set_flowControlToZero ()
{
  includeOptionalField( e_flowControlToZero, 5);
  return *static_cast<flowControlToZero::pointer>(fields[5]);
}

inline H2250LogicalChannelAckParameters::flowControlToZero::reference H2250LogicalChannelAckParameters::set_flowControlToZero (bool value)
{
  includeOptionalField( e_flowControlToZero, 5);
  return *static_cast<flowControlToZero::pointer>(fields[5]) = value;
}

inline void H2250LogicalChannelAckParameters::omit_flowControlToZero ()
{ removeOptionalField( e_flowControlToZero); }

inline bool H2250LogicalChannelAckParameters::flowControlToZero_isPresent () const
{ return hasOptionalField( e_flowControlToZero); }

inline H2250LogicalChannelAckParameters::portNumber::const_reference H2250LogicalChannelAckParameters::get_portNumber () const
{
  assert(hasOptionalField(e_portNumber));
  return *static_cast<portNumber::const_pointer>(fields[6]);
}

inline H2250LogicalChannelAckParameters::portNumber::reference H2250LogicalChannelAckParameters::ref_portNumber ()
{
  assert(hasOptionalField(e_portNumber));
  return *static_cast<portNumber::pointer>(fields[6]);
}

inline H2250LogicalChannelAckParameters::portNumber::reference H2250LogicalChannelAckParameters::set_portNumber ()
{
  includeOptionalField( e_portNumber, 6);
  return *static_cast<portNumber::pointer>(fields[6]);
}

inline H2250LogicalChannelAckParameters::portNumber::reference H2250LogicalChannelAckParameters::set_portNumber (portNumber::value_type::int_type value)
{
  includeOptionalField( e_portNumber, 6);
  return *static_cast<portNumber::pointer>(fields[6]) = value;
}

inline void H2250LogicalChannelAckParameters::omit_portNumber ()
{ removeOptionalField( e_portNumber); }

inline bool H2250LogicalChannelAckParameters::portNumber_isPresent () const
{ return hasOptionalField( e_portNumber); }

inline void H2250LogicalChannelAckParameters::swap(H2250LogicalChannelAckParameters& other)
{ Inherited::swap(other); }

inline H2250LogicalChannelAckParameters* H2250LogicalChannelAckParameters::clone() const
{ return static_cast<H2250LogicalChannelAckParameters*> (Inherited::clone()); }

inline MultiplexEntrySend::sequenceNumber::const_reference MultiplexEntrySend::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline MultiplexEntrySend::sequenceNumber::reference MultiplexEntrySend::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline MultiplexEntrySend::sequenceNumber::reference MultiplexEntrySend::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline MultiplexEntrySend::sequenceNumber::reference MultiplexEntrySend::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline MultiplexEntrySend::multiplexEntryDescriptors::const_reference MultiplexEntrySend::get_multiplexEntryDescriptors () const
{ return *static_cast<multiplexEntryDescriptors::const_pointer>(fields[1]);}

inline MultiplexEntrySend::multiplexEntryDescriptors::reference MultiplexEntrySend::ref_multiplexEntryDescriptors ()
{ return *static_cast<multiplexEntryDescriptors::pointer>(fields[1]);}

inline MultiplexEntrySend::multiplexEntryDescriptors::reference MultiplexEntrySend::set_multiplexEntryDescriptors ()
{ return *static_cast<multiplexEntryDescriptors::pointer>(fields[1]);}

inline MultiplexEntrySend::multiplexEntryDescriptors::reference MultiplexEntrySend::set_multiplexEntryDescriptors (multiplexEntryDescriptors::const_reference value)
{ return *static_cast<multiplexEntryDescriptors::pointer>(fields[1]) = value ;}

inline void MultiplexEntrySend::swap(MultiplexEntrySend& other)
{ Inherited::swap(other); }

inline MultiplexEntrySend* MultiplexEntrySend::clone() const
{ return static_cast<MultiplexEntrySend*> (Inherited::clone()); }

inline H223ModeParameters::adaptationLayerType::const_reference H223ModeParameters::get_adaptationLayerType () const
{ return *static_cast<adaptationLayerType::const_pointer>(fields[0]);}

inline H223ModeParameters::adaptationLayerType::reference H223ModeParameters::ref_adaptationLayerType ()
{ return *static_cast<adaptationLayerType::pointer>(fields[0]);}

inline H223ModeParameters::adaptationLayerType::reference H223ModeParameters::set_adaptationLayerType ()
{ return *static_cast<adaptationLayerType::pointer>(fields[0]);}

inline H223ModeParameters::adaptationLayerType::reference H223ModeParameters::set_adaptationLayerType (adaptationLayerType::const_reference value)
{ return *static_cast<adaptationLayerType::pointer>(fields[0]) = value ;}

inline H223ModeParameters::segmentableFlag::const_reference H223ModeParameters::get_segmentableFlag () const
{ return *static_cast<segmentableFlag::const_pointer>(fields[1]);}

inline H223ModeParameters::segmentableFlag::reference H223ModeParameters::ref_segmentableFlag ()
{ return *static_cast<segmentableFlag::pointer>(fields[1]);}

inline H223ModeParameters::segmentableFlag::reference H223ModeParameters::set_segmentableFlag ()
{ return *static_cast<segmentableFlag::pointer>(fields[1]);}

inline H223ModeParameters::segmentableFlag::reference H223ModeParameters::set_segmentableFlag (bool value)
{ return *static_cast<segmentableFlag::pointer>(fields[1]) = value ;}

inline void H223ModeParameters::swap(H223ModeParameters& other)
{ Inherited::swap(other); }

inline H223ModeParameters* H223ModeParameters::clone() const
{ return static_cast<H223ModeParameters*> (Inherited::clone()); }

inline ConferenceResponse::mCTerminalIDResponse::const_reference ConferenceResponse::get_mCTerminalIDResponse () const
{
    assert(currentSelection() ==mCTerminalIDResponse::id_);
    return *static_cast<mCTerminalIDResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::mCTerminalIDResponse::reference ConferenceResponse::ref_mCTerminalIDResponse ()
{
    assert(currentSelection() ==mCTerminalIDResponse::id_);
    return *static_cast<mCTerminalIDResponse::pointer>(choice.get());
}

inline ConferenceResponse::mCTerminalIDResponse::reference ConferenceResponse::select_mCTerminalIDResponse ()
{
    return *static_cast<mCTerminalIDResponse::pointer>(setSelection(mCTerminalIDResponse::id_, ASN1::AbstractData::create( &mCTerminalIDResponse::value_type::theInfo)));
}

inline ConferenceResponse::mCTerminalIDResponse::reference ConferenceResponse::select_mCTerminalIDResponse (ConferenceResponse::mCTerminalIDResponse::const_reference value)
{
    return select_mCTerminalIDResponse() = value;
}

inline bool ConferenceResponse::mCTerminalIDResponse_isSelected() const
{ 
    return currentSelection() == mCTerminalIDResponse::id_; 
}

inline ConferenceResponse::terminalIDResponse::const_reference ConferenceResponse::get_terminalIDResponse () const
{
    assert(currentSelection() ==terminalIDResponse::id_);
    return *static_cast<terminalIDResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::terminalIDResponse::reference ConferenceResponse::ref_terminalIDResponse ()
{
    assert(currentSelection() ==terminalIDResponse::id_);
    return *static_cast<terminalIDResponse::pointer>(choice.get());
}

inline ConferenceResponse::terminalIDResponse::reference ConferenceResponse::select_terminalIDResponse ()
{
    return *static_cast<terminalIDResponse::pointer>(setSelection(terminalIDResponse::id_, ASN1::AbstractData::create( &terminalIDResponse::value_type::theInfo)));
}

inline ConferenceResponse::terminalIDResponse::reference ConferenceResponse::select_terminalIDResponse (ConferenceResponse::terminalIDResponse::const_reference value)
{
    return select_terminalIDResponse() = value;
}

inline bool ConferenceResponse::terminalIDResponse_isSelected() const
{ 
    return currentSelection() == terminalIDResponse::id_; 
}

inline ConferenceResponse::conferenceIDResponse::const_reference ConferenceResponse::get_conferenceIDResponse () const
{
    assert(currentSelection() ==conferenceIDResponse::id_);
    return *static_cast<conferenceIDResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::conferenceIDResponse::reference ConferenceResponse::ref_conferenceIDResponse ()
{
    assert(currentSelection() ==conferenceIDResponse::id_);
    return *static_cast<conferenceIDResponse::pointer>(choice.get());
}

inline ConferenceResponse::conferenceIDResponse::reference ConferenceResponse::select_conferenceIDResponse ()
{
    return *static_cast<conferenceIDResponse::pointer>(setSelection(conferenceIDResponse::id_, ASN1::AbstractData::create( &conferenceIDResponse::value_type::theInfo)));
}

inline ConferenceResponse::conferenceIDResponse::reference ConferenceResponse::select_conferenceIDResponse (ConferenceResponse::conferenceIDResponse::const_reference value)
{
    return select_conferenceIDResponse() = value;
}

inline bool ConferenceResponse::conferenceIDResponse_isSelected() const
{ 
    return currentSelection() == conferenceIDResponse::id_; 
}

inline ConferenceResponse::passwordResponse::const_reference ConferenceResponse::get_passwordResponse () const
{
    assert(currentSelection() ==passwordResponse::id_);
    return *static_cast<passwordResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::passwordResponse::reference ConferenceResponse::ref_passwordResponse ()
{
    assert(currentSelection() ==passwordResponse::id_);
    return *static_cast<passwordResponse::pointer>(choice.get());
}

inline ConferenceResponse::passwordResponse::reference ConferenceResponse::select_passwordResponse ()
{
    return *static_cast<passwordResponse::pointer>(setSelection(passwordResponse::id_, ASN1::AbstractData::create( &passwordResponse::value_type::theInfo)));
}

inline ConferenceResponse::passwordResponse::reference ConferenceResponse::select_passwordResponse (ConferenceResponse::passwordResponse::const_reference value)
{
    return select_passwordResponse() = value;
}

inline bool ConferenceResponse::passwordResponse_isSelected() const
{ 
    return currentSelection() == passwordResponse::id_; 
}

inline ConferenceResponse::terminalListResponse::const_reference ConferenceResponse::get_terminalListResponse () const
{
    assert(currentSelection() ==terminalListResponse::id_);
    return *static_cast<terminalListResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::terminalListResponse::reference ConferenceResponse::ref_terminalListResponse ()
{
    assert(currentSelection() ==terminalListResponse::id_);
    return *static_cast<terminalListResponse::pointer>(choice.get());
}

inline ConferenceResponse::terminalListResponse::reference ConferenceResponse::select_terminalListResponse ()
{
    return *static_cast<terminalListResponse::pointer>(setSelection(terminalListResponse::id_, ASN1::AbstractData::create( &terminalListResponse::value_type::theInfo)));
}

inline ConferenceResponse::terminalListResponse::reference ConferenceResponse::select_terminalListResponse (ConferenceResponse::terminalListResponse::const_reference value)
{
    return select_terminalListResponse() = value;
}

inline bool ConferenceResponse::terminalListResponse_isSelected() const
{ 
    return currentSelection() == terminalListResponse::id_; 
}

inline ConferenceResponse::videoCommandReject::reference ConferenceResponse::select_videoCommandReject ()
{
    return *static_cast<videoCommandReject::pointer>(setSelection(videoCommandReject::id_, ASN1::AbstractData::create( &videoCommandReject::value_type::theInfo)));
}

inline bool ConferenceResponse::videoCommandReject_isSelected() const
{ 
    return currentSelection() == videoCommandReject::id_; 
}

inline ConferenceResponse::terminalDropReject::reference ConferenceResponse::select_terminalDropReject ()
{
    return *static_cast<terminalDropReject::pointer>(setSelection(terminalDropReject::id_, ASN1::AbstractData::create( &terminalDropReject::value_type::theInfo)));
}

inline bool ConferenceResponse::terminalDropReject_isSelected() const
{ 
    return currentSelection() == terminalDropReject::id_; 
}

inline ConferenceResponse::makeMeChairResponse::const_reference ConferenceResponse::get_makeMeChairResponse () const
{
    assert(currentSelection() ==makeMeChairResponse::id_);
    return *static_cast<makeMeChairResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::makeMeChairResponse::reference ConferenceResponse::ref_makeMeChairResponse ()
{
    assert(currentSelection() ==makeMeChairResponse::id_);
    return *static_cast<makeMeChairResponse::pointer>(choice.get());
}

inline ConferenceResponse::makeMeChairResponse::reference ConferenceResponse::select_makeMeChairResponse ()
{
    return *static_cast<makeMeChairResponse::pointer>(setSelection(makeMeChairResponse::id_, ASN1::AbstractData::create( &makeMeChairResponse::value_type::theInfo)));
}

inline ConferenceResponse::makeMeChairResponse::reference ConferenceResponse::select_makeMeChairResponse (ConferenceResponse::makeMeChairResponse::const_reference value)
{
    return select_makeMeChairResponse() = value;
}

inline bool ConferenceResponse::makeMeChairResponse_isSelected() const
{ 
    return currentSelection() == makeMeChairResponse::id_; 
}

inline ConferenceResponse::extensionAddressResponse::const_reference ConferenceResponse::get_extensionAddressResponse () const
{
    assert(currentSelection() ==extensionAddressResponse::id_);
    return *static_cast<extensionAddressResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::extensionAddressResponse::reference ConferenceResponse::ref_extensionAddressResponse ()
{
    assert(currentSelection() ==extensionAddressResponse::id_);
    return *static_cast<extensionAddressResponse::pointer>(choice.get());
}

inline ConferenceResponse::extensionAddressResponse::reference ConferenceResponse::select_extensionAddressResponse ()
{
    return *static_cast<extensionAddressResponse::pointer>(setSelection(extensionAddressResponse::id_, ASN1::AbstractData::create( &extensionAddressResponse::value_type::theInfo)));
}

inline ConferenceResponse::extensionAddressResponse::reference ConferenceResponse::select_extensionAddressResponse (ConferenceResponse::extensionAddressResponse::const_reference value)
{
    return select_extensionAddressResponse() = value;
}

inline bool ConferenceResponse::extensionAddressResponse_isSelected() const
{ 
    return currentSelection() == extensionAddressResponse::id_; 
}

inline ConferenceResponse::chairTokenOwnerResponse::const_reference ConferenceResponse::get_chairTokenOwnerResponse () const
{
    assert(currentSelection() ==chairTokenOwnerResponse::id_);
    return *static_cast<chairTokenOwnerResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::chairTokenOwnerResponse::reference ConferenceResponse::ref_chairTokenOwnerResponse ()
{
    assert(currentSelection() ==chairTokenOwnerResponse::id_);
    return *static_cast<chairTokenOwnerResponse::pointer>(choice.get());
}

inline ConferenceResponse::chairTokenOwnerResponse::reference ConferenceResponse::select_chairTokenOwnerResponse ()
{
    return *static_cast<chairTokenOwnerResponse::pointer>(setSelection(chairTokenOwnerResponse::id_, ASN1::AbstractData::create( &chairTokenOwnerResponse::value_type::theInfo)));
}

inline ConferenceResponse::chairTokenOwnerResponse::reference ConferenceResponse::select_chairTokenOwnerResponse (ConferenceResponse::chairTokenOwnerResponse::const_reference value)
{
    return select_chairTokenOwnerResponse() = value;
}

inline bool ConferenceResponse::chairTokenOwnerResponse_isSelected() const
{ 
    return currentSelection() == chairTokenOwnerResponse::id_; 
}

inline ConferenceResponse::terminalCertificateResponse::const_reference ConferenceResponse::get_terminalCertificateResponse () const
{
    assert(currentSelection() ==terminalCertificateResponse::id_);
    return *static_cast<terminalCertificateResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::terminalCertificateResponse::reference ConferenceResponse::ref_terminalCertificateResponse ()
{
    assert(currentSelection() ==terminalCertificateResponse::id_);
    return *static_cast<terminalCertificateResponse::pointer>(choice.get());
}

inline ConferenceResponse::terminalCertificateResponse::reference ConferenceResponse::select_terminalCertificateResponse ()
{
    return *static_cast<terminalCertificateResponse::pointer>(setSelection(terminalCertificateResponse::id_, ASN1::AbstractData::create( &terminalCertificateResponse::value_type::theInfo)));
}

inline ConferenceResponse::terminalCertificateResponse::reference ConferenceResponse::select_terminalCertificateResponse (ConferenceResponse::terminalCertificateResponse::const_reference value)
{
    return select_terminalCertificateResponse() = value;
}

inline bool ConferenceResponse::terminalCertificateResponse_isSelected() const
{ 
    return currentSelection() == terminalCertificateResponse::id_; 
}

inline ConferenceResponse::broadcastMyLogicalChannelResponse::const_reference ConferenceResponse::get_broadcastMyLogicalChannelResponse () const
{
    assert(currentSelection() ==broadcastMyLogicalChannelResponse::id_);
    return *static_cast<broadcastMyLogicalChannelResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::broadcastMyLogicalChannelResponse::reference ConferenceResponse::ref_broadcastMyLogicalChannelResponse ()
{
    assert(currentSelection() ==broadcastMyLogicalChannelResponse::id_);
    return *static_cast<broadcastMyLogicalChannelResponse::pointer>(choice.get());
}

inline ConferenceResponse::broadcastMyLogicalChannelResponse::reference ConferenceResponse::select_broadcastMyLogicalChannelResponse ()
{
    return *static_cast<broadcastMyLogicalChannelResponse::pointer>(setSelection(broadcastMyLogicalChannelResponse::id_, ASN1::AbstractData::create( &broadcastMyLogicalChannelResponse::value_type::theInfo)));
}

inline ConferenceResponse::broadcastMyLogicalChannelResponse::reference ConferenceResponse::select_broadcastMyLogicalChannelResponse (ConferenceResponse::broadcastMyLogicalChannelResponse::const_reference value)
{
    return select_broadcastMyLogicalChannelResponse() = value;
}

inline bool ConferenceResponse::broadcastMyLogicalChannelResponse_isSelected() const
{ 
    return currentSelection() == broadcastMyLogicalChannelResponse::id_; 
}

inline ConferenceResponse::makeTerminalBroadcasterResponse::const_reference ConferenceResponse::get_makeTerminalBroadcasterResponse () const
{
    assert(currentSelection() ==makeTerminalBroadcasterResponse::id_);
    return *static_cast<makeTerminalBroadcasterResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::makeTerminalBroadcasterResponse::reference ConferenceResponse::ref_makeTerminalBroadcasterResponse ()
{
    assert(currentSelection() ==makeTerminalBroadcasterResponse::id_);
    return *static_cast<makeTerminalBroadcasterResponse::pointer>(choice.get());
}

inline ConferenceResponse::makeTerminalBroadcasterResponse::reference ConferenceResponse::select_makeTerminalBroadcasterResponse ()
{
    return *static_cast<makeTerminalBroadcasterResponse::pointer>(setSelection(makeTerminalBroadcasterResponse::id_, ASN1::AbstractData::create( &makeTerminalBroadcasterResponse::value_type::theInfo)));
}

inline ConferenceResponse::makeTerminalBroadcasterResponse::reference ConferenceResponse::select_makeTerminalBroadcasterResponse (ConferenceResponse::makeTerminalBroadcasterResponse::const_reference value)
{
    return select_makeTerminalBroadcasterResponse() = value;
}

inline bool ConferenceResponse::makeTerminalBroadcasterResponse_isSelected() const
{ 
    return currentSelection() == makeTerminalBroadcasterResponse::id_; 
}

inline ConferenceResponse::sendThisSourceResponse::const_reference ConferenceResponse::get_sendThisSourceResponse () const
{
    assert(currentSelection() ==sendThisSourceResponse::id_);
    return *static_cast<sendThisSourceResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::sendThisSourceResponse::reference ConferenceResponse::ref_sendThisSourceResponse ()
{
    assert(currentSelection() ==sendThisSourceResponse::id_);
    return *static_cast<sendThisSourceResponse::pointer>(choice.get());
}

inline ConferenceResponse::sendThisSourceResponse::reference ConferenceResponse::select_sendThisSourceResponse ()
{
    return *static_cast<sendThisSourceResponse::pointer>(setSelection(sendThisSourceResponse::id_, ASN1::AbstractData::create( &sendThisSourceResponse::value_type::theInfo)));
}

inline ConferenceResponse::sendThisSourceResponse::reference ConferenceResponse::select_sendThisSourceResponse (ConferenceResponse::sendThisSourceResponse::const_reference value)
{
    return select_sendThisSourceResponse() = value;
}

inline bool ConferenceResponse::sendThisSourceResponse_isSelected() const
{ 
    return currentSelection() == sendThisSourceResponse::id_; 
}

inline ConferenceResponse::requestAllTerminalIDsResponse::const_reference ConferenceResponse::get_requestAllTerminalIDsResponse () const
{
    assert(currentSelection() ==requestAllTerminalIDsResponse::id_);
    return *static_cast<requestAllTerminalIDsResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::requestAllTerminalIDsResponse::reference ConferenceResponse::ref_requestAllTerminalIDsResponse ()
{
    assert(currentSelection() ==requestAllTerminalIDsResponse::id_);
    return *static_cast<requestAllTerminalIDsResponse::pointer>(choice.get());
}

inline ConferenceResponse::requestAllTerminalIDsResponse::reference ConferenceResponse::select_requestAllTerminalIDsResponse ()
{
    return *static_cast<requestAllTerminalIDsResponse::pointer>(setSelection(requestAllTerminalIDsResponse::id_, ASN1::AbstractData::create( &requestAllTerminalIDsResponse::value_type::theInfo)));
}

inline ConferenceResponse::requestAllTerminalIDsResponse::reference ConferenceResponse::select_requestAllTerminalIDsResponse (ConferenceResponse::requestAllTerminalIDsResponse::const_reference value)
{
    return select_requestAllTerminalIDsResponse() = value;
}

inline bool ConferenceResponse::requestAllTerminalIDsResponse_isSelected() const
{ 
    return currentSelection() == requestAllTerminalIDsResponse::id_; 
}

inline ConferenceResponse::remoteMCResponse::const_reference ConferenceResponse::get_remoteMCResponse () const
{
    assert(currentSelection() ==remoteMCResponse::id_);
    return *static_cast<remoteMCResponse::const_pointer>(choice.get());
}

inline ConferenceResponse::remoteMCResponse::reference ConferenceResponse::ref_remoteMCResponse ()
{
    assert(currentSelection() ==remoteMCResponse::id_);
    return *static_cast<remoteMCResponse::pointer>(choice.get());
}

inline ConferenceResponse::remoteMCResponse::reference ConferenceResponse::select_remoteMCResponse ()
{
    return *static_cast<remoteMCResponse::pointer>(setSelection(remoteMCResponse::id_, ASN1::AbstractData::create( &remoteMCResponse::value_type::theInfo)));
}

inline ConferenceResponse::remoteMCResponse::reference ConferenceResponse::select_remoteMCResponse (ConferenceResponse::remoteMCResponse::const_reference value)
{
    return select_remoteMCResponse() = value;
}

inline bool ConferenceResponse::remoteMCResponse_isSelected() const
{ 
    return currentSelection() == remoteMCResponse::id_; 
}

inline ConferenceResponse::ConferenceResponse(mCTerminalIDResponse::Id id, mCTerminalIDResponse::const_reference value)
  : Inherited(&theInfo, id, new mCTerminalIDResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(terminalIDResponse::Id id, terminalIDResponse::const_reference value)
  : Inherited(&theInfo, id, new terminalIDResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(conferenceIDResponse::Id id, conferenceIDResponse::const_reference value)
  : Inherited(&theInfo, id, new conferenceIDResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(passwordResponse::Id id, passwordResponse::const_reference value)
  : Inherited(&theInfo, id, new passwordResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(terminalListResponse::Id id, terminalListResponse::const_reference value)
  : Inherited(&theInfo, id, new terminalListResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(videoCommandReject::Id id, videoCommandReject::const_reference value)
  : Inherited(&theInfo, id, new videoCommandReject::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(terminalDropReject::Id id, terminalDropReject::const_reference value)
  : Inherited(&theInfo, id, new terminalDropReject::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(makeMeChairResponse::Id id, makeMeChairResponse::const_reference value)
  : Inherited(&theInfo, id, new makeMeChairResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(extensionAddressResponse::Id id, extensionAddressResponse::const_reference value)
  : Inherited(&theInfo, id, new extensionAddressResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(chairTokenOwnerResponse::Id id, chairTokenOwnerResponse::const_reference value)
  : Inherited(&theInfo, id, new chairTokenOwnerResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(terminalCertificateResponse::Id id, terminalCertificateResponse::const_reference value)
  : Inherited(&theInfo, id, new terminalCertificateResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(broadcastMyLogicalChannelResponse::Id id, broadcastMyLogicalChannelResponse::const_reference value)
  : Inherited(&theInfo, id, new broadcastMyLogicalChannelResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(makeTerminalBroadcasterResponse::Id id, makeTerminalBroadcasterResponse::const_reference value)
  : Inherited(&theInfo, id, new makeTerminalBroadcasterResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(sendThisSourceResponse::Id id, sendThisSourceResponse::const_reference value)
  : Inherited(&theInfo, id, new sendThisSourceResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(requestAllTerminalIDsResponse::Id id, requestAllTerminalIDsResponse::const_reference value)
  : Inherited(&theInfo, id, new requestAllTerminalIDsResponse::value_type(value) )
{ }

inline ConferenceResponse::ConferenceResponse(remoteMCResponse::Id id, remoteMCResponse::const_reference value)
  : Inherited(&theInfo, id, new remoteMCResponse::value_type(value) )
{ }


inline void ConferenceResponse::swap(ConferenceResponse & other)
{  Inherited::swap(other); }

inline ConferenceResponse* ConferenceResponse::clone() const
{ return static_cast<ConferenceResponse*> (Inherited::clone()); }

inline bool ConferenceResponse::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MultilinkIndication::nonStandard::const_reference MultilinkIndication::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline MultilinkIndication::nonStandard::reference MultilinkIndication::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline MultilinkIndication::nonStandard::reference MultilinkIndication::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline MultilinkIndication::nonStandard::reference MultilinkIndication::select_nonStandard (MultilinkIndication::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool MultilinkIndication::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline MultilinkIndication::crcDesired::const_reference MultilinkIndication::get_crcDesired () const
{
    assert(currentSelection() ==crcDesired::id_);
    return *static_cast<crcDesired::const_pointer>(choice.get());
}

inline MultilinkIndication::crcDesired::reference MultilinkIndication::ref_crcDesired ()
{
    assert(currentSelection() ==crcDesired::id_);
    return *static_cast<crcDesired::pointer>(choice.get());
}

inline MultilinkIndication::crcDesired::reference MultilinkIndication::select_crcDesired ()
{
    return *static_cast<crcDesired::pointer>(setSelection(crcDesired::id_, ASN1::AbstractData::create( &crcDesired::value_type::theInfo)));
}

inline MultilinkIndication::crcDesired::reference MultilinkIndication::select_crcDesired (MultilinkIndication::crcDesired::const_reference value)
{
    return select_crcDesired() = value;
}

inline bool MultilinkIndication::crcDesired_isSelected() const
{ 
    return currentSelection() == crcDesired::id_; 
}

inline MultilinkIndication::excessiveError::const_reference MultilinkIndication::get_excessiveError () const
{
    assert(currentSelection() ==excessiveError::id_);
    return *static_cast<excessiveError::const_pointer>(choice.get());
}

inline MultilinkIndication::excessiveError::reference MultilinkIndication::ref_excessiveError ()
{
    assert(currentSelection() ==excessiveError::id_);
    return *static_cast<excessiveError::pointer>(choice.get());
}

inline MultilinkIndication::excessiveError::reference MultilinkIndication::select_excessiveError ()
{
    return *static_cast<excessiveError::pointer>(setSelection(excessiveError::id_, ASN1::AbstractData::create( &excessiveError::value_type::theInfo)));
}

inline MultilinkIndication::excessiveError::reference MultilinkIndication::select_excessiveError (MultilinkIndication::excessiveError::const_reference value)
{
    return select_excessiveError() = value;
}

inline bool MultilinkIndication::excessiveError_isSelected() const
{ 
    return currentSelection() == excessiveError::id_; 
}

inline MultilinkIndication::MultilinkIndication(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline MultilinkIndication::MultilinkIndication(crcDesired::Id id, crcDesired::const_reference value)
  : Inherited(&theInfo, id, new crcDesired::value_type(value) )
{ }

inline MultilinkIndication::MultilinkIndication(excessiveError::Id id, excessiveError::const_reference value)
  : Inherited(&theInfo, id, new excessiveError::value_type(value) )
{ }


inline void MultilinkIndication::swap(MultilinkIndication & other)
{  Inherited::swap(other); }

inline MultilinkIndication* MultilinkIndication::clone() const
{ return static_cast<MultilinkIndication*> (Inherited::clone()); }

inline bool MultilinkIndication::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DialingInformationNetworkType::nonStandard::const_reference DialingInformationNetworkType::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline DialingInformationNetworkType::nonStandard::reference DialingInformationNetworkType::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline DialingInformationNetworkType::nonStandard::reference DialingInformationNetworkType::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline DialingInformationNetworkType::nonStandard::reference DialingInformationNetworkType::select_nonStandard (DialingInformationNetworkType::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool DialingInformationNetworkType::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline DialingInformationNetworkType::n_isdn::reference DialingInformationNetworkType::select_n_isdn ()
{
    return *static_cast<n_isdn::pointer>(setSelection(n_isdn::id_, ASN1::AbstractData::create( &n_isdn::value_type::theInfo)));
}

inline bool DialingInformationNetworkType::n_isdn_isSelected() const
{ 
    return currentSelection() == n_isdn::id_; 
}

inline DialingInformationNetworkType::gstn::reference DialingInformationNetworkType::select_gstn ()
{
    return *static_cast<gstn::pointer>(setSelection(gstn::id_, ASN1::AbstractData::create( &gstn::value_type::theInfo)));
}

inline bool DialingInformationNetworkType::gstn_isSelected() const
{ 
    return currentSelection() == gstn::id_; 
}

inline DialingInformationNetworkType::mobile::reference DialingInformationNetworkType::select_mobile ()
{
    return *static_cast<mobile::pointer>(setSelection(mobile::id_, ASN1::AbstractData::create( &mobile::value_type::theInfo)));
}

inline bool DialingInformationNetworkType::mobile_isSelected() const
{ 
    return currentSelection() == mobile::id_; 
}

inline DialingInformationNetworkType::DialingInformationNetworkType(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline DialingInformationNetworkType::DialingInformationNetworkType(n_isdn::Id id, n_isdn::const_reference value)
  : Inherited(&theInfo, id, new n_isdn::value_type(value) )
{ }

inline DialingInformationNetworkType::DialingInformationNetworkType(gstn::Id id, gstn::const_reference value)
  : Inherited(&theInfo, id, new gstn::value_type(value) )
{ }

inline DialingInformationNetworkType::DialingInformationNetworkType(mobile::Id id, mobile::const_reference value)
  : Inherited(&theInfo, id, new mobile::value_type(value) )
{ }


inline void DialingInformationNetworkType::swap(DialingInformationNetworkType & other)
{  Inherited::swap(other); }

inline DialingInformationNetworkType* DialingInformationNetworkType::clone() const
{ return static_cast<DialingInformationNetworkType*> (Inherited::clone()); }

inline bool DialingInformationNetworkType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline EncryptionCommand::encryptionSE::const_reference EncryptionCommand::get_encryptionSE () const
{
    assert(currentSelection() ==encryptionSE::id_);
    return *static_cast<encryptionSE::const_pointer>(choice.get());
}

inline EncryptionCommand::encryptionSE::reference EncryptionCommand::ref_encryptionSE ()
{
    assert(currentSelection() ==encryptionSE::id_);
    return *static_cast<encryptionSE::pointer>(choice.get());
}

inline EncryptionCommand::encryptionSE::reference EncryptionCommand::select_encryptionSE ()
{
    return *static_cast<encryptionSE::pointer>(setSelection(encryptionSE::id_, ASN1::AbstractData::create( &encryptionSE::value_type::theInfo)));
}

inline EncryptionCommand::encryptionSE::reference EncryptionCommand::select_encryptionSE (const std::vector<char>& value)
{
    return select_encryptionSE() = value;
}

inline bool EncryptionCommand::encryptionSE_isSelected() const
{ 
    return currentSelection() == encryptionSE::id_; 
}

inline EncryptionCommand::encryptionIVRequest::reference EncryptionCommand::select_encryptionIVRequest ()
{
    return *static_cast<encryptionIVRequest::pointer>(setSelection(encryptionIVRequest::id_, ASN1::AbstractData::create( &encryptionIVRequest::value_type::theInfo)));
}

inline bool EncryptionCommand::encryptionIVRequest_isSelected() const
{ 
    return currentSelection() == encryptionIVRequest::id_; 
}

inline EncryptionCommand::encryptionAlgorithmID::const_reference EncryptionCommand::get_encryptionAlgorithmID () const
{
    assert(currentSelection() ==encryptionAlgorithmID::id_);
    return *static_cast<encryptionAlgorithmID::const_pointer>(choice.get());
}

inline EncryptionCommand::encryptionAlgorithmID::reference EncryptionCommand::ref_encryptionAlgorithmID ()
{
    assert(currentSelection() ==encryptionAlgorithmID::id_);
    return *static_cast<encryptionAlgorithmID::pointer>(choice.get());
}

inline EncryptionCommand::encryptionAlgorithmID::reference EncryptionCommand::select_encryptionAlgorithmID ()
{
    return *static_cast<encryptionAlgorithmID::pointer>(setSelection(encryptionAlgorithmID::id_, ASN1::AbstractData::create( &encryptionAlgorithmID::value_type::theInfo)));
}

inline EncryptionCommand::encryptionAlgorithmID::reference EncryptionCommand::select_encryptionAlgorithmID (EncryptionCommand::encryptionAlgorithmID::const_reference value)
{
    return select_encryptionAlgorithmID() = value;
}

inline bool EncryptionCommand::encryptionAlgorithmID_isSelected() const
{ 
    return currentSelection() == encryptionAlgorithmID::id_; 
}

inline EncryptionCommand::EncryptionCommand(encryptionSE::Id id, const std::vector<char>& value)
  : Inherited(&theInfo, id, new encryptionSE::value_type(value) )
{ }

inline EncryptionCommand::EncryptionCommand(encryptionIVRequest::Id id, encryptionIVRequest::const_reference value)
  : Inherited(&theInfo, id, new encryptionIVRequest::value_type(value) )
{ }

inline EncryptionCommand::EncryptionCommand(encryptionAlgorithmID::Id id, encryptionAlgorithmID::const_reference value)
  : Inherited(&theInfo, id, new encryptionAlgorithmID::value_type(value) )
{ }


inline void EncryptionCommand::swap(EncryptionCommand & other)
{  Inherited::swap(other); }

inline EncryptionCommand* EncryptionCommand::clone() const
{ return static_cast<EncryptionCommand*> (Inherited::clone()); }

inline bool EncryptionCommand::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NewATMVCCommand::resourceID::const_reference NewATMVCCommand::get_resourceID () const
{ return *static_cast<resourceID::const_pointer>(fields[0]);}

inline NewATMVCCommand::resourceID::reference NewATMVCCommand::ref_resourceID ()
{ return *static_cast<resourceID::pointer>(fields[0]);}

inline NewATMVCCommand::resourceID::reference NewATMVCCommand::set_resourceID ()
{ return *static_cast<resourceID::pointer>(fields[0]);}

inline NewATMVCCommand::resourceID::reference NewATMVCCommand::set_resourceID (resourceID::value_type::int_type value)
{ return *static_cast<resourceID::pointer>(fields[0]) = value ;}

inline NewATMVCCommand::bitRate::const_reference NewATMVCCommand::get_bitRate () const
{ return *static_cast<bitRate::const_pointer>(fields[1]);}

inline NewATMVCCommand::bitRate::reference NewATMVCCommand::ref_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[1]);}

inline NewATMVCCommand::bitRate::reference NewATMVCCommand::set_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[1]);}

inline NewATMVCCommand::bitRate::reference NewATMVCCommand::set_bitRate (bitRate::value_type::int_type value)
{ return *static_cast<bitRate::pointer>(fields[1]) = value ;}

inline NewATMVCCommand::bitRateLockedToPCRClock::const_reference NewATMVCCommand::get_bitRateLockedToPCRClock () const
{ return *static_cast<bitRateLockedToPCRClock::const_pointer>(fields[2]);}

inline NewATMVCCommand::bitRateLockedToPCRClock::reference NewATMVCCommand::ref_bitRateLockedToPCRClock ()
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[2]);}

inline NewATMVCCommand::bitRateLockedToPCRClock::reference NewATMVCCommand::set_bitRateLockedToPCRClock ()
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[2]);}

inline NewATMVCCommand::bitRateLockedToPCRClock::reference NewATMVCCommand::set_bitRateLockedToPCRClock (bool value)
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[2]) = value ;}

inline NewATMVCCommand::bitRateLockedToNetworkClock::const_reference NewATMVCCommand::get_bitRateLockedToNetworkClock () const
{ return *static_cast<bitRateLockedToNetworkClock::const_pointer>(fields[3]);}

inline NewATMVCCommand::bitRateLockedToNetworkClock::reference NewATMVCCommand::ref_bitRateLockedToNetworkClock ()
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[3]);}

inline NewATMVCCommand::bitRateLockedToNetworkClock::reference NewATMVCCommand::set_bitRateLockedToNetworkClock ()
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[3]);}

inline NewATMVCCommand::bitRateLockedToNetworkClock::reference NewATMVCCommand::set_bitRateLockedToNetworkClock (bool value)
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[3]) = value ;}

inline NewATMVCCommand::aal::const_reference NewATMVCCommand::get_aal () const
{ return *static_cast<aal::const_pointer>(fields[4]);}

inline NewATMVCCommand::aal::reference NewATMVCCommand::ref_aal ()
{ return *static_cast<aal::pointer>(fields[4]);}

inline NewATMVCCommand::aal::reference NewATMVCCommand::set_aal ()
{ return *static_cast<aal::pointer>(fields[4]);}

inline NewATMVCCommand::aal::reference NewATMVCCommand::set_aal (aal::const_reference value)
{ return *static_cast<aal::pointer>(fields[4]) = value ;}

inline NewATMVCCommand::multiplex::const_reference NewATMVCCommand::get_multiplex () const
{ return *static_cast<multiplex::const_pointer>(fields[5]);}

inline NewATMVCCommand::multiplex::reference NewATMVCCommand::ref_multiplex ()
{ return *static_cast<multiplex::pointer>(fields[5]);}

inline NewATMVCCommand::multiplex::reference NewATMVCCommand::set_multiplex ()
{ return *static_cast<multiplex::pointer>(fields[5]);}

inline NewATMVCCommand::multiplex::reference NewATMVCCommand::set_multiplex (multiplex::const_reference value)
{ return *static_cast<multiplex::pointer>(fields[5]) = value ;}

inline NewATMVCCommand::reverseParameters::const_reference NewATMVCCommand::get_reverseParameters () const
{ return *static_cast<reverseParameters::const_pointer>(fields[6]);}

inline NewATMVCCommand::reverseParameters::reference NewATMVCCommand::ref_reverseParameters ()
{ return *static_cast<reverseParameters::pointer>(fields[6]);}

inline NewATMVCCommand::reverseParameters::reference NewATMVCCommand::set_reverseParameters ()
{ return *static_cast<reverseParameters::pointer>(fields[6]);}

inline NewATMVCCommand::reverseParameters::reference NewATMVCCommand::set_reverseParameters (reverseParameters::const_reference value)
{ return *static_cast<reverseParameters::pointer>(fields[6]) = value ;}

inline void NewATMVCCommand::swap(NewATMVCCommand& other)
{ Inherited::swap(other); }

inline NewATMVCCommand* NewATMVCCommand::clone() const
{ return static_cast<NewATMVCCommand*> (Inherited::clone()); }

inline MiscellaneousIndication::logicalChannelNumber::const_reference MiscellaneousIndication::get_logicalChannelNumber () const
{ return *static_cast<logicalChannelNumber::const_pointer>(fields[0]);}

inline MiscellaneousIndication::logicalChannelNumber::reference MiscellaneousIndication::ref_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]);}

inline MiscellaneousIndication::logicalChannelNumber::reference MiscellaneousIndication::set_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]);}

inline MiscellaneousIndication::logicalChannelNumber::reference MiscellaneousIndication::set_logicalChannelNumber (logicalChannelNumber::value_type::int_type value)
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]) = value ;}

inline MiscellaneousIndication::type::const_reference MiscellaneousIndication::get_type () const
{ return *static_cast<type::const_pointer>(fields[1]);}

inline MiscellaneousIndication::type::reference MiscellaneousIndication::ref_type ()
{ return *static_cast<type::pointer>(fields[1]);}

inline MiscellaneousIndication::type::reference MiscellaneousIndication::set_type ()
{ return *static_cast<type::pointer>(fields[1]);}

inline MiscellaneousIndication::type::reference MiscellaneousIndication::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[1]) = value ;}

inline void MiscellaneousIndication::swap(MiscellaneousIndication& other)
{ Inherited::swap(other); }

inline MiscellaneousIndication* MiscellaneousIndication::clone() const
{ return static_cast<MiscellaneousIndication*> (Inherited::clone()); }

inline MCLocationIndication::signalAddress::const_reference MCLocationIndication::get_signalAddress () const
{ return *static_cast<signalAddress::const_pointer>(fields[0]);}

inline MCLocationIndication::signalAddress::reference MCLocationIndication::ref_signalAddress ()
{ return *static_cast<signalAddress::pointer>(fields[0]);}

inline MCLocationIndication::signalAddress::reference MCLocationIndication::set_signalAddress ()
{ return *static_cast<signalAddress::pointer>(fields[0]);}

inline MCLocationIndication::signalAddress::reference MCLocationIndication::set_signalAddress (signalAddress::const_reference value)
{ return *static_cast<signalAddress::pointer>(fields[0]) = value ;}

inline void MCLocationIndication::swap(MCLocationIndication& other)
{ Inherited::swap(other); }

inline MCLocationIndication* MCLocationIndication::clone() const
{ return static_cast<MCLocationIndication*> (Inherited::clone()); }

inline NewATMVCIndication::resourceID::const_reference NewATMVCIndication::get_resourceID () const
{ return *static_cast<resourceID::const_pointer>(fields[0]);}

inline NewATMVCIndication::resourceID::reference NewATMVCIndication::ref_resourceID ()
{ return *static_cast<resourceID::pointer>(fields[0]);}

inline NewATMVCIndication::resourceID::reference NewATMVCIndication::set_resourceID ()
{ return *static_cast<resourceID::pointer>(fields[0]);}

inline NewATMVCIndication::resourceID::reference NewATMVCIndication::set_resourceID (resourceID::value_type::int_type value)
{ return *static_cast<resourceID::pointer>(fields[0]) = value ;}

inline NewATMVCIndication::bitRate::const_reference NewATMVCIndication::get_bitRate () const
{ return *static_cast<bitRate::const_pointer>(fields[1]);}

inline NewATMVCIndication::bitRate::reference NewATMVCIndication::ref_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[1]);}

inline NewATMVCIndication::bitRate::reference NewATMVCIndication::set_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[1]);}

inline NewATMVCIndication::bitRate::reference NewATMVCIndication::set_bitRate (bitRate::value_type::int_type value)
{ return *static_cast<bitRate::pointer>(fields[1]) = value ;}

inline NewATMVCIndication::bitRateLockedToPCRClock::const_reference NewATMVCIndication::get_bitRateLockedToPCRClock () const
{ return *static_cast<bitRateLockedToPCRClock::const_pointer>(fields[2]);}

inline NewATMVCIndication::bitRateLockedToPCRClock::reference NewATMVCIndication::ref_bitRateLockedToPCRClock ()
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[2]);}

inline NewATMVCIndication::bitRateLockedToPCRClock::reference NewATMVCIndication::set_bitRateLockedToPCRClock ()
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[2]);}

inline NewATMVCIndication::bitRateLockedToPCRClock::reference NewATMVCIndication::set_bitRateLockedToPCRClock (bool value)
{ return *static_cast<bitRateLockedToPCRClock::pointer>(fields[2]) = value ;}

inline NewATMVCIndication::bitRateLockedToNetworkClock::const_reference NewATMVCIndication::get_bitRateLockedToNetworkClock () const
{ return *static_cast<bitRateLockedToNetworkClock::const_pointer>(fields[3]);}

inline NewATMVCIndication::bitRateLockedToNetworkClock::reference NewATMVCIndication::ref_bitRateLockedToNetworkClock ()
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[3]);}

inline NewATMVCIndication::bitRateLockedToNetworkClock::reference NewATMVCIndication::set_bitRateLockedToNetworkClock ()
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[3]);}

inline NewATMVCIndication::bitRateLockedToNetworkClock::reference NewATMVCIndication::set_bitRateLockedToNetworkClock (bool value)
{ return *static_cast<bitRateLockedToNetworkClock::pointer>(fields[3]) = value ;}

inline NewATMVCIndication::aal::const_reference NewATMVCIndication::get_aal () const
{ return *static_cast<aal::const_pointer>(fields[4]);}

inline NewATMVCIndication::aal::reference NewATMVCIndication::ref_aal ()
{ return *static_cast<aal::pointer>(fields[4]);}

inline NewATMVCIndication::aal::reference NewATMVCIndication::set_aal ()
{ return *static_cast<aal::pointer>(fields[4]);}

inline NewATMVCIndication::aal::reference NewATMVCIndication::set_aal (aal::const_reference value)
{ return *static_cast<aal::pointer>(fields[4]) = value ;}

inline NewATMVCIndication::multiplex::const_reference NewATMVCIndication::get_multiplex () const
{ return *static_cast<multiplex::const_pointer>(fields[5]);}

inline NewATMVCIndication::multiplex::reference NewATMVCIndication::ref_multiplex ()
{ return *static_cast<multiplex::pointer>(fields[5]);}

inline NewATMVCIndication::multiplex::reference NewATMVCIndication::set_multiplex ()
{ return *static_cast<multiplex::pointer>(fields[5]);}

inline NewATMVCIndication::multiplex::reference NewATMVCIndication::set_multiplex (multiplex::const_reference value)
{ return *static_cast<multiplex::pointer>(fields[5]) = value ;}

inline NewATMVCIndication::reverseParameters::const_reference NewATMVCIndication::get_reverseParameters () const
{
  assert(hasOptionalField(e_reverseParameters));
  return *static_cast<reverseParameters::const_pointer>(fields[6]);
}

inline NewATMVCIndication::reverseParameters::reference NewATMVCIndication::ref_reverseParameters ()
{
  assert(hasOptionalField(e_reverseParameters));
  return *static_cast<reverseParameters::pointer>(fields[6]);
}

inline NewATMVCIndication::reverseParameters::reference NewATMVCIndication::set_reverseParameters ()
{
  includeOptionalField( e_reverseParameters, 6);
  return *static_cast<reverseParameters::pointer>(fields[6]);
}

inline NewATMVCIndication::reverseParameters::reference NewATMVCIndication::set_reverseParameters (reverseParameters::const_reference value)
{
  includeOptionalField( e_reverseParameters, 6);
  return *static_cast<reverseParameters::pointer>(fields[6]) = value;
}

inline void NewATMVCIndication::omit_reverseParameters ()
{ removeOptionalField( e_reverseParameters); }

inline bool NewATMVCIndication::reverseParameters_isPresent () const
{ return hasOptionalField( e_reverseParameters); }

inline void NewATMVCIndication::swap(NewATMVCIndication& other)
{ Inherited::swap(other); }

inline NewATMVCIndication* NewATMVCIndication::clone() const
{ return static_cast<NewATMVCIndication*> (Inherited::clone()); }

inline NetworkAccessParameters_networkAddress::q2931Address::const_reference NetworkAccessParameters_networkAddress::get_q2931Address () const
{
    assert(currentSelection() ==q2931Address::id_);
    return *static_cast<q2931Address::const_pointer>(choice.get());
}

inline NetworkAccessParameters_networkAddress::q2931Address::reference NetworkAccessParameters_networkAddress::ref_q2931Address ()
{
    assert(currentSelection() ==q2931Address::id_);
    return *static_cast<q2931Address::pointer>(choice.get());
}

inline NetworkAccessParameters_networkAddress::q2931Address::reference NetworkAccessParameters_networkAddress::select_q2931Address ()
{
    return *static_cast<q2931Address::pointer>(setSelection(q2931Address::id_, ASN1::AbstractData::create( &q2931Address::value_type::theInfo)));
}

inline NetworkAccessParameters_networkAddress::q2931Address::reference NetworkAccessParameters_networkAddress::select_q2931Address (NetworkAccessParameters_networkAddress::q2931Address::const_reference value)
{
    return select_q2931Address() = value;
}

inline bool NetworkAccessParameters_networkAddress::q2931Address_isSelected() const
{ 
    return currentSelection() == q2931Address::id_; 
}

inline NetworkAccessParameters_networkAddress::e164Address::value_type* NetworkAccessParameters_networkAddress::e164Address::value_type::clone() const
{ return static_cast<value_type*> (Inherited::clone()); }

inline bool NetworkAccessParameters_networkAddress::e164Address::value_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NetworkAccessParameters_networkAddress::e164Address::const_reference NetworkAccessParameters_networkAddress::get_e164Address () const
{
    assert(currentSelection() ==e164Address::id_);
    return *static_cast<e164Address::const_pointer>(choice.get());
}

inline NetworkAccessParameters_networkAddress::e164Address::reference NetworkAccessParameters_networkAddress::ref_e164Address ()
{
    assert(currentSelection() ==e164Address::id_);
    return *static_cast<e164Address::pointer>(choice.get());
}

inline NetworkAccessParameters_networkAddress::e164Address::reference NetworkAccessParameters_networkAddress::select_e164Address ()
{
    return *static_cast<e164Address::pointer>(setSelection(e164Address::id_, ASN1::AbstractData::create( &e164Address::value_type::theInfo)));
}

inline NetworkAccessParameters_networkAddress::e164Address::reference NetworkAccessParameters_networkAddress::select_e164Address (const std::string& value)
{
    return select_e164Address() = value;
}

inline bool NetworkAccessParameters_networkAddress::e164Address_isSelected() const
{ 
    return currentSelection() == e164Address::id_; 
}

inline NetworkAccessParameters_networkAddress::localAreaAddress::const_reference NetworkAccessParameters_networkAddress::get_localAreaAddress () const
{
    assert(currentSelection() ==localAreaAddress::id_);
    return *static_cast<localAreaAddress::const_pointer>(choice.get());
}

inline NetworkAccessParameters_networkAddress::localAreaAddress::reference NetworkAccessParameters_networkAddress::ref_localAreaAddress ()
{
    assert(currentSelection() ==localAreaAddress::id_);
    return *static_cast<localAreaAddress::pointer>(choice.get());
}

inline NetworkAccessParameters_networkAddress::localAreaAddress::reference NetworkAccessParameters_networkAddress::select_localAreaAddress ()
{
    return *static_cast<localAreaAddress::pointer>(setSelection(localAreaAddress::id_, ASN1::AbstractData::create( &localAreaAddress::value_type::theInfo)));
}

inline NetworkAccessParameters_networkAddress::localAreaAddress::reference NetworkAccessParameters_networkAddress::select_localAreaAddress (NetworkAccessParameters_networkAddress::localAreaAddress::const_reference value)
{
    return select_localAreaAddress() = value;
}

inline bool NetworkAccessParameters_networkAddress::localAreaAddress_isSelected() const
{ 
    return currentSelection() == localAreaAddress::id_; 
}

inline NetworkAccessParameters_networkAddress::NetworkAccessParameters_networkAddress(q2931Address::Id id, q2931Address::const_reference value)
  : Inherited(&theInfo, id, new q2931Address::value_type(value) )
{ }

inline NetworkAccessParameters_networkAddress::NetworkAccessParameters_networkAddress(e164Address::Id id, const std::string& value)
  : Inherited(&theInfo, id, new e164Address::value_type(value) )
{ }

inline NetworkAccessParameters_networkAddress::NetworkAccessParameters_networkAddress(localAreaAddress::Id id, localAreaAddress::const_reference value)
  : Inherited(&theInfo, id, new localAreaAddress::value_type(value) )
{ }


inline void NetworkAccessParameters_networkAddress::swap(NetworkAccessParameters_networkAddress & other)
{  Inherited::swap(other); }

inline NetworkAccessParameters_networkAddress* NetworkAccessParameters_networkAddress::clone() const
{ return static_cast<NetworkAccessParameters_networkAddress*> (Inherited::clone()); }

inline bool NetworkAccessParameters_networkAddress::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H2250LogicalChannelParameters_mediaPacketization::h261aVideoPacketization::reference H2250LogicalChannelParameters_mediaPacketization::select_h261aVideoPacketization ()
{
    return *static_cast<h261aVideoPacketization::pointer>(setSelection(h261aVideoPacketization::id_, ASN1::AbstractData::create( &h261aVideoPacketization::value_type::theInfo)));
}

inline bool H2250LogicalChannelParameters_mediaPacketization::h261aVideoPacketization_isSelected() const
{ 
    return currentSelection() == h261aVideoPacketization::id_; 
}

inline H2250LogicalChannelParameters_mediaPacketization::rtpPayloadType::const_reference H2250LogicalChannelParameters_mediaPacketization::get_rtpPayloadType () const
{
    assert(currentSelection() ==rtpPayloadType::id_);
    return *static_cast<rtpPayloadType::const_pointer>(choice.get());
}

inline H2250LogicalChannelParameters_mediaPacketization::rtpPayloadType::reference H2250LogicalChannelParameters_mediaPacketization::ref_rtpPayloadType ()
{
    assert(currentSelection() ==rtpPayloadType::id_);
    return *static_cast<rtpPayloadType::pointer>(choice.get());
}

inline H2250LogicalChannelParameters_mediaPacketization::rtpPayloadType::reference H2250LogicalChannelParameters_mediaPacketization::select_rtpPayloadType ()
{
    return *static_cast<rtpPayloadType::pointer>(setSelection(rtpPayloadType::id_, ASN1::AbstractData::create( &rtpPayloadType::value_type::theInfo)));
}

inline H2250LogicalChannelParameters_mediaPacketization::rtpPayloadType::reference H2250LogicalChannelParameters_mediaPacketization::select_rtpPayloadType (H2250LogicalChannelParameters_mediaPacketization::rtpPayloadType::const_reference value)
{
    return select_rtpPayloadType() = value;
}

inline bool H2250LogicalChannelParameters_mediaPacketization::rtpPayloadType_isSelected() const
{ 
    return currentSelection() == rtpPayloadType::id_; 
}

inline H2250LogicalChannelParameters_mediaPacketization::H2250LogicalChannelParameters_mediaPacketization(h261aVideoPacketization::Id id, h261aVideoPacketization::const_reference value)
  : Inherited(&theInfo, id, new h261aVideoPacketization::value_type(value) )
{ }

inline H2250LogicalChannelParameters_mediaPacketization::H2250LogicalChannelParameters_mediaPacketization(rtpPayloadType::Id id, rtpPayloadType::const_reference value)
  : Inherited(&theInfo, id, new rtpPayloadType::value_type(value) )
{ }


inline void H2250LogicalChannelParameters_mediaPacketization::swap(H2250LogicalChannelParameters_mediaPacketization & other)
{  Inherited::swap(other); }

inline H2250LogicalChannelParameters_mediaPacketization* H2250LogicalChannelParameters_mediaPacketization::clone() const
{ return static_cast<H2250LogicalChannelParameters_mediaPacketization*> (Inherited::clone()); }

inline bool H2250LogicalChannelParameters_mediaPacketization::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DepFECData_rfc2733::mode::const_reference DepFECData_rfc2733::get_mode () const
{ return *static_cast<mode::const_pointer>(fields[0]);}

inline DepFECData_rfc2733::mode::reference DepFECData_rfc2733::ref_mode ()
{ return *static_cast<mode::pointer>(fields[0]);}

inline DepFECData_rfc2733::mode::reference DepFECData_rfc2733::set_mode ()
{ return *static_cast<mode::pointer>(fields[0]);}

inline DepFECData_rfc2733::mode::reference DepFECData_rfc2733::set_mode (mode::const_reference value)
{ return *static_cast<mode::pointer>(fields[0]) = value ;}

inline void DepFECData_rfc2733::swap(DepFECData_rfc2733& other)
{ Inherited::swap(other); }

inline DepFECData_rfc2733* DepFECData_rfc2733::clone() const
{ return static_cast<DepFECData_rfc2733*> (Inherited::clone()); }

inline OpenLogicalChannelAck_forwardMultiplexAckParameters::h2250LogicalChannelAckParameters::const_reference OpenLogicalChannelAck_forwardMultiplexAckParameters::get_h2250LogicalChannelAckParameters () const
{
    assert(currentSelection() ==h2250LogicalChannelAckParameters::id_);
    return *static_cast<h2250LogicalChannelAckParameters::const_pointer>(choice.get());
}

inline OpenLogicalChannelAck_forwardMultiplexAckParameters::h2250LogicalChannelAckParameters::reference OpenLogicalChannelAck_forwardMultiplexAckParameters::ref_h2250LogicalChannelAckParameters ()
{
    assert(currentSelection() ==h2250LogicalChannelAckParameters::id_);
    return *static_cast<h2250LogicalChannelAckParameters::pointer>(choice.get());
}

inline OpenLogicalChannelAck_forwardMultiplexAckParameters::h2250LogicalChannelAckParameters::reference OpenLogicalChannelAck_forwardMultiplexAckParameters::select_h2250LogicalChannelAckParameters ()
{
    return *static_cast<h2250LogicalChannelAckParameters::pointer>(setSelection(h2250LogicalChannelAckParameters::id_, ASN1::AbstractData::create( &h2250LogicalChannelAckParameters::value_type::theInfo)));
}

inline OpenLogicalChannelAck_forwardMultiplexAckParameters::h2250LogicalChannelAckParameters::reference OpenLogicalChannelAck_forwardMultiplexAckParameters::select_h2250LogicalChannelAckParameters (OpenLogicalChannelAck_forwardMultiplexAckParameters::h2250LogicalChannelAckParameters::const_reference value)
{
    return select_h2250LogicalChannelAckParameters() = value;
}

inline bool OpenLogicalChannelAck_forwardMultiplexAckParameters::h2250LogicalChannelAckParameters_isSelected() const
{ 
    return currentSelection() == h2250LogicalChannelAckParameters::id_; 
}

inline OpenLogicalChannelAck_forwardMultiplexAckParameters::OpenLogicalChannelAck_forwardMultiplexAckParameters(h2250LogicalChannelAckParameters::Id id, h2250LogicalChannelAckParameters::const_reference value)
  : Inherited(&theInfo, id, new h2250LogicalChannelAckParameters::value_type(value) )
{ }


inline void OpenLogicalChannelAck_forwardMultiplexAckParameters::swap(OpenLogicalChannelAck_forwardMultiplexAckParameters & other)
{  Inherited::swap(other); }

inline OpenLogicalChannelAck_forwardMultiplexAckParameters* OpenLogicalChannelAck_forwardMultiplexAckParameters::clone() const
{ return static_cast<OpenLogicalChannelAck_forwardMultiplexAckParameters*> (Inherited::clone()); }

inline bool OpenLogicalChannelAck_forwardMultiplexAckParameters::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MiscellaneousCommand_type_encryptionUpdateCommand::encryptionSync::const_reference MiscellaneousCommand_type_encryptionUpdateCommand::get_encryptionSync () const
{ return *static_cast<encryptionSync::const_pointer>(fields[0]);}

inline MiscellaneousCommand_type_encryptionUpdateCommand::encryptionSync::reference MiscellaneousCommand_type_encryptionUpdateCommand::ref_encryptionSync ()
{ return *static_cast<encryptionSync::pointer>(fields[0]);}

inline MiscellaneousCommand_type_encryptionUpdateCommand::encryptionSync::reference MiscellaneousCommand_type_encryptionUpdateCommand::set_encryptionSync ()
{ return *static_cast<encryptionSync::pointer>(fields[0]);}

inline MiscellaneousCommand_type_encryptionUpdateCommand::encryptionSync::reference MiscellaneousCommand_type_encryptionUpdateCommand::set_encryptionSync (encryptionSync::const_reference value)
{ return *static_cast<encryptionSync::pointer>(fields[0]) = value ;}

inline MiscellaneousCommand_type_encryptionUpdateCommand::multiplePayloadStream::const_reference MiscellaneousCommand_type_encryptionUpdateCommand::get_multiplePayloadStream () const
{
  assert(hasOptionalField(e_multiplePayloadStream));
  return *static_cast<multiplePayloadStream::const_pointer>(fields[1]);
}

inline MiscellaneousCommand_type_encryptionUpdateCommand::multiplePayloadStream::reference MiscellaneousCommand_type_encryptionUpdateCommand::ref_multiplePayloadStream ()
{
  assert(hasOptionalField(e_multiplePayloadStream));
  return *static_cast<multiplePayloadStream::pointer>(fields[1]);
}

inline MiscellaneousCommand_type_encryptionUpdateCommand::multiplePayloadStream::reference MiscellaneousCommand_type_encryptionUpdateCommand::set_multiplePayloadStream ()
{
  includeOptionalField( e_multiplePayloadStream, 1);
  return *static_cast<multiplePayloadStream::pointer>(fields[1]);
}

inline MiscellaneousCommand_type_encryptionUpdateCommand::multiplePayloadStream::reference MiscellaneousCommand_type_encryptionUpdateCommand::set_multiplePayloadStream (multiplePayloadStream::const_reference value)
{
  includeOptionalField( e_multiplePayloadStream, 1);
  return *static_cast<multiplePayloadStream::pointer>(fields[1]) = value;
}

inline void MiscellaneousCommand_type_encryptionUpdateCommand::omit_multiplePayloadStream ()
{ removeOptionalField( e_multiplePayloadStream); }

inline bool MiscellaneousCommand_type_encryptionUpdateCommand::multiplePayloadStream_isPresent () const
{ return hasOptionalField( e_multiplePayloadStream); }

inline void MiscellaneousCommand_type_encryptionUpdateCommand::swap(MiscellaneousCommand_type_encryptionUpdateCommand& other)
{ Inherited::swap(other); }

inline MiscellaneousCommand_type_encryptionUpdateCommand* MiscellaneousCommand_type_encryptionUpdateCommand::clone() const
{ return static_cast<MiscellaneousCommand_type_encryptionUpdateCommand*> (Inherited::clone()); }

inline GenericMessage::messageIdentifier::const_reference GenericMessage::get_messageIdentifier () const
{ return *static_cast<messageIdentifier::const_pointer>(fields[0]);}

inline GenericMessage::messageIdentifier::reference GenericMessage::ref_messageIdentifier ()
{ return *static_cast<messageIdentifier::pointer>(fields[0]);}

inline GenericMessage::messageIdentifier::reference GenericMessage::set_messageIdentifier ()
{ return *static_cast<messageIdentifier::pointer>(fields[0]);}

inline GenericMessage::messageIdentifier::reference GenericMessage::set_messageIdentifier (messageIdentifier::const_reference value)
{ return *static_cast<messageIdentifier::pointer>(fields[0]) = value ;}

inline GenericMessage::subMessageIdentifier::const_reference GenericMessage::get_subMessageIdentifier () const
{
  assert(hasOptionalField(e_subMessageIdentifier));
  return *static_cast<subMessageIdentifier::const_pointer>(fields[1]);
}

inline GenericMessage::subMessageIdentifier::reference GenericMessage::ref_subMessageIdentifier ()
{
  assert(hasOptionalField(e_subMessageIdentifier));
  return *static_cast<subMessageIdentifier::pointer>(fields[1]);
}

inline GenericMessage::subMessageIdentifier::reference GenericMessage::set_subMessageIdentifier ()
{
  includeOptionalField( e_subMessageIdentifier, 1);
  return *static_cast<subMessageIdentifier::pointer>(fields[1]);
}

inline GenericMessage::subMessageIdentifier::reference GenericMessage::set_subMessageIdentifier (subMessageIdentifier::value_type::int_type value)
{
  includeOptionalField( e_subMessageIdentifier, 1);
  return *static_cast<subMessageIdentifier::pointer>(fields[1]) = value;
}

inline void GenericMessage::omit_subMessageIdentifier ()
{ removeOptionalField( e_subMessageIdentifier); }

inline bool GenericMessage::subMessageIdentifier_isPresent () const
{ return hasOptionalField( e_subMessageIdentifier); }

inline GenericMessage::messageContent::const_reference GenericMessage::get_messageContent () const
{
  assert(hasOptionalField(e_messageContent));
  return *static_cast<messageContent::const_pointer>(fields[2]);
}

inline GenericMessage::messageContent::reference GenericMessage::ref_messageContent ()
{
  assert(hasOptionalField(e_messageContent));
  return *static_cast<messageContent::pointer>(fields[2]);
}

inline GenericMessage::messageContent::reference GenericMessage::set_messageContent ()
{
  includeOptionalField( e_messageContent, 2);
  return *static_cast<messageContent::pointer>(fields[2]);
}

inline GenericMessage::messageContent::reference GenericMessage::set_messageContent (messageContent::const_reference value)
{
  includeOptionalField( e_messageContent, 2);
  return *static_cast<messageContent::pointer>(fields[2]) = value;
}

inline void GenericMessage::omit_messageContent ()
{ removeOptionalField( e_messageContent); }

inline bool GenericMessage::messageContent_isPresent () const
{ return hasOptionalField( e_messageContent); }

inline void GenericMessage::swap(GenericMessage& other)
{ Inherited::swap(other); }

inline GenericMessage* GenericMessage::clone() const
{ return static_cast<GenericMessage*> (Inherited::clone()); }

inline TerminalCapabilitySetAck::sequenceNumber::const_reference TerminalCapabilitySetAck::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline TerminalCapabilitySetAck::sequenceNumber::reference TerminalCapabilitySetAck::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline TerminalCapabilitySetAck::sequenceNumber::reference TerminalCapabilitySetAck::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline TerminalCapabilitySetAck::sequenceNumber::reference TerminalCapabilitySetAck::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline TerminalCapabilitySetAck::genericInformation::const_reference TerminalCapabilitySetAck::get_genericInformation () const
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::const_pointer>(fields[1]);
}

inline TerminalCapabilitySetAck::genericInformation::reference TerminalCapabilitySetAck::ref_genericInformation ()
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::pointer>(fields[1]);
}

inline TerminalCapabilitySetAck::genericInformation::reference TerminalCapabilitySetAck::set_genericInformation ()
{
  includeOptionalField( e_genericInformation, 1);
  return *static_cast<genericInformation::pointer>(fields[1]);
}

inline TerminalCapabilitySetAck::genericInformation::reference TerminalCapabilitySetAck::set_genericInformation (genericInformation::const_reference value)
{
  includeOptionalField( e_genericInformation, 1);
  return *static_cast<genericInformation::pointer>(fields[1]) = value;
}

inline void TerminalCapabilitySetAck::omit_genericInformation ()
{ removeOptionalField( e_genericInformation); }

inline bool TerminalCapabilitySetAck::genericInformation_isPresent () const
{ return hasOptionalField( e_genericInformation); }

inline void TerminalCapabilitySetAck::swap(TerminalCapabilitySetAck& other)
{ Inherited::swap(other); }

inline TerminalCapabilitySetAck* TerminalCapabilitySetAck::clone() const
{ return static_cast<TerminalCapabilitySetAck*> (Inherited::clone()); }

inline TerminalCapabilitySetReject::sequenceNumber::const_reference TerminalCapabilitySetReject::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline TerminalCapabilitySetReject::sequenceNumber::reference TerminalCapabilitySetReject::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline TerminalCapabilitySetReject::sequenceNumber::reference TerminalCapabilitySetReject::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline TerminalCapabilitySetReject::sequenceNumber::reference TerminalCapabilitySetReject::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline TerminalCapabilitySetReject::cause::const_reference TerminalCapabilitySetReject::get_cause () const
{ return *static_cast<cause::const_pointer>(fields[1]);}

inline TerminalCapabilitySetReject::cause::reference TerminalCapabilitySetReject::ref_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline TerminalCapabilitySetReject::cause::reference TerminalCapabilitySetReject::set_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline TerminalCapabilitySetReject::cause::reference TerminalCapabilitySetReject::set_cause (cause::const_reference value)
{ return *static_cast<cause::pointer>(fields[1]) = value ;}

inline TerminalCapabilitySetReject::genericInformation::const_reference TerminalCapabilitySetReject::get_genericInformation () const
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::const_pointer>(fields[2]);
}

inline TerminalCapabilitySetReject::genericInformation::reference TerminalCapabilitySetReject::ref_genericInformation ()
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::pointer>(fields[2]);
}

inline TerminalCapabilitySetReject::genericInformation::reference TerminalCapabilitySetReject::set_genericInformation ()
{
  includeOptionalField( e_genericInformation, 2);
  return *static_cast<genericInformation::pointer>(fields[2]);
}

inline TerminalCapabilitySetReject::genericInformation::reference TerminalCapabilitySetReject::set_genericInformation (genericInformation::const_reference value)
{
  includeOptionalField( e_genericInformation, 2);
  return *static_cast<genericInformation::pointer>(fields[2]) = value;
}

inline void TerminalCapabilitySetReject::omit_genericInformation ()
{ removeOptionalField( e_genericInformation); }

inline bool TerminalCapabilitySetReject::genericInformation_isPresent () const
{ return hasOptionalField( e_genericInformation); }

inline void TerminalCapabilitySetReject::swap(TerminalCapabilitySetReject& other)
{ Inherited::swap(other); }

inline TerminalCapabilitySetReject* TerminalCapabilitySetReject::clone() const
{ return static_cast<TerminalCapabilitySetReject*> (Inherited::clone()); }

inline H222Capability::numberOfVCs::const_reference H222Capability::get_numberOfVCs () const
{ return *static_cast<numberOfVCs::const_pointer>(fields[0]);}

inline H222Capability::numberOfVCs::reference H222Capability::ref_numberOfVCs ()
{ return *static_cast<numberOfVCs::pointer>(fields[0]);}

inline H222Capability::numberOfVCs::reference H222Capability::set_numberOfVCs ()
{ return *static_cast<numberOfVCs::pointer>(fields[0]);}

inline H222Capability::numberOfVCs::reference H222Capability::set_numberOfVCs (numberOfVCs::value_type::int_type value)
{ return *static_cast<numberOfVCs::pointer>(fields[0]) = value ;}

inline H222Capability::vcCapability::const_reference H222Capability::get_vcCapability () const
{ return *static_cast<vcCapability::const_pointer>(fields[1]);}

inline H222Capability::vcCapability::reference H222Capability::ref_vcCapability ()
{ return *static_cast<vcCapability::pointer>(fields[1]);}

inline H222Capability::vcCapability::reference H222Capability::set_vcCapability ()
{ return *static_cast<vcCapability::pointer>(fields[1]);}

inline H222Capability::vcCapability::reference H222Capability::set_vcCapability (vcCapability::const_reference value)
{ return *static_cast<vcCapability::pointer>(fields[1]) = value ;}

inline void H222Capability::swap(H222Capability& other)
{ Inherited::swap(other); }

inline H222Capability* H222Capability::clone() const
{ return static_cast<H222Capability*> (Inherited::clone()); }

inline MediaPacketizationCapability::h261aVideoPacketization::const_reference MediaPacketizationCapability::get_h261aVideoPacketization () const
{ return *static_cast<h261aVideoPacketization::const_pointer>(fields[0]);}

inline MediaPacketizationCapability::h261aVideoPacketization::reference MediaPacketizationCapability::ref_h261aVideoPacketization ()
{ return *static_cast<h261aVideoPacketization::pointer>(fields[0]);}

inline MediaPacketizationCapability::h261aVideoPacketization::reference MediaPacketizationCapability::set_h261aVideoPacketization ()
{ return *static_cast<h261aVideoPacketization::pointer>(fields[0]);}

inline MediaPacketizationCapability::h261aVideoPacketization::reference MediaPacketizationCapability::set_h261aVideoPacketization (bool value)
{ return *static_cast<h261aVideoPacketization::pointer>(fields[0]) = value ;}

inline MediaPacketizationCapability::rtpPayloadType::const_reference MediaPacketizationCapability::get_rtpPayloadType () const
{
  assert(hasOptionalField(e_rtpPayloadType));
  return *static_cast<rtpPayloadType::const_pointer>(fields[1]);
}

inline MediaPacketizationCapability::rtpPayloadType::reference MediaPacketizationCapability::ref_rtpPayloadType ()
{
  assert(hasOptionalField(e_rtpPayloadType));
  return *static_cast<rtpPayloadType::pointer>(fields[1]);
}

inline MediaPacketizationCapability::rtpPayloadType::reference MediaPacketizationCapability::set_rtpPayloadType ()
{
  includeOptionalField( e_rtpPayloadType, 1);
  return *static_cast<rtpPayloadType::pointer>(fields[1]);
}

inline MediaPacketizationCapability::rtpPayloadType::reference MediaPacketizationCapability::set_rtpPayloadType (rtpPayloadType::const_reference value)
{
  includeOptionalField( e_rtpPayloadType, 1);
  return *static_cast<rtpPayloadType::pointer>(fields[1]) = value;
}

inline void MediaPacketizationCapability::omit_rtpPayloadType ()
{ removeOptionalField( e_rtpPayloadType); }

inline bool MediaPacketizationCapability::rtpPayloadType_isPresent () const
{ return hasOptionalField( e_rtpPayloadType); }

inline void MediaPacketizationCapability::swap(MediaPacketizationCapability& other)
{ Inherited::swap(other); }

inline MediaPacketizationCapability* MediaPacketizationCapability::clone() const
{ return static_cast<MediaPacketizationCapability*> (Inherited::clone()); }

inline RedundancyEncodingCapability::redundancyEncodingMethod::const_reference RedundancyEncodingCapability::get_redundancyEncodingMethod () const
{ return *static_cast<redundancyEncodingMethod::const_pointer>(fields[0]);}

inline RedundancyEncodingCapability::redundancyEncodingMethod::reference RedundancyEncodingCapability::ref_redundancyEncodingMethod ()
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]);}

inline RedundancyEncodingCapability::redundancyEncodingMethod::reference RedundancyEncodingCapability::set_redundancyEncodingMethod ()
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]);}

inline RedundancyEncodingCapability::redundancyEncodingMethod::reference RedundancyEncodingCapability::set_redundancyEncodingMethod (redundancyEncodingMethod::const_reference value)
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]) = value ;}

inline RedundancyEncodingCapability::primaryEncoding::const_reference RedundancyEncodingCapability::get_primaryEncoding () const
{ return *static_cast<primaryEncoding::const_pointer>(fields[1]);}

inline RedundancyEncodingCapability::primaryEncoding::reference RedundancyEncodingCapability::ref_primaryEncoding ()
{ return *static_cast<primaryEncoding::pointer>(fields[1]);}

inline RedundancyEncodingCapability::primaryEncoding::reference RedundancyEncodingCapability::set_primaryEncoding ()
{ return *static_cast<primaryEncoding::pointer>(fields[1]);}

inline RedundancyEncodingCapability::primaryEncoding::reference RedundancyEncodingCapability::set_primaryEncoding (primaryEncoding::value_type::int_type value)
{ return *static_cast<primaryEncoding::pointer>(fields[1]) = value ;}

inline RedundancyEncodingCapability::secondaryEncoding::const_reference RedundancyEncodingCapability::get_secondaryEncoding () const
{
  assert(hasOptionalField(e_secondaryEncoding));
  return *static_cast<secondaryEncoding::const_pointer>(fields[2]);
}

inline RedundancyEncodingCapability::secondaryEncoding::reference RedundancyEncodingCapability::ref_secondaryEncoding ()
{
  assert(hasOptionalField(e_secondaryEncoding));
  return *static_cast<secondaryEncoding::pointer>(fields[2]);
}

inline RedundancyEncodingCapability::secondaryEncoding::reference RedundancyEncodingCapability::set_secondaryEncoding ()
{
  includeOptionalField( e_secondaryEncoding, 2);
  return *static_cast<secondaryEncoding::pointer>(fields[2]);
}

inline RedundancyEncodingCapability::secondaryEncoding::reference RedundancyEncodingCapability::set_secondaryEncoding (secondaryEncoding::const_reference value)
{
  includeOptionalField( e_secondaryEncoding, 2);
  return *static_cast<secondaryEncoding::pointer>(fields[2]) = value;
}

inline void RedundancyEncodingCapability::omit_secondaryEncoding ()
{ removeOptionalField( e_secondaryEncoding); }

inline bool RedundancyEncodingCapability::secondaryEncoding_isPresent () const
{ return hasOptionalField( e_secondaryEncoding); }

inline void RedundancyEncodingCapability::swap(RedundancyEncodingCapability& other)
{ Inherited::swap(other); }

inline RedundancyEncodingCapability* RedundancyEncodingCapability::clone() const
{ return static_cast<RedundancyEncodingCapability*> (Inherited::clone()); }

inline H263Options::advancedIntraCodingMode::const_reference H263Options::get_advancedIntraCodingMode () const
{ return *static_cast<advancedIntraCodingMode::const_pointer>(fields[0]);}

inline H263Options::advancedIntraCodingMode::reference H263Options::ref_advancedIntraCodingMode ()
{ return *static_cast<advancedIntraCodingMode::pointer>(fields[0]);}

inline H263Options::advancedIntraCodingMode::reference H263Options::set_advancedIntraCodingMode ()
{ return *static_cast<advancedIntraCodingMode::pointer>(fields[0]);}

inline H263Options::advancedIntraCodingMode::reference H263Options::set_advancedIntraCodingMode (bool value)
{ return *static_cast<advancedIntraCodingMode::pointer>(fields[0]) = value ;}

inline H263Options::deblockingFilterMode::const_reference H263Options::get_deblockingFilterMode () const
{ return *static_cast<deblockingFilterMode::const_pointer>(fields[1]);}

inline H263Options::deblockingFilterMode::reference H263Options::ref_deblockingFilterMode ()
{ return *static_cast<deblockingFilterMode::pointer>(fields[1]);}

inline H263Options::deblockingFilterMode::reference H263Options::set_deblockingFilterMode ()
{ return *static_cast<deblockingFilterMode::pointer>(fields[1]);}

inline H263Options::deblockingFilterMode::reference H263Options::set_deblockingFilterMode (bool value)
{ return *static_cast<deblockingFilterMode::pointer>(fields[1]) = value ;}

inline H263Options::improvedPBFramesMode::const_reference H263Options::get_improvedPBFramesMode () const
{ return *static_cast<improvedPBFramesMode::const_pointer>(fields[2]);}

inline H263Options::improvedPBFramesMode::reference H263Options::ref_improvedPBFramesMode ()
{ return *static_cast<improvedPBFramesMode::pointer>(fields[2]);}

inline H263Options::improvedPBFramesMode::reference H263Options::set_improvedPBFramesMode ()
{ return *static_cast<improvedPBFramesMode::pointer>(fields[2]);}

inline H263Options::improvedPBFramesMode::reference H263Options::set_improvedPBFramesMode (bool value)
{ return *static_cast<improvedPBFramesMode::pointer>(fields[2]) = value ;}

inline H263Options::unlimitedMotionVectors::const_reference H263Options::get_unlimitedMotionVectors () const
{ return *static_cast<unlimitedMotionVectors::const_pointer>(fields[3]);}

inline H263Options::unlimitedMotionVectors::reference H263Options::ref_unlimitedMotionVectors ()
{ return *static_cast<unlimitedMotionVectors::pointer>(fields[3]);}

inline H263Options::unlimitedMotionVectors::reference H263Options::set_unlimitedMotionVectors ()
{ return *static_cast<unlimitedMotionVectors::pointer>(fields[3]);}

inline H263Options::unlimitedMotionVectors::reference H263Options::set_unlimitedMotionVectors (bool value)
{ return *static_cast<unlimitedMotionVectors::pointer>(fields[3]) = value ;}

inline H263Options::fullPictureFreeze::const_reference H263Options::get_fullPictureFreeze () const
{ return *static_cast<fullPictureFreeze::const_pointer>(fields[4]);}

inline H263Options::fullPictureFreeze::reference H263Options::ref_fullPictureFreeze ()
{ return *static_cast<fullPictureFreeze::pointer>(fields[4]);}

inline H263Options::fullPictureFreeze::reference H263Options::set_fullPictureFreeze ()
{ return *static_cast<fullPictureFreeze::pointer>(fields[4]);}

inline H263Options::fullPictureFreeze::reference H263Options::set_fullPictureFreeze (bool value)
{ return *static_cast<fullPictureFreeze::pointer>(fields[4]) = value ;}

inline H263Options::partialPictureFreezeAndRelease::const_reference H263Options::get_partialPictureFreezeAndRelease () const
{ return *static_cast<partialPictureFreezeAndRelease::const_pointer>(fields[5]);}

inline H263Options::partialPictureFreezeAndRelease::reference H263Options::ref_partialPictureFreezeAndRelease ()
{ return *static_cast<partialPictureFreezeAndRelease::pointer>(fields[5]);}

inline H263Options::partialPictureFreezeAndRelease::reference H263Options::set_partialPictureFreezeAndRelease ()
{ return *static_cast<partialPictureFreezeAndRelease::pointer>(fields[5]);}

inline H263Options::partialPictureFreezeAndRelease::reference H263Options::set_partialPictureFreezeAndRelease (bool value)
{ return *static_cast<partialPictureFreezeAndRelease::pointer>(fields[5]) = value ;}

inline H263Options::resizingPartPicFreezeAndRelease::const_reference H263Options::get_resizingPartPicFreezeAndRelease () const
{ return *static_cast<resizingPartPicFreezeAndRelease::const_pointer>(fields[6]);}

inline H263Options::resizingPartPicFreezeAndRelease::reference H263Options::ref_resizingPartPicFreezeAndRelease ()
{ return *static_cast<resizingPartPicFreezeAndRelease::pointer>(fields[6]);}

inline H263Options::resizingPartPicFreezeAndRelease::reference H263Options::set_resizingPartPicFreezeAndRelease ()
{ return *static_cast<resizingPartPicFreezeAndRelease::pointer>(fields[6]);}

inline H263Options::resizingPartPicFreezeAndRelease::reference H263Options::set_resizingPartPicFreezeAndRelease (bool value)
{ return *static_cast<resizingPartPicFreezeAndRelease::pointer>(fields[6]) = value ;}

inline H263Options::fullPictureSnapshot::const_reference H263Options::get_fullPictureSnapshot () const
{ return *static_cast<fullPictureSnapshot::const_pointer>(fields[7]);}

inline H263Options::fullPictureSnapshot::reference H263Options::ref_fullPictureSnapshot ()
{ return *static_cast<fullPictureSnapshot::pointer>(fields[7]);}

inline H263Options::fullPictureSnapshot::reference H263Options::set_fullPictureSnapshot ()
{ return *static_cast<fullPictureSnapshot::pointer>(fields[7]);}

inline H263Options::fullPictureSnapshot::reference H263Options::set_fullPictureSnapshot (bool value)
{ return *static_cast<fullPictureSnapshot::pointer>(fields[7]) = value ;}

inline H263Options::partialPictureSnapshot::const_reference H263Options::get_partialPictureSnapshot () const
{ return *static_cast<partialPictureSnapshot::const_pointer>(fields[8]);}

inline H263Options::partialPictureSnapshot::reference H263Options::ref_partialPictureSnapshot ()
{ return *static_cast<partialPictureSnapshot::pointer>(fields[8]);}

inline H263Options::partialPictureSnapshot::reference H263Options::set_partialPictureSnapshot ()
{ return *static_cast<partialPictureSnapshot::pointer>(fields[8]);}

inline H263Options::partialPictureSnapshot::reference H263Options::set_partialPictureSnapshot (bool value)
{ return *static_cast<partialPictureSnapshot::pointer>(fields[8]) = value ;}

inline H263Options::videoSegmentTagging::const_reference H263Options::get_videoSegmentTagging () const
{ return *static_cast<videoSegmentTagging::const_pointer>(fields[9]);}

inline H263Options::videoSegmentTagging::reference H263Options::ref_videoSegmentTagging ()
{ return *static_cast<videoSegmentTagging::pointer>(fields[9]);}

inline H263Options::videoSegmentTagging::reference H263Options::set_videoSegmentTagging ()
{ return *static_cast<videoSegmentTagging::pointer>(fields[9]);}

inline H263Options::videoSegmentTagging::reference H263Options::set_videoSegmentTagging (bool value)
{ return *static_cast<videoSegmentTagging::pointer>(fields[9]) = value ;}

inline H263Options::progressiveRefinement::const_reference H263Options::get_progressiveRefinement () const
{ return *static_cast<progressiveRefinement::const_pointer>(fields[10]);}

inline H263Options::progressiveRefinement::reference H263Options::ref_progressiveRefinement ()
{ return *static_cast<progressiveRefinement::pointer>(fields[10]);}

inline H263Options::progressiveRefinement::reference H263Options::set_progressiveRefinement ()
{ return *static_cast<progressiveRefinement::pointer>(fields[10]);}

inline H263Options::progressiveRefinement::reference H263Options::set_progressiveRefinement (bool value)
{ return *static_cast<progressiveRefinement::pointer>(fields[10]) = value ;}

inline H263Options::dynamicPictureResizingByFour::const_reference H263Options::get_dynamicPictureResizingByFour () const
{ return *static_cast<dynamicPictureResizingByFour::const_pointer>(fields[11]);}

inline H263Options::dynamicPictureResizingByFour::reference H263Options::ref_dynamicPictureResizingByFour ()
{ return *static_cast<dynamicPictureResizingByFour::pointer>(fields[11]);}

inline H263Options::dynamicPictureResizingByFour::reference H263Options::set_dynamicPictureResizingByFour ()
{ return *static_cast<dynamicPictureResizingByFour::pointer>(fields[11]);}

inline H263Options::dynamicPictureResizingByFour::reference H263Options::set_dynamicPictureResizingByFour (bool value)
{ return *static_cast<dynamicPictureResizingByFour::pointer>(fields[11]) = value ;}

inline H263Options::dynamicPictureResizingSixteenthPel::const_reference H263Options::get_dynamicPictureResizingSixteenthPel () const
{ return *static_cast<dynamicPictureResizingSixteenthPel::const_pointer>(fields[12]);}

inline H263Options::dynamicPictureResizingSixteenthPel::reference H263Options::ref_dynamicPictureResizingSixteenthPel ()
{ return *static_cast<dynamicPictureResizingSixteenthPel::pointer>(fields[12]);}

inline H263Options::dynamicPictureResizingSixteenthPel::reference H263Options::set_dynamicPictureResizingSixteenthPel ()
{ return *static_cast<dynamicPictureResizingSixteenthPel::pointer>(fields[12]);}

inline H263Options::dynamicPictureResizingSixteenthPel::reference H263Options::set_dynamicPictureResizingSixteenthPel (bool value)
{ return *static_cast<dynamicPictureResizingSixteenthPel::pointer>(fields[12]) = value ;}

inline H263Options::dynamicWarpingHalfPel::const_reference H263Options::get_dynamicWarpingHalfPel () const
{ return *static_cast<dynamicWarpingHalfPel::const_pointer>(fields[13]);}

inline H263Options::dynamicWarpingHalfPel::reference H263Options::ref_dynamicWarpingHalfPel ()
{ return *static_cast<dynamicWarpingHalfPel::pointer>(fields[13]);}

inline H263Options::dynamicWarpingHalfPel::reference H263Options::set_dynamicWarpingHalfPel ()
{ return *static_cast<dynamicWarpingHalfPel::pointer>(fields[13]);}

inline H263Options::dynamicWarpingHalfPel::reference H263Options::set_dynamicWarpingHalfPel (bool value)
{ return *static_cast<dynamicWarpingHalfPel::pointer>(fields[13]) = value ;}

inline H263Options::dynamicWarpingSixteenthPel::const_reference H263Options::get_dynamicWarpingSixteenthPel () const
{ return *static_cast<dynamicWarpingSixteenthPel::const_pointer>(fields[14]);}

inline H263Options::dynamicWarpingSixteenthPel::reference H263Options::ref_dynamicWarpingSixteenthPel ()
{ return *static_cast<dynamicWarpingSixteenthPel::pointer>(fields[14]);}

inline H263Options::dynamicWarpingSixteenthPel::reference H263Options::set_dynamicWarpingSixteenthPel ()
{ return *static_cast<dynamicWarpingSixteenthPel::pointer>(fields[14]);}

inline H263Options::dynamicWarpingSixteenthPel::reference H263Options::set_dynamicWarpingSixteenthPel (bool value)
{ return *static_cast<dynamicWarpingSixteenthPel::pointer>(fields[14]) = value ;}

inline H263Options::independentSegmentDecoding::const_reference H263Options::get_independentSegmentDecoding () const
{ return *static_cast<independentSegmentDecoding::const_pointer>(fields[15]);}

inline H263Options::independentSegmentDecoding::reference H263Options::ref_independentSegmentDecoding ()
{ return *static_cast<independentSegmentDecoding::pointer>(fields[15]);}

inline H263Options::independentSegmentDecoding::reference H263Options::set_independentSegmentDecoding ()
{ return *static_cast<independentSegmentDecoding::pointer>(fields[15]);}

inline H263Options::independentSegmentDecoding::reference H263Options::set_independentSegmentDecoding (bool value)
{ return *static_cast<independentSegmentDecoding::pointer>(fields[15]) = value ;}

inline H263Options::slicesInOrder_NonRect::const_reference H263Options::get_slicesInOrder_NonRect () const
{ return *static_cast<slicesInOrder_NonRect::const_pointer>(fields[16]);}

inline H263Options::slicesInOrder_NonRect::reference H263Options::ref_slicesInOrder_NonRect ()
{ return *static_cast<slicesInOrder_NonRect::pointer>(fields[16]);}

inline H263Options::slicesInOrder_NonRect::reference H263Options::set_slicesInOrder_NonRect ()
{ return *static_cast<slicesInOrder_NonRect::pointer>(fields[16]);}

inline H263Options::slicesInOrder_NonRect::reference H263Options::set_slicesInOrder_NonRect (bool value)
{ return *static_cast<slicesInOrder_NonRect::pointer>(fields[16]) = value ;}

inline H263Options::slicesInOrder_Rect::const_reference H263Options::get_slicesInOrder_Rect () const
{ return *static_cast<slicesInOrder_Rect::const_pointer>(fields[17]);}

inline H263Options::slicesInOrder_Rect::reference H263Options::ref_slicesInOrder_Rect ()
{ return *static_cast<slicesInOrder_Rect::pointer>(fields[17]);}

inline H263Options::slicesInOrder_Rect::reference H263Options::set_slicesInOrder_Rect ()
{ return *static_cast<slicesInOrder_Rect::pointer>(fields[17]);}

inline H263Options::slicesInOrder_Rect::reference H263Options::set_slicesInOrder_Rect (bool value)
{ return *static_cast<slicesInOrder_Rect::pointer>(fields[17]) = value ;}

inline H263Options::slicesNoOrder_NonRect::const_reference H263Options::get_slicesNoOrder_NonRect () const
{ return *static_cast<slicesNoOrder_NonRect::const_pointer>(fields[18]);}

inline H263Options::slicesNoOrder_NonRect::reference H263Options::ref_slicesNoOrder_NonRect ()
{ return *static_cast<slicesNoOrder_NonRect::pointer>(fields[18]);}

inline H263Options::slicesNoOrder_NonRect::reference H263Options::set_slicesNoOrder_NonRect ()
{ return *static_cast<slicesNoOrder_NonRect::pointer>(fields[18]);}

inline H263Options::slicesNoOrder_NonRect::reference H263Options::set_slicesNoOrder_NonRect (bool value)
{ return *static_cast<slicesNoOrder_NonRect::pointer>(fields[18]) = value ;}

inline H263Options::slicesNoOrder_Rect::const_reference H263Options::get_slicesNoOrder_Rect () const
{ return *static_cast<slicesNoOrder_Rect::const_pointer>(fields[19]);}

inline H263Options::slicesNoOrder_Rect::reference H263Options::ref_slicesNoOrder_Rect ()
{ return *static_cast<slicesNoOrder_Rect::pointer>(fields[19]);}

inline H263Options::slicesNoOrder_Rect::reference H263Options::set_slicesNoOrder_Rect ()
{ return *static_cast<slicesNoOrder_Rect::pointer>(fields[19]);}

inline H263Options::slicesNoOrder_Rect::reference H263Options::set_slicesNoOrder_Rect (bool value)
{ return *static_cast<slicesNoOrder_Rect::pointer>(fields[19]) = value ;}

inline H263Options::alternateInterVLCMode::const_reference H263Options::get_alternateInterVLCMode () const
{ return *static_cast<alternateInterVLCMode::const_pointer>(fields[20]);}

inline H263Options::alternateInterVLCMode::reference H263Options::ref_alternateInterVLCMode ()
{ return *static_cast<alternateInterVLCMode::pointer>(fields[20]);}

inline H263Options::alternateInterVLCMode::reference H263Options::set_alternateInterVLCMode ()
{ return *static_cast<alternateInterVLCMode::pointer>(fields[20]);}

inline H263Options::alternateInterVLCMode::reference H263Options::set_alternateInterVLCMode (bool value)
{ return *static_cast<alternateInterVLCMode::pointer>(fields[20]) = value ;}

inline H263Options::modifiedQuantizationMode::const_reference H263Options::get_modifiedQuantizationMode () const
{ return *static_cast<modifiedQuantizationMode::const_pointer>(fields[21]);}

inline H263Options::modifiedQuantizationMode::reference H263Options::ref_modifiedQuantizationMode ()
{ return *static_cast<modifiedQuantizationMode::pointer>(fields[21]);}

inline H263Options::modifiedQuantizationMode::reference H263Options::set_modifiedQuantizationMode ()
{ return *static_cast<modifiedQuantizationMode::pointer>(fields[21]);}

inline H263Options::modifiedQuantizationMode::reference H263Options::set_modifiedQuantizationMode (bool value)
{ return *static_cast<modifiedQuantizationMode::pointer>(fields[21]) = value ;}

inline H263Options::reducedResolutionUpdate::const_reference H263Options::get_reducedResolutionUpdate () const
{ return *static_cast<reducedResolutionUpdate::const_pointer>(fields[22]);}

inline H263Options::reducedResolutionUpdate::reference H263Options::ref_reducedResolutionUpdate ()
{ return *static_cast<reducedResolutionUpdate::pointer>(fields[22]);}

inline H263Options::reducedResolutionUpdate::reference H263Options::set_reducedResolutionUpdate ()
{ return *static_cast<reducedResolutionUpdate::pointer>(fields[22]);}

inline H263Options::reducedResolutionUpdate::reference H263Options::set_reducedResolutionUpdate (bool value)
{ return *static_cast<reducedResolutionUpdate::pointer>(fields[22]) = value ;}

inline H263Options::transparencyParameters::const_reference H263Options::get_transparencyParameters () const
{
  assert(hasOptionalField(e_transparencyParameters));
  return *static_cast<transparencyParameters::const_pointer>(fields[23]);
}

inline H263Options::transparencyParameters::reference H263Options::ref_transparencyParameters ()
{
  assert(hasOptionalField(e_transparencyParameters));
  return *static_cast<transparencyParameters::pointer>(fields[23]);
}

inline H263Options::transparencyParameters::reference H263Options::set_transparencyParameters ()
{
  includeOptionalField( e_transparencyParameters, 23);
  return *static_cast<transparencyParameters::pointer>(fields[23]);
}

inline H263Options::transparencyParameters::reference H263Options::set_transparencyParameters (transparencyParameters::const_reference value)
{
  includeOptionalField( e_transparencyParameters, 23);
  return *static_cast<transparencyParameters::pointer>(fields[23]) = value;
}

inline void H263Options::omit_transparencyParameters ()
{ removeOptionalField( e_transparencyParameters); }

inline bool H263Options::transparencyParameters_isPresent () const
{ return hasOptionalField( e_transparencyParameters); }

inline H263Options::separateVideoBackChannel::const_reference H263Options::get_separateVideoBackChannel () const
{ return *static_cast<separateVideoBackChannel::const_pointer>(fields[24]);}

inline H263Options::separateVideoBackChannel::reference H263Options::ref_separateVideoBackChannel ()
{ return *static_cast<separateVideoBackChannel::pointer>(fields[24]);}

inline H263Options::separateVideoBackChannel::reference H263Options::set_separateVideoBackChannel ()
{ return *static_cast<separateVideoBackChannel::pointer>(fields[24]);}

inline H263Options::separateVideoBackChannel::reference H263Options::set_separateVideoBackChannel (bool value)
{ return *static_cast<separateVideoBackChannel::pointer>(fields[24]) = value ;}

inline H263Options::refPictureSelection::const_reference H263Options::get_refPictureSelection () const
{
  assert(hasOptionalField(e_refPictureSelection));
  return *static_cast<refPictureSelection::const_pointer>(fields[25]);
}

inline H263Options::refPictureSelection::reference H263Options::ref_refPictureSelection ()
{
  assert(hasOptionalField(e_refPictureSelection));
  return *static_cast<refPictureSelection::pointer>(fields[25]);
}

inline H263Options::refPictureSelection::reference H263Options::set_refPictureSelection ()
{
  includeOptionalField( e_refPictureSelection, 25);
  return *static_cast<refPictureSelection::pointer>(fields[25]);
}

inline H263Options::refPictureSelection::reference H263Options::set_refPictureSelection (refPictureSelection::const_reference value)
{
  includeOptionalField( e_refPictureSelection, 25);
  return *static_cast<refPictureSelection::pointer>(fields[25]) = value;
}

inline void H263Options::omit_refPictureSelection ()
{ removeOptionalField( e_refPictureSelection); }

inline bool H263Options::refPictureSelection_isPresent () const
{ return hasOptionalField( e_refPictureSelection); }

inline H263Options::customPictureClockFrequency::const_reference H263Options::get_customPictureClockFrequency () const
{
  assert(hasOptionalField(e_customPictureClockFrequency));
  return *static_cast<customPictureClockFrequency::const_pointer>(fields[26]);
}

inline H263Options::customPictureClockFrequency::reference H263Options::ref_customPictureClockFrequency ()
{
  assert(hasOptionalField(e_customPictureClockFrequency));
  return *static_cast<customPictureClockFrequency::pointer>(fields[26]);
}

inline H263Options::customPictureClockFrequency::reference H263Options::set_customPictureClockFrequency ()
{
  includeOptionalField( e_customPictureClockFrequency, 26);
  return *static_cast<customPictureClockFrequency::pointer>(fields[26]);
}

inline H263Options::customPictureClockFrequency::reference H263Options::set_customPictureClockFrequency (customPictureClockFrequency::const_reference value)
{
  includeOptionalField( e_customPictureClockFrequency, 26);
  return *static_cast<customPictureClockFrequency::pointer>(fields[26]) = value;
}

inline void H263Options::omit_customPictureClockFrequency ()
{ removeOptionalField( e_customPictureClockFrequency); }

inline bool H263Options::customPictureClockFrequency_isPresent () const
{ return hasOptionalField( e_customPictureClockFrequency); }

inline H263Options::customPictureFormat::const_reference H263Options::get_customPictureFormat () const
{
  assert(hasOptionalField(e_customPictureFormat));
  return *static_cast<customPictureFormat::const_pointer>(fields[27]);
}

inline H263Options::customPictureFormat::reference H263Options::ref_customPictureFormat ()
{
  assert(hasOptionalField(e_customPictureFormat));
  return *static_cast<customPictureFormat::pointer>(fields[27]);
}

inline H263Options::customPictureFormat::reference H263Options::set_customPictureFormat ()
{
  includeOptionalField( e_customPictureFormat, 27);
  return *static_cast<customPictureFormat::pointer>(fields[27]);
}

inline H263Options::customPictureFormat::reference H263Options::set_customPictureFormat (customPictureFormat::const_reference value)
{
  includeOptionalField( e_customPictureFormat, 27);
  return *static_cast<customPictureFormat::pointer>(fields[27]) = value;
}

inline void H263Options::omit_customPictureFormat ()
{ removeOptionalField( e_customPictureFormat); }

inline bool H263Options::customPictureFormat_isPresent () const
{ return hasOptionalField( e_customPictureFormat); }

inline H263Options::modeCombos::const_reference H263Options::get_modeCombos () const
{
  assert(hasOptionalField(e_modeCombos));
  return *static_cast<modeCombos::const_pointer>(fields[28]);
}

inline H263Options::modeCombos::reference H263Options::ref_modeCombos ()
{
  assert(hasOptionalField(e_modeCombos));
  return *static_cast<modeCombos::pointer>(fields[28]);
}

inline H263Options::modeCombos::reference H263Options::set_modeCombos ()
{
  includeOptionalField( e_modeCombos, 28);
  return *static_cast<modeCombos::pointer>(fields[28]);
}

inline H263Options::modeCombos::reference H263Options::set_modeCombos (modeCombos::const_reference value)
{
  includeOptionalField( e_modeCombos, 28);
  return *static_cast<modeCombos::pointer>(fields[28]) = value;
}

inline void H263Options::omit_modeCombos ()
{ removeOptionalField( e_modeCombos); }

inline bool H263Options::modeCombos_isPresent () const
{ return hasOptionalField( e_modeCombos); }

inline H263Options::videoBadMBsCap::const_reference H263Options::get_videoBadMBsCap () const
{
  assert(hasOptionalField(e_videoBadMBsCap));
  return *static_cast<videoBadMBsCap::const_pointer>(fields[29]);
}

inline H263Options::videoBadMBsCap::reference H263Options::ref_videoBadMBsCap ()
{
  assert(hasOptionalField(e_videoBadMBsCap));
  return *static_cast<videoBadMBsCap::pointer>(fields[29]);
}

inline H263Options::videoBadMBsCap::reference H263Options::set_videoBadMBsCap ()
{
  includeOptionalField( e_videoBadMBsCap, 29);
  return *static_cast<videoBadMBsCap::pointer>(fields[29]);
}

inline H263Options::videoBadMBsCap::reference H263Options::set_videoBadMBsCap (bool value)
{
  includeOptionalField( e_videoBadMBsCap, 29);
  return *static_cast<videoBadMBsCap::pointer>(fields[29]) = value;
}

inline void H263Options::omit_videoBadMBsCap ()
{ removeOptionalField( e_videoBadMBsCap); }

inline bool H263Options::videoBadMBsCap_isPresent () const
{ return hasOptionalField( e_videoBadMBsCap); }

inline H263Options::h263Version3Options::const_reference H263Options::get_h263Version3Options () const
{
  assert(hasOptionalField(e_h263Version3Options));
  return *static_cast<h263Version3Options::const_pointer>(fields[30]);
}

inline H263Options::h263Version3Options::reference H263Options::ref_h263Version3Options ()
{
  assert(hasOptionalField(e_h263Version3Options));
  return *static_cast<h263Version3Options::pointer>(fields[30]);
}

inline H263Options::h263Version3Options::reference H263Options::set_h263Version3Options ()
{
  includeOptionalField( e_h263Version3Options, 30);
  return *static_cast<h263Version3Options::pointer>(fields[30]);
}

inline H263Options::h263Version3Options::reference H263Options::set_h263Version3Options (h263Version3Options::const_reference value)
{
  includeOptionalField( e_h263Version3Options, 30);
  return *static_cast<h263Version3Options::pointer>(fields[30]) = value;
}

inline void H263Options::omit_h263Version3Options ()
{ removeOptionalField( e_h263Version3Options); }

inline bool H263Options::h263Version3Options_isPresent () const
{ return hasOptionalField( e_h263Version3Options); }

inline void H263Options::swap(H263Options& other)
{ Inherited::swap(other); }

inline H263Options* H263Options::clone() const
{ return static_cast<H263Options*> (Inherited::clone()); }

inline GenericCapability::capabilityIdentifier::const_reference GenericCapability::get_capabilityIdentifier () const
{ return *static_cast<capabilityIdentifier::const_pointer>(fields[0]);}

inline GenericCapability::capabilityIdentifier::reference GenericCapability::ref_capabilityIdentifier ()
{ return *static_cast<capabilityIdentifier::pointer>(fields[0]);}

inline GenericCapability::capabilityIdentifier::reference GenericCapability::set_capabilityIdentifier ()
{ return *static_cast<capabilityIdentifier::pointer>(fields[0]);}

inline GenericCapability::capabilityIdentifier::reference GenericCapability::set_capabilityIdentifier (capabilityIdentifier::const_reference value)
{ return *static_cast<capabilityIdentifier::pointer>(fields[0]) = value ;}

inline GenericCapability::maxBitRate::const_reference GenericCapability::get_maxBitRate () const
{
  assert(hasOptionalField(e_maxBitRate));
  return *static_cast<maxBitRate::const_pointer>(fields[1]);
}

inline GenericCapability::maxBitRate::reference GenericCapability::ref_maxBitRate ()
{
  assert(hasOptionalField(e_maxBitRate));
  return *static_cast<maxBitRate::pointer>(fields[1]);
}

inline GenericCapability::maxBitRate::reference GenericCapability::set_maxBitRate ()
{
  includeOptionalField( e_maxBitRate, 1);
  return *static_cast<maxBitRate::pointer>(fields[1]);
}

inline GenericCapability::maxBitRate::reference GenericCapability::set_maxBitRate (maxBitRate::value_type::int_type value)
{
  includeOptionalField( e_maxBitRate, 1);
  return *static_cast<maxBitRate::pointer>(fields[1]) = value;
}

inline void GenericCapability::omit_maxBitRate ()
{ removeOptionalField( e_maxBitRate); }

inline bool GenericCapability::maxBitRate_isPresent () const
{ return hasOptionalField( e_maxBitRate); }

inline GenericCapability::collapsing::const_reference GenericCapability::get_collapsing () const
{
  assert(hasOptionalField(e_collapsing));
  return *static_cast<collapsing::const_pointer>(fields[2]);
}

inline GenericCapability::collapsing::reference GenericCapability::ref_collapsing ()
{
  assert(hasOptionalField(e_collapsing));
  return *static_cast<collapsing::pointer>(fields[2]);
}

inline GenericCapability::collapsing::reference GenericCapability::set_collapsing ()
{
  includeOptionalField( e_collapsing, 2);
  return *static_cast<collapsing::pointer>(fields[2]);
}

inline GenericCapability::collapsing::reference GenericCapability::set_collapsing (collapsing::const_reference value)
{
  includeOptionalField( e_collapsing, 2);
  return *static_cast<collapsing::pointer>(fields[2]) = value;
}

inline void GenericCapability::omit_collapsing ()
{ removeOptionalField( e_collapsing); }

inline bool GenericCapability::collapsing_isPresent () const
{ return hasOptionalField( e_collapsing); }

inline GenericCapability::nonCollapsing::const_reference GenericCapability::get_nonCollapsing () const
{
  assert(hasOptionalField(e_nonCollapsing));
  return *static_cast<nonCollapsing::const_pointer>(fields[3]);
}

inline GenericCapability::nonCollapsing::reference GenericCapability::ref_nonCollapsing ()
{
  assert(hasOptionalField(e_nonCollapsing));
  return *static_cast<nonCollapsing::pointer>(fields[3]);
}

inline GenericCapability::nonCollapsing::reference GenericCapability::set_nonCollapsing ()
{
  includeOptionalField( e_nonCollapsing, 3);
  return *static_cast<nonCollapsing::pointer>(fields[3]);
}

inline GenericCapability::nonCollapsing::reference GenericCapability::set_nonCollapsing (nonCollapsing::const_reference value)
{
  includeOptionalField( e_nonCollapsing, 3);
  return *static_cast<nonCollapsing::pointer>(fields[3]) = value;
}

inline void GenericCapability::omit_nonCollapsing ()
{ removeOptionalField( e_nonCollapsing); }

inline bool GenericCapability::nonCollapsing_isPresent () const
{ return hasOptionalField( e_nonCollapsing); }

inline GenericCapability::nonCollapsingRaw::const_reference GenericCapability::get_nonCollapsingRaw () const
{
  assert(hasOptionalField(e_nonCollapsingRaw));
  return *static_cast<nonCollapsingRaw::const_pointer>(fields[4]);
}

inline GenericCapability::nonCollapsingRaw::reference GenericCapability::ref_nonCollapsingRaw ()
{
  assert(hasOptionalField(e_nonCollapsingRaw));
  return *static_cast<nonCollapsingRaw::pointer>(fields[4]);
}

inline GenericCapability::nonCollapsingRaw::reference GenericCapability::set_nonCollapsingRaw ()
{
  includeOptionalField( e_nonCollapsingRaw, 4);
  return *static_cast<nonCollapsingRaw::pointer>(fields[4]);
}

inline GenericCapability::nonCollapsingRaw::reference GenericCapability::set_nonCollapsingRaw (const std::vector<char>& value)
{
  includeOptionalField( e_nonCollapsingRaw, 4);
  return *static_cast<nonCollapsingRaw::pointer>(fields[4]) = value;
}

inline void GenericCapability::omit_nonCollapsingRaw ()
{ removeOptionalField( e_nonCollapsingRaw); }

inline bool GenericCapability::nonCollapsingRaw_isPresent () const
{ return hasOptionalField( e_nonCollapsingRaw); }

inline GenericCapability::transport::const_reference GenericCapability::get_transport () const
{
  assert(hasOptionalField(e_transport));
  return *static_cast<transport::const_pointer>(fields[5]);
}

inline GenericCapability::transport::reference GenericCapability::ref_transport ()
{
  assert(hasOptionalField(e_transport));
  return *static_cast<transport::pointer>(fields[5]);
}

inline GenericCapability::transport::reference GenericCapability::set_transport ()
{
  includeOptionalField( e_transport, 5);
  return *static_cast<transport::pointer>(fields[5]);
}

inline GenericCapability::transport::reference GenericCapability::set_transport (transport::const_reference value)
{
  includeOptionalField( e_transport, 5);
  return *static_cast<transport::pointer>(fields[5]) = value;
}

inline void GenericCapability::omit_transport ()
{ removeOptionalField( e_transport); }

inline bool GenericCapability::transport_isPresent () const
{ return hasOptionalField( e_transport); }

inline void GenericCapability::swap(GenericCapability& other)
{ Inherited::swap(other); }

inline GenericCapability* GenericCapability::clone() const
{ return static_cast<GenericCapability*> (Inherited::clone()); }

inline MultiplexFormat::nonStandard::const_reference MultiplexFormat::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline MultiplexFormat::nonStandard::reference MultiplexFormat::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline MultiplexFormat::nonStandard::reference MultiplexFormat::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline MultiplexFormat::nonStandard::reference MultiplexFormat::select_nonStandard (MultiplexFormat::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool MultiplexFormat::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline MultiplexFormat::h222Capability::const_reference MultiplexFormat::get_h222Capability () const
{
    assert(currentSelection() ==h222Capability::id_);
    return *static_cast<h222Capability::const_pointer>(choice.get());
}

inline MultiplexFormat::h222Capability::reference MultiplexFormat::ref_h222Capability ()
{
    assert(currentSelection() ==h222Capability::id_);
    return *static_cast<h222Capability::pointer>(choice.get());
}

inline MultiplexFormat::h222Capability::reference MultiplexFormat::select_h222Capability ()
{
    return *static_cast<h222Capability::pointer>(setSelection(h222Capability::id_, ASN1::AbstractData::create( &h222Capability::value_type::theInfo)));
}

inline MultiplexFormat::h222Capability::reference MultiplexFormat::select_h222Capability (MultiplexFormat::h222Capability::const_reference value)
{
    return select_h222Capability() = value;
}

inline bool MultiplexFormat::h222Capability_isSelected() const
{ 
    return currentSelection() == h222Capability::id_; 
}

inline MultiplexFormat::h223Capability::const_reference MultiplexFormat::get_h223Capability () const
{
    assert(currentSelection() ==h223Capability::id_);
    return *static_cast<h223Capability::const_pointer>(choice.get());
}

inline MultiplexFormat::h223Capability::reference MultiplexFormat::ref_h223Capability ()
{
    assert(currentSelection() ==h223Capability::id_);
    return *static_cast<h223Capability::pointer>(choice.get());
}

inline MultiplexFormat::h223Capability::reference MultiplexFormat::select_h223Capability ()
{
    return *static_cast<h223Capability::pointer>(setSelection(h223Capability::id_, ASN1::AbstractData::create( &h223Capability::value_type::theInfo)));
}

inline MultiplexFormat::h223Capability::reference MultiplexFormat::select_h223Capability (MultiplexFormat::h223Capability::const_reference value)
{
    return select_h223Capability() = value;
}

inline bool MultiplexFormat::h223Capability_isSelected() const
{ 
    return currentSelection() == h223Capability::id_; 
}

inline MultiplexFormat::MultiplexFormat(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline MultiplexFormat::MultiplexFormat(h222Capability::Id id, h222Capability::const_reference value)
  : Inherited(&theInfo, id, new h222Capability::value_type(value) )
{ }

inline MultiplexFormat::MultiplexFormat(h223Capability::Id id, h223Capability::const_reference value)
  : Inherited(&theInfo, id, new h223Capability::value_type(value) )
{ }


inline void MultiplexFormat::swap(MultiplexFormat & other)
{  Inherited::swap(other); }

inline MultiplexFormat* MultiplexFormat::clone() const
{ return static_cast<MultiplexFormat*> (Inherited::clone()); }

inline bool MultiplexFormat::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline NetworkAccessParameters::distribution::const_reference NetworkAccessParameters::get_distribution () const
{
  assert(hasOptionalField(e_distribution));
  return *static_cast<distribution::const_pointer>(fields[0]);
}

inline NetworkAccessParameters::distribution::reference NetworkAccessParameters::ref_distribution ()
{
  assert(hasOptionalField(e_distribution));
  return *static_cast<distribution::pointer>(fields[0]);
}

inline NetworkAccessParameters::distribution::reference NetworkAccessParameters::set_distribution ()
{
  includeOptionalField( e_distribution, 0);
  return *static_cast<distribution::pointer>(fields[0]);
}

inline NetworkAccessParameters::distribution::reference NetworkAccessParameters::set_distribution (distribution::const_reference value)
{
  includeOptionalField( e_distribution, 0);
  return *static_cast<distribution::pointer>(fields[0]) = value;
}

inline void NetworkAccessParameters::omit_distribution ()
{ removeOptionalField( e_distribution); }

inline bool NetworkAccessParameters::distribution_isPresent () const
{ return hasOptionalField( e_distribution); }

inline NetworkAccessParameters::networkAddress::const_reference NetworkAccessParameters::get_networkAddress () const
{ return *static_cast<networkAddress::const_pointer>(fields[1]);}

inline NetworkAccessParameters::networkAddress::reference NetworkAccessParameters::ref_networkAddress ()
{ return *static_cast<networkAddress::pointer>(fields[1]);}

inline NetworkAccessParameters::networkAddress::reference NetworkAccessParameters::set_networkAddress ()
{ return *static_cast<networkAddress::pointer>(fields[1]);}

inline NetworkAccessParameters::networkAddress::reference NetworkAccessParameters::set_networkAddress (networkAddress::const_reference value)
{ return *static_cast<networkAddress::pointer>(fields[1]) = value ;}

inline NetworkAccessParameters::associateConference::const_reference NetworkAccessParameters::get_associateConference () const
{ return *static_cast<associateConference::const_pointer>(fields[2]);}

inline NetworkAccessParameters::associateConference::reference NetworkAccessParameters::ref_associateConference ()
{ return *static_cast<associateConference::pointer>(fields[2]);}

inline NetworkAccessParameters::associateConference::reference NetworkAccessParameters::set_associateConference ()
{ return *static_cast<associateConference::pointer>(fields[2]);}

inline NetworkAccessParameters::associateConference::reference NetworkAccessParameters::set_associateConference (bool value)
{ return *static_cast<associateConference::pointer>(fields[2]) = value ;}

inline NetworkAccessParameters::externalReference::const_reference NetworkAccessParameters::get_externalReference () const
{
  assert(hasOptionalField(e_externalReference));
  return *static_cast<externalReference::const_pointer>(fields[3]);
}

inline NetworkAccessParameters::externalReference::reference NetworkAccessParameters::ref_externalReference ()
{
  assert(hasOptionalField(e_externalReference));
  return *static_cast<externalReference::pointer>(fields[3]);
}

inline NetworkAccessParameters::externalReference::reference NetworkAccessParameters::set_externalReference ()
{
  includeOptionalField( e_externalReference, 3);
  return *static_cast<externalReference::pointer>(fields[3]);
}

inline NetworkAccessParameters::externalReference::reference NetworkAccessParameters::set_externalReference (const std::vector<char>& value)
{
  includeOptionalField( e_externalReference, 3);
  return *static_cast<externalReference::pointer>(fields[3]) = value;
}

inline void NetworkAccessParameters::omit_externalReference ()
{ removeOptionalField( e_externalReference); }

inline bool NetworkAccessParameters::externalReference_isPresent () const
{ return hasOptionalField( e_externalReference); }

inline NetworkAccessParameters::t120SetupProcedure::const_reference NetworkAccessParameters::get_t120SetupProcedure () const
{
  assert(hasOptionalField(e_t120SetupProcedure));
  return *static_cast<t120SetupProcedure::const_pointer>(fields[4]);
}

inline NetworkAccessParameters::t120SetupProcedure::reference NetworkAccessParameters::ref_t120SetupProcedure ()
{
  assert(hasOptionalField(e_t120SetupProcedure));
  return *static_cast<t120SetupProcedure::pointer>(fields[4]);
}

inline NetworkAccessParameters::t120SetupProcedure::reference NetworkAccessParameters::set_t120SetupProcedure ()
{
  includeOptionalField( e_t120SetupProcedure, 4);
  return *static_cast<t120SetupProcedure::pointer>(fields[4]);
}

inline NetworkAccessParameters::t120SetupProcedure::reference NetworkAccessParameters::set_t120SetupProcedure (t120SetupProcedure::const_reference value)
{
  includeOptionalField( e_t120SetupProcedure, 4);
  return *static_cast<t120SetupProcedure::pointer>(fields[4]) = value;
}

inline void NetworkAccessParameters::omit_t120SetupProcedure ()
{ removeOptionalField( e_t120SetupProcedure); }

inline bool NetworkAccessParameters::t120SetupProcedure_isPresent () const
{ return hasOptionalField( e_t120SetupProcedure); }

inline void NetworkAccessParameters::swap(NetworkAccessParameters& other)
{ Inherited::swap(other); }

inline NetworkAccessParameters* NetworkAccessParameters::clone() const
{ return static_cast<NetworkAccessParameters*> (Inherited::clone()); }

inline MultiplexedStreamParameter::multiplexFormat::const_reference MultiplexedStreamParameter::get_multiplexFormat () const
{ return *static_cast<multiplexFormat::const_pointer>(fields[0]);}

inline MultiplexedStreamParameter::multiplexFormat::reference MultiplexedStreamParameter::ref_multiplexFormat ()
{ return *static_cast<multiplexFormat::pointer>(fields[0]);}

inline MultiplexedStreamParameter::multiplexFormat::reference MultiplexedStreamParameter::set_multiplexFormat ()
{ return *static_cast<multiplexFormat::pointer>(fields[0]);}

inline MultiplexedStreamParameter::multiplexFormat::reference MultiplexedStreamParameter::set_multiplexFormat (multiplexFormat::const_reference value)
{ return *static_cast<multiplexFormat::pointer>(fields[0]) = value ;}

inline MultiplexedStreamParameter::controlOnMuxStream::const_reference MultiplexedStreamParameter::get_controlOnMuxStream () const
{ return *static_cast<controlOnMuxStream::const_pointer>(fields[1]);}

inline MultiplexedStreamParameter::controlOnMuxStream::reference MultiplexedStreamParameter::ref_controlOnMuxStream ()
{ return *static_cast<controlOnMuxStream::pointer>(fields[1]);}

inline MultiplexedStreamParameter::controlOnMuxStream::reference MultiplexedStreamParameter::set_controlOnMuxStream ()
{ return *static_cast<controlOnMuxStream::pointer>(fields[1]);}

inline MultiplexedStreamParameter::controlOnMuxStream::reference MultiplexedStreamParameter::set_controlOnMuxStream (bool value)
{ return *static_cast<controlOnMuxStream::pointer>(fields[1]) = value ;}

inline void MultiplexedStreamParameter::swap(MultiplexedStreamParameter& other)
{ Inherited::swap(other); }

inline MultiplexedStreamParameter* MultiplexedStreamParameter::clone() const
{ return static_cast<MultiplexedStreamParameter*> (Inherited::clone()); }

inline H2250LogicalChannelParameters::nonStandard::const_reference H2250LogicalChannelParameters::get_nonStandard () const
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::const_pointer>(fields[0]);
}

inline H2250LogicalChannelParameters::nonStandard::reference H2250LogicalChannelParameters::ref_nonStandard ()
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline H2250LogicalChannelParameters::nonStandard::reference H2250LogicalChannelParameters::set_nonStandard ()
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline H2250LogicalChannelParameters::nonStandard::reference H2250LogicalChannelParameters::set_nonStandard (nonStandard::const_reference value)
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]) = value;
}

inline void H2250LogicalChannelParameters::omit_nonStandard ()
{ removeOptionalField( e_nonStandard); }

inline bool H2250LogicalChannelParameters::nonStandard_isPresent () const
{ return hasOptionalField( e_nonStandard); }

inline H2250LogicalChannelParameters::sessionID::const_reference H2250LogicalChannelParameters::get_sessionID () const
{ return *static_cast<sessionID::const_pointer>(fields[1]);}

inline H2250LogicalChannelParameters::sessionID::reference H2250LogicalChannelParameters::ref_sessionID ()
{ return *static_cast<sessionID::pointer>(fields[1]);}

inline H2250LogicalChannelParameters::sessionID::reference H2250LogicalChannelParameters::set_sessionID ()
{ return *static_cast<sessionID::pointer>(fields[1]);}

inline H2250LogicalChannelParameters::sessionID::reference H2250LogicalChannelParameters::set_sessionID (sessionID::value_type::int_type value)
{ return *static_cast<sessionID::pointer>(fields[1]) = value ;}

inline H2250LogicalChannelParameters::associatedSessionID::const_reference H2250LogicalChannelParameters::get_associatedSessionID () const
{
  assert(hasOptionalField(e_associatedSessionID));
  return *static_cast<associatedSessionID::const_pointer>(fields[2]);
}

inline H2250LogicalChannelParameters::associatedSessionID::reference H2250LogicalChannelParameters::ref_associatedSessionID ()
{
  assert(hasOptionalField(e_associatedSessionID));
  return *static_cast<associatedSessionID::pointer>(fields[2]);
}

inline H2250LogicalChannelParameters::associatedSessionID::reference H2250LogicalChannelParameters::set_associatedSessionID ()
{
  includeOptionalField( e_associatedSessionID, 2);
  return *static_cast<associatedSessionID::pointer>(fields[2]);
}

inline H2250LogicalChannelParameters::associatedSessionID::reference H2250LogicalChannelParameters::set_associatedSessionID (associatedSessionID::value_type::int_type value)
{
  includeOptionalField( e_associatedSessionID, 2);
  return *static_cast<associatedSessionID::pointer>(fields[2]) = value;
}

inline void H2250LogicalChannelParameters::omit_associatedSessionID ()
{ removeOptionalField( e_associatedSessionID); }

inline bool H2250LogicalChannelParameters::associatedSessionID_isPresent () const
{ return hasOptionalField( e_associatedSessionID); }

inline H2250LogicalChannelParameters::mediaChannel::const_reference H2250LogicalChannelParameters::get_mediaChannel () const
{
  assert(hasOptionalField(e_mediaChannel));
  return *static_cast<mediaChannel::const_pointer>(fields[3]);
}

inline H2250LogicalChannelParameters::mediaChannel::reference H2250LogicalChannelParameters::ref_mediaChannel ()
{
  assert(hasOptionalField(e_mediaChannel));
  return *static_cast<mediaChannel::pointer>(fields[3]);
}

inline H2250LogicalChannelParameters::mediaChannel::reference H2250LogicalChannelParameters::set_mediaChannel ()
{
  includeOptionalField( e_mediaChannel, 3);
  return *static_cast<mediaChannel::pointer>(fields[3]);
}

inline H2250LogicalChannelParameters::mediaChannel::reference H2250LogicalChannelParameters::set_mediaChannel (mediaChannel::const_reference value)
{
  includeOptionalField( e_mediaChannel, 3);
  return *static_cast<mediaChannel::pointer>(fields[3]) = value;
}

inline void H2250LogicalChannelParameters::omit_mediaChannel ()
{ removeOptionalField( e_mediaChannel); }

inline bool H2250LogicalChannelParameters::mediaChannel_isPresent () const
{ return hasOptionalField( e_mediaChannel); }

inline H2250LogicalChannelParameters::mediaGuaranteedDelivery::const_reference H2250LogicalChannelParameters::get_mediaGuaranteedDelivery () const
{
  assert(hasOptionalField(e_mediaGuaranteedDelivery));
  return *static_cast<mediaGuaranteedDelivery::const_pointer>(fields[4]);
}

inline H2250LogicalChannelParameters::mediaGuaranteedDelivery::reference H2250LogicalChannelParameters::ref_mediaGuaranteedDelivery ()
{
  assert(hasOptionalField(e_mediaGuaranteedDelivery));
  return *static_cast<mediaGuaranteedDelivery::pointer>(fields[4]);
}

inline H2250LogicalChannelParameters::mediaGuaranteedDelivery::reference H2250LogicalChannelParameters::set_mediaGuaranteedDelivery ()
{
  includeOptionalField( e_mediaGuaranteedDelivery, 4);
  return *static_cast<mediaGuaranteedDelivery::pointer>(fields[4]);
}

inline H2250LogicalChannelParameters::mediaGuaranteedDelivery::reference H2250LogicalChannelParameters::set_mediaGuaranteedDelivery (bool value)
{
  includeOptionalField( e_mediaGuaranteedDelivery, 4);
  return *static_cast<mediaGuaranteedDelivery::pointer>(fields[4]) = value;
}

inline void H2250LogicalChannelParameters::omit_mediaGuaranteedDelivery ()
{ removeOptionalField( e_mediaGuaranteedDelivery); }

inline bool H2250LogicalChannelParameters::mediaGuaranteedDelivery_isPresent () const
{ return hasOptionalField( e_mediaGuaranteedDelivery); }

inline H2250LogicalChannelParameters::mediaControlChannel::const_reference H2250LogicalChannelParameters::get_mediaControlChannel () const
{
  assert(hasOptionalField(e_mediaControlChannel));
  return *static_cast<mediaControlChannel::const_pointer>(fields[5]);
}

inline H2250LogicalChannelParameters::mediaControlChannel::reference H2250LogicalChannelParameters::ref_mediaControlChannel ()
{
  assert(hasOptionalField(e_mediaControlChannel));
  return *static_cast<mediaControlChannel::pointer>(fields[5]);
}

inline H2250LogicalChannelParameters::mediaControlChannel::reference H2250LogicalChannelParameters::set_mediaControlChannel ()
{
  includeOptionalField( e_mediaControlChannel, 5);
  return *static_cast<mediaControlChannel::pointer>(fields[5]);
}

inline H2250LogicalChannelParameters::mediaControlChannel::reference H2250LogicalChannelParameters::set_mediaControlChannel (mediaControlChannel::const_reference value)
{
  includeOptionalField( e_mediaControlChannel, 5);
  return *static_cast<mediaControlChannel::pointer>(fields[5]) = value;
}

inline void H2250LogicalChannelParameters::omit_mediaControlChannel ()
{ removeOptionalField( e_mediaControlChannel); }

inline bool H2250LogicalChannelParameters::mediaControlChannel_isPresent () const
{ return hasOptionalField( e_mediaControlChannel); }

inline H2250LogicalChannelParameters::mediaControlGuaranteedDelivery::const_reference H2250LogicalChannelParameters::get_mediaControlGuaranteedDelivery () const
{
  assert(hasOptionalField(e_mediaControlGuaranteedDelivery));
  return *static_cast<mediaControlGuaranteedDelivery::const_pointer>(fields[6]);
}

inline H2250LogicalChannelParameters::mediaControlGuaranteedDelivery::reference H2250LogicalChannelParameters::ref_mediaControlGuaranteedDelivery ()
{
  assert(hasOptionalField(e_mediaControlGuaranteedDelivery));
  return *static_cast<mediaControlGuaranteedDelivery::pointer>(fields[6]);
}

inline H2250LogicalChannelParameters::mediaControlGuaranteedDelivery::reference H2250LogicalChannelParameters::set_mediaControlGuaranteedDelivery ()
{
  includeOptionalField( e_mediaControlGuaranteedDelivery, 6);
  return *static_cast<mediaControlGuaranteedDelivery::pointer>(fields[6]);
}

inline H2250LogicalChannelParameters::mediaControlGuaranteedDelivery::reference H2250LogicalChannelParameters::set_mediaControlGuaranteedDelivery (bool value)
{
  includeOptionalField( e_mediaControlGuaranteedDelivery, 6);
  return *static_cast<mediaControlGuaranteedDelivery::pointer>(fields[6]) = value;
}

inline void H2250LogicalChannelParameters::omit_mediaControlGuaranteedDelivery ()
{ removeOptionalField( e_mediaControlGuaranteedDelivery); }

inline bool H2250LogicalChannelParameters::mediaControlGuaranteedDelivery_isPresent () const
{ return hasOptionalField( e_mediaControlGuaranteedDelivery); }

inline H2250LogicalChannelParameters::silenceSuppression::const_reference H2250LogicalChannelParameters::get_silenceSuppression () const
{
  assert(hasOptionalField(e_silenceSuppression));
  return *static_cast<silenceSuppression::const_pointer>(fields[7]);
}

inline H2250LogicalChannelParameters::silenceSuppression::reference H2250LogicalChannelParameters::ref_silenceSuppression ()
{
  assert(hasOptionalField(e_silenceSuppression));
  return *static_cast<silenceSuppression::pointer>(fields[7]);
}

inline H2250LogicalChannelParameters::silenceSuppression::reference H2250LogicalChannelParameters::set_silenceSuppression ()
{
  includeOptionalField( e_silenceSuppression, 7);
  return *static_cast<silenceSuppression::pointer>(fields[7]);
}

inline H2250LogicalChannelParameters::silenceSuppression::reference H2250LogicalChannelParameters::set_silenceSuppression (bool value)
{
  includeOptionalField( e_silenceSuppression, 7);
  return *static_cast<silenceSuppression::pointer>(fields[7]) = value;
}

inline void H2250LogicalChannelParameters::omit_silenceSuppression ()
{ removeOptionalField( e_silenceSuppression); }

inline bool H2250LogicalChannelParameters::silenceSuppression_isPresent () const
{ return hasOptionalField( e_silenceSuppression); }

inline H2250LogicalChannelParameters::destination::const_reference H2250LogicalChannelParameters::get_destination () const
{
  assert(hasOptionalField(e_destination));
  return *static_cast<destination::const_pointer>(fields[8]);
}

inline H2250LogicalChannelParameters::destination::reference H2250LogicalChannelParameters::ref_destination ()
{
  assert(hasOptionalField(e_destination));
  return *static_cast<destination::pointer>(fields[8]);
}

inline H2250LogicalChannelParameters::destination::reference H2250LogicalChannelParameters::set_destination ()
{
  includeOptionalField( e_destination, 8);
  return *static_cast<destination::pointer>(fields[8]);
}

inline H2250LogicalChannelParameters::destination::reference H2250LogicalChannelParameters::set_destination (destination::const_reference value)
{
  includeOptionalField( e_destination, 8);
  return *static_cast<destination::pointer>(fields[8]) = value;
}

inline void H2250LogicalChannelParameters::omit_destination ()
{ removeOptionalField( e_destination); }

inline bool H2250LogicalChannelParameters::destination_isPresent () const
{ return hasOptionalField( e_destination); }

inline H2250LogicalChannelParameters::dynamicRTPPayloadType::const_reference H2250LogicalChannelParameters::get_dynamicRTPPayloadType () const
{
  assert(hasOptionalField(e_dynamicRTPPayloadType));
  return *static_cast<dynamicRTPPayloadType::const_pointer>(fields[9]);
}

inline H2250LogicalChannelParameters::dynamicRTPPayloadType::reference H2250LogicalChannelParameters::ref_dynamicRTPPayloadType ()
{
  assert(hasOptionalField(e_dynamicRTPPayloadType));
  return *static_cast<dynamicRTPPayloadType::pointer>(fields[9]);
}

inline H2250LogicalChannelParameters::dynamicRTPPayloadType::reference H2250LogicalChannelParameters::set_dynamicRTPPayloadType ()
{
  includeOptionalField( e_dynamicRTPPayloadType, 9);
  return *static_cast<dynamicRTPPayloadType::pointer>(fields[9]);
}

inline H2250LogicalChannelParameters::dynamicRTPPayloadType::reference H2250LogicalChannelParameters::set_dynamicRTPPayloadType (dynamicRTPPayloadType::value_type::int_type value)
{
  includeOptionalField( e_dynamicRTPPayloadType, 9);
  return *static_cast<dynamicRTPPayloadType::pointer>(fields[9]) = value;
}

inline void H2250LogicalChannelParameters::omit_dynamicRTPPayloadType ()
{ removeOptionalField( e_dynamicRTPPayloadType); }

inline bool H2250LogicalChannelParameters::dynamicRTPPayloadType_isPresent () const
{ return hasOptionalField( e_dynamicRTPPayloadType); }

inline H2250LogicalChannelParameters::mediaPacketization::const_reference H2250LogicalChannelParameters::get_mediaPacketization () const
{
  assert(hasOptionalField(e_mediaPacketization));
  return *static_cast<mediaPacketization::const_pointer>(fields[10]);
}

inline H2250LogicalChannelParameters::mediaPacketization::reference H2250LogicalChannelParameters::ref_mediaPacketization ()
{
  assert(hasOptionalField(e_mediaPacketization));
  return *static_cast<mediaPacketization::pointer>(fields[10]);
}

inline H2250LogicalChannelParameters::mediaPacketization::reference H2250LogicalChannelParameters::set_mediaPacketization ()
{
  includeOptionalField( e_mediaPacketization, 10);
  return *static_cast<mediaPacketization::pointer>(fields[10]);
}

inline H2250LogicalChannelParameters::mediaPacketization::reference H2250LogicalChannelParameters::set_mediaPacketization (mediaPacketization::const_reference value)
{
  includeOptionalField( e_mediaPacketization, 10);
  return *static_cast<mediaPacketization::pointer>(fields[10]) = value;
}

inline void H2250LogicalChannelParameters::omit_mediaPacketization ()
{ removeOptionalField( e_mediaPacketization); }

inline bool H2250LogicalChannelParameters::mediaPacketization_isPresent () const
{ return hasOptionalField( e_mediaPacketization); }

inline H2250LogicalChannelParameters::transportCapability::const_reference H2250LogicalChannelParameters::get_transportCapability () const
{
  assert(hasOptionalField(e_transportCapability));
  return *static_cast<transportCapability::const_pointer>(fields[11]);
}

inline H2250LogicalChannelParameters::transportCapability::reference H2250LogicalChannelParameters::ref_transportCapability ()
{
  assert(hasOptionalField(e_transportCapability));
  return *static_cast<transportCapability::pointer>(fields[11]);
}

inline H2250LogicalChannelParameters::transportCapability::reference H2250LogicalChannelParameters::set_transportCapability ()
{
  includeOptionalField( e_transportCapability, 11);
  return *static_cast<transportCapability::pointer>(fields[11]);
}

inline H2250LogicalChannelParameters::transportCapability::reference H2250LogicalChannelParameters::set_transportCapability (transportCapability::const_reference value)
{
  includeOptionalField( e_transportCapability, 11);
  return *static_cast<transportCapability::pointer>(fields[11]) = value;
}

inline void H2250LogicalChannelParameters::omit_transportCapability ()
{ removeOptionalField( e_transportCapability); }

inline bool H2250LogicalChannelParameters::transportCapability_isPresent () const
{ return hasOptionalField( e_transportCapability); }

inline H2250LogicalChannelParameters::source::const_reference H2250LogicalChannelParameters::get_source () const
{
  assert(hasOptionalField(e_source));
  return *static_cast<source::const_pointer>(fields[12]);
}

inline H2250LogicalChannelParameters::source::reference H2250LogicalChannelParameters::ref_source ()
{
  assert(hasOptionalField(e_source));
  return *static_cast<source::pointer>(fields[12]);
}

inline H2250LogicalChannelParameters::source::reference H2250LogicalChannelParameters::set_source ()
{
  includeOptionalField( e_source, 12);
  return *static_cast<source::pointer>(fields[12]);
}

inline H2250LogicalChannelParameters::source::reference H2250LogicalChannelParameters::set_source (source::const_reference value)
{
  includeOptionalField( e_source, 12);
  return *static_cast<source::pointer>(fields[12]) = value;
}

inline void H2250LogicalChannelParameters::omit_source ()
{ removeOptionalField( e_source); }

inline bool H2250LogicalChannelParameters::source_isPresent () const
{ return hasOptionalField( e_source); }

inline void H2250LogicalChannelParameters::swap(H2250LogicalChannelParameters& other)
{ Inherited::swap(other); }

inline H2250LogicalChannelParameters* H2250LogicalChannelParameters::clone() const
{ return static_cast<H2250LogicalChannelParameters*> (Inherited::clone()); }

inline DepFECData::rfc2733::const_reference DepFECData::get_rfc2733 () const
{
    assert(currentSelection() ==rfc2733::id_);
    return *static_cast<rfc2733::const_pointer>(choice.get());
}

inline DepFECData::rfc2733::reference DepFECData::ref_rfc2733 ()
{
    assert(currentSelection() ==rfc2733::id_);
    return *static_cast<rfc2733::pointer>(choice.get());
}

inline DepFECData::rfc2733::reference DepFECData::select_rfc2733 ()
{
    return *static_cast<rfc2733::pointer>(setSelection(rfc2733::id_, ASN1::AbstractData::create( &rfc2733::value_type::theInfo)));
}

inline DepFECData::rfc2733::reference DepFECData::select_rfc2733 (DepFECData::rfc2733::const_reference value)
{
    return select_rfc2733() = value;
}

inline bool DepFECData::rfc2733_isSelected() const
{ 
    return currentSelection() == rfc2733::id_; 
}

inline DepFECData::DepFECData(rfc2733::Id id, rfc2733::const_reference value)
  : Inherited(&theInfo, id, new rfc2733::value_type(value) )
{ }


inline void DepFECData::swap(DepFECData & other)
{  Inherited::swap(other); }

inline DepFECData* DepFECData::clone() const
{ return static_cast<DepFECData*> (Inherited::clone()); }

inline bool DepFECData::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline OpenLogicalChannelReject::forwardLogicalChannelNumber::const_reference OpenLogicalChannelReject::get_forwardLogicalChannelNumber () const
{ return *static_cast<forwardLogicalChannelNumber::const_pointer>(fields[0]);}

inline OpenLogicalChannelReject::forwardLogicalChannelNumber::reference OpenLogicalChannelReject::ref_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline OpenLogicalChannelReject::forwardLogicalChannelNumber::reference OpenLogicalChannelReject::set_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline OpenLogicalChannelReject::forwardLogicalChannelNumber::reference OpenLogicalChannelReject::set_forwardLogicalChannelNumber (forwardLogicalChannelNumber::value_type::int_type value)
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]) = value ;}

inline OpenLogicalChannelReject::cause::const_reference OpenLogicalChannelReject::get_cause () const
{ return *static_cast<cause::const_pointer>(fields[1]);}

inline OpenLogicalChannelReject::cause::reference OpenLogicalChannelReject::ref_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline OpenLogicalChannelReject::cause::reference OpenLogicalChannelReject::set_cause ()
{ return *static_cast<cause::pointer>(fields[1]);}

inline OpenLogicalChannelReject::cause::reference OpenLogicalChannelReject::set_cause (cause::const_reference value)
{ return *static_cast<cause::pointer>(fields[1]) = value ;}

inline OpenLogicalChannelReject::genericInformation::const_reference OpenLogicalChannelReject::get_genericInformation () const
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::const_pointer>(fields[2]);
}

inline OpenLogicalChannelReject::genericInformation::reference OpenLogicalChannelReject::ref_genericInformation ()
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::pointer>(fields[2]);
}

inline OpenLogicalChannelReject::genericInformation::reference OpenLogicalChannelReject::set_genericInformation ()
{
  includeOptionalField( e_genericInformation, 2);
  return *static_cast<genericInformation::pointer>(fields[2]);
}

inline OpenLogicalChannelReject::genericInformation::reference OpenLogicalChannelReject::set_genericInformation (genericInformation::const_reference value)
{
  includeOptionalField( e_genericInformation, 2);
  return *static_cast<genericInformation::pointer>(fields[2]) = value;
}

inline void OpenLogicalChannelReject::omit_genericInformation ()
{ removeOptionalField( e_genericInformation); }

inline bool OpenLogicalChannelReject::genericInformation_isPresent () const
{ return hasOptionalField( e_genericInformation); }

inline void OpenLogicalChannelReject::swap(OpenLogicalChannelReject& other)
{ Inherited::swap(other); }

inline OpenLogicalChannelReject* OpenLogicalChannelReject::clone() const
{ return static_cast<OpenLogicalChannelReject*> (Inherited::clone()); }

inline OpenLogicalChannelConfirm::forwardLogicalChannelNumber::const_reference OpenLogicalChannelConfirm::get_forwardLogicalChannelNumber () const
{ return *static_cast<forwardLogicalChannelNumber::const_pointer>(fields[0]);}

inline OpenLogicalChannelConfirm::forwardLogicalChannelNumber::reference OpenLogicalChannelConfirm::ref_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline OpenLogicalChannelConfirm::forwardLogicalChannelNumber::reference OpenLogicalChannelConfirm::set_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline OpenLogicalChannelConfirm::forwardLogicalChannelNumber::reference OpenLogicalChannelConfirm::set_forwardLogicalChannelNumber (forwardLogicalChannelNumber::value_type::int_type value)
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]) = value ;}

inline OpenLogicalChannelConfirm::genericInformation::const_reference OpenLogicalChannelConfirm::get_genericInformation () const
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::const_pointer>(fields[1]);
}

inline OpenLogicalChannelConfirm::genericInformation::reference OpenLogicalChannelConfirm::ref_genericInformation ()
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::pointer>(fields[1]);
}

inline OpenLogicalChannelConfirm::genericInformation::reference OpenLogicalChannelConfirm::set_genericInformation ()
{
  includeOptionalField( e_genericInformation, 1);
  return *static_cast<genericInformation::pointer>(fields[1]);
}

inline OpenLogicalChannelConfirm::genericInformation::reference OpenLogicalChannelConfirm::set_genericInformation (genericInformation::const_reference value)
{
  includeOptionalField( e_genericInformation, 1);
  return *static_cast<genericInformation::pointer>(fields[1]) = value;
}

inline void OpenLogicalChannelConfirm::omit_genericInformation ()
{ removeOptionalField( e_genericInformation); }

inline bool OpenLogicalChannelConfirm::genericInformation_isPresent () const
{ return hasOptionalField( e_genericInformation); }

inline void OpenLogicalChannelConfirm::swap(OpenLogicalChannelConfirm& other)
{ Inherited::swap(other); }

inline OpenLogicalChannelConfirm* OpenLogicalChannelConfirm::clone() const
{ return static_cast<OpenLogicalChannelConfirm*> (Inherited::clone()); }

inline AudioMode::nonStandard::const_reference AudioMode::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline AudioMode::nonStandard::reference AudioMode::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline AudioMode::nonStandard::reference AudioMode::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline AudioMode::nonStandard::reference AudioMode::select_nonStandard (AudioMode::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool AudioMode::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline AudioMode::g711Alaw64k::reference AudioMode::select_g711Alaw64k ()
{
    return *static_cast<g711Alaw64k::pointer>(setSelection(g711Alaw64k::id_, ASN1::AbstractData::create( &g711Alaw64k::value_type::theInfo)));
}

inline bool AudioMode::g711Alaw64k_isSelected() const
{ 
    return currentSelection() == g711Alaw64k::id_; 
}

inline AudioMode::g711Alaw56k::reference AudioMode::select_g711Alaw56k ()
{
    return *static_cast<g711Alaw56k::pointer>(setSelection(g711Alaw56k::id_, ASN1::AbstractData::create( &g711Alaw56k::value_type::theInfo)));
}

inline bool AudioMode::g711Alaw56k_isSelected() const
{ 
    return currentSelection() == g711Alaw56k::id_; 
}

inline AudioMode::g711Ulaw64k::reference AudioMode::select_g711Ulaw64k ()
{
    return *static_cast<g711Ulaw64k::pointer>(setSelection(g711Ulaw64k::id_, ASN1::AbstractData::create( &g711Ulaw64k::value_type::theInfo)));
}

inline bool AudioMode::g711Ulaw64k_isSelected() const
{ 
    return currentSelection() == g711Ulaw64k::id_; 
}

inline AudioMode::g711Ulaw56k::reference AudioMode::select_g711Ulaw56k ()
{
    return *static_cast<g711Ulaw56k::pointer>(setSelection(g711Ulaw56k::id_, ASN1::AbstractData::create( &g711Ulaw56k::value_type::theInfo)));
}

inline bool AudioMode::g711Ulaw56k_isSelected() const
{ 
    return currentSelection() == g711Ulaw56k::id_; 
}

inline AudioMode::g722_64k::reference AudioMode::select_g722_64k ()
{
    return *static_cast<g722_64k::pointer>(setSelection(g722_64k::id_, ASN1::AbstractData::create( &g722_64k::value_type::theInfo)));
}

inline bool AudioMode::g722_64k_isSelected() const
{ 
    return currentSelection() == g722_64k::id_; 
}

inline AudioMode::g722_56k::reference AudioMode::select_g722_56k ()
{
    return *static_cast<g722_56k::pointer>(setSelection(g722_56k::id_, ASN1::AbstractData::create( &g722_56k::value_type::theInfo)));
}

inline bool AudioMode::g722_56k_isSelected() const
{ 
    return currentSelection() == g722_56k::id_; 
}

inline AudioMode::g722_48k::reference AudioMode::select_g722_48k ()
{
    return *static_cast<g722_48k::pointer>(setSelection(g722_48k::id_, ASN1::AbstractData::create( &g722_48k::value_type::theInfo)));
}

inline bool AudioMode::g722_48k_isSelected() const
{ 
    return currentSelection() == g722_48k::id_; 
}

inline AudioMode::g728::reference AudioMode::select_g728 ()
{
    return *static_cast<g728::pointer>(setSelection(g728::id_, ASN1::AbstractData::create( &g728::value_type::theInfo)));
}

inline bool AudioMode::g728_isSelected() const
{ 
    return currentSelection() == g728::id_; 
}

inline AudioMode::g729::reference AudioMode::select_g729 ()
{
    return *static_cast<g729::pointer>(setSelection(g729::id_, ASN1::AbstractData::create( &g729::value_type::theInfo)));
}

inline bool AudioMode::g729_isSelected() const
{ 
    return currentSelection() == g729::id_; 
}

inline AudioMode::g729AnnexA::reference AudioMode::select_g729AnnexA ()
{
    return *static_cast<g729AnnexA::pointer>(setSelection(g729AnnexA::id_, ASN1::AbstractData::create( &g729AnnexA::value_type::theInfo)));
}

inline bool AudioMode::g729AnnexA_isSelected() const
{ 
    return currentSelection() == g729AnnexA::id_; 
}

inline AudioMode::g7231::const_reference AudioMode::get_g7231 () const
{
    assert(currentSelection() ==g7231::id_);
    return *static_cast<g7231::const_pointer>(choice.get());
}

inline AudioMode::g7231::reference AudioMode::ref_g7231 ()
{
    assert(currentSelection() ==g7231::id_);
    return *static_cast<g7231::pointer>(choice.get());
}

inline AudioMode::g7231::reference AudioMode::select_g7231 ()
{
    return *static_cast<g7231::pointer>(setSelection(g7231::id_, ASN1::AbstractData::create( &g7231::value_type::theInfo)));
}

inline AudioMode::g7231::reference AudioMode::select_g7231 (AudioMode::g7231::const_reference value)
{
    return select_g7231() = value;
}

inline bool AudioMode::g7231_isSelected() const
{ 
    return currentSelection() == g7231::id_; 
}

inline AudioMode::is11172AudioMode::const_reference AudioMode::get_is11172AudioMode () const
{
    assert(currentSelection() ==is11172AudioMode::id_);
    return *static_cast<is11172AudioMode::const_pointer>(choice.get());
}

inline AudioMode::is11172AudioMode::reference AudioMode::ref_is11172AudioMode ()
{
    assert(currentSelection() ==is11172AudioMode::id_);
    return *static_cast<is11172AudioMode::pointer>(choice.get());
}

inline AudioMode::is11172AudioMode::reference AudioMode::select_is11172AudioMode ()
{
    return *static_cast<is11172AudioMode::pointer>(setSelection(is11172AudioMode::id_, ASN1::AbstractData::create( &is11172AudioMode::value_type::theInfo)));
}

inline AudioMode::is11172AudioMode::reference AudioMode::select_is11172AudioMode (AudioMode::is11172AudioMode::const_reference value)
{
    return select_is11172AudioMode() = value;
}

inline bool AudioMode::is11172AudioMode_isSelected() const
{ 
    return currentSelection() == is11172AudioMode::id_; 
}

inline AudioMode::is13818AudioMode::const_reference AudioMode::get_is13818AudioMode () const
{
    assert(currentSelection() ==is13818AudioMode::id_);
    return *static_cast<is13818AudioMode::const_pointer>(choice.get());
}

inline AudioMode::is13818AudioMode::reference AudioMode::ref_is13818AudioMode ()
{
    assert(currentSelection() ==is13818AudioMode::id_);
    return *static_cast<is13818AudioMode::pointer>(choice.get());
}

inline AudioMode::is13818AudioMode::reference AudioMode::select_is13818AudioMode ()
{
    return *static_cast<is13818AudioMode::pointer>(setSelection(is13818AudioMode::id_, ASN1::AbstractData::create( &is13818AudioMode::value_type::theInfo)));
}

inline AudioMode::is13818AudioMode::reference AudioMode::select_is13818AudioMode (AudioMode::is13818AudioMode::const_reference value)
{
    return select_is13818AudioMode() = value;
}

inline bool AudioMode::is13818AudioMode_isSelected() const
{ 
    return currentSelection() == is13818AudioMode::id_; 
}

inline AudioMode::g729wAnnexB::const_reference AudioMode::get_g729wAnnexB () const
{
    assert(currentSelection() ==g729wAnnexB::id_);
    return *static_cast<g729wAnnexB::const_pointer>(choice.get());
}

inline AudioMode::g729wAnnexB::reference AudioMode::ref_g729wAnnexB ()
{
    assert(currentSelection() ==g729wAnnexB::id_);
    return *static_cast<g729wAnnexB::pointer>(choice.get());
}

inline AudioMode::g729wAnnexB::reference AudioMode::select_g729wAnnexB ()
{
    return *static_cast<g729wAnnexB::pointer>(setSelection(g729wAnnexB::id_, ASN1::AbstractData::create( &g729wAnnexB::value_type::theInfo)));
}

inline AudioMode::g729wAnnexB::reference AudioMode::select_g729wAnnexB (AudioMode::g729wAnnexB::value_type::int_type value)
{
    return select_g729wAnnexB() = value;
}

inline bool AudioMode::g729wAnnexB_isSelected() const
{ 
    return currentSelection() == g729wAnnexB::id_; 
}

inline AudioMode::g729AnnexAwAnnexB::const_reference AudioMode::get_g729AnnexAwAnnexB () const
{
    assert(currentSelection() ==g729AnnexAwAnnexB::id_);
    return *static_cast<g729AnnexAwAnnexB::const_pointer>(choice.get());
}

inline AudioMode::g729AnnexAwAnnexB::reference AudioMode::ref_g729AnnexAwAnnexB ()
{
    assert(currentSelection() ==g729AnnexAwAnnexB::id_);
    return *static_cast<g729AnnexAwAnnexB::pointer>(choice.get());
}

inline AudioMode::g729AnnexAwAnnexB::reference AudioMode::select_g729AnnexAwAnnexB ()
{
    return *static_cast<g729AnnexAwAnnexB::pointer>(setSelection(g729AnnexAwAnnexB::id_, ASN1::AbstractData::create( &g729AnnexAwAnnexB::value_type::theInfo)));
}

inline AudioMode::g729AnnexAwAnnexB::reference AudioMode::select_g729AnnexAwAnnexB (AudioMode::g729AnnexAwAnnexB::value_type::int_type value)
{
    return select_g729AnnexAwAnnexB() = value;
}

inline bool AudioMode::g729AnnexAwAnnexB_isSelected() const
{ 
    return currentSelection() == g729AnnexAwAnnexB::id_; 
}

inline AudioMode::g7231AnnexCMode::const_reference AudioMode::get_g7231AnnexCMode () const
{
    assert(currentSelection() ==g7231AnnexCMode::id_);
    return *static_cast<g7231AnnexCMode::const_pointer>(choice.get());
}

inline AudioMode::g7231AnnexCMode::reference AudioMode::ref_g7231AnnexCMode ()
{
    assert(currentSelection() ==g7231AnnexCMode::id_);
    return *static_cast<g7231AnnexCMode::pointer>(choice.get());
}

inline AudioMode::g7231AnnexCMode::reference AudioMode::select_g7231AnnexCMode ()
{
    return *static_cast<g7231AnnexCMode::pointer>(setSelection(g7231AnnexCMode::id_, ASN1::AbstractData::create( &g7231AnnexCMode::value_type::theInfo)));
}

inline AudioMode::g7231AnnexCMode::reference AudioMode::select_g7231AnnexCMode (AudioMode::g7231AnnexCMode::const_reference value)
{
    return select_g7231AnnexCMode() = value;
}

inline bool AudioMode::g7231AnnexCMode_isSelected() const
{ 
    return currentSelection() == g7231AnnexCMode::id_; 
}

inline AudioMode::gsmFullRate::const_reference AudioMode::get_gsmFullRate () const
{
    assert(currentSelection() ==gsmFullRate::id_);
    return *static_cast<gsmFullRate::const_pointer>(choice.get());
}

inline AudioMode::gsmFullRate::reference AudioMode::ref_gsmFullRate ()
{
    assert(currentSelection() ==gsmFullRate::id_);
    return *static_cast<gsmFullRate::pointer>(choice.get());
}

inline AudioMode::gsmFullRate::reference AudioMode::select_gsmFullRate ()
{
    return *static_cast<gsmFullRate::pointer>(setSelection(gsmFullRate::id_, ASN1::AbstractData::create( &gsmFullRate::value_type::theInfo)));
}

inline AudioMode::gsmFullRate::reference AudioMode::select_gsmFullRate (AudioMode::gsmFullRate::const_reference value)
{
    return select_gsmFullRate() = value;
}

inline bool AudioMode::gsmFullRate_isSelected() const
{ 
    return currentSelection() == gsmFullRate::id_; 
}

inline AudioMode::gsmHalfRate::const_reference AudioMode::get_gsmHalfRate () const
{
    assert(currentSelection() ==gsmHalfRate::id_);
    return *static_cast<gsmHalfRate::const_pointer>(choice.get());
}

inline AudioMode::gsmHalfRate::reference AudioMode::ref_gsmHalfRate ()
{
    assert(currentSelection() ==gsmHalfRate::id_);
    return *static_cast<gsmHalfRate::pointer>(choice.get());
}

inline AudioMode::gsmHalfRate::reference AudioMode::select_gsmHalfRate ()
{
    return *static_cast<gsmHalfRate::pointer>(setSelection(gsmHalfRate::id_, ASN1::AbstractData::create( &gsmHalfRate::value_type::theInfo)));
}

inline AudioMode::gsmHalfRate::reference AudioMode::select_gsmHalfRate (AudioMode::gsmHalfRate::const_reference value)
{
    return select_gsmHalfRate() = value;
}

inline bool AudioMode::gsmHalfRate_isSelected() const
{ 
    return currentSelection() == gsmHalfRate::id_; 
}

inline AudioMode::gsmEnhancedFullRate::const_reference AudioMode::get_gsmEnhancedFullRate () const
{
    assert(currentSelection() ==gsmEnhancedFullRate::id_);
    return *static_cast<gsmEnhancedFullRate::const_pointer>(choice.get());
}

inline AudioMode::gsmEnhancedFullRate::reference AudioMode::ref_gsmEnhancedFullRate ()
{
    assert(currentSelection() ==gsmEnhancedFullRate::id_);
    return *static_cast<gsmEnhancedFullRate::pointer>(choice.get());
}

inline AudioMode::gsmEnhancedFullRate::reference AudioMode::select_gsmEnhancedFullRate ()
{
    return *static_cast<gsmEnhancedFullRate::pointer>(setSelection(gsmEnhancedFullRate::id_, ASN1::AbstractData::create( &gsmEnhancedFullRate::value_type::theInfo)));
}

inline AudioMode::gsmEnhancedFullRate::reference AudioMode::select_gsmEnhancedFullRate (AudioMode::gsmEnhancedFullRate::const_reference value)
{
    return select_gsmEnhancedFullRate() = value;
}

inline bool AudioMode::gsmEnhancedFullRate_isSelected() const
{ 
    return currentSelection() == gsmEnhancedFullRate::id_; 
}

inline AudioMode::genericAudioMode::const_reference AudioMode::get_genericAudioMode () const
{
    assert(currentSelection() ==genericAudioMode::id_);
    return *static_cast<genericAudioMode::const_pointer>(choice.get());
}

inline AudioMode::genericAudioMode::reference AudioMode::ref_genericAudioMode ()
{
    assert(currentSelection() ==genericAudioMode::id_);
    return *static_cast<genericAudioMode::pointer>(choice.get());
}

inline AudioMode::genericAudioMode::reference AudioMode::select_genericAudioMode ()
{
    return *static_cast<genericAudioMode::pointer>(setSelection(genericAudioMode::id_, ASN1::AbstractData::create( &genericAudioMode::value_type::theInfo)));
}

inline AudioMode::genericAudioMode::reference AudioMode::select_genericAudioMode (AudioMode::genericAudioMode::const_reference value)
{
    return select_genericAudioMode() = value;
}

inline bool AudioMode::genericAudioMode_isSelected() const
{ 
    return currentSelection() == genericAudioMode::id_; 
}

inline AudioMode::g729Extensions::const_reference AudioMode::get_g729Extensions () const
{
    assert(currentSelection() ==g729Extensions::id_);
    return *static_cast<g729Extensions::const_pointer>(choice.get());
}

inline AudioMode::g729Extensions::reference AudioMode::ref_g729Extensions ()
{
    assert(currentSelection() ==g729Extensions::id_);
    return *static_cast<g729Extensions::pointer>(choice.get());
}

inline AudioMode::g729Extensions::reference AudioMode::select_g729Extensions ()
{
    return *static_cast<g729Extensions::pointer>(setSelection(g729Extensions::id_, ASN1::AbstractData::create( &g729Extensions::value_type::theInfo)));
}

inline AudioMode::g729Extensions::reference AudioMode::select_g729Extensions (AudioMode::g729Extensions::const_reference value)
{
    return select_g729Extensions() = value;
}

inline bool AudioMode::g729Extensions_isSelected() const
{ 
    return currentSelection() == g729Extensions::id_; 
}

inline AudioMode::vbd::const_reference AudioMode::get_vbd () const
{
    assert(currentSelection() ==vbd::id_);
    return *static_cast<vbd::const_pointer>(choice.get());
}

inline AudioMode::vbd::reference AudioMode::ref_vbd ()
{
    assert(currentSelection() ==vbd::id_);
    return *static_cast<vbd::pointer>(choice.get());
}

inline AudioMode::vbd::reference AudioMode::select_vbd ()
{
    return *static_cast<vbd::pointer>(setSelection(vbd::id_, ASN1::AbstractData::create( &vbd::value_type::theInfo)));
}

inline AudioMode::vbd::reference AudioMode::select_vbd (AudioMode::vbd::const_reference value)
{
    return select_vbd() = value;
}

inline bool AudioMode::vbd_isSelected() const
{ 
    return currentSelection() == vbd::id_; 
}

inline AudioMode::AudioMode(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline AudioMode::AudioMode(g711Alaw64k::Id id, g711Alaw64k::const_reference value)
  : Inherited(&theInfo, id, new g711Alaw64k::value_type(value) )
{ }

inline AudioMode::AudioMode(g711Alaw56k::Id id, g711Alaw56k::const_reference value)
  : Inherited(&theInfo, id, new g711Alaw56k::value_type(value) )
{ }

inline AudioMode::AudioMode(g711Ulaw64k::Id id, g711Ulaw64k::const_reference value)
  : Inherited(&theInfo, id, new g711Ulaw64k::value_type(value) )
{ }

inline AudioMode::AudioMode(g711Ulaw56k::Id id, g711Ulaw56k::const_reference value)
  : Inherited(&theInfo, id, new g711Ulaw56k::value_type(value) )
{ }

inline AudioMode::AudioMode(g722_64k::Id id, g722_64k::const_reference value)
  : Inherited(&theInfo, id, new g722_64k::value_type(value) )
{ }

inline AudioMode::AudioMode(g722_56k::Id id, g722_56k::const_reference value)
  : Inherited(&theInfo, id, new g722_56k::value_type(value) )
{ }

inline AudioMode::AudioMode(g722_48k::Id id, g722_48k::const_reference value)
  : Inherited(&theInfo, id, new g722_48k::value_type(value) )
{ }

inline AudioMode::AudioMode(g728::Id id, g728::const_reference value)
  : Inherited(&theInfo, id, new g728::value_type(value) )
{ }

inline AudioMode::AudioMode(g729::Id id, g729::const_reference value)
  : Inherited(&theInfo, id, new g729::value_type(value) )
{ }

inline AudioMode::AudioMode(g729AnnexA::Id id, g729AnnexA::const_reference value)
  : Inherited(&theInfo, id, new g729AnnexA::value_type(value) )
{ }

inline AudioMode::AudioMode(g7231::Id id, g7231::const_reference value)
  : Inherited(&theInfo, id, new g7231::value_type(value) )
{ }

inline AudioMode::AudioMode(is11172AudioMode::Id id, is11172AudioMode::const_reference value)
  : Inherited(&theInfo, id, new is11172AudioMode::value_type(value) )
{ }

inline AudioMode::AudioMode(is13818AudioMode::Id id, is13818AudioMode::const_reference value)
  : Inherited(&theInfo, id, new is13818AudioMode::value_type(value) )
{ }

inline AudioMode::AudioMode(g729wAnnexB::Id id, g729wAnnexB::value_type::int_type value)
  : Inherited(&theInfo, id, new g729wAnnexB::value_type(value) )
{ }

inline AudioMode::AudioMode(g729AnnexAwAnnexB::Id id, g729AnnexAwAnnexB::value_type::int_type value)
  : Inherited(&theInfo, id, new g729AnnexAwAnnexB::value_type(value) )
{ }

inline AudioMode::AudioMode(g7231AnnexCMode::Id id, g7231AnnexCMode::const_reference value)
  : Inherited(&theInfo, id, new g7231AnnexCMode::value_type(value) )
{ }

inline AudioMode::AudioMode(gsmFullRate::Id id, gsmFullRate::const_reference value)
  : Inherited(&theInfo, id, new gsmFullRate::value_type(value) )
{ }

inline AudioMode::AudioMode(gsmHalfRate::Id id, gsmHalfRate::const_reference value)
  : Inherited(&theInfo, id, new gsmHalfRate::value_type(value) )
{ }

inline AudioMode::AudioMode(gsmEnhancedFullRate::Id id, gsmEnhancedFullRate::const_reference value)
  : Inherited(&theInfo, id, new gsmEnhancedFullRate::value_type(value) )
{ }

inline AudioMode::AudioMode(genericAudioMode::Id id, genericAudioMode::const_reference value)
  : Inherited(&theInfo, id, new genericAudioMode::value_type(value) )
{ }

inline AudioMode::AudioMode(g729Extensions::Id id, g729Extensions::const_reference value)
  : Inherited(&theInfo, id, new g729Extensions::value_type(value) )
{ }

inline AudioMode::AudioMode(vbd::Id id, vbd::const_reference value)
  : Inherited(&theInfo, id, new vbd::value_type(value) )
{ }


inline void AudioMode::swap(AudioMode & other)
{  Inherited::swap(other); }

inline AudioMode* AudioMode::clone() const
{ return static_cast<AudioMode*> (Inherited::clone()); }

inline bool AudioMode::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DialingInformationNumber::networkAddress::value_type* DialingInformationNumber::networkAddress::value_type::clone() const
{ return static_cast<value_type*> (Inherited::clone()); }

inline bool DialingInformationNumber::networkAddress::value_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DialingInformationNumber::networkAddress::const_reference DialingInformationNumber::get_networkAddress () const
{ return *static_cast<networkAddress::const_pointer>(fields[0]);}

inline DialingInformationNumber::networkAddress::reference DialingInformationNumber::ref_networkAddress ()
{ return *static_cast<networkAddress::pointer>(fields[0]);}

inline DialingInformationNumber::networkAddress::reference DialingInformationNumber::set_networkAddress ()
{ return *static_cast<networkAddress::pointer>(fields[0]);}

inline DialingInformationNumber::networkAddress::reference DialingInformationNumber::set_networkAddress (const std::string& value)
{ return *static_cast<networkAddress::pointer>(fields[0]) = value ;}

inline DialingInformationNumber::subAddress::value_type* DialingInformationNumber::subAddress::value_type::clone() const
{ return static_cast<value_type*> (Inherited::clone()); }

inline bool DialingInformationNumber::subAddress::value_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DialingInformationNumber::subAddress::const_reference DialingInformationNumber::get_subAddress () const
{
  assert(hasOptionalField(e_subAddress));
  return *static_cast<subAddress::const_pointer>(fields[1]);
}

inline DialingInformationNumber::subAddress::reference DialingInformationNumber::ref_subAddress ()
{
  assert(hasOptionalField(e_subAddress));
  return *static_cast<subAddress::pointer>(fields[1]);
}

inline DialingInformationNumber::subAddress::reference DialingInformationNumber::set_subAddress ()
{
  includeOptionalField( e_subAddress, 1);
  return *static_cast<subAddress::pointer>(fields[1]);
}

inline DialingInformationNumber::subAddress::reference DialingInformationNumber::set_subAddress (const std::string& value)
{
  includeOptionalField( e_subAddress, 1);
  return *static_cast<subAddress::pointer>(fields[1]) = value;
}

inline void DialingInformationNumber::omit_subAddress ()
{ removeOptionalField( e_subAddress); }

inline bool DialingInformationNumber::subAddress_isPresent () const
{ return hasOptionalField( e_subAddress); }

inline DialingInformationNumber::networkType::const_reference DialingInformationNumber::get_networkType () const
{ return *static_cast<networkType::const_pointer>(fields[2]);}

inline DialingInformationNumber::networkType::reference DialingInformationNumber::ref_networkType ()
{ return *static_cast<networkType::pointer>(fields[2]);}

inline DialingInformationNumber::networkType::reference DialingInformationNumber::set_networkType ()
{ return *static_cast<networkType::pointer>(fields[2]);}

inline DialingInformationNumber::networkType::reference DialingInformationNumber::set_networkType (networkType::const_reference value)
{ return *static_cast<networkType::pointer>(fields[2]) = value ;}

inline void DialingInformationNumber::swap(DialingInformationNumber& other)
{ Inherited::swap(other); }

inline DialingInformationNumber* DialingInformationNumber::clone() const
{ return static_cast<DialingInformationNumber*> (Inherited::clone()); }

inline EndSessionCommand::nonStandard::const_reference EndSessionCommand::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline EndSessionCommand::nonStandard::reference EndSessionCommand::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline EndSessionCommand::nonStandard::reference EndSessionCommand::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline EndSessionCommand::nonStandard::reference EndSessionCommand::select_nonStandard (EndSessionCommand::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool EndSessionCommand::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline EndSessionCommand::disconnect::reference EndSessionCommand::select_disconnect ()
{
    return *static_cast<disconnect::pointer>(setSelection(disconnect::id_, ASN1::AbstractData::create( &disconnect::value_type::theInfo)));
}

inline bool EndSessionCommand::disconnect_isSelected() const
{ 
    return currentSelection() == disconnect::id_; 
}

inline EndSessionCommand::gstnOptions::const_reference EndSessionCommand::get_gstnOptions () const
{
    assert(currentSelection() ==gstnOptions::id_);
    return *static_cast<gstnOptions::const_pointer>(choice.get());
}

inline EndSessionCommand::gstnOptions::reference EndSessionCommand::ref_gstnOptions ()
{
    assert(currentSelection() ==gstnOptions::id_);
    return *static_cast<gstnOptions::pointer>(choice.get());
}

inline EndSessionCommand::gstnOptions::reference EndSessionCommand::select_gstnOptions ()
{
    return *static_cast<gstnOptions::pointer>(setSelection(gstnOptions::id_, ASN1::AbstractData::create( &gstnOptions::value_type::theInfo)));
}

inline EndSessionCommand::gstnOptions::reference EndSessionCommand::select_gstnOptions (EndSessionCommand::gstnOptions::const_reference value)
{
    return select_gstnOptions() = value;
}

inline bool EndSessionCommand::gstnOptions_isSelected() const
{ 
    return currentSelection() == gstnOptions::id_; 
}

inline EndSessionCommand::isdnOptions::const_reference EndSessionCommand::get_isdnOptions () const
{
    assert(currentSelection() ==isdnOptions::id_);
    return *static_cast<isdnOptions::const_pointer>(choice.get());
}

inline EndSessionCommand::isdnOptions::reference EndSessionCommand::ref_isdnOptions ()
{
    assert(currentSelection() ==isdnOptions::id_);
    return *static_cast<isdnOptions::pointer>(choice.get());
}

inline EndSessionCommand::isdnOptions::reference EndSessionCommand::select_isdnOptions ()
{
    return *static_cast<isdnOptions::pointer>(setSelection(isdnOptions::id_, ASN1::AbstractData::create( &isdnOptions::value_type::theInfo)));
}

inline EndSessionCommand::isdnOptions::reference EndSessionCommand::select_isdnOptions (EndSessionCommand::isdnOptions::const_reference value)
{
    return select_isdnOptions() = value;
}

inline bool EndSessionCommand::isdnOptions_isSelected() const
{ 
    return currentSelection() == isdnOptions::id_; 
}

inline EndSessionCommand::genericInformation::const_reference EndSessionCommand::get_genericInformation () const
{
    assert(currentSelection() ==genericInformation::id_);
    return *static_cast<genericInformation::const_pointer>(choice.get());
}

inline EndSessionCommand::genericInformation::reference EndSessionCommand::ref_genericInformation ()
{
    assert(currentSelection() ==genericInformation::id_);
    return *static_cast<genericInformation::pointer>(choice.get());
}

inline EndSessionCommand::genericInformation::reference EndSessionCommand::select_genericInformation ()
{
    return *static_cast<genericInformation::pointer>(setSelection(genericInformation::id_, ASN1::AbstractData::create( &genericInformation::value_type::theInfo)));
}

inline EndSessionCommand::genericInformation::reference EndSessionCommand::select_genericInformation (EndSessionCommand::genericInformation::const_reference value)
{
    return select_genericInformation() = value;
}

inline bool EndSessionCommand::genericInformation_isSelected() const
{ 
    return currentSelection() == genericInformation::id_; 
}

inline EndSessionCommand::EndSessionCommand(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline EndSessionCommand::EndSessionCommand(disconnect::Id id, disconnect::const_reference value)
  : Inherited(&theInfo, id, new disconnect::value_type(value) )
{ }

inline EndSessionCommand::EndSessionCommand(gstnOptions::Id id, gstnOptions::const_reference value)
  : Inherited(&theInfo, id, new gstnOptions::value_type(value) )
{ }

inline EndSessionCommand::EndSessionCommand(isdnOptions::Id id, isdnOptions::const_reference value)
  : Inherited(&theInfo, id, new isdnOptions::value_type(value) )
{ }

inline EndSessionCommand::EndSessionCommand(genericInformation::Id id, genericInformation::const_reference value)
  : Inherited(&theInfo, id, new genericInformation::value_type(value) )
{ }


inline void EndSessionCommand::swap(EndSessionCommand & other)
{  Inherited::swap(other); }

inline EndSessionCommand* EndSessionCommand::clone() const
{ return static_cast<EndSessionCommand*> (Inherited::clone()); }

inline bool EndSessionCommand::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline UserInputIndication::nonStandard::const_reference UserInputIndication::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline UserInputIndication::nonStandard::reference UserInputIndication::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline UserInputIndication::nonStandard::reference UserInputIndication::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline UserInputIndication::nonStandard::reference UserInputIndication::select_nonStandard (UserInputIndication::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool UserInputIndication::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline UserInputIndication::alphanumeric::const_reference UserInputIndication::get_alphanumeric () const
{
    assert(currentSelection() ==alphanumeric::id_);
    return *static_cast<alphanumeric::const_pointer>(choice.get());
}

inline UserInputIndication::alphanumeric::reference UserInputIndication::ref_alphanumeric ()
{
    assert(currentSelection() ==alphanumeric::id_);
    return *static_cast<alphanumeric::pointer>(choice.get());
}

inline UserInputIndication::alphanumeric::reference UserInputIndication::select_alphanumeric ()
{
    return *static_cast<alphanumeric::pointer>(setSelection(alphanumeric::id_, ASN1::AbstractData::create( &alphanumeric::value_type::theInfo)));
}

inline UserInputIndication::alphanumeric::reference UserInputIndication::select_alphanumeric (const std::string& value)
{
    return select_alphanumeric() = value;
}

inline bool UserInputIndication::alphanumeric_isSelected() const
{ 
    return currentSelection() == alphanumeric::id_; 
}

inline UserInputIndication::userInputSupportIndication::const_reference UserInputIndication::get_userInputSupportIndication () const
{
    assert(currentSelection() ==userInputSupportIndication::id_);
    return *static_cast<userInputSupportIndication::const_pointer>(choice.get());
}

inline UserInputIndication::userInputSupportIndication::reference UserInputIndication::ref_userInputSupportIndication ()
{
    assert(currentSelection() ==userInputSupportIndication::id_);
    return *static_cast<userInputSupportIndication::pointer>(choice.get());
}

inline UserInputIndication::userInputSupportIndication::reference UserInputIndication::select_userInputSupportIndication ()
{
    return *static_cast<userInputSupportIndication::pointer>(setSelection(userInputSupportIndication::id_, ASN1::AbstractData::create( &userInputSupportIndication::value_type::theInfo)));
}

inline UserInputIndication::userInputSupportIndication::reference UserInputIndication::select_userInputSupportIndication (UserInputIndication::userInputSupportIndication::const_reference value)
{
    return select_userInputSupportIndication() = value;
}

inline bool UserInputIndication::userInputSupportIndication_isSelected() const
{ 
    return currentSelection() == userInputSupportIndication::id_; 
}

inline UserInputIndication::signal::const_reference UserInputIndication::get_signal () const
{
    assert(currentSelection() ==signal::id_);
    return *static_cast<signal::const_pointer>(choice.get());
}

inline UserInputIndication::signal::reference UserInputIndication::ref_signal ()
{
    assert(currentSelection() ==signal::id_);
    return *static_cast<signal::pointer>(choice.get());
}

inline UserInputIndication::signal::reference UserInputIndication::select_signal ()
{
    return *static_cast<signal::pointer>(setSelection(signal::id_, ASN1::AbstractData::create( &signal::value_type::theInfo)));
}

inline UserInputIndication::signal::reference UserInputIndication::select_signal (UserInputIndication::signal::const_reference value)
{
    return select_signal() = value;
}

inline bool UserInputIndication::signal_isSelected() const
{ 
    return currentSelection() == signal::id_; 
}

inline UserInputIndication::signalUpdate::const_reference UserInputIndication::get_signalUpdate () const
{
    assert(currentSelection() ==signalUpdate::id_);
    return *static_cast<signalUpdate::const_pointer>(choice.get());
}

inline UserInputIndication::signalUpdate::reference UserInputIndication::ref_signalUpdate ()
{
    assert(currentSelection() ==signalUpdate::id_);
    return *static_cast<signalUpdate::pointer>(choice.get());
}

inline UserInputIndication::signalUpdate::reference UserInputIndication::select_signalUpdate ()
{
    return *static_cast<signalUpdate::pointer>(setSelection(signalUpdate::id_, ASN1::AbstractData::create( &signalUpdate::value_type::theInfo)));
}

inline UserInputIndication::signalUpdate::reference UserInputIndication::select_signalUpdate (UserInputIndication::signalUpdate::const_reference value)
{
    return select_signalUpdate() = value;
}

inline bool UserInputIndication::signalUpdate_isSelected() const
{ 
    return currentSelection() == signalUpdate::id_; 
}

inline UserInputIndication::extendedAlphanumeric::const_reference UserInputIndication::get_extendedAlphanumeric () const
{
    assert(currentSelection() ==extendedAlphanumeric::id_);
    return *static_cast<extendedAlphanumeric::const_pointer>(choice.get());
}

inline UserInputIndication::extendedAlphanumeric::reference UserInputIndication::ref_extendedAlphanumeric ()
{
    assert(currentSelection() ==extendedAlphanumeric::id_);
    return *static_cast<extendedAlphanumeric::pointer>(choice.get());
}

inline UserInputIndication::extendedAlphanumeric::reference UserInputIndication::select_extendedAlphanumeric ()
{
    return *static_cast<extendedAlphanumeric::pointer>(setSelection(extendedAlphanumeric::id_, ASN1::AbstractData::create( &extendedAlphanumeric::value_type::theInfo)));
}

inline UserInputIndication::extendedAlphanumeric::reference UserInputIndication::select_extendedAlphanumeric (UserInputIndication::extendedAlphanumeric::const_reference value)
{
    return select_extendedAlphanumeric() = value;
}

inline bool UserInputIndication::extendedAlphanumeric_isSelected() const
{ 
    return currentSelection() == extendedAlphanumeric::id_; 
}

inline UserInputIndication::encryptedAlphanumeric::const_reference UserInputIndication::get_encryptedAlphanumeric () const
{
    assert(currentSelection() ==encryptedAlphanumeric::id_);
    return *static_cast<encryptedAlphanumeric::const_pointer>(choice.get());
}

inline UserInputIndication::encryptedAlphanumeric::reference UserInputIndication::ref_encryptedAlphanumeric ()
{
    assert(currentSelection() ==encryptedAlphanumeric::id_);
    return *static_cast<encryptedAlphanumeric::pointer>(choice.get());
}

inline UserInputIndication::encryptedAlphanumeric::reference UserInputIndication::select_encryptedAlphanumeric ()
{
    return *static_cast<encryptedAlphanumeric::pointer>(setSelection(encryptedAlphanumeric::id_, ASN1::AbstractData::create( &encryptedAlphanumeric::value_type::theInfo)));
}

inline UserInputIndication::encryptedAlphanumeric::reference UserInputIndication::select_encryptedAlphanumeric (UserInputIndication::encryptedAlphanumeric::const_reference value)
{
    return select_encryptedAlphanumeric() = value;
}

inline bool UserInputIndication::encryptedAlphanumeric_isSelected() const
{ 
    return currentSelection() == encryptedAlphanumeric::id_; 
}

inline UserInputIndication::genericInformation::const_reference UserInputIndication::get_genericInformation () const
{
    assert(currentSelection() ==genericInformation::id_);
    return *static_cast<genericInformation::const_pointer>(choice.get());
}

inline UserInputIndication::genericInformation::reference UserInputIndication::ref_genericInformation ()
{
    assert(currentSelection() ==genericInformation::id_);
    return *static_cast<genericInformation::pointer>(choice.get());
}

inline UserInputIndication::genericInformation::reference UserInputIndication::select_genericInformation ()
{
    return *static_cast<genericInformation::pointer>(setSelection(genericInformation::id_, ASN1::AbstractData::create( &genericInformation::value_type::theInfo)));
}

inline UserInputIndication::genericInformation::reference UserInputIndication::select_genericInformation (UserInputIndication::genericInformation::const_reference value)
{
    return select_genericInformation() = value;
}

inline bool UserInputIndication::genericInformation_isSelected() const
{ 
    return currentSelection() == genericInformation::id_; 
}

inline UserInputIndication::UserInputIndication(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline UserInputIndication::UserInputIndication(alphanumeric::Id id, const std::string& value)
  : Inherited(&theInfo, id, new alphanumeric::value_type(value) )
{ }

inline UserInputIndication::UserInputIndication(userInputSupportIndication::Id id, userInputSupportIndication::const_reference value)
  : Inherited(&theInfo, id, new userInputSupportIndication::value_type(value) )
{ }

inline UserInputIndication::UserInputIndication(signal::Id id, signal::const_reference value)
  : Inherited(&theInfo, id, new signal::value_type(value) )
{ }

inline UserInputIndication::UserInputIndication(signalUpdate::Id id, signalUpdate::const_reference value)
  : Inherited(&theInfo, id, new signalUpdate::value_type(value) )
{ }

inline UserInputIndication::UserInputIndication(extendedAlphanumeric::Id id, extendedAlphanumeric::const_reference value)
  : Inherited(&theInfo, id, new extendedAlphanumeric::value_type(value) )
{ }

inline UserInputIndication::UserInputIndication(encryptedAlphanumeric::Id id, encryptedAlphanumeric::const_reference value)
  : Inherited(&theInfo, id, new encryptedAlphanumeric::value_type(value) )
{ }

inline UserInputIndication::UserInputIndication(genericInformation::Id id, genericInformation::const_reference value)
  : Inherited(&theInfo, id, new genericInformation::value_type(value) )
{ }


inline void UserInputIndication::swap(UserInputIndication & other)
{  Inherited::swap(other); }

inline UserInputIndication* UserInputIndication::clone() const
{ return static_cast<UserInputIndication*> (Inherited::clone()); }

inline bool UserInputIndication::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DataApplicationCapability_application::nonStandard::const_reference DataApplicationCapability_application::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::nonStandard::reference DataApplicationCapability_application::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline DataApplicationCapability_application::nonStandard::reference DataApplicationCapability_application::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline DataApplicationCapability_application::nonStandard::reference DataApplicationCapability_application::select_nonStandard (DataApplicationCapability_application::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool DataApplicationCapability_application::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline DataApplicationCapability_application::t120::const_reference DataApplicationCapability_application::get_t120 () const
{
    assert(currentSelection() ==t120::id_);
    return *static_cast<t120::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::t120::reference DataApplicationCapability_application::ref_t120 ()
{
    assert(currentSelection() ==t120::id_);
    return *static_cast<t120::pointer>(choice.get());
}

inline DataApplicationCapability_application::t120::reference DataApplicationCapability_application::select_t120 ()
{
    return *static_cast<t120::pointer>(setSelection(t120::id_, ASN1::AbstractData::create( &t120::value_type::theInfo)));
}

inline DataApplicationCapability_application::t120::reference DataApplicationCapability_application::select_t120 (DataApplicationCapability_application::t120::const_reference value)
{
    return select_t120() = value;
}

inline bool DataApplicationCapability_application::t120_isSelected() const
{ 
    return currentSelection() == t120::id_; 
}

inline DataApplicationCapability_application::dsm_cc::const_reference DataApplicationCapability_application::get_dsm_cc () const
{
    assert(currentSelection() ==dsm_cc::id_);
    return *static_cast<dsm_cc::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::dsm_cc::reference DataApplicationCapability_application::ref_dsm_cc ()
{
    assert(currentSelection() ==dsm_cc::id_);
    return *static_cast<dsm_cc::pointer>(choice.get());
}

inline DataApplicationCapability_application::dsm_cc::reference DataApplicationCapability_application::select_dsm_cc ()
{
    return *static_cast<dsm_cc::pointer>(setSelection(dsm_cc::id_, ASN1::AbstractData::create( &dsm_cc::value_type::theInfo)));
}

inline DataApplicationCapability_application::dsm_cc::reference DataApplicationCapability_application::select_dsm_cc (DataApplicationCapability_application::dsm_cc::const_reference value)
{
    return select_dsm_cc() = value;
}

inline bool DataApplicationCapability_application::dsm_cc_isSelected() const
{ 
    return currentSelection() == dsm_cc::id_; 
}

inline DataApplicationCapability_application::userData::const_reference DataApplicationCapability_application::get_userData () const
{
    assert(currentSelection() ==userData::id_);
    return *static_cast<userData::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::userData::reference DataApplicationCapability_application::ref_userData ()
{
    assert(currentSelection() ==userData::id_);
    return *static_cast<userData::pointer>(choice.get());
}

inline DataApplicationCapability_application::userData::reference DataApplicationCapability_application::select_userData ()
{
    return *static_cast<userData::pointer>(setSelection(userData::id_, ASN1::AbstractData::create( &userData::value_type::theInfo)));
}

inline DataApplicationCapability_application::userData::reference DataApplicationCapability_application::select_userData (DataApplicationCapability_application::userData::const_reference value)
{
    return select_userData() = value;
}

inline bool DataApplicationCapability_application::userData_isSelected() const
{ 
    return currentSelection() == userData::id_; 
}

inline DataApplicationCapability_application::t84::const_reference DataApplicationCapability_application::get_t84 () const
{
    assert(currentSelection() ==t84::id_);
    return *static_cast<t84::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::t84::reference DataApplicationCapability_application::ref_t84 ()
{
    assert(currentSelection() ==t84::id_);
    return *static_cast<t84::pointer>(choice.get());
}

inline DataApplicationCapability_application::t84::reference DataApplicationCapability_application::select_t84 ()
{
    return *static_cast<t84::pointer>(setSelection(t84::id_, ASN1::AbstractData::create( &t84::value_type::theInfo)));
}

inline DataApplicationCapability_application::t84::reference DataApplicationCapability_application::select_t84 (DataApplicationCapability_application::t84::const_reference value)
{
    return select_t84() = value;
}

inline bool DataApplicationCapability_application::t84_isSelected() const
{ 
    return currentSelection() == t84::id_; 
}

inline DataApplicationCapability_application::t434::const_reference DataApplicationCapability_application::get_t434 () const
{
    assert(currentSelection() ==t434::id_);
    return *static_cast<t434::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::t434::reference DataApplicationCapability_application::ref_t434 ()
{
    assert(currentSelection() ==t434::id_);
    return *static_cast<t434::pointer>(choice.get());
}

inline DataApplicationCapability_application::t434::reference DataApplicationCapability_application::select_t434 ()
{
    return *static_cast<t434::pointer>(setSelection(t434::id_, ASN1::AbstractData::create( &t434::value_type::theInfo)));
}

inline DataApplicationCapability_application::t434::reference DataApplicationCapability_application::select_t434 (DataApplicationCapability_application::t434::const_reference value)
{
    return select_t434() = value;
}

inline bool DataApplicationCapability_application::t434_isSelected() const
{ 
    return currentSelection() == t434::id_; 
}

inline DataApplicationCapability_application::h224::const_reference DataApplicationCapability_application::get_h224 () const
{
    assert(currentSelection() ==h224::id_);
    return *static_cast<h224::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::h224::reference DataApplicationCapability_application::ref_h224 ()
{
    assert(currentSelection() ==h224::id_);
    return *static_cast<h224::pointer>(choice.get());
}

inline DataApplicationCapability_application::h224::reference DataApplicationCapability_application::select_h224 ()
{
    return *static_cast<h224::pointer>(setSelection(h224::id_, ASN1::AbstractData::create( &h224::value_type::theInfo)));
}

inline DataApplicationCapability_application::h224::reference DataApplicationCapability_application::select_h224 (DataApplicationCapability_application::h224::const_reference value)
{
    return select_h224() = value;
}

inline bool DataApplicationCapability_application::h224_isSelected() const
{ 
    return currentSelection() == h224::id_; 
}

inline DataApplicationCapability_application::nlpid::const_reference DataApplicationCapability_application::get_nlpid () const
{
    assert(currentSelection() ==nlpid::id_);
    return *static_cast<nlpid::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::nlpid::reference DataApplicationCapability_application::ref_nlpid ()
{
    assert(currentSelection() ==nlpid::id_);
    return *static_cast<nlpid::pointer>(choice.get());
}

inline DataApplicationCapability_application::nlpid::reference DataApplicationCapability_application::select_nlpid ()
{
    return *static_cast<nlpid::pointer>(setSelection(nlpid::id_, ASN1::AbstractData::create( &nlpid::value_type::theInfo)));
}

inline DataApplicationCapability_application::nlpid::reference DataApplicationCapability_application::select_nlpid (DataApplicationCapability_application::nlpid::const_reference value)
{
    return select_nlpid() = value;
}

inline bool DataApplicationCapability_application::nlpid_isSelected() const
{ 
    return currentSelection() == nlpid::id_; 
}

inline DataApplicationCapability_application::dsvdControl::reference DataApplicationCapability_application::select_dsvdControl ()
{
    return *static_cast<dsvdControl::pointer>(setSelection(dsvdControl::id_, ASN1::AbstractData::create( &dsvdControl::value_type::theInfo)));
}

inline bool DataApplicationCapability_application::dsvdControl_isSelected() const
{ 
    return currentSelection() == dsvdControl::id_; 
}

inline DataApplicationCapability_application::h222DataPartitioning::const_reference DataApplicationCapability_application::get_h222DataPartitioning () const
{
    assert(currentSelection() ==h222DataPartitioning::id_);
    return *static_cast<h222DataPartitioning::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::h222DataPartitioning::reference DataApplicationCapability_application::ref_h222DataPartitioning ()
{
    assert(currentSelection() ==h222DataPartitioning::id_);
    return *static_cast<h222DataPartitioning::pointer>(choice.get());
}

inline DataApplicationCapability_application::h222DataPartitioning::reference DataApplicationCapability_application::select_h222DataPartitioning ()
{
    return *static_cast<h222DataPartitioning::pointer>(setSelection(h222DataPartitioning::id_, ASN1::AbstractData::create( &h222DataPartitioning::value_type::theInfo)));
}

inline DataApplicationCapability_application::h222DataPartitioning::reference DataApplicationCapability_application::select_h222DataPartitioning (DataApplicationCapability_application::h222DataPartitioning::const_reference value)
{
    return select_h222DataPartitioning() = value;
}

inline bool DataApplicationCapability_application::h222DataPartitioning_isSelected() const
{ 
    return currentSelection() == h222DataPartitioning::id_; 
}

inline DataApplicationCapability_application::t30fax::const_reference DataApplicationCapability_application::get_t30fax () const
{
    assert(currentSelection() ==t30fax::id_);
    return *static_cast<t30fax::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::t30fax::reference DataApplicationCapability_application::ref_t30fax ()
{
    assert(currentSelection() ==t30fax::id_);
    return *static_cast<t30fax::pointer>(choice.get());
}

inline DataApplicationCapability_application::t30fax::reference DataApplicationCapability_application::select_t30fax ()
{
    return *static_cast<t30fax::pointer>(setSelection(t30fax::id_, ASN1::AbstractData::create( &t30fax::value_type::theInfo)));
}

inline DataApplicationCapability_application::t30fax::reference DataApplicationCapability_application::select_t30fax (DataApplicationCapability_application::t30fax::const_reference value)
{
    return select_t30fax() = value;
}

inline bool DataApplicationCapability_application::t30fax_isSelected() const
{ 
    return currentSelection() == t30fax::id_; 
}

inline DataApplicationCapability_application::t140::const_reference DataApplicationCapability_application::get_t140 () const
{
    assert(currentSelection() ==t140::id_);
    return *static_cast<t140::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::t140::reference DataApplicationCapability_application::ref_t140 ()
{
    assert(currentSelection() ==t140::id_);
    return *static_cast<t140::pointer>(choice.get());
}

inline DataApplicationCapability_application::t140::reference DataApplicationCapability_application::select_t140 ()
{
    return *static_cast<t140::pointer>(setSelection(t140::id_, ASN1::AbstractData::create( &t140::value_type::theInfo)));
}

inline DataApplicationCapability_application::t140::reference DataApplicationCapability_application::select_t140 (DataApplicationCapability_application::t140::const_reference value)
{
    return select_t140() = value;
}

inline bool DataApplicationCapability_application::t140_isSelected() const
{ 
    return currentSelection() == t140::id_; 
}

inline DataApplicationCapability_application::t38fax::const_reference DataApplicationCapability_application::get_t38fax () const
{
    assert(currentSelection() ==t38fax::id_);
    return *static_cast<t38fax::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::t38fax::reference DataApplicationCapability_application::ref_t38fax ()
{
    assert(currentSelection() ==t38fax::id_);
    return *static_cast<t38fax::pointer>(choice.get());
}

inline DataApplicationCapability_application::t38fax::reference DataApplicationCapability_application::select_t38fax ()
{
    return *static_cast<t38fax::pointer>(setSelection(t38fax::id_, ASN1::AbstractData::create( &t38fax::value_type::theInfo)));
}

inline DataApplicationCapability_application::t38fax::reference DataApplicationCapability_application::select_t38fax (DataApplicationCapability_application::t38fax::const_reference value)
{
    return select_t38fax() = value;
}

inline bool DataApplicationCapability_application::t38fax_isSelected() const
{ 
    return currentSelection() == t38fax::id_; 
}

inline DataApplicationCapability_application::genericDataCapability::const_reference DataApplicationCapability_application::get_genericDataCapability () const
{
    assert(currentSelection() ==genericDataCapability::id_);
    return *static_cast<genericDataCapability::const_pointer>(choice.get());
}

inline DataApplicationCapability_application::genericDataCapability::reference DataApplicationCapability_application::ref_genericDataCapability ()
{
    assert(currentSelection() ==genericDataCapability::id_);
    return *static_cast<genericDataCapability::pointer>(choice.get());
}

inline DataApplicationCapability_application::genericDataCapability::reference DataApplicationCapability_application::select_genericDataCapability ()
{
    return *static_cast<genericDataCapability::pointer>(setSelection(genericDataCapability::id_, ASN1::AbstractData::create( &genericDataCapability::value_type::theInfo)));
}

inline DataApplicationCapability_application::genericDataCapability::reference DataApplicationCapability_application::select_genericDataCapability (DataApplicationCapability_application::genericDataCapability::const_reference value)
{
    return select_genericDataCapability() = value;
}

inline bool DataApplicationCapability_application::genericDataCapability_isSelected() const
{ 
    return currentSelection() == genericDataCapability::id_; 
}

inline DataApplicationCapability_application::DataApplicationCapability_application(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(t120::Id id, t120::const_reference value)
  : Inherited(&theInfo, id, new t120::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(dsm_cc::Id id, dsm_cc::const_reference value)
  : Inherited(&theInfo, id, new dsm_cc::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(userData::Id id, userData::const_reference value)
  : Inherited(&theInfo, id, new userData::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(t84::Id id, t84::const_reference value)
  : Inherited(&theInfo, id, new t84::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(t434::Id id, t434::const_reference value)
  : Inherited(&theInfo, id, new t434::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(h224::Id id, h224::const_reference value)
  : Inherited(&theInfo, id, new h224::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(nlpid::Id id, nlpid::const_reference value)
  : Inherited(&theInfo, id, new nlpid::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(dsvdControl::Id id, dsvdControl::const_reference value)
  : Inherited(&theInfo, id, new dsvdControl::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(h222DataPartitioning::Id id, h222DataPartitioning::const_reference value)
  : Inherited(&theInfo, id, new h222DataPartitioning::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(t30fax::Id id, t30fax::const_reference value)
  : Inherited(&theInfo, id, new t30fax::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(t140::Id id, t140::const_reference value)
  : Inherited(&theInfo, id, new t140::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(t38fax::Id id, t38fax::const_reference value)
  : Inherited(&theInfo, id, new t38fax::value_type(value) )
{ }

inline DataApplicationCapability_application::DataApplicationCapability_application(genericDataCapability::Id id, genericDataCapability::const_reference value)
  : Inherited(&theInfo, id, new genericDataCapability::value_type(value) )
{ }


inline void DataApplicationCapability_application::swap(DataApplicationCapability_application & other)
{  Inherited::swap(other); }

inline DataApplicationCapability_application* DataApplicationCapability_application::clone() const
{ return static_cast<DataApplicationCapability_application*> (Inherited::clone()); }

inline bool DataApplicationCapability_application::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline RedundancyEncodingMode_secondaryEncoding::nonStandard::const_reference RedundancyEncodingMode_secondaryEncoding::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline RedundancyEncodingMode_secondaryEncoding::nonStandard::reference RedundancyEncodingMode_secondaryEncoding::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline RedundancyEncodingMode_secondaryEncoding::nonStandard::reference RedundancyEncodingMode_secondaryEncoding::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline RedundancyEncodingMode_secondaryEncoding::nonStandard::reference RedundancyEncodingMode_secondaryEncoding::select_nonStandard (RedundancyEncodingMode_secondaryEncoding::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool RedundancyEncodingMode_secondaryEncoding::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline RedundancyEncodingMode_secondaryEncoding::audioData::const_reference RedundancyEncodingMode_secondaryEncoding::get_audioData () const
{
    assert(currentSelection() ==audioData::id_);
    return *static_cast<audioData::const_pointer>(choice.get());
}

inline RedundancyEncodingMode_secondaryEncoding::audioData::reference RedundancyEncodingMode_secondaryEncoding::ref_audioData ()
{
    assert(currentSelection() ==audioData::id_);
    return *static_cast<audioData::pointer>(choice.get());
}

inline RedundancyEncodingMode_secondaryEncoding::audioData::reference RedundancyEncodingMode_secondaryEncoding::select_audioData ()
{
    return *static_cast<audioData::pointer>(setSelection(audioData::id_, ASN1::AbstractData::create( &audioData::value_type::theInfo)));
}

inline RedundancyEncodingMode_secondaryEncoding::audioData::reference RedundancyEncodingMode_secondaryEncoding::select_audioData (RedundancyEncodingMode_secondaryEncoding::audioData::const_reference value)
{
    return select_audioData() = value;
}

inline bool RedundancyEncodingMode_secondaryEncoding::audioData_isSelected() const
{ 
    return currentSelection() == audioData::id_; 
}

inline RedundancyEncodingMode_secondaryEncoding::RedundancyEncodingMode_secondaryEncoding(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline RedundancyEncodingMode_secondaryEncoding::RedundancyEncodingMode_secondaryEncoding(audioData::Id id, audioData::const_reference value)
  : Inherited(&theInfo, id, new audioData::value_type(value) )
{ }


inline void RedundancyEncodingMode_secondaryEncoding::swap(RedundancyEncodingMode_secondaryEncoding & other)
{  Inherited::swap(other); }

inline RedundancyEncodingMode_secondaryEncoding* RedundancyEncodingMode_secondaryEncoding::clone() const
{ return static_cast<RedundancyEncodingMode_secondaryEncoding*> (Inherited::clone()); }

inline bool RedundancyEncodingMode_secondaryEncoding::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DataMode_application::nonStandard::const_reference DataMode_application::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline DataMode_application::nonStandard::reference DataMode_application::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline DataMode_application::nonStandard::reference DataMode_application::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline DataMode_application::nonStandard::reference DataMode_application::select_nonStandard (DataMode_application::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool DataMode_application::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline DataMode_application::t120::const_reference DataMode_application::get_t120 () const
{
    assert(currentSelection() ==t120::id_);
    return *static_cast<t120::const_pointer>(choice.get());
}

inline DataMode_application::t120::reference DataMode_application::ref_t120 ()
{
    assert(currentSelection() ==t120::id_);
    return *static_cast<t120::pointer>(choice.get());
}

inline DataMode_application::t120::reference DataMode_application::select_t120 ()
{
    return *static_cast<t120::pointer>(setSelection(t120::id_, ASN1::AbstractData::create( &t120::value_type::theInfo)));
}

inline DataMode_application::t120::reference DataMode_application::select_t120 (DataMode_application::t120::const_reference value)
{
    return select_t120() = value;
}

inline bool DataMode_application::t120_isSelected() const
{ 
    return currentSelection() == t120::id_; 
}

inline DataMode_application::dsm_cc::const_reference DataMode_application::get_dsm_cc () const
{
    assert(currentSelection() ==dsm_cc::id_);
    return *static_cast<dsm_cc::const_pointer>(choice.get());
}

inline DataMode_application::dsm_cc::reference DataMode_application::ref_dsm_cc ()
{
    assert(currentSelection() ==dsm_cc::id_);
    return *static_cast<dsm_cc::pointer>(choice.get());
}

inline DataMode_application::dsm_cc::reference DataMode_application::select_dsm_cc ()
{
    return *static_cast<dsm_cc::pointer>(setSelection(dsm_cc::id_, ASN1::AbstractData::create( &dsm_cc::value_type::theInfo)));
}

inline DataMode_application::dsm_cc::reference DataMode_application::select_dsm_cc (DataMode_application::dsm_cc::const_reference value)
{
    return select_dsm_cc() = value;
}

inline bool DataMode_application::dsm_cc_isSelected() const
{ 
    return currentSelection() == dsm_cc::id_; 
}

inline DataMode_application::userData::const_reference DataMode_application::get_userData () const
{
    assert(currentSelection() ==userData::id_);
    return *static_cast<userData::const_pointer>(choice.get());
}

inline DataMode_application::userData::reference DataMode_application::ref_userData ()
{
    assert(currentSelection() ==userData::id_);
    return *static_cast<userData::pointer>(choice.get());
}

inline DataMode_application::userData::reference DataMode_application::select_userData ()
{
    return *static_cast<userData::pointer>(setSelection(userData::id_, ASN1::AbstractData::create( &userData::value_type::theInfo)));
}

inline DataMode_application::userData::reference DataMode_application::select_userData (DataMode_application::userData::const_reference value)
{
    return select_userData() = value;
}

inline bool DataMode_application::userData_isSelected() const
{ 
    return currentSelection() == userData::id_; 
}

inline DataMode_application::t84::const_reference DataMode_application::get_t84 () const
{
    assert(currentSelection() ==t84::id_);
    return *static_cast<t84::const_pointer>(choice.get());
}

inline DataMode_application::t84::reference DataMode_application::ref_t84 ()
{
    assert(currentSelection() ==t84::id_);
    return *static_cast<t84::pointer>(choice.get());
}

inline DataMode_application::t84::reference DataMode_application::select_t84 ()
{
    return *static_cast<t84::pointer>(setSelection(t84::id_, ASN1::AbstractData::create( &t84::value_type::theInfo)));
}

inline DataMode_application::t84::reference DataMode_application::select_t84 (DataMode_application::t84::const_reference value)
{
    return select_t84() = value;
}

inline bool DataMode_application::t84_isSelected() const
{ 
    return currentSelection() == t84::id_; 
}

inline DataMode_application::t434::const_reference DataMode_application::get_t434 () const
{
    assert(currentSelection() ==t434::id_);
    return *static_cast<t434::const_pointer>(choice.get());
}

inline DataMode_application::t434::reference DataMode_application::ref_t434 ()
{
    assert(currentSelection() ==t434::id_);
    return *static_cast<t434::pointer>(choice.get());
}

inline DataMode_application::t434::reference DataMode_application::select_t434 ()
{
    return *static_cast<t434::pointer>(setSelection(t434::id_, ASN1::AbstractData::create( &t434::value_type::theInfo)));
}

inline DataMode_application::t434::reference DataMode_application::select_t434 (DataMode_application::t434::const_reference value)
{
    return select_t434() = value;
}

inline bool DataMode_application::t434_isSelected() const
{ 
    return currentSelection() == t434::id_; 
}

inline DataMode_application::h224::const_reference DataMode_application::get_h224 () const
{
    assert(currentSelection() ==h224::id_);
    return *static_cast<h224::const_pointer>(choice.get());
}

inline DataMode_application::h224::reference DataMode_application::ref_h224 ()
{
    assert(currentSelection() ==h224::id_);
    return *static_cast<h224::pointer>(choice.get());
}

inline DataMode_application::h224::reference DataMode_application::select_h224 ()
{
    return *static_cast<h224::pointer>(setSelection(h224::id_, ASN1::AbstractData::create( &h224::value_type::theInfo)));
}

inline DataMode_application::h224::reference DataMode_application::select_h224 (DataMode_application::h224::const_reference value)
{
    return select_h224() = value;
}

inline bool DataMode_application::h224_isSelected() const
{ 
    return currentSelection() == h224::id_; 
}

inline DataMode_application::nlpid::const_reference DataMode_application::get_nlpid () const
{
    assert(currentSelection() ==nlpid::id_);
    return *static_cast<nlpid::const_pointer>(choice.get());
}

inline DataMode_application::nlpid::reference DataMode_application::ref_nlpid ()
{
    assert(currentSelection() ==nlpid::id_);
    return *static_cast<nlpid::pointer>(choice.get());
}

inline DataMode_application::nlpid::reference DataMode_application::select_nlpid ()
{
    return *static_cast<nlpid::pointer>(setSelection(nlpid::id_, ASN1::AbstractData::create( &nlpid::value_type::theInfo)));
}

inline DataMode_application::nlpid::reference DataMode_application::select_nlpid (DataMode_application::nlpid::const_reference value)
{
    return select_nlpid() = value;
}

inline bool DataMode_application::nlpid_isSelected() const
{ 
    return currentSelection() == nlpid::id_; 
}

inline DataMode_application::dsvdControl::reference DataMode_application::select_dsvdControl ()
{
    return *static_cast<dsvdControl::pointer>(setSelection(dsvdControl::id_, ASN1::AbstractData::create( &dsvdControl::value_type::theInfo)));
}

inline bool DataMode_application::dsvdControl_isSelected() const
{ 
    return currentSelection() == dsvdControl::id_; 
}

inline DataMode_application::h222DataPartitioning::const_reference DataMode_application::get_h222DataPartitioning () const
{
    assert(currentSelection() ==h222DataPartitioning::id_);
    return *static_cast<h222DataPartitioning::const_pointer>(choice.get());
}

inline DataMode_application::h222DataPartitioning::reference DataMode_application::ref_h222DataPartitioning ()
{
    assert(currentSelection() ==h222DataPartitioning::id_);
    return *static_cast<h222DataPartitioning::pointer>(choice.get());
}

inline DataMode_application::h222DataPartitioning::reference DataMode_application::select_h222DataPartitioning ()
{
    return *static_cast<h222DataPartitioning::pointer>(setSelection(h222DataPartitioning::id_, ASN1::AbstractData::create( &h222DataPartitioning::value_type::theInfo)));
}

inline DataMode_application::h222DataPartitioning::reference DataMode_application::select_h222DataPartitioning (DataMode_application::h222DataPartitioning::const_reference value)
{
    return select_h222DataPartitioning() = value;
}

inline bool DataMode_application::h222DataPartitioning_isSelected() const
{ 
    return currentSelection() == h222DataPartitioning::id_; 
}

inline DataMode_application::t30fax::const_reference DataMode_application::get_t30fax () const
{
    assert(currentSelection() ==t30fax::id_);
    return *static_cast<t30fax::const_pointer>(choice.get());
}

inline DataMode_application::t30fax::reference DataMode_application::ref_t30fax ()
{
    assert(currentSelection() ==t30fax::id_);
    return *static_cast<t30fax::pointer>(choice.get());
}

inline DataMode_application::t30fax::reference DataMode_application::select_t30fax ()
{
    return *static_cast<t30fax::pointer>(setSelection(t30fax::id_, ASN1::AbstractData::create( &t30fax::value_type::theInfo)));
}

inline DataMode_application::t30fax::reference DataMode_application::select_t30fax (DataMode_application::t30fax::const_reference value)
{
    return select_t30fax() = value;
}

inline bool DataMode_application::t30fax_isSelected() const
{ 
    return currentSelection() == t30fax::id_; 
}

inline DataMode_application::t140::const_reference DataMode_application::get_t140 () const
{
    assert(currentSelection() ==t140::id_);
    return *static_cast<t140::const_pointer>(choice.get());
}

inline DataMode_application::t140::reference DataMode_application::ref_t140 ()
{
    assert(currentSelection() ==t140::id_);
    return *static_cast<t140::pointer>(choice.get());
}

inline DataMode_application::t140::reference DataMode_application::select_t140 ()
{
    return *static_cast<t140::pointer>(setSelection(t140::id_, ASN1::AbstractData::create( &t140::value_type::theInfo)));
}

inline DataMode_application::t140::reference DataMode_application::select_t140 (DataMode_application::t140::const_reference value)
{
    return select_t140() = value;
}

inline bool DataMode_application::t140_isSelected() const
{ 
    return currentSelection() == t140::id_; 
}

inline DataMode_application::t38fax::const_reference DataMode_application::get_t38fax () const
{
    assert(currentSelection() ==t38fax::id_);
    return *static_cast<t38fax::const_pointer>(choice.get());
}

inline DataMode_application::t38fax::reference DataMode_application::ref_t38fax ()
{
    assert(currentSelection() ==t38fax::id_);
    return *static_cast<t38fax::pointer>(choice.get());
}

inline DataMode_application::t38fax::reference DataMode_application::select_t38fax ()
{
    return *static_cast<t38fax::pointer>(setSelection(t38fax::id_, ASN1::AbstractData::create( &t38fax::value_type::theInfo)));
}

inline DataMode_application::t38fax::reference DataMode_application::select_t38fax (DataMode_application::t38fax::const_reference value)
{
    return select_t38fax() = value;
}

inline bool DataMode_application::t38fax_isSelected() const
{ 
    return currentSelection() == t38fax::id_; 
}

inline DataMode_application::genericDataMode::const_reference DataMode_application::get_genericDataMode () const
{
    assert(currentSelection() ==genericDataMode::id_);
    return *static_cast<genericDataMode::const_pointer>(choice.get());
}

inline DataMode_application::genericDataMode::reference DataMode_application::ref_genericDataMode ()
{
    assert(currentSelection() ==genericDataMode::id_);
    return *static_cast<genericDataMode::pointer>(choice.get());
}

inline DataMode_application::genericDataMode::reference DataMode_application::select_genericDataMode ()
{
    return *static_cast<genericDataMode::pointer>(setSelection(genericDataMode::id_, ASN1::AbstractData::create( &genericDataMode::value_type::theInfo)));
}

inline DataMode_application::genericDataMode::reference DataMode_application::select_genericDataMode (DataMode_application::genericDataMode::const_reference value)
{
    return select_genericDataMode() = value;
}

inline bool DataMode_application::genericDataMode_isSelected() const
{ 
    return currentSelection() == genericDataMode::id_; 
}

inline DataMode_application::DataMode_application(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline DataMode_application::DataMode_application(t120::Id id, t120::const_reference value)
  : Inherited(&theInfo, id, new t120::value_type(value) )
{ }

inline DataMode_application::DataMode_application(dsm_cc::Id id, dsm_cc::const_reference value)
  : Inherited(&theInfo, id, new dsm_cc::value_type(value) )
{ }

inline DataMode_application::DataMode_application(userData::Id id, userData::const_reference value)
  : Inherited(&theInfo, id, new userData::value_type(value) )
{ }

inline DataMode_application::DataMode_application(t84::Id id, t84::const_reference value)
  : Inherited(&theInfo, id, new t84::value_type(value) )
{ }

inline DataMode_application::DataMode_application(t434::Id id, t434::const_reference value)
  : Inherited(&theInfo, id, new t434::value_type(value) )
{ }

inline DataMode_application::DataMode_application(h224::Id id, h224::const_reference value)
  : Inherited(&theInfo, id, new h224::value_type(value) )
{ }

inline DataMode_application::DataMode_application(nlpid::Id id, nlpid::const_reference value)
  : Inherited(&theInfo, id, new nlpid::value_type(value) )
{ }

inline DataMode_application::DataMode_application(dsvdControl::Id id, dsvdControl::const_reference value)
  : Inherited(&theInfo, id, new dsvdControl::value_type(value) )
{ }

inline DataMode_application::DataMode_application(h222DataPartitioning::Id id, h222DataPartitioning::const_reference value)
  : Inherited(&theInfo, id, new h222DataPartitioning::value_type(value) )
{ }

inline DataMode_application::DataMode_application(t30fax::Id id, t30fax::const_reference value)
  : Inherited(&theInfo, id, new t30fax::value_type(value) )
{ }

inline DataMode_application::DataMode_application(t140::Id id, t140::const_reference value)
  : Inherited(&theInfo, id, new t140::value_type(value) )
{ }

inline DataMode_application::DataMode_application(t38fax::Id id, t38fax::const_reference value)
  : Inherited(&theInfo, id, new t38fax::value_type(value) )
{ }

inline DataMode_application::DataMode_application(genericDataMode::Id id, genericDataMode::const_reference value)
  : Inherited(&theInfo, id, new genericDataMode::value_type(value) )
{ }


inline void DataMode_application::swap(DataMode_application & other)
{  Inherited::swap(other); }

inline DataMode_application* DataMode_application::clone() const
{ return static_cast<DataMode_application*> (Inherited::clone()); }

inline bool DataMode_application::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MiscellaneousCommand_type::equaliseDelay::reference MiscellaneousCommand_type::select_equaliseDelay ()
{
    return *static_cast<equaliseDelay::pointer>(setSelection(equaliseDelay::id_, ASN1::AbstractData::create( &equaliseDelay::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::equaliseDelay_isSelected() const
{ 
    return currentSelection() == equaliseDelay::id_; 
}

inline MiscellaneousCommand_type::zeroDelay::reference MiscellaneousCommand_type::select_zeroDelay ()
{
    return *static_cast<zeroDelay::pointer>(setSelection(zeroDelay::id_, ASN1::AbstractData::create( &zeroDelay::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::zeroDelay_isSelected() const
{ 
    return currentSelection() == zeroDelay::id_; 
}

inline MiscellaneousCommand_type::multipointModeCommand::reference MiscellaneousCommand_type::select_multipointModeCommand ()
{
    return *static_cast<multipointModeCommand::pointer>(setSelection(multipointModeCommand::id_, ASN1::AbstractData::create( &multipointModeCommand::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::multipointModeCommand_isSelected() const
{ 
    return currentSelection() == multipointModeCommand::id_; 
}

inline MiscellaneousCommand_type::cancelMultipointModeCommand::reference MiscellaneousCommand_type::select_cancelMultipointModeCommand ()
{
    return *static_cast<cancelMultipointModeCommand::pointer>(setSelection(cancelMultipointModeCommand::id_, ASN1::AbstractData::create( &cancelMultipointModeCommand::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::cancelMultipointModeCommand_isSelected() const
{ 
    return currentSelection() == cancelMultipointModeCommand::id_; 
}

inline MiscellaneousCommand_type::videoFreezePicture::reference MiscellaneousCommand_type::select_videoFreezePicture ()
{
    return *static_cast<videoFreezePicture::pointer>(setSelection(videoFreezePicture::id_, ASN1::AbstractData::create( &videoFreezePicture::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::videoFreezePicture_isSelected() const
{ 
    return currentSelection() == videoFreezePicture::id_; 
}

inline MiscellaneousCommand_type::videoFastUpdatePicture::reference MiscellaneousCommand_type::select_videoFastUpdatePicture ()
{
    return *static_cast<videoFastUpdatePicture::pointer>(setSelection(videoFastUpdatePicture::id_, ASN1::AbstractData::create( &videoFastUpdatePicture::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::videoFastUpdatePicture_isSelected() const
{ 
    return currentSelection() == videoFastUpdatePicture::id_; 
}

inline MiscellaneousCommand_type::videoFastUpdateGOB::const_reference MiscellaneousCommand_type::get_videoFastUpdateGOB () const
{
    assert(currentSelection() ==videoFastUpdateGOB::id_);
    return *static_cast<videoFastUpdateGOB::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::videoFastUpdateGOB::reference MiscellaneousCommand_type::ref_videoFastUpdateGOB ()
{
    assert(currentSelection() ==videoFastUpdateGOB::id_);
    return *static_cast<videoFastUpdateGOB::pointer>(choice.get());
}

inline MiscellaneousCommand_type::videoFastUpdateGOB::reference MiscellaneousCommand_type::select_videoFastUpdateGOB ()
{
    return *static_cast<videoFastUpdateGOB::pointer>(setSelection(videoFastUpdateGOB::id_, ASN1::AbstractData::create( &videoFastUpdateGOB::value_type::theInfo)));
}

inline MiscellaneousCommand_type::videoFastUpdateGOB::reference MiscellaneousCommand_type::select_videoFastUpdateGOB (MiscellaneousCommand_type::videoFastUpdateGOB::const_reference value)
{
    return select_videoFastUpdateGOB() = value;
}

inline bool MiscellaneousCommand_type::videoFastUpdateGOB_isSelected() const
{ 
    return currentSelection() == videoFastUpdateGOB::id_; 
}

inline MiscellaneousCommand_type::videoTemporalSpatialTradeOff::const_reference MiscellaneousCommand_type::get_videoTemporalSpatialTradeOff () const
{
    assert(currentSelection() ==videoTemporalSpatialTradeOff::id_);
    return *static_cast<videoTemporalSpatialTradeOff::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::videoTemporalSpatialTradeOff::reference MiscellaneousCommand_type::ref_videoTemporalSpatialTradeOff ()
{
    assert(currentSelection() ==videoTemporalSpatialTradeOff::id_);
    return *static_cast<videoTemporalSpatialTradeOff::pointer>(choice.get());
}

inline MiscellaneousCommand_type::videoTemporalSpatialTradeOff::reference MiscellaneousCommand_type::select_videoTemporalSpatialTradeOff ()
{
    return *static_cast<videoTemporalSpatialTradeOff::pointer>(setSelection(videoTemporalSpatialTradeOff::id_, ASN1::AbstractData::create( &videoTemporalSpatialTradeOff::value_type::theInfo)));
}

inline MiscellaneousCommand_type::videoTemporalSpatialTradeOff::reference MiscellaneousCommand_type::select_videoTemporalSpatialTradeOff (MiscellaneousCommand_type::videoTemporalSpatialTradeOff::value_type::int_type value)
{
    return select_videoTemporalSpatialTradeOff() = value;
}

inline bool MiscellaneousCommand_type::videoTemporalSpatialTradeOff_isSelected() const
{ 
    return currentSelection() == videoTemporalSpatialTradeOff::id_; 
}

inline MiscellaneousCommand_type::videoSendSyncEveryGOB::reference MiscellaneousCommand_type::select_videoSendSyncEveryGOB ()
{
    return *static_cast<videoSendSyncEveryGOB::pointer>(setSelection(videoSendSyncEveryGOB::id_, ASN1::AbstractData::create( &videoSendSyncEveryGOB::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::videoSendSyncEveryGOB_isSelected() const
{ 
    return currentSelection() == videoSendSyncEveryGOB::id_; 
}

inline MiscellaneousCommand_type::videoSendSyncEveryGOBCancel::reference MiscellaneousCommand_type::select_videoSendSyncEveryGOBCancel ()
{
    return *static_cast<videoSendSyncEveryGOBCancel::pointer>(setSelection(videoSendSyncEveryGOBCancel::id_, ASN1::AbstractData::create( &videoSendSyncEveryGOBCancel::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::videoSendSyncEveryGOBCancel_isSelected() const
{ 
    return currentSelection() == videoSendSyncEveryGOBCancel::id_; 
}

inline MiscellaneousCommand_type::videoFastUpdateMB::const_reference MiscellaneousCommand_type::get_videoFastUpdateMB () const
{
    assert(currentSelection() ==videoFastUpdateMB::id_);
    return *static_cast<videoFastUpdateMB::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::videoFastUpdateMB::reference MiscellaneousCommand_type::ref_videoFastUpdateMB ()
{
    assert(currentSelection() ==videoFastUpdateMB::id_);
    return *static_cast<videoFastUpdateMB::pointer>(choice.get());
}

inline MiscellaneousCommand_type::videoFastUpdateMB::reference MiscellaneousCommand_type::select_videoFastUpdateMB ()
{
    return *static_cast<videoFastUpdateMB::pointer>(setSelection(videoFastUpdateMB::id_, ASN1::AbstractData::create( &videoFastUpdateMB::value_type::theInfo)));
}

inline MiscellaneousCommand_type::videoFastUpdateMB::reference MiscellaneousCommand_type::select_videoFastUpdateMB (MiscellaneousCommand_type::videoFastUpdateMB::const_reference value)
{
    return select_videoFastUpdateMB() = value;
}

inline bool MiscellaneousCommand_type::videoFastUpdateMB_isSelected() const
{ 
    return currentSelection() == videoFastUpdateMB::id_; 
}

inline MiscellaneousCommand_type::maxH223MUXPDUsize::const_reference MiscellaneousCommand_type::get_maxH223MUXPDUsize () const
{
    assert(currentSelection() ==maxH223MUXPDUsize::id_);
    return *static_cast<maxH223MUXPDUsize::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::maxH223MUXPDUsize::reference MiscellaneousCommand_type::ref_maxH223MUXPDUsize ()
{
    assert(currentSelection() ==maxH223MUXPDUsize::id_);
    return *static_cast<maxH223MUXPDUsize::pointer>(choice.get());
}

inline MiscellaneousCommand_type::maxH223MUXPDUsize::reference MiscellaneousCommand_type::select_maxH223MUXPDUsize ()
{
    return *static_cast<maxH223MUXPDUsize::pointer>(setSelection(maxH223MUXPDUsize::id_, ASN1::AbstractData::create( &maxH223MUXPDUsize::value_type::theInfo)));
}

inline MiscellaneousCommand_type::maxH223MUXPDUsize::reference MiscellaneousCommand_type::select_maxH223MUXPDUsize (MiscellaneousCommand_type::maxH223MUXPDUsize::value_type::int_type value)
{
    return select_maxH223MUXPDUsize() = value;
}

inline bool MiscellaneousCommand_type::maxH223MUXPDUsize_isSelected() const
{ 
    return currentSelection() == maxH223MUXPDUsize::id_; 
}

inline MiscellaneousCommand_type::encryptionUpdate::const_reference MiscellaneousCommand_type::get_encryptionUpdate () const
{
    assert(currentSelection() ==encryptionUpdate::id_);
    return *static_cast<encryptionUpdate::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::encryptionUpdate::reference MiscellaneousCommand_type::ref_encryptionUpdate ()
{
    assert(currentSelection() ==encryptionUpdate::id_);
    return *static_cast<encryptionUpdate::pointer>(choice.get());
}

inline MiscellaneousCommand_type::encryptionUpdate::reference MiscellaneousCommand_type::select_encryptionUpdate ()
{
    return *static_cast<encryptionUpdate::pointer>(setSelection(encryptionUpdate::id_, ASN1::AbstractData::create( &encryptionUpdate::value_type::theInfo)));
}

inline MiscellaneousCommand_type::encryptionUpdate::reference MiscellaneousCommand_type::select_encryptionUpdate (MiscellaneousCommand_type::encryptionUpdate::const_reference value)
{
    return select_encryptionUpdate() = value;
}

inline bool MiscellaneousCommand_type::encryptionUpdate_isSelected() const
{ 
    return currentSelection() == encryptionUpdate::id_; 
}

inline MiscellaneousCommand_type::encryptionUpdateRequest::const_reference MiscellaneousCommand_type::get_encryptionUpdateRequest () const
{
    assert(currentSelection() ==encryptionUpdateRequest::id_);
    return *static_cast<encryptionUpdateRequest::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::encryptionUpdateRequest::reference MiscellaneousCommand_type::ref_encryptionUpdateRequest ()
{
    assert(currentSelection() ==encryptionUpdateRequest::id_);
    return *static_cast<encryptionUpdateRequest::pointer>(choice.get());
}

inline MiscellaneousCommand_type::encryptionUpdateRequest::reference MiscellaneousCommand_type::select_encryptionUpdateRequest ()
{
    return *static_cast<encryptionUpdateRequest::pointer>(setSelection(encryptionUpdateRequest::id_, ASN1::AbstractData::create( &encryptionUpdateRequest::value_type::theInfo)));
}

inline MiscellaneousCommand_type::encryptionUpdateRequest::reference MiscellaneousCommand_type::select_encryptionUpdateRequest (MiscellaneousCommand_type::encryptionUpdateRequest::const_reference value)
{
    return select_encryptionUpdateRequest() = value;
}

inline bool MiscellaneousCommand_type::encryptionUpdateRequest_isSelected() const
{ 
    return currentSelection() == encryptionUpdateRequest::id_; 
}

inline MiscellaneousCommand_type::switchReceiveMediaOff::reference MiscellaneousCommand_type::select_switchReceiveMediaOff ()
{
    return *static_cast<switchReceiveMediaOff::pointer>(setSelection(switchReceiveMediaOff::id_, ASN1::AbstractData::create( &switchReceiveMediaOff::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::switchReceiveMediaOff_isSelected() const
{ 
    return currentSelection() == switchReceiveMediaOff::id_; 
}

inline MiscellaneousCommand_type::switchReceiveMediaOn::reference MiscellaneousCommand_type::select_switchReceiveMediaOn ()
{
    return *static_cast<switchReceiveMediaOn::pointer>(setSelection(switchReceiveMediaOn::id_, ASN1::AbstractData::create( &switchReceiveMediaOn::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::switchReceiveMediaOn_isSelected() const
{ 
    return currentSelection() == switchReceiveMediaOn::id_; 
}

inline MiscellaneousCommand_type::progressiveRefinementStart::const_reference MiscellaneousCommand_type::get_progressiveRefinementStart () const
{
    assert(currentSelection() ==progressiveRefinementStart::id_);
    return *static_cast<progressiveRefinementStart::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::progressiveRefinementStart::reference MiscellaneousCommand_type::ref_progressiveRefinementStart ()
{
    assert(currentSelection() ==progressiveRefinementStart::id_);
    return *static_cast<progressiveRefinementStart::pointer>(choice.get());
}

inline MiscellaneousCommand_type::progressiveRefinementStart::reference MiscellaneousCommand_type::select_progressiveRefinementStart ()
{
    return *static_cast<progressiveRefinementStart::pointer>(setSelection(progressiveRefinementStart::id_, ASN1::AbstractData::create( &progressiveRefinementStart::value_type::theInfo)));
}

inline MiscellaneousCommand_type::progressiveRefinementStart::reference MiscellaneousCommand_type::select_progressiveRefinementStart (MiscellaneousCommand_type::progressiveRefinementStart::const_reference value)
{
    return select_progressiveRefinementStart() = value;
}

inline bool MiscellaneousCommand_type::progressiveRefinementStart_isSelected() const
{ 
    return currentSelection() == progressiveRefinementStart::id_; 
}

inline MiscellaneousCommand_type::progressiveRefinementAbortOne::reference MiscellaneousCommand_type::select_progressiveRefinementAbortOne ()
{
    return *static_cast<progressiveRefinementAbortOne::pointer>(setSelection(progressiveRefinementAbortOne::id_, ASN1::AbstractData::create( &progressiveRefinementAbortOne::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::progressiveRefinementAbortOne_isSelected() const
{ 
    return currentSelection() == progressiveRefinementAbortOne::id_; 
}

inline MiscellaneousCommand_type::progressiveRefinementAbortContinuous::reference MiscellaneousCommand_type::select_progressiveRefinementAbortContinuous ()
{
    return *static_cast<progressiveRefinementAbortContinuous::pointer>(setSelection(progressiveRefinementAbortContinuous::id_, ASN1::AbstractData::create( &progressiveRefinementAbortContinuous::value_type::theInfo)));
}

inline bool MiscellaneousCommand_type::progressiveRefinementAbortContinuous_isSelected() const
{ 
    return currentSelection() == progressiveRefinementAbortContinuous::id_; 
}

inline MiscellaneousCommand_type::videoBadMBs::const_reference MiscellaneousCommand_type::get_videoBadMBs () const
{
    assert(currentSelection() ==videoBadMBs::id_);
    return *static_cast<videoBadMBs::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::videoBadMBs::reference MiscellaneousCommand_type::ref_videoBadMBs ()
{
    assert(currentSelection() ==videoBadMBs::id_);
    return *static_cast<videoBadMBs::pointer>(choice.get());
}

inline MiscellaneousCommand_type::videoBadMBs::reference MiscellaneousCommand_type::select_videoBadMBs ()
{
    return *static_cast<videoBadMBs::pointer>(setSelection(videoBadMBs::id_, ASN1::AbstractData::create( &videoBadMBs::value_type::theInfo)));
}

inline MiscellaneousCommand_type::videoBadMBs::reference MiscellaneousCommand_type::select_videoBadMBs (MiscellaneousCommand_type::videoBadMBs::const_reference value)
{
    return select_videoBadMBs() = value;
}

inline bool MiscellaneousCommand_type::videoBadMBs_isSelected() const
{ 
    return currentSelection() == videoBadMBs::id_; 
}

inline MiscellaneousCommand_type::lostPicture::const_reference MiscellaneousCommand_type::get_lostPicture () const
{
    assert(currentSelection() ==lostPicture::id_);
    return *static_cast<lostPicture::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::lostPicture::reference MiscellaneousCommand_type::ref_lostPicture ()
{
    assert(currentSelection() ==lostPicture::id_);
    return *static_cast<lostPicture::pointer>(choice.get());
}

inline MiscellaneousCommand_type::lostPicture::reference MiscellaneousCommand_type::select_lostPicture ()
{
    return *static_cast<lostPicture::pointer>(setSelection(lostPicture::id_, ASN1::AbstractData::create( &lostPicture::value_type::theInfo)));
}

inline MiscellaneousCommand_type::lostPicture::reference MiscellaneousCommand_type::select_lostPicture (MiscellaneousCommand_type::lostPicture::const_reference value)
{
    return select_lostPicture() = value;
}

inline bool MiscellaneousCommand_type::lostPicture_isSelected() const
{ 
    return currentSelection() == lostPicture::id_; 
}

inline MiscellaneousCommand_type::lostPartialPicture::const_reference MiscellaneousCommand_type::get_lostPartialPicture () const
{
    assert(currentSelection() ==lostPartialPicture::id_);
    return *static_cast<lostPartialPicture::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::lostPartialPicture::reference MiscellaneousCommand_type::ref_lostPartialPicture ()
{
    assert(currentSelection() ==lostPartialPicture::id_);
    return *static_cast<lostPartialPicture::pointer>(choice.get());
}

inline MiscellaneousCommand_type::lostPartialPicture::reference MiscellaneousCommand_type::select_lostPartialPicture ()
{
    return *static_cast<lostPartialPicture::pointer>(setSelection(lostPartialPicture::id_, ASN1::AbstractData::create( &lostPartialPicture::value_type::theInfo)));
}

inline MiscellaneousCommand_type::lostPartialPicture::reference MiscellaneousCommand_type::select_lostPartialPicture (MiscellaneousCommand_type::lostPartialPicture::const_reference value)
{
    return select_lostPartialPicture() = value;
}

inline bool MiscellaneousCommand_type::lostPartialPicture_isSelected() const
{ 
    return currentSelection() == lostPartialPicture::id_; 
}

inline MiscellaneousCommand_type::recoveryReferencePicture::const_reference MiscellaneousCommand_type::get_recoveryReferencePicture () const
{
    assert(currentSelection() ==recoveryReferencePicture::id_);
    return *static_cast<recoveryReferencePicture::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::recoveryReferencePicture::reference MiscellaneousCommand_type::ref_recoveryReferencePicture ()
{
    assert(currentSelection() ==recoveryReferencePicture::id_);
    return *static_cast<recoveryReferencePicture::pointer>(choice.get());
}

inline MiscellaneousCommand_type::recoveryReferencePicture::reference MiscellaneousCommand_type::select_recoveryReferencePicture ()
{
    return *static_cast<recoveryReferencePicture::pointer>(setSelection(recoveryReferencePicture::id_, ASN1::AbstractData::create( &recoveryReferencePicture::value_type::theInfo)));
}

inline MiscellaneousCommand_type::recoveryReferencePicture::reference MiscellaneousCommand_type::select_recoveryReferencePicture (MiscellaneousCommand_type::recoveryReferencePicture::const_reference value)
{
    return select_recoveryReferencePicture() = value;
}

inline bool MiscellaneousCommand_type::recoveryReferencePicture_isSelected() const
{ 
    return currentSelection() == recoveryReferencePicture::id_; 
}

inline MiscellaneousCommand_type::encryptionUpdateCommand::const_reference MiscellaneousCommand_type::get_encryptionUpdateCommand () const
{
    assert(currentSelection() ==encryptionUpdateCommand::id_);
    return *static_cast<encryptionUpdateCommand::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::encryptionUpdateCommand::reference MiscellaneousCommand_type::ref_encryptionUpdateCommand ()
{
    assert(currentSelection() ==encryptionUpdateCommand::id_);
    return *static_cast<encryptionUpdateCommand::pointer>(choice.get());
}

inline MiscellaneousCommand_type::encryptionUpdateCommand::reference MiscellaneousCommand_type::select_encryptionUpdateCommand ()
{
    return *static_cast<encryptionUpdateCommand::pointer>(setSelection(encryptionUpdateCommand::id_, ASN1::AbstractData::create( &encryptionUpdateCommand::value_type::theInfo)));
}

inline MiscellaneousCommand_type::encryptionUpdateCommand::reference MiscellaneousCommand_type::select_encryptionUpdateCommand (MiscellaneousCommand_type::encryptionUpdateCommand::const_reference value)
{
    return select_encryptionUpdateCommand() = value;
}

inline bool MiscellaneousCommand_type::encryptionUpdateCommand_isSelected() const
{ 
    return currentSelection() == encryptionUpdateCommand::id_; 
}

inline MiscellaneousCommand_type::encryptionUpdateAck::const_reference MiscellaneousCommand_type::get_encryptionUpdateAck () const
{
    assert(currentSelection() ==encryptionUpdateAck::id_);
    return *static_cast<encryptionUpdateAck::const_pointer>(choice.get());
}

inline MiscellaneousCommand_type::encryptionUpdateAck::reference MiscellaneousCommand_type::ref_encryptionUpdateAck ()
{
    assert(currentSelection() ==encryptionUpdateAck::id_);
    return *static_cast<encryptionUpdateAck::pointer>(choice.get());
}

inline MiscellaneousCommand_type::encryptionUpdateAck::reference MiscellaneousCommand_type::select_encryptionUpdateAck ()
{
    return *static_cast<encryptionUpdateAck::pointer>(setSelection(encryptionUpdateAck::id_, ASN1::AbstractData::create( &encryptionUpdateAck::value_type::theInfo)));
}

inline MiscellaneousCommand_type::encryptionUpdateAck::reference MiscellaneousCommand_type::select_encryptionUpdateAck (MiscellaneousCommand_type::encryptionUpdateAck::const_reference value)
{
    return select_encryptionUpdateAck() = value;
}

inline bool MiscellaneousCommand_type::encryptionUpdateAck_isSelected() const
{ 
    return currentSelection() == encryptionUpdateAck::id_; 
}

inline MiscellaneousCommand_type::MiscellaneousCommand_type(equaliseDelay::Id id, equaliseDelay::const_reference value)
  : Inherited(&theInfo, id, new equaliseDelay::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(zeroDelay::Id id, zeroDelay::const_reference value)
  : Inherited(&theInfo, id, new zeroDelay::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(multipointModeCommand::Id id, multipointModeCommand::const_reference value)
  : Inherited(&theInfo, id, new multipointModeCommand::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(cancelMultipointModeCommand::Id id, cancelMultipointModeCommand::const_reference value)
  : Inherited(&theInfo, id, new cancelMultipointModeCommand::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(videoFreezePicture::Id id, videoFreezePicture::const_reference value)
  : Inherited(&theInfo, id, new videoFreezePicture::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(videoFastUpdatePicture::Id id, videoFastUpdatePicture::const_reference value)
  : Inherited(&theInfo, id, new videoFastUpdatePicture::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(videoFastUpdateGOB::Id id, videoFastUpdateGOB::const_reference value)
  : Inherited(&theInfo, id, new videoFastUpdateGOB::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(videoTemporalSpatialTradeOff::Id id, videoTemporalSpatialTradeOff::value_type::int_type value)
  : Inherited(&theInfo, id, new videoTemporalSpatialTradeOff::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(videoSendSyncEveryGOB::Id id, videoSendSyncEveryGOB::const_reference value)
  : Inherited(&theInfo, id, new videoSendSyncEveryGOB::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(videoSendSyncEveryGOBCancel::Id id, videoSendSyncEveryGOBCancel::const_reference value)
  : Inherited(&theInfo, id, new videoSendSyncEveryGOBCancel::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(videoFastUpdateMB::Id id, videoFastUpdateMB::const_reference value)
  : Inherited(&theInfo, id, new videoFastUpdateMB::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(maxH223MUXPDUsize::Id id, maxH223MUXPDUsize::value_type::int_type value)
  : Inherited(&theInfo, id, new maxH223MUXPDUsize::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(encryptionUpdate::Id id, encryptionUpdate::const_reference value)
  : Inherited(&theInfo, id, new encryptionUpdate::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(encryptionUpdateRequest::Id id, encryptionUpdateRequest::const_reference value)
  : Inherited(&theInfo, id, new encryptionUpdateRequest::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(switchReceiveMediaOff::Id id, switchReceiveMediaOff::const_reference value)
  : Inherited(&theInfo, id, new switchReceiveMediaOff::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(switchReceiveMediaOn::Id id, switchReceiveMediaOn::const_reference value)
  : Inherited(&theInfo, id, new switchReceiveMediaOn::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(progressiveRefinementStart::Id id, progressiveRefinementStart::const_reference value)
  : Inherited(&theInfo, id, new progressiveRefinementStart::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(progressiveRefinementAbortOne::Id id, progressiveRefinementAbortOne::const_reference value)
  : Inherited(&theInfo, id, new progressiveRefinementAbortOne::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(progressiveRefinementAbortContinuous::Id id, progressiveRefinementAbortContinuous::const_reference value)
  : Inherited(&theInfo, id, new progressiveRefinementAbortContinuous::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(videoBadMBs::Id id, videoBadMBs::const_reference value)
  : Inherited(&theInfo, id, new videoBadMBs::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(lostPicture::Id id, lostPicture::const_reference value)
  : Inherited(&theInfo, id, new lostPicture::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(lostPartialPicture::Id id, lostPartialPicture::const_reference value)
  : Inherited(&theInfo, id, new lostPartialPicture::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(recoveryReferencePicture::Id id, recoveryReferencePicture::const_reference value)
  : Inherited(&theInfo, id, new recoveryReferencePicture::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(encryptionUpdateCommand::Id id, encryptionUpdateCommand::const_reference value)
  : Inherited(&theInfo, id, new encryptionUpdateCommand::value_type(value) )
{ }

inline MiscellaneousCommand_type::MiscellaneousCommand_type(encryptionUpdateAck::Id id, encryptionUpdateAck::const_reference value)
  : Inherited(&theInfo, id, new encryptionUpdateAck::value_type(value) )
{ }


inline void MiscellaneousCommand_type::swap(MiscellaneousCommand_type & other)
{  Inherited::swap(other); }

inline MiscellaneousCommand_type* MiscellaneousCommand_type::clone() const
{ return static_cast<MiscellaneousCommand_type*> (Inherited::clone()); }

inline bool MiscellaneousCommand_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters::const_reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::get_h222LogicalChannelParameters () const
{
    assert(currentSelection() ==h222LogicalChannelParameters::id_);
    return *static_cast<h222LogicalChannelParameters::const_pointer>(choice.get());
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::ref_h222LogicalChannelParameters ()
{
    assert(currentSelection() ==h222LogicalChannelParameters::id_);
    return *static_cast<h222LogicalChannelParameters::pointer>(choice.get());
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::select_h222LogicalChannelParameters ()
{
    return *static_cast<h222LogicalChannelParameters::pointer>(setSelection(h222LogicalChannelParameters::id_, ASN1::AbstractData::create( &h222LogicalChannelParameters::value_type::theInfo)));
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::select_h222LogicalChannelParameters (OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters::const_reference value)
{
    return select_h222LogicalChannelParameters() = value;
}

inline bool OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters_isSelected() const
{ 
    return currentSelection() == h222LogicalChannelParameters::id_; 
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters::const_reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::get_h223LogicalChannelParameters () const
{
    assert(currentSelection() ==h223LogicalChannelParameters::id_);
    return *static_cast<h223LogicalChannelParameters::const_pointer>(choice.get());
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::ref_h223LogicalChannelParameters ()
{
    assert(currentSelection() ==h223LogicalChannelParameters::id_);
    return *static_cast<h223LogicalChannelParameters::pointer>(choice.get());
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::select_h223LogicalChannelParameters ()
{
    return *static_cast<h223LogicalChannelParameters::pointer>(setSelection(h223LogicalChannelParameters::id_, ASN1::AbstractData::create( &h223LogicalChannelParameters::value_type::theInfo)));
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::select_h223LogicalChannelParameters (OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters::const_reference value)
{
    return select_h223LogicalChannelParameters() = value;
}

inline bool OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters_isSelected() const
{ 
    return currentSelection() == h223LogicalChannelParameters::id_; 
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters::const_reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::get_v76LogicalChannelParameters () const
{
    assert(currentSelection() ==v76LogicalChannelParameters::id_);
    return *static_cast<v76LogicalChannelParameters::const_pointer>(choice.get());
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::ref_v76LogicalChannelParameters ()
{
    assert(currentSelection() ==v76LogicalChannelParameters::id_);
    return *static_cast<v76LogicalChannelParameters::pointer>(choice.get());
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::select_v76LogicalChannelParameters ()
{
    return *static_cast<v76LogicalChannelParameters::pointer>(setSelection(v76LogicalChannelParameters::id_, ASN1::AbstractData::create( &v76LogicalChannelParameters::value_type::theInfo)));
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::select_v76LogicalChannelParameters (OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters::const_reference value)
{
    return select_v76LogicalChannelParameters() = value;
}

inline bool OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters_isSelected() const
{ 
    return currentSelection() == v76LogicalChannelParameters::id_; 
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::const_reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::get_h2250LogicalChannelParameters () const
{
    assert(currentSelection() ==h2250LogicalChannelParameters::id_);
    return *static_cast<h2250LogicalChannelParameters::const_pointer>(choice.get());
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::ref_h2250LogicalChannelParameters ()
{
    assert(currentSelection() ==h2250LogicalChannelParameters::id_);
    return *static_cast<h2250LogicalChannelParameters::pointer>(choice.get());
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::select_h2250LogicalChannelParameters ()
{
    return *static_cast<h2250LogicalChannelParameters::pointer>(setSelection(h2250LogicalChannelParameters::id_, ASN1::AbstractData::create( &h2250LogicalChannelParameters::value_type::theInfo)));
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::select_h2250LogicalChannelParameters (OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::const_reference value)
{
    return select_h2250LogicalChannelParameters() = value;
}

inline bool OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters_isSelected() const
{ 
    return currentSelection() == h2250LogicalChannelParameters::id_; 
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::none::reference OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::select_none ()
{
    return *static_cast<none::pointer>(setSelection(none::id_, ASN1::AbstractData::create( &none::value_type::theInfo)));
}

inline bool OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::none_isSelected() const
{ 
    return currentSelection() == none::id_; 
}

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters(h222LogicalChannelParameters::Id id, h222LogicalChannelParameters::const_reference value)
  : Inherited(&theInfo, id, new h222LogicalChannelParameters::value_type(value) )
{ }

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters(h223LogicalChannelParameters::Id id, h223LogicalChannelParameters::const_reference value)
  : Inherited(&theInfo, id, new h223LogicalChannelParameters::value_type(value) )
{ }

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters(v76LogicalChannelParameters::Id id, v76LogicalChannelParameters::const_reference value)
  : Inherited(&theInfo, id, new v76LogicalChannelParameters::value_type(value) )
{ }

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters(h2250LogicalChannelParameters::Id id, h2250LogicalChannelParameters::const_reference value)
  : Inherited(&theInfo, id, new h2250LogicalChannelParameters::value_type(value) )
{ }

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters(none::Id id, none::const_reference value)
  : Inherited(&theInfo, id, new none::value_type(value) )
{ }


inline void OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::swap(OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters & other)
{  Inherited::swap(other); }

inline OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters* OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::clone() const
{ return static_cast<OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters*> (Inherited::clone()); }

inline bool OpenLogicalChannel_forwardLogicalChannelParameters_multiplexParameters::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters::const_reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::get_h223LogicalChannelParameters () const
{
    assert(currentSelection() ==h223LogicalChannelParameters::id_);
    return *static_cast<h223LogicalChannelParameters::const_pointer>(choice.get());
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::ref_h223LogicalChannelParameters ()
{
    assert(currentSelection() ==h223LogicalChannelParameters::id_);
    return *static_cast<h223LogicalChannelParameters::pointer>(choice.get());
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::select_h223LogicalChannelParameters ()
{
    return *static_cast<h223LogicalChannelParameters::pointer>(setSelection(h223LogicalChannelParameters::id_, ASN1::AbstractData::create( &h223LogicalChannelParameters::value_type::theInfo)));
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::select_h223LogicalChannelParameters (OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters::const_reference value)
{
    return select_h223LogicalChannelParameters() = value;
}

inline bool OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h223LogicalChannelParameters_isSelected() const
{ 
    return currentSelection() == h223LogicalChannelParameters::id_; 
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters::const_reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::get_v76LogicalChannelParameters () const
{
    assert(currentSelection() ==v76LogicalChannelParameters::id_);
    return *static_cast<v76LogicalChannelParameters::const_pointer>(choice.get());
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::ref_v76LogicalChannelParameters ()
{
    assert(currentSelection() ==v76LogicalChannelParameters::id_);
    return *static_cast<v76LogicalChannelParameters::pointer>(choice.get());
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::select_v76LogicalChannelParameters ()
{
    return *static_cast<v76LogicalChannelParameters::pointer>(setSelection(v76LogicalChannelParameters::id_, ASN1::AbstractData::create( &v76LogicalChannelParameters::value_type::theInfo)));
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::select_v76LogicalChannelParameters (OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters::const_reference value)
{
    return select_v76LogicalChannelParameters() = value;
}

inline bool OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::v76LogicalChannelParameters_isSelected() const
{ 
    return currentSelection() == v76LogicalChannelParameters::id_; 
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::const_reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::get_h2250LogicalChannelParameters () const
{
    assert(currentSelection() ==h2250LogicalChannelParameters::id_);
    return *static_cast<h2250LogicalChannelParameters::const_pointer>(choice.get());
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::ref_h2250LogicalChannelParameters ()
{
    assert(currentSelection() ==h2250LogicalChannelParameters::id_);
    return *static_cast<h2250LogicalChannelParameters::pointer>(choice.get());
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::select_h2250LogicalChannelParameters ()
{
    return *static_cast<h2250LogicalChannelParameters::pointer>(setSelection(h2250LogicalChannelParameters::id_, ASN1::AbstractData::create( &h2250LogicalChannelParameters::value_type::theInfo)));
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::select_h2250LogicalChannelParameters (OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::const_reference value)
{
    return select_h2250LogicalChannelParameters() = value;
}

inline bool OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters_isSelected() const
{ 
    return currentSelection() == h2250LogicalChannelParameters::id_; 
}

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters(h223LogicalChannelParameters::Id id, h223LogicalChannelParameters::const_reference value)
  : Inherited(&theInfo, id, new h223LogicalChannelParameters::value_type(value) )
{ }

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters(v76LogicalChannelParameters::Id id, v76LogicalChannelParameters::const_reference value)
  : Inherited(&theInfo, id, new v76LogicalChannelParameters::value_type(value) )
{ }

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters(h2250LogicalChannelParameters::Id id, h2250LogicalChannelParameters::const_reference value)
  : Inherited(&theInfo, id, new h2250LogicalChannelParameters::value_type(value) )
{ }


inline void OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::swap(OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters & other)
{  Inherited::swap(other); }

inline OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters* OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::clone() const
{ return static_cast<OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters*> (Inherited::clone()); }

inline bool OpenLogicalChannel_reverseLogicalChannelParameters_multiplexParameters::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters::const_reference OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::get_h222LogicalChannelParameters () const
{
    assert(currentSelection() ==h222LogicalChannelParameters::id_);
    return *static_cast<h222LogicalChannelParameters::const_pointer>(choice.get());
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters::reference OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::ref_h222LogicalChannelParameters ()
{
    assert(currentSelection() ==h222LogicalChannelParameters::id_);
    return *static_cast<h222LogicalChannelParameters::pointer>(choice.get());
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters::reference OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::select_h222LogicalChannelParameters ()
{
    return *static_cast<h222LogicalChannelParameters::pointer>(setSelection(h222LogicalChannelParameters::id_, ASN1::AbstractData::create( &h222LogicalChannelParameters::value_type::theInfo)));
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters::reference OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::select_h222LogicalChannelParameters (OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters::const_reference value)
{
    return select_h222LogicalChannelParameters() = value;
}

inline bool OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h222LogicalChannelParameters_isSelected() const
{ 
    return currentSelection() == h222LogicalChannelParameters::id_; 
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::const_reference OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::get_h2250LogicalChannelParameters () const
{
    assert(currentSelection() ==h2250LogicalChannelParameters::id_);
    return *static_cast<h2250LogicalChannelParameters::const_pointer>(choice.get());
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::reference OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::ref_h2250LogicalChannelParameters ()
{
    assert(currentSelection() ==h2250LogicalChannelParameters::id_);
    return *static_cast<h2250LogicalChannelParameters::pointer>(choice.get());
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::reference OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::select_h2250LogicalChannelParameters ()
{
    return *static_cast<h2250LogicalChannelParameters::pointer>(setSelection(h2250LogicalChannelParameters::id_, ASN1::AbstractData::create( &h2250LogicalChannelParameters::value_type::theInfo)));
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::reference OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::select_h2250LogicalChannelParameters (OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters::const_reference value)
{
    return select_h2250LogicalChannelParameters() = value;
}

inline bool OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::h2250LogicalChannelParameters_isSelected() const
{ 
    return currentSelection() == h2250LogicalChannelParameters::id_; 
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters(h222LogicalChannelParameters::Id id, h222LogicalChannelParameters::const_reference value)
  : Inherited(&theInfo, id, new h222LogicalChannelParameters::value_type(value) )
{ }

inline OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters(h2250LogicalChannelParameters::Id id, h2250LogicalChannelParameters::const_reference value)
  : Inherited(&theInfo, id, new h2250LogicalChannelParameters::value_type(value) )
{ }


inline void OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::swap(OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters & other)
{  Inherited::swap(other); }

inline OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters* OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::clone() const
{ return static_cast<OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters*> (Inherited::clone()); }

inline bool OpenLogicalChannelAck_reverseLogicalChannelParameters_multiplexParameters::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline EnhancementOptions::sqcifMPI::const_reference EnhancementOptions::get_sqcifMPI () const
{
  assert(hasOptionalField(e_sqcifMPI));
  return *static_cast<sqcifMPI::const_pointer>(fields[0]);
}

inline EnhancementOptions::sqcifMPI::reference EnhancementOptions::ref_sqcifMPI ()
{
  assert(hasOptionalField(e_sqcifMPI));
  return *static_cast<sqcifMPI::pointer>(fields[0]);
}

inline EnhancementOptions::sqcifMPI::reference EnhancementOptions::set_sqcifMPI ()
{
  includeOptionalField( e_sqcifMPI, 0);
  return *static_cast<sqcifMPI::pointer>(fields[0]);
}

inline EnhancementOptions::sqcifMPI::reference EnhancementOptions::set_sqcifMPI (sqcifMPI::value_type::int_type value)
{
  includeOptionalField( e_sqcifMPI, 0);
  return *static_cast<sqcifMPI::pointer>(fields[0]) = value;
}

inline void EnhancementOptions::omit_sqcifMPI ()
{ removeOptionalField( e_sqcifMPI); }

inline bool EnhancementOptions::sqcifMPI_isPresent () const
{ return hasOptionalField( e_sqcifMPI); }

inline EnhancementOptions::qcifMPI::const_reference EnhancementOptions::get_qcifMPI () const
{
  assert(hasOptionalField(e_qcifMPI));
  return *static_cast<qcifMPI::const_pointer>(fields[1]);
}

inline EnhancementOptions::qcifMPI::reference EnhancementOptions::ref_qcifMPI ()
{
  assert(hasOptionalField(e_qcifMPI));
  return *static_cast<qcifMPI::pointer>(fields[1]);
}

inline EnhancementOptions::qcifMPI::reference EnhancementOptions::set_qcifMPI ()
{
  includeOptionalField( e_qcifMPI, 1);
  return *static_cast<qcifMPI::pointer>(fields[1]);
}

inline EnhancementOptions::qcifMPI::reference EnhancementOptions::set_qcifMPI (qcifMPI::value_type::int_type value)
{
  includeOptionalField( e_qcifMPI, 1);
  return *static_cast<qcifMPI::pointer>(fields[1]) = value;
}

inline void EnhancementOptions::omit_qcifMPI ()
{ removeOptionalField( e_qcifMPI); }

inline bool EnhancementOptions::qcifMPI_isPresent () const
{ return hasOptionalField( e_qcifMPI); }

inline EnhancementOptions::cifMPI::const_reference EnhancementOptions::get_cifMPI () const
{
  assert(hasOptionalField(e_cifMPI));
  return *static_cast<cifMPI::const_pointer>(fields[2]);
}

inline EnhancementOptions::cifMPI::reference EnhancementOptions::ref_cifMPI ()
{
  assert(hasOptionalField(e_cifMPI));
  return *static_cast<cifMPI::pointer>(fields[2]);
}

inline EnhancementOptions::cifMPI::reference EnhancementOptions::set_cifMPI ()
{
  includeOptionalField( e_cifMPI, 2);
  return *static_cast<cifMPI::pointer>(fields[2]);
}

inline EnhancementOptions::cifMPI::reference EnhancementOptions::set_cifMPI (cifMPI::value_type::int_type value)
{
  includeOptionalField( e_cifMPI, 2);
  return *static_cast<cifMPI::pointer>(fields[2]) = value;
}

inline void EnhancementOptions::omit_cifMPI ()
{ removeOptionalField( e_cifMPI); }

inline bool EnhancementOptions::cifMPI_isPresent () const
{ return hasOptionalField( e_cifMPI); }

inline EnhancementOptions::cif4MPI::const_reference EnhancementOptions::get_cif4MPI () const
{
  assert(hasOptionalField(e_cif4MPI));
  return *static_cast<cif4MPI::const_pointer>(fields[3]);
}

inline EnhancementOptions::cif4MPI::reference EnhancementOptions::ref_cif4MPI ()
{
  assert(hasOptionalField(e_cif4MPI));
  return *static_cast<cif4MPI::pointer>(fields[3]);
}

inline EnhancementOptions::cif4MPI::reference EnhancementOptions::set_cif4MPI ()
{
  includeOptionalField( e_cif4MPI, 3);
  return *static_cast<cif4MPI::pointer>(fields[3]);
}

inline EnhancementOptions::cif4MPI::reference EnhancementOptions::set_cif4MPI (cif4MPI::value_type::int_type value)
{
  includeOptionalField( e_cif4MPI, 3);
  return *static_cast<cif4MPI::pointer>(fields[3]) = value;
}

inline void EnhancementOptions::omit_cif4MPI ()
{ removeOptionalField( e_cif4MPI); }

inline bool EnhancementOptions::cif4MPI_isPresent () const
{ return hasOptionalField( e_cif4MPI); }

inline EnhancementOptions::cif16MPI::const_reference EnhancementOptions::get_cif16MPI () const
{
  assert(hasOptionalField(e_cif16MPI));
  return *static_cast<cif16MPI::const_pointer>(fields[4]);
}

inline EnhancementOptions::cif16MPI::reference EnhancementOptions::ref_cif16MPI ()
{
  assert(hasOptionalField(e_cif16MPI));
  return *static_cast<cif16MPI::pointer>(fields[4]);
}

inline EnhancementOptions::cif16MPI::reference EnhancementOptions::set_cif16MPI ()
{
  includeOptionalField( e_cif16MPI, 4);
  return *static_cast<cif16MPI::pointer>(fields[4]);
}

inline EnhancementOptions::cif16MPI::reference EnhancementOptions::set_cif16MPI (cif16MPI::value_type::int_type value)
{
  includeOptionalField( e_cif16MPI, 4);
  return *static_cast<cif16MPI::pointer>(fields[4]) = value;
}

inline void EnhancementOptions::omit_cif16MPI ()
{ removeOptionalField( e_cif16MPI); }

inline bool EnhancementOptions::cif16MPI_isPresent () const
{ return hasOptionalField( e_cif16MPI); }

inline EnhancementOptions::maxBitRate::const_reference EnhancementOptions::get_maxBitRate () const
{ return *static_cast<maxBitRate::const_pointer>(fields[5]);}

inline EnhancementOptions::maxBitRate::reference EnhancementOptions::ref_maxBitRate ()
{ return *static_cast<maxBitRate::pointer>(fields[5]);}

inline EnhancementOptions::maxBitRate::reference EnhancementOptions::set_maxBitRate ()
{ return *static_cast<maxBitRate::pointer>(fields[5]);}

inline EnhancementOptions::maxBitRate::reference EnhancementOptions::set_maxBitRate (maxBitRate::value_type::int_type value)
{ return *static_cast<maxBitRate::pointer>(fields[5]) = value ;}

inline EnhancementOptions::unrestrictedVector::const_reference EnhancementOptions::get_unrestrictedVector () const
{ return *static_cast<unrestrictedVector::const_pointer>(fields[6]);}

inline EnhancementOptions::unrestrictedVector::reference EnhancementOptions::ref_unrestrictedVector ()
{ return *static_cast<unrestrictedVector::pointer>(fields[6]);}

inline EnhancementOptions::unrestrictedVector::reference EnhancementOptions::set_unrestrictedVector ()
{ return *static_cast<unrestrictedVector::pointer>(fields[6]);}

inline EnhancementOptions::unrestrictedVector::reference EnhancementOptions::set_unrestrictedVector (bool value)
{ return *static_cast<unrestrictedVector::pointer>(fields[6]) = value ;}

inline EnhancementOptions::arithmeticCoding::const_reference EnhancementOptions::get_arithmeticCoding () const
{ return *static_cast<arithmeticCoding::const_pointer>(fields[7]);}

inline EnhancementOptions::arithmeticCoding::reference EnhancementOptions::ref_arithmeticCoding ()
{ return *static_cast<arithmeticCoding::pointer>(fields[7]);}

inline EnhancementOptions::arithmeticCoding::reference EnhancementOptions::set_arithmeticCoding ()
{ return *static_cast<arithmeticCoding::pointer>(fields[7]);}

inline EnhancementOptions::arithmeticCoding::reference EnhancementOptions::set_arithmeticCoding (bool value)
{ return *static_cast<arithmeticCoding::pointer>(fields[7]) = value ;}

inline EnhancementOptions::temporalSpatialTradeOffCapability::const_reference EnhancementOptions::get_temporalSpatialTradeOffCapability () const
{ return *static_cast<temporalSpatialTradeOffCapability::const_pointer>(fields[8]);}

inline EnhancementOptions::temporalSpatialTradeOffCapability::reference EnhancementOptions::ref_temporalSpatialTradeOffCapability ()
{ return *static_cast<temporalSpatialTradeOffCapability::pointer>(fields[8]);}

inline EnhancementOptions::temporalSpatialTradeOffCapability::reference EnhancementOptions::set_temporalSpatialTradeOffCapability ()
{ return *static_cast<temporalSpatialTradeOffCapability::pointer>(fields[8]);}

inline EnhancementOptions::temporalSpatialTradeOffCapability::reference EnhancementOptions::set_temporalSpatialTradeOffCapability (bool value)
{ return *static_cast<temporalSpatialTradeOffCapability::pointer>(fields[8]) = value ;}

inline EnhancementOptions::slowSqcifMPI::const_reference EnhancementOptions::get_slowSqcifMPI () const
{
  assert(hasOptionalField(e_slowSqcifMPI));
  return *static_cast<slowSqcifMPI::const_pointer>(fields[9]);
}

inline EnhancementOptions::slowSqcifMPI::reference EnhancementOptions::ref_slowSqcifMPI ()
{
  assert(hasOptionalField(e_slowSqcifMPI));
  return *static_cast<slowSqcifMPI::pointer>(fields[9]);
}

inline EnhancementOptions::slowSqcifMPI::reference EnhancementOptions::set_slowSqcifMPI ()
{
  includeOptionalField( e_slowSqcifMPI, 9);
  return *static_cast<slowSqcifMPI::pointer>(fields[9]);
}

inline EnhancementOptions::slowSqcifMPI::reference EnhancementOptions::set_slowSqcifMPI (slowSqcifMPI::value_type::int_type value)
{
  includeOptionalField( e_slowSqcifMPI, 9);
  return *static_cast<slowSqcifMPI::pointer>(fields[9]) = value;
}

inline void EnhancementOptions::omit_slowSqcifMPI ()
{ removeOptionalField( e_slowSqcifMPI); }

inline bool EnhancementOptions::slowSqcifMPI_isPresent () const
{ return hasOptionalField( e_slowSqcifMPI); }

inline EnhancementOptions::slowQcifMPI::const_reference EnhancementOptions::get_slowQcifMPI () const
{
  assert(hasOptionalField(e_slowQcifMPI));
  return *static_cast<slowQcifMPI::const_pointer>(fields[10]);
}

inline EnhancementOptions::slowQcifMPI::reference EnhancementOptions::ref_slowQcifMPI ()
{
  assert(hasOptionalField(e_slowQcifMPI));
  return *static_cast<slowQcifMPI::pointer>(fields[10]);
}

inline EnhancementOptions::slowQcifMPI::reference EnhancementOptions::set_slowQcifMPI ()
{
  includeOptionalField( e_slowQcifMPI, 10);
  return *static_cast<slowQcifMPI::pointer>(fields[10]);
}

inline EnhancementOptions::slowQcifMPI::reference EnhancementOptions::set_slowQcifMPI (slowQcifMPI::value_type::int_type value)
{
  includeOptionalField( e_slowQcifMPI, 10);
  return *static_cast<slowQcifMPI::pointer>(fields[10]) = value;
}

inline void EnhancementOptions::omit_slowQcifMPI ()
{ removeOptionalField( e_slowQcifMPI); }

inline bool EnhancementOptions::slowQcifMPI_isPresent () const
{ return hasOptionalField( e_slowQcifMPI); }

inline EnhancementOptions::slowCifMPI::const_reference EnhancementOptions::get_slowCifMPI () const
{
  assert(hasOptionalField(e_slowCifMPI));
  return *static_cast<slowCifMPI::const_pointer>(fields[11]);
}

inline EnhancementOptions::slowCifMPI::reference EnhancementOptions::ref_slowCifMPI ()
{
  assert(hasOptionalField(e_slowCifMPI));
  return *static_cast<slowCifMPI::pointer>(fields[11]);
}

inline EnhancementOptions::slowCifMPI::reference EnhancementOptions::set_slowCifMPI ()
{
  includeOptionalField( e_slowCifMPI, 11);
  return *static_cast<slowCifMPI::pointer>(fields[11]);
}

inline EnhancementOptions::slowCifMPI::reference EnhancementOptions::set_slowCifMPI (slowCifMPI::value_type::int_type value)
{
  includeOptionalField( e_slowCifMPI, 11);
  return *static_cast<slowCifMPI::pointer>(fields[11]) = value;
}

inline void EnhancementOptions::omit_slowCifMPI ()
{ removeOptionalField( e_slowCifMPI); }

inline bool EnhancementOptions::slowCifMPI_isPresent () const
{ return hasOptionalField( e_slowCifMPI); }

inline EnhancementOptions::slowCif4MPI::const_reference EnhancementOptions::get_slowCif4MPI () const
{
  assert(hasOptionalField(e_slowCif4MPI));
  return *static_cast<slowCif4MPI::const_pointer>(fields[12]);
}

inline EnhancementOptions::slowCif4MPI::reference EnhancementOptions::ref_slowCif4MPI ()
{
  assert(hasOptionalField(e_slowCif4MPI));
  return *static_cast<slowCif4MPI::pointer>(fields[12]);
}

inline EnhancementOptions::slowCif4MPI::reference EnhancementOptions::set_slowCif4MPI ()
{
  includeOptionalField( e_slowCif4MPI, 12);
  return *static_cast<slowCif4MPI::pointer>(fields[12]);
}

inline EnhancementOptions::slowCif4MPI::reference EnhancementOptions::set_slowCif4MPI (slowCif4MPI::value_type::int_type value)
{
  includeOptionalField( e_slowCif4MPI, 12);
  return *static_cast<slowCif4MPI::pointer>(fields[12]) = value;
}

inline void EnhancementOptions::omit_slowCif4MPI ()
{ removeOptionalField( e_slowCif4MPI); }

inline bool EnhancementOptions::slowCif4MPI_isPresent () const
{ return hasOptionalField( e_slowCif4MPI); }

inline EnhancementOptions::slowCif16MPI::const_reference EnhancementOptions::get_slowCif16MPI () const
{
  assert(hasOptionalField(e_slowCif16MPI));
  return *static_cast<slowCif16MPI::const_pointer>(fields[13]);
}

inline EnhancementOptions::slowCif16MPI::reference EnhancementOptions::ref_slowCif16MPI ()
{
  assert(hasOptionalField(e_slowCif16MPI));
  return *static_cast<slowCif16MPI::pointer>(fields[13]);
}

inline EnhancementOptions::slowCif16MPI::reference EnhancementOptions::set_slowCif16MPI ()
{
  includeOptionalField( e_slowCif16MPI, 13);
  return *static_cast<slowCif16MPI::pointer>(fields[13]);
}

inline EnhancementOptions::slowCif16MPI::reference EnhancementOptions::set_slowCif16MPI (slowCif16MPI::value_type::int_type value)
{
  includeOptionalField( e_slowCif16MPI, 13);
  return *static_cast<slowCif16MPI::pointer>(fields[13]) = value;
}

inline void EnhancementOptions::omit_slowCif16MPI ()
{ removeOptionalField( e_slowCif16MPI); }

inline bool EnhancementOptions::slowCif16MPI_isPresent () const
{ return hasOptionalField( e_slowCif16MPI); }

inline EnhancementOptions::errorCompensation::const_reference EnhancementOptions::get_errorCompensation () const
{ return *static_cast<errorCompensation::const_pointer>(fields[14]);}

inline EnhancementOptions::errorCompensation::reference EnhancementOptions::ref_errorCompensation ()
{ return *static_cast<errorCompensation::pointer>(fields[14]);}

inline EnhancementOptions::errorCompensation::reference EnhancementOptions::set_errorCompensation ()
{ return *static_cast<errorCompensation::pointer>(fields[14]);}

inline EnhancementOptions::errorCompensation::reference EnhancementOptions::set_errorCompensation (bool value)
{ return *static_cast<errorCompensation::pointer>(fields[14]) = value ;}

inline EnhancementOptions::h263Options::const_reference EnhancementOptions::get_h263Options () const
{
  assert(hasOptionalField(e_h263Options));
  return *static_cast<h263Options::const_pointer>(fields[15]);
}

inline EnhancementOptions::h263Options::reference EnhancementOptions::ref_h263Options ()
{
  assert(hasOptionalField(e_h263Options));
  return *static_cast<h263Options::pointer>(fields[15]);
}

inline EnhancementOptions::h263Options::reference EnhancementOptions::set_h263Options ()
{
  includeOptionalField( e_h263Options, 15);
  return *static_cast<h263Options::pointer>(fields[15]);
}

inline EnhancementOptions::h263Options::reference EnhancementOptions::set_h263Options (h263Options::const_reference value)
{
  includeOptionalField( e_h263Options, 15);
  return *static_cast<h263Options::pointer>(fields[15]) = value;
}

inline void EnhancementOptions::omit_h263Options ()
{ removeOptionalField( e_h263Options); }

inline bool EnhancementOptions::h263Options_isPresent () const
{ return hasOptionalField( e_h263Options); }

inline void EnhancementOptions::swap(EnhancementOptions& other)
{ Inherited::swap(other); }

inline EnhancementOptions* EnhancementOptions::clone() const
{ return static_cast<EnhancementOptions*> (Inherited::clone()); }

inline AudioCapability::nonStandard::const_reference AudioCapability::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline AudioCapability::nonStandard::reference AudioCapability::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline AudioCapability::nonStandard::reference AudioCapability::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline AudioCapability::nonStandard::reference AudioCapability::select_nonStandard (AudioCapability::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool AudioCapability::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline AudioCapability::g711Alaw64k::const_reference AudioCapability::get_g711Alaw64k () const
{
    assert(currentSelection() ==g711Alaw64k::id_);
    return *static_cast<g711Alaw64k::const_pointer>(choice.get());
}

inline AudioCapability::g711Alaw64k::reference AudioCapability::ref_g711Alaw64k ()
{
    assert(currentSelection() ==g711Alaw64k::id_);
    return *static_cast<g711Alaw64k::pointer>(choice.get());
}

inline AudioCapability::g711Alaw64k::reference AudioCapability::select_g711Alaw64k ()
{
    return *static_cast<g711Alaw64k::pointer>(setSelection(g711Alaw64k::id_, ASN1::AbstractData::create( &g711Alaw64k::value_type::theInfo)));
}

inline AudioCapability::g711Alaw64k::reference AudioCapability::select_g711Alaw64k (AudioCapability::g711Alaw64k::value_type::int_type value)
{
    return select_g711Alaw64k() = value;
}

inline bool AudioCapability::g711Alaw64k_isSelected() const
{ 
    return currentSelection() == g711Alaw64k::id_; 
}

inline AudioCapability::g711Alaw56k::const_reference AudioCapability::get_g711Alaw56k () const
{
    assert(currentSelection() ==g711Alaw56k::id_);
    return *static_cast<g711Alaw56k::const_pointer>(choice.get());
}

inline AudioCapability::g711Alaw56k::reference AudioCapability::ref_g711Alaw56k ()
{
    assert(currentSelection() ==g711Alaw56k::id_);
    return *static_cast<g711Alaw56k::pointer>(choice.get());
}

inline AudioCapability::g711Alaw56k::reference AudioCapability::select_g711Alaw56k ()
{
    return *static_cast<g711Alaw56k::pointer>(setSelection(g711Alaw56k::id_, ASN1::AbstractData::create( &g711Alaw56k::value_type::theInfo)));
}

inline AudioCapability::g711Alaw56k::reference AudioCapability::select_g711Alaw56k (AudioCapability::g711Alaw56k::value_type::int_type value)
{
    return select_g711Alaw56k() = value;
}

inline bool AudioCapability::g711Alaw56k_isSelected() const
{ 
    return currentSelection() == g711Alaw56k::id_; 
}

inline AudioCapability::g711Ulaw64k::const_reference AudioCapability::get_g711Ulaw64k () const
{
    assert(currentSelection() ==g711Ulaw64k::id_);
    return *static_cast<g711Ulaw64k::const_pointer>(choice.get());
}

inline AudioCapability::g711Ulaw64k::reference AudioCapability::ref_g711Ulaw64k ()
{
    assert(currentSelection() ==g711Ulaw64k::id_);
    return *static_cast<g711Ulaw64k::pointer>(choice.get());
}

inline AudioCapability::g711Ulaw64k::reference AudioCapability::select_g711Ulaw64k ()
{
    return *static_cast<g711Ulaw64k::pointer>(setSelection(g711Ulaw64k::id_, ASN1::AbstractData::create( &g711Ulaw64k::value_type::theInfo)));
}

inline AudioCapability::g711Ulaw64k::reference AudioCapability::select_g711Ulaw64k (AudioCapability::g711Ulaw64k::value_type::int_type value)
{
    return select_g711Ulaw64k() = value;
}

inline bool AudioCapability::g711Ulaw64k_isSelected() const
{ 
    return currentSelection() == g711Ulaw64k::id_; 
}

inline AudioCapability::g711Ulaw56k::const_reference AudioCapability::get_g711Ulaw56k () const
{
    assert(currentSelection() ==g711Ulaw56k::id_);
    return *static_cast<g711Ulaw56k::const_pointer>(choice.get());
}

inline AudioCapability::g711Ulaw56k::reference AudioCapability::ref_g711Ulaw56k ()
{
    assert(currentSelection() ==g711Ulaw56k::id_);
    return *static_cast<g711Ulaw56k::pointer>(choice.get());
}

inline AudioCapability::g711Ulaw56k::reference AudioCapability::select_g711Ulaw56k ()
{
    return *static_cast<g711Ulaw56k::pointer>(setSelection(g711Ulaw56k::id_, ASN1::AbstractData::create( &g711Ulaw56k::value_type::theInfo)));
}

inline AudioCapability::g711Ulaw56k::reference AudioCapability::select_g711Ulaw56k (AudioCapability::g711Ulaw56k::value_type::int_type value)
{
    return select_g711Ulaw56k() = value;
}

inline bool AudioCapability::g711Ulaw56k_isSelected() const
{ 
    return currentSelection() == g711Ulaw56k::id_; 
}

inline AudioCapability::g722_64k::const_reference AudioCapability::get_g722_64k () const
{
    assert(currentSelection() ==g722_64k::id_);
    return *static_cast<g722_64k::const_pointer>(choice.get());
}

inline AudioCapability::g722_64k::reference AudioCapability::ref_g722_64k ()
{
    assert(currentSelection() ==g722_64k::id_);
    return *static_cast<g722_64k::pointer>(choice.get());
}

inline AudioCapability::g722_64k::reference AudioCapability::select_g722_64k ()
{
    return *static_cast<g722_64k::pointer>(setSelection(g722_64k::id_, ASN1::AbstractData::create( &g722_64k::value_type::theInfo)));
}

inline AudioCapability::g722_64k::reference AudioCapability::select_g722_64k (AudioCapability::g722_64k::value_type::int_type value)
{
    return select_g722_64k() = value;
}

inline bool AudioCapability::g722_64k_isSelected() const
{ 
    return currentSelection() == g722_64k::id_; 
}

inline AudioCapability::g722_56k::const_reference AudioCapability::get_g722_56k () const
{
    assert(currentSelection() ==g722_56k::id_);
    return *static_cast<g722_56k::const_pointer>(choice.get());
}

inline AudioCapability::g722_56k::reference AudioCapability::ref_g722_56k ()
{
    assert(currentSelection() ==g722_56k::id_);
    return *static_cast<g722_56k::pointer>(choice.get());
}

inline AudioCapability::g722_56k::reference AudioCapability::select_g722_56k ()
{
    return *static_cast<g722_56k::pointer>(setSelection(g722_56k::id_, ASN1::AbstractData::create( &g722_56k::value_type::theInfo)));
}

inline AudioCapability::g722_56k::reference AudioCapability::select_g722_56k (AudioCapability::g722_56k::value_type::int_type value)
{
    return select_g722_56k() = value;
}

inline bool AudioCapability::g722_56k_isSelected() const
{ 
    return currentSelection() == g722_56k::id_; 
}

inline AudioCapability::g722_48k::const_reference AudioCapability::get_g722_48k () const
{
    assert(currentSelection() ==g722_48k::id_);
    return *static_cast<g722_48k::const_pointer>(choice.get());
}

inline AudioCapability::g722_48k::reference AudioCapability::ref_g722_48k ()
{
    assert(currentSelection() ==g722_48k::id_);
    return *static_cast<g722_48k::pointer>(choice.get());
}

inline AudioCapability::g722_48k::reference AudioCapability::select_g722_48k ()
{
    return *static_cast<g722_48k::pointer>(setSelection(g722_48k::id_, ASN1::AbstractData::create( &g722_48k::value_type::theInfo)));
}

inline AudioCapability::g722_48k::reference AudioCapability::select_g722_48k (AudioCapability::g722_48k::value_type::int_type value)
{
    return select_g722_48k() = value;
}

inline bool AudioCapability::g722_48k_isSelected() const
{ 
    return currentSelection() == g722_48k::id_; 
}

inline AudioCapability::g7231::const_reference AudioCapability::get_g7231 () const
{
    assert(currentSelection() ==g7231::id_);
    return *static_cast<g7231::const_pointer>(choice.get());
}

inline AudioCapability::g7231::reference AudioCapability::ref_g7231 ()
{
    assert(currentSelection() ==g7231::id_);
    return *static_cast<g7231::pointer>(choice.get());
}

inline AudioCapability::g7231::reference AudioCapability::select_g7231 ()
{
    return *static_cast<g7231::pointer>(setSelection(g7231::id_, ASN1::AbstractData::create( &g7231::value_type::theInfo)));
}

inline AudioCapability::g7231::reference AudioCapability::select_g7231 (AudioCapability::g7231::const_reference value)
{
    return select_g7231() = value;
}

inline bool AudioCapability::g7231_isSelected() const
{ 
    return currentSelection() == g7231::id_; 
}

inline AudioCapability::g728::const_reference AudioCapability::get_g728 () const
{
    assert(currentSelection() ==g728::id_);
    return *static_cast<g728::const_pointer>(choice.get());
}

inline AudioCapability::g728::reference AudioCapability::ref_g728 ()
{
    assert(currentSelection() ==g728::id_);
    return *static_cast<g728::pointer>(choice.get());
}

inline AudioCapability::g728::reference AudioCapability::select_g728 ()
{
    return *static_cast<g728::pointer>(setSelection(g728::id_, ASN1::AbstractData::create( &g728::value_type::theInfo)));
}

inline AudioCapability::g728::reference AudioCapability::select_g728 (AudioCapability::g728::value_type::int_type value)
{
    return select_g728() = value;
}

inline bool AudioCapability::g728_isSelected() const
{ 
    return currentSelection() == g728::id_; 
}

inline AudioCapability::g729::const_reference AudioCapability::get_g729 () const
{
    assert(currentSelection() ==g729::id_);
    return *static_cast<g729::const_pointer>(choice.get());
}

inline AudioCapability::g729::reference AudioCapability::ref_g729 ()
{
    assert(currentSelection() ==g729::id_);
    return *static_cast<g729::pointer>(choice.get());
}

inline AudioCapability::g729::reference AudioCapability::select_g729 ()
{
    return *static_cast<g729::pointer>(setSelection(g729::id_, ASN1::AbstractData::create( &g729::value_type::theInfo)));
}

inline AudioCapability::g729::reference AudioCapability::select_g729 (AudioCapability::g729::value_type::int_type value)
{
    return select_g729() = value;
}

inline bool AudioCapability::g729_isSelected() const
{ 
    return currentSelection() == g729::id_; 
}

inline AudioCapability::g729AnnexA::const_reference AudioCapability::get_g729AnnexA () const
{
    assert(currentSelection() ==g729AnnexA::id_);
    return *static_cast<g729AnnexA::const_pointer>(choice.get());
}

inline AudioCapability::g729AnnexA::reference AudioCapability::ref_g729AnnexA ()
{
    assert(currentSelection() ==g729AnnexA::id_);
    return *static_cast<g729AnnexA::pointer>(choice.get());
}

inline AudioCapability::g729AnnexA::reference AudioCapability::select_g729AnnexA ()
{
    return *static_cast<g729AnnexA::pointer>(setSelection(g729AnnexA::id_, ASN1::AbstractData::create( &g729AnnexA::value_type::theInfo)));
}

inline AudioCapability::g729AnnexA::reference AudioCapability::select_g729AnnexA (AudioCapability::g729AnnexA::value_type::int_type value)
{
    return select_g729AnnexA() = value;
}

inline bool AudioCapability::g729AnnexA_isSelected() const
{ 
    return currentSelection() == g729AnnexA::id_; 
}

inline AudioCapability::is11172AudioCapability::const_reference AudioCapability::get_is11172AudioCapability () const
{
    assert(currentSelection() ==is11172AudioCapability::id_);
    return *static_cast<is11172AudioCapability::const_pointer>(choice.get());
}

inline AudioCapability::is11172AudioCapability::reference AudioCapability::ref_is11172AudioCapability ()
{
    assert(currentSelection() ==is11172AudioCapability::id_);
    return *static_cast<is11172AudioCapability::pointer>(choice.get());
}

inline AudioCapability::is11172AudioCapability::reference AudioCapability::select_is11172AudioCapability ()
{
    return *static_cast<is11172AudioCapability::pointer>(setSelection(is11172AudioCapability::id_, ASN1::AbstractData::create( &is11172AudioCapability::value_type::theInfo)));
}

inline AudioCapability::is11172AudioCapability::reference AudioCapability::select_is11172AudioCapability (AudioCapability::is11172AudioCapability::const_reference value)
{
    return select_is11172AudioCapability() = value;
}

inline bool AudioCapability::is11172AudioCapability_isSelected() const
{ 
    return currentSelection() == is11172AudioCapability::id_; 
}

inline AudioCapability::is13818AudioCapability::const_reference AudioCapability::get_is13818AudioCapability () const
{
    assert(currentSelection() ==is13818AudioCapability::id_);
    return *static_cast<is13818AudioCapability::const_pointer>(choice.get());
}

inline AudioCapability::is13818AudioCapability::reference AudioCapability::ref_is13818AudioCapability ()
{
    assert(currentSelection() ==is13818AudioCapability::id_);
    return *static_cast<is13818AudioCapability::pointer>(choice.get());
}

inline AudioCapability::is13818AudioCapability::reference AudioCapability::select_is13818AudioCapability ()
{
    return *static_cast<is13818AudioCapability::pointer>(setSelection(is13818AudioCapability::id_, ASN1::AbstractData::create( &is13818AudioCapability::value_type::theInfo)));
}

inline AudioCapability::is13818AudioCapability::reference AudioCapability::select_is13818AudioCapability (AudioCapability::is13818AudioCapability::const_reference value)
{
    return select_is13818AudioCapability() = value;
}

inline bool AudioCapability::is13818AudioCapability_isSelected() const
{ 
    return currentSelection() == is13818AudioCapability::id_; 
}

inline AudioCapability::g729wAnnexB::const_reference AudioCapability::get_g729wAnnexB () const
{
    assert(currentSelection() ==g729wAnnexB::id_);
    return *static_cast<g729wAnnexB::const_pointer>(choice.get());
}

inline AudioCapability::g729wAnnexB::reference AudioCapability::ref_g729wAnnexB ()
{
    assert(currentSelection() ==g729wAnnexB::id_);
    return *static_cast<g729wAnnexB::pointer>(choice.get());
}

inline AudioCapability::g729wAnnexB::reference AudioCapability::select_g729wAnnexB ()
{
    return *static_cast<g729wAnnexB::pointer>(setSelection(g729wAnnexB::id_, ASN1::AbstractData::create( &g729wAnnexB::value_type::theInfo)));
}

inline AudioCapability::g729wAnnexB::reference AudioCapability::select_g729wAnnexB (AudioCapability::g729wAnnexB::value_type::int_type value)
{
    return select_g729wAnnexB() = value;
}

inline bool AudioCapability::g729wAnnexB_isSelected() const
{ 
    return currentSelection() == g729wAnnexB::id_; 
}

inline AudioCapability::g729AnnexAwAnnexB::const_reference AudioCapability::get_g729AnnexAwAnnexB () const
{
    assert(currentSelection() ==g729AnnexAwAnnexB::id_);
    return *static_cast<g729AnnexAwAnnexB::const_pointer>(choice.get());
}

inline AudioCapability::g729AnnexAwAnnexB::reference AudioCapability::ref_g729AnnexAwAnnexB ()
{
    assert(currentSelection() ==g729AnnexAwAnnexB::id_);
    return *static_cast<g729AnnexAwAnnexB::pointer>(choice.get());
}

inline AudioCapability::g729AnnexAwAnnexB::reference AudioCapability::select_g729AnnexAwAnnexB ()
{
    return *static_cast<g729AnnexAwAnnexB::pointer>(setSelection(g729AnnexAwAnnexB::id_, ASN1::AbstractData::create( &g729AnnexAwAnnexB::value_type::theInfo)));
}

inline AudioCapability::g729AnnexAwAnnexB::reference AudioCapability::select_g729AnnexAwAnnexB (AudioCapability::g729AnnexAwAnnexB::value_type::int_type value)
{
    return select_g729AnnexAwAnnexB() = value;
}

inline bool AudioCapability::g729AnnexAwAnnexB_isSelected() const
{ 
    return currentSelection() == g729AnnexAwAnnexB::id_; 
}

inline AudioCapability::g7231AnnexCCapability::const_reference AudioCapability::get_g7231AnnexCCapability () const
{
    assert(currentSelection() ==g7231AnnexCCapability::id_);
    return *static_cast<g7231AnnexCCapability::const_pointer>(choice.get());
}

inline AudioCapability::g7231AnnexCCapability::reference AudioCapability::ref_g7231AnnexCCapability ()
{
    assert(currentSelection() ==g7231AnnexCCapability::id_);
    return *static_cast<g7231AnnexCCapability::pointer>(choice.get());
}

inline AudioCapability::g7231AnnexCCapability::reference AudioCapability::select_g7231AnnexCCapability ()
{
    return *static_cast<g7231AnnexCCapability::pointer>(setSelection(g7231AnnexCCapability::id_, ASN1::AbstractData::create( &g7231AnnexCCapability::value_type::theInfo)));
}

inline AudioCapability::g7231AnnexCCapability::reference AudioCapability::select_g7231AnnexCCapability (AudioCapability::g7231AnnexCCapability::const_reference value)
{
    return select_g7231AnnexCCapability() = value;
}

inline bool AudioCapability::g7231AnnexCCapability_isSelected() const
{ 
    return currentSelection() == g7231AnnexCCapability::id_; 
}

inline AudioCapability::gsmFullRate::const_reference AudioCapability::get_gsmFullRate () const
{
    assert(currentSelection() ==gsmFullRate::id_);
    return *static_cast<gsmFullRate::const_pointer>(choice.get());
}

inline AudioCapability::gsmFullRate::reference AudioCapability::ref_gsmFullRate ()
{
    assert(currentSelection() ==gsmFullRate::id_);
    return *static_cast<gsmFullRate::pointer>(choice.get());
}

inline AudioCapability::gsmFullRate::reference AudioCapability::select_gsmFullRate ()
{
    return *static_cast<gsmFullRate::pointer>(setSelection(gsmFullRate::id_, ASN1::AbstractData::create( &gsmFullRate::value_type::theInfo)));
}

inline AudioCapability::gsmFullRate::reference AudioCapability::select_gsmFullRate (AudioCapability::gsmFullRate::const_reference value)
{
    return select_gsmFullRate() = value;
}

inline bool AudioCapability::gsmFullRate_isSelected() const
{ 
    return currentSelection() == gsmFullRate::id_; 
}

inline AudioCapability::gsmHalfRate::const_reference AudioCapability::get_gsmHalfRate () const
{
    assert(currentSelection() ==gsmHalfRate::id_);
    return *static_cast<gsmHalfRate::const_pointer>(choice.get());
}

inline AudioCapability::gsmHalfRate::reference AudioCapability::ref_gsmHalfRate ()
{
    assert(currentSelection() ==gsmHalfRate::id_);
    return *static_cast<gsmHalfRate::pointer>(choice.get());
}

inline AudioCapability::gsmHalfRate::reference AudioCapability::select_gsmHalfRate ()
{
    return *static_cast<gsmHalfRate::pointer>(setSelection(gsmHalfRate::id_, ASN1::AbstractData::create( &gsmHalfRate::value_type::theInfo)));
}

inline AudioCapability::gsmHalfRate::reference AudioCapability::select_gsmHalfRate (AudioCapability::gsmHalfRate::const_reference value)
{
    return select_gsmHalfRate() = value;
}

inline bool AudioCapability::gsmHalfRate_isSelected() const
{ 
    return currentSelection() == gsmHalfRate::id_; 
}

inline AudioCapability::gsmEnhancedFullRate::const_reference AudioCapability::get_gsmEnhancedFullRate () const
{
    assert(currentSelection() ==gsmEnhancedFullRate::id_);
    return *static_cast<gsmEnhancedFullRate::const_pointer>(choice.get());
}

inline AudioCapability::gsmEnhancedFullRate::reference AudioCapability::ref_gsmEnhancedFullRate ()
{
    assert(currentSelection() ==gsmEnhancedFullRate::id_);
    return *static_cast<gsmEnhancedFullRate::pointer>(choice.get());
}

inline AudioCapability::gsmEnhancedFullRate::reference AudioCapability::select_gsmEnhancedFullRate ()
{
    return *static_cast<gsmEnhancedFullRate::pointer>(setSelection(gsmEnhancedFullRate::id_, ASN1::AbstractData::create( &gsmEnhancedFullRate::value_type::theInfo)));
}

inline AudioCapability::gsmEnhancedFullRate::reference AudioCapability::select_gsmEnhancedFullRate (AudioCapability::gsmEnhancedFullRate::const_reference value)
{
    return select_gsmEnhancedFullRate() = value;
}

inline bool AudioCapability::gsmEnhancedFullRate_isSelected() const
{ 
    return currentSelection() == gsmEnhancedFullRate::id_; 
}

inline AudioCapability::genericAudioCapability::const_reference AudioCapability::get_genericAudioCapability () const
{
    assert(currentSelection() ==genericAudioCapability::id_);
    return *static_cast<genericAudioCapability::const_pointer>(choice.get());
}

inline AudioCapability::genericAudioCapability::reference AudioCapability::ref_genericAudioCapability ()
{
    assert(currentSelection() ==genericAudioCapability::id_);
    return *static_cast<genericAudioCapability::pointer>(choice.get());
}

inline AudioCapability::genericAudioCapability::reference AudioCapability::select_genericAudioCapability ()
{
    return *static_cast<genericAudioCapability::pointer>(setSelection(genericAudioCapability::id_, ASN1::AbstractData::create( &genericAudioCapability::value_type::theInfo)));
}

inline AudioCapability::genericAudioCapability::reference AudioCapability::select_genericAudioCapability (AudioCapability::genericAudioCapability::const_reference value)
{
    return select_genericAudioCapability() = value;
}

inline bool AudioCapability::genericAudioCapability_isSelected() const
{ 
    return currentSelection() == genericAudioCapability::id_; 
}

inline AudioCapability::g729Extensions::const_reference AudioCapability::get_g729Extensions () const
{
    assert(currentSelection() ==g729Extensions::id_);
    return *static_cast<g729Extensions::const_pointer>(choice.get());
}

inline AudioCapability::g729Extensions::reference AudioCapability::ref_g729Extensions ()
{
    assert(currentSelection() ==g729Extensions::id_);
    return *static_cast<g729Extensions::pointer>(choice.get());
}

inline AudioCapability::g729Extensions::reference AudioCapability::select_g729Extensions ()
{
    return *static_cast<g729Extensions::pointer>(setSelection(g729Extensions::id_, ASN1::AbstractData::create( &g729Extensions::value_type::theInfo)));
}

inline AudioCapability::g729Extensions::reference AudioCapability::select_g729Extensions (AudioCapability::g729Extensions::const_reference value)
{
    return select_g729Extensions() = value;
}

inline bool AudioCapability::g729Extensions_isSelected() const
{ 
    return currentSelection() == g729Extensions::id_; 
}

inline AudioCapability::vbd::const_reference AudioCapability::get_vbd () const
{
    assert(currentSelection() ==vbd::id_);
    return *static_cast<vbd::const_pointer>(choice.get());
}

inline AudioCapability::vbd::reference AudioCapability::ref_vbd ()
{
    assert(currentSelection() ==vbd::id_);
    return *static_cast<vbd::pointer>(choice.get());
}

inline AudioCapability::vbd::reference AudioCapability::select_vbd ()
{
    return *static_cast<vbd::pointer>(setSelection(vbd::id_, ASN1::AbstractData::create( &vbd::value_type::theInfo)));
}

inline AudioCapability::vbd::reference AudioCapability::select_vbd (AudioCapability::vbd::const_reference value)
{
    return select_vbd() = value;
}

inline bool AudioCapability::vbd_isSelected() const
{ 
    return currentSelection() == vbd::id_; 
}

inline AudioCapability::audioTelephonyEvent::const_reference AudioCapability::get_audioTelephonyEvent () const
{
    assert(currentSelection() ==audioTelephonyEvent::id_);
    return *static_cast<audioTelephonyEvent::const_pointer>(choice.get());
}

inline AudioCapability::audioTelephonyEvent::reference AudioCapability::ref_audioTelephonyEvent ()
{
    assert(currentSelection() ==audioTelephonyEvent::id_);
    return *static_cast<audioTelephonyEvent::pointer>(choice.get());
}

inline AudioCapability::audioTelephonyEvent::reference AudioCapability::select_audioTelephonyEvent ()
{
    return *static_cast<audioTelephonyEvent::pointer>(setSelection(audioTelephonyEvent::id_, ASN1::AbstractData::create( &audioTelephonyEvent::value_type::theInfo)));
}

inline AudioCapability::audioTelephonyEvent::reference AudioCapability::select_audioTelephonyEvent (AudioCapability::audioTelephonyEvent::const_reference value)
{
    return select_audioTelephonyEvent() = value;
}

inline bool AudioCapability::audioTelephonyEvent_isSelected() const
{ 
    return currentSelection() == audioTelephonyEvent::id_; 
}

inline AudioCapability::audioTone::const_reference AudioCapability::get_audioTone () const
{
    assert(currentSelection() ==audioTone::id_);
    return *static_cast<audioTone::const_pointer>(choice.get());
}

inline AudioCapability::audioTone::reference AudioCapability::ref_audioTone ()
{
    assert(currentSelection() ==audioTone::id_);
    return *static_cast<audioTone::pointer>(choice.get());
}

inline AudioCapability::audioTone::reference AudioCapability::select_audioTone ()
{
    return *static_cast<audioTone::pointer>(setSelection(audioTone::id_, ASN1::AbstractData::create( &audioTone::value_type::theInfo)));
}

inline AudioCapability::audioTone::reference AudioCapability::select_audioTone (AudioCapability::audioTone::const_reference value)
{
    return select_audioTone() = value;
}

inline bool AudioCapability::audioTone_isSelected() const
{ 
    return currentSelection() == audioTone::id_; 
}

inline AudioCapability::AudioCapability(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g711Alaw64k::Id id, g711Alaw64k::value_type::int_type value)
  : Inherited(&theInfo, id, new g711Alaw64k::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g711Alaw56k::Id id, g711Alaw56k::value_type::int_type value)
  : Inherited(&theInfo, id, new g711Alaw56k::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g711Ulaw64k::Id id, g711Ulaw64k::value_type::int_type value)
  : Inherited(&theInfo, id, new g711Ulaw64k::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g711Ulaw56k::Id id, g711Ulaw56k::value_type::int_type value)
  : Inherited(&theInfo, id, new g711Ulaw56k::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g722_64k::Id id, g722_64k::value_type::int_type value)
  : Inherited(&theInfo, id, new g722_64k::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g722_56k::Id id, g722_56k::value_type::int_type value)
  : Inherited(&theInfo, id, new g722_56k::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g722_48k::Id id, g722_48k::value_type::int_type value)
  : Inherited(&theInfo, id, new g722_48k::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g7231::Id id, g7231::const_reference value)
  : Inherited(&theInfo, id, new g7231::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g728::Id id, g728::value_type::int_type value)
  : Inherited(&theInfo, id, new g728::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g729::Id id, g729::value_type::int_type value)
  : Inherited(&theInfo, id, new g729::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g729AnnexA::Id id, g729AnnexA::value_type::int_type value)
  : Inherited(&theInfo, id, new g729AnnexA::value_type(value) )
{ }

inline AudioCapability::AudioCapability(is11172AudioCapability::Id id, is11172AudioCapability::const_reference value)
  : Inherited(&theInfo, id, new is11172AudioCapability::value_type(value) )
{ }

inline AudioCapability::AudioCapability(is13818AudioCapability::Id id, is13818AudioCapability::const_reference value)
  : Inherited(&theInfo, id, new is13818AudioCapability::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g729wAnnexB::Id id, g729wAnnexB::value_type::int_type value)
  : Inherited(&theInfo, id, new g729wAnnexB::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g729AnnexAwAnnexB::Id id, g729AnnexAwAnnexB::value_type::int_type value)
  : Inherited(&theInfo, id, new g729AnnexAwAnnexB::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g7231AnnexCCapability::Id id, g7231AnnexCCapability::const_reference value)
  : Inherited(&theInfo, id, new g7231AnnexCCapability::value_type(value) )
{ }

inline AudioCapability::AudioCapability(gsmFullRate::Id id, gsmFullRate::const_reference value)
  : Inherited(&theInfo, id, new gsmFullRate::value_type(value) )
{ }

inline AudioCapability::AudioCapability(gsmHalfRate::Id id, gsmHalfRate::const_reference value)
  : Inherited(&theInfo, id, new gsmHalfRate::value_type(value) )
{ }

inline AudioCapability::AudioCapability(gsmEnhancedFullRate::Id id, gsmEnhancedFullRate::const_reference value)
  : Inherited(&theInfo, id, new gsmEnhancedFullRate::value_type(value) )
{ }

inline AudioCapability::AudioCapability(genericAudioCapability::Id id, genericAudioCapability::const_reference value)
  : Inherited(&theInfo, id, new genericAudioCapability::value_type(value) )
{ }

inline AudioCapability::AudioCapability(g729Extensions::Id id, g729Extensions::const_reference value)
  : Inherited(&theInfo, id, new g729Extensions::value_type(value) )
{ }

inline AudioCapability::AudioCapability(vbd::Id id, vbd::const_reference value)
  : Inherited(&theInfo, id, new vbd::value_type(value) )
{ }

inline AudioCapability::AudioCapability(audioTelephonyEvent::Id id, audioTelephonyEvent::const_reference value)
  : Inherited(&theInfo, id, new audioTelephonyEvent::value_type(value) )
{ }

inline AudioCapability::AudioCapability(audioTone::Id id, audioTone::const_reference value)
  : Inherited(&theInfo, id, new audioTone::value_type(value) )
{ }


inline void AudioCapability::swap(AudioCapability & other)
{  Inherited::swap(other); }

inline AudioCapability* AudioCapability::clone() const
{ return static_cast<AudioCapability*> (Inherited::clone()); }

inline bool AudioCapability::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline DataApplicationCapability::application::const_reference DataApplicationCapability::get_application () const
{ return *static_cast<application::const_pointer>(fields[0]);}

inline DataApplicationCapability::application::reference DataApplicationCapability::ref_application ()
{ return *static_cast<application::pointer>(fields[0]);}

inline DataApplicationCapability::application::reference DataApplicationCapability::set_application ()
{ return *static_cast<application::pointer>(fields[0]);}

inline DataApplicationCapability::application::reference DataApplicationCapability::set_application (application::const_reference value)
{ return *static_cast<application::pointer>(fields[0]) = value ;}

inline DataApplicationCapability::maxBitRate::const_reference DataApplicationCapability::get_maxBitRate () const
{ return *static_cast<maxBitRate::const_pointer>(fields[1]);}

inline DataApplicationCapability::maxBitRate::reference DataApplicationCapability::ref_maxBitRate ()
{ return *static_cast<maxBitRate::pointer>(fields[1]);}

inline DataApplicationCapability::maxBitRate::reference DataApplicationCapability::set_maxBitRate ()
{ return *static_cast<maxBitRate::pointer>(fields[1]);}

inline DataApplicationCapability::maxBitRate::reference DataApplicationCapability::set_maxBitRate (maxBitRate::value_type::int_type value)
{ return *static_cast<maxBitRate::pointer>(fields[1]) = value ;}

inline void DataApplicationCapability::swap(DataApplicationCapability& other)
{ Inherited::swap(other); }

inline DataApplicationCapability* DataApplicationCapability::clone() const
{ return static_cast<DataApplicationCapability*> (Inherited::clone()); }

inline EncryptionAuthenticationAndIntegrity::encryptionCapability::const_reference EncryptionAuthenticationAndIntegrity::get_encryptionCapability () const
{
  assert(hasOptionalField(e_encryptionCapability));
  return *static_cast<encryptionCapability::const_pointer>(fields[0]);
}

inline EncryptionAuthenticationAndIntegrity::encryptionCapability::reference EncryptionAuthenticationAndIntegrity::ref_encryptionCapability ()
{
  assert(hasOptionalField(e_encryptionCapability));
  return *static_cast<encryptionCapability::pointer>(fields[0]);
}

inline EncryptionAuthenticationAndIntegrity::encryptionCapability::reference EncryptionAuthenticationAndIntegrity::set_encryptionCapability ()
{
  includeOptionalField( e_encryptionCapability, 0);
  return *static_cast<encryptionCapability::pointer>(fields[0]);
}

inline EncryptionAuthenticationAndIntegrity::encryptionCapability::reference EncryptionAuthenticationAndIntegrity::set_encryptionCapability (encryptionCapability::const_reference value)
{
  includeOptionalField( e_encryptionCapability, 0);
  return *static_cast<encryptionCapability::pointer>(fields[0]) = value;
}

inline void EncryptionAuthenticationAndIntegrity::omit_encryptionCapability ()
{ removeOptionalField( e_encryptionCapability); }

inline bool EncryptionAuthenticationAndIntegrity::encryptionCapability_isPresent () const
{ return hasOptionalField( e_encryptionCapability); }

inline EncryptionAuthenticationAndIntegrity::authenticationCapability::const_reference EncryptionAuthenticationAndIntegrity::get_authenticationCapability () const
{
  assert(hasOptionalField(e_authenticationCapability));
  return *static_cast<authenticationCapability::const_pointer>(fields[1]);
}

inline EncryptionAuthenticationAndIntegrity::authenticationCapability::reference EncryptionAuthenticationAndIntegrity::ref_authenticationCapability ()
{
  assert(hasOptionalField(e_authenticationCapability));
  return *static_cast<authenticationCapability::pointer>(fields[1]);
}

inline EncryptionAuthenticationAndIntegrity::authenticationCapability::reference EncryptionAuthenticationAndIntegrity::set_authenticationCapability ()
{
  includeOptionalField( e_authenticationCapability, 1);
  return *static_cast<authenticationCapability::pointer>(fields[1]);
}

inline EncryptionAuthenticationAndIntegrity::authenticationCapability::reference EncryptionAuthenticationAndIntegrity::set_authenticationCapability (authenticationCapability::const_reference value)
{
  includeOptionalField( e_authenticationCapability, 1);
  return *static_cast<authenticationCapability::pointer>(fields[1]) = value;
}

inline void EncryptionAuthenticationAndIntegrity::omit_authenticationCapability ()
{ removeOptionalField( e_authenticationCapability); }

inline bool EncryptionAuthenticationAndIntegrity::authenticationCapability_isPresent () const
{ return hasOptionalField( e_authenticationCapability); }

inline EncryptionAuthenticationAndIntegrity::integrityCapability::const_reference EncryptionAuthenticationAndIntegrity::get_integrityCapability () const
{
  assert(hasOptionalField(e_integrityCapability));
  return *static_cast<integrityCapability::const_pointer>(fields[2]);
}

inline EncryptionAuthenticationAndIntegrity::integrityCapability::reference EncryptionAuthenticationAndIntegrity::ref_integrityCapability ()
{
  assert(hasOptionalField(e_integrityCapability));
  return *static_cast<integrityCapability::pointer>(fields[2]);
}

inline EncryptionAuthenticationAndIntegrity::integrityCapability::reference EncryptionAuthenticationAndIntegrity::set_integrityCapability ()
{
  includeOptionalField( e_integrityCapability, 2);
  return *static_cast<integrityCapability::pointer>(fields[2]);
}

inline EncryptionAuthenticationAndIntegrity::integrityCapability::reference EncryptionAuthenticationAndIntegrity::set_integrityCapability (integrityCapability::const_reference value)
{
  includeOptionalField( e_integrityCapability, 2);
  return *static_cast<integrityCapability::pointer>(fields[2]) = value;
}

inline void EncryptionAuthenticationAndIntegrity::omit_integrityCapability ()
{ removeOptionalField( e_integrityCapability); }

inline bool EncryptionAuthenticationAndIntegrity::integrityCapability_isPresent () const
{ return hasOptionalField( e_integrityCapability); }

inline EncryptionAuthenticationAndIntegrity::genericH235SecurityCapability::const_reference EncryptionAuthenticationAndIntegrity::get_genericH235SecurityCapability () const
{
  assert(hasOptionalField(e_genericH235SecurityCapability));
  return *static_cast<genericH235SecurityCapability::const_pointer>(fields[3]);
}

inline EncryptionAuthenticationAndIntegrity::genericH235SecurityCapability::reference EncryptionAuthenticationAndIntegrity::ref_genericH235SecurityCapability ()
{
  assert(hasOptionalField(e_genericH235SecurityCapability));
  return *static_cast<genericH235SecurityCapability::pointer>(fields[3]);
}

inline EncryptionAuthenticationAndIntegrity::genericH235SecurityCapability::reference EncryptionAuthenticationAndIntegrity::set_genericH235SecurityCapability ()
{
  includeOptionalField( e_genericH235SecurityCapability, 3);
  return *static_cast<genericH235SecurityCapability::pointer>(fields[3]);
}

inline EncryptionAuthenticationAndIntegrity::genericH235SecurityCapability::reference EncryptionAuthenticationAndIntegrity::set_genericH235SecurityCapability (genericH235SecurityCapability::const_reference value)
{
  includeOptionalField( e_genericH235SecurityCapability, 3);
  return *static_cast<genericH235SecurityCapability::pointer>(fields[3]) = value;
}

inline void EncryptionAuthenticationAndIntegrity::omit_genericH235SecurityCapability ()
{ removeOptionalField( e_genericH235SecurityCapability); }

inline bool EncryptionAuthenticationAndIntegrity::genericH235SecurityCapability_isPresent () const
{ return hasOptionalField( e_genericH235SecurityCapability); }

inline void EncryptionAuthenticationAndIntegrity::swap(EncryptionAuthenticationAndIntegrity& other)
{ Inherited::swap(other); }

inline EncryptionAuthenticationAndIntegrity* EncryptionAuthenticationAndIntegrity::clone() const
{ return static_cast<EncryptionAuthenticationAndIntegrity*> (Inherited::clone()); }

inline UserInputCapability::nonStandard::const_reference UserInputCapability::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline UserInputCapability::nonStandard::reference UserInputCapability::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline UserInputCapability::nonStandard::reference UserInputCapability::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline UserInputCapability::nonStandard::reference UserInputCapability::select_nonStandard (UserInputCapability::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool UserInputCapability::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline UserInputCapability::basicString::reference UserInputCapability::select_basicString ()
{
    return *static_cast<basicString::pointer>(setSelection(basicString::id_, ASN1::AbstractData::create( &basicString::value_type::theInfo)));
}

inline bool UserInputCapability::basicString_isSelected() const
{ 
    return currentSelection() == basicString::id_; 
}

inline UserInputCapability::iA5String::reference UserInputCapability::select_iA5String ()
{
    return *static_cast<iA5String::pointer>(setSelection(iA5String::id_, ASN1::AbstractData::create( &iA5String::value_type::theInfo)));
}

inline bool UserInputCapability::iA5String_isSelected() const
{ 
    return currentSelection() == iA5String::id_; 
}

inline UserInputCapability::generalString::reference UserInputCapability::select_generalString ()
{
    return *static_cast<generalString::pointer>(setSelection(generalString::id_, ASN1::AbstractData::create( &generalString::value_type::theInfo)));
}

inline bool UserInputCapability::generalString_isSelected() const
{ 
    return currentSelection() == generalString::id_; 
}

inline UserInputCapability::dtmf::reference UserInputCapability::select_dtmf ()
{
    return *static_cast<dtmf::pointer>(setSelection(dtmf::id_, ASN1::AbstractData::create( &dtmf::value_type::theInfo)));
}

inline bool UserInputCapability::dtmf_isSelected() const
{ 
    return currentSelection() == dtmf::id_; 
}

inline UserInputCapability::hookflash::reference UserInputCapability::select_hookflash ()
{
    return *static_cast<hookflash::pointer>(setSelection(hookflash::id_, ASN1::AbstractData::create( &hookflash::value_type::theInfo)));
}

inline bool UserInputCapability::hookflash_isSelected() const
{ 
    return currentSelection() == hookflash::id_; 
}

inline UserInputCapability::extendedAlphanumeric::reference UserInputCapability::select_extendedAlphanumeric ()
{
    return *static_cast<extendedAlphanumeric::pointer>(setSelection(extendedAlphanumeric::id_, ASN1::AbstractData::create( &extendedAlphanumeric::value_type::theInfo)));
}

inline bool UserInputCapability::extendedAlphanumeric_isSelected() const
{ 
    return currentSelection() == extendedAlphanumeric::id_; 
}

inline UserInputCapability::encryptedBasicString::reference UserInputCapability::select_encryptedBasicString ()
{
    return *static_cast<encryptedBasicString::pointer>(setSelection(encryptedBasicString::id_, ASN1::AbstractData::create( &encryptedBasicString::value_type::theInfo)));
}

inline bool UserInputCapability::encryptedBasicString_isSelected() const
{ 
    return currentSelection() == encryptedBasicString::id_; 
}

inline UserInputCapability::encryptedIA5String::reference UserInputCapability::select_encryptedIA5String ()
{
    return *static_cast<encryptedIA5String::pointer>(setSelection(encryptedIA5String::id_, ASN1::AbstractData::create( &encryptedIA5String::value_type::theInfo)));
}

inline bool UserInputCapability::encryptedIA5String_isSelected() const
{ 
    return currentSelection() == encryptedIA5String::id_; 
}

inline UserInputCapability::encryptedGeneralString::reference UserInputCapability::select_encryptedGeneralString ()
{
    return *static_cast<encryptedGeneralString::pointer>(setSelection(encryptedGeneralString::id_, ASN1::AbstractData::create( &encryptedGeneralString::value_type::theInfo)));
}

inline bool UserInputCapability::encryptedGeneralString_isSelected() const
{ 
    return currentSelection() == encryptedGeneralString::id_; 
}

inline UserInputCapability::secureDTMF::reference UserInputCapability::select_secureDTMF ()
{
    return *static_cast<secureDTMF::pointer>(setSelection(secureDTMF::id_, ASN1::AbstractData::create( &secureDTMF::value_type::theInfo)));
}

inline bool UserInputCapability::secureDTMF_isSelected() const
{ 
    return currentSelection() == secureDTMF::id_; 
}

inline UserInputCapability::genericUserInputCapability::const_reference UserInputCapability::get_genericUserInputCapability () const
{
    assert(currentSelection() ==genericUserInputCapability::id_);
    return *static_cast<genericUserInputCapability::const_pointer>(choice.get());
}

inline UserInputCapability::genericUserInputCapability::reference UserInputCapability::ref_genericUserInputCapability ()
{
    assert(currentSelection() ==genericUserInputCapability::id_);
    return *static_cast<genericUserInputCapability::pointer>(choice.get());
}

inline UserInputCapability::genericUserInputCapability::reference UserInputCapability::select_genericUserInputCapability ()
{
    return *static_cast<genericUserInputCapability::pointer>(setSelection(genericUserInputCapability::id_, ASN1::AbstractData::create( &genericUserInputCapability::value_type::theInfo)));
}

inline UserInputCapability::genericUserInputCapability::reference UserInputCapability::select_genericUserInputCapability (UserInputCapability::genericUserInputCapability::const_reference value)
{
    return select_genericUserInputCapability() = value;
}

inline bool UserInputCapability::genericUserInputCapability_isSelected() const
{ 
    return currentSelection() == genericUserInputCapability::id_; 
}

inline UserInputCapability::UserInputCapability(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline UserInputCapability::UserInputCapability(basicString::Id id, basicString::const_reference value)
  : Inherited(&theInfo, id, new basicString::value_type(value) )
{ }

inline UserInputCapability::UserInputCapability(iA5String::Id id, iA5String::const_reference value)
  : Inherited(&theInfo, id, new iA5String::value_type(value) )
{ }

inline UserInputCapability::UserInputCapability(generalString::Id id, generalString::const_reference value)
  : Inherited(&theInfo, id, new generalString::value_type(value) )
{ }

inline UserInputCapability::UserInputCapability(dtmf::Id id, dtmf::const_reference value)
  : Inherited(&theInfo, id, new dtmf::value_type(value) )
{ }

inline UserInputCapability::UserInputCapability(hookflash::Id id, hookflash::const_reference value)
  : Inherited(&theInfo, id, new hookflash::value_type(value) )
{ }

inline UserInputCapability::UserInputCapability(extendedAlphanumeric::Id id, extendedAlphanumeric::const_reference value)
  : Inherited(&theInfo, id, new extendedAlphanumeric::value_type(value) )
{ }

inline UserInputCapability::UserInputCapability(encryptedBasicString::Id id, encryptedBasicString::const_reference value)
  : Inherited(&theInfo, id, new encryptedBasicString::value_type(value) )
{ }

inline UserInputCapability::UserInputCapability(encryptedIA5String::Id id, encryptedIA5String::const_reference value)
  : Inherited(&theInfo, id, new encryptedIA5String::value_type(value) )
{ }

inline UserInputCapability::UserInputCapability(encryptedGeneralString::Id id, encryptedGeneralString::const_reference value)
  : Inherited(&theInfo, id, new encryptedGeneralString::value_type(value) )
{ }

inline UserInputCapability::UserInputCapability(secureDTMF::Id id, secureDTMF::const_reference value)
  : Inherited(&theInfo, id, new secureDTMF::value_type(value) )
{ }

inline UserInputCapability::UserInputCapability(genericUserInputCapability::Id id, genericUserInputCapability::const_reference value)
  : Inherited(&theInfo, id, new genericUserInputCapability::value_type(value) )
{ }


inline void UserInputCapability::swap(UserInputCapability & other)
{  Inherited::swap(other); }

inline UserInputCapability* UserInputCapability::clone() const
{ return static_cast<UserInputCapability*> (Inherited::clone()); }

inline bool UserInputCapability::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MultiplexedStreamCapability::multiplexFormat::const_reference MultiplexedStreamCapability::get_multiplexFormat () const
{ return *static_cast<multiplexFormat::const_pointer>(fields[0]);}

inline MultiplexedStreamCapability::multiplexFormat::reference MultiplexedStreamCapability::ref_multiplexFormat ()
{ return *static_cast<multiplexFormat::pointer>(fields[0]);}

inline MultiplexedStreamCapability::multiplexFormat::reference MultiplexedStreamCapability::set_multiplexFormat ()
{ return *static_cast<multiplexFormat::pointer>(fields[0]);}

inline MultiplexedStreamCapability::multiplexFormat::reference MultiplexedStreamCapability::set_multiplexFormat (multiplexFormat::const_reference value)
{ return *static_cast<multiplexFormat::pointer>(fields[0]) = value ;}

inline MultiplexedStreamCapability::controlOnMuxStream::const_reference MultiplexedStreamCapability::get_controlOnMuxStream () const
{ return *static_cast<controlOnMuxStream::const_pointer>(fields[1]);}

inline MultiplexedStreamCapability::controlOnMuxStream::reference MultiplexedStreamCapability::ref_controlOnMuxStream ()
{ return *static_cast<controlOnMuxStream::pointer>(fields[1]);}

inline MultiplexedStreamCapability::controlOnMuxStream::reference MultiplexedStreamCapability::set_controlOnMuxStream ()
{ return *static_cast<controlOnMuxStream::pointer>(fields[1]);}

inline MultiplexedStreamCapability::controlOnMuxStream::reference MultiplexedStreamCapability::set_controlOnMuxStream (bool value)
{ return *static_cast<controlOnMuxStream::pointer>(fields[1]) = value ;}

inline MultiplexedStreamCapability::capabilityOnMuxStream::const_reference MultiplexedStreamCapability::get_capabilityOnMuxStream () const
{
  assert(hasOptionalField(e_capabilityOnMuxStream));
  return *static_cast<capabilityOnMuxStream::const_pointer>(fields[2]);
}

inline MultiplexedStreamCapability::capabilityOnMuxStream::reference MultiplexedStreamCapability::ref_capabilityOnMuxStream ()
{
  assert(hasOptionalField(e_capabilityOnMuxStream));
  return *static_cast<capabilityOnMuxStream::pointer>(fields[2]);
}

inline MultiplexedStreamCapability::capabilityOnMuxStream::reference MultiplexedStreamCapability::set_capabilityOnMuxStream ()
{
  includeOptionalField( e_capabilityOnMuxStream, 2);
  return *static_cast<capabilityOnMuxStream::pointer>(fields[2]);
}

inline MultiplexedStreamCapability::capabilityOnMuxStream::reference MultiplexedStreamCapability::set_capabilityOnMuxStream (capabilityOnMuxStream::const_reference value)
{
  includeOptionalField( e_capabilityOnMuxStream, 2);
  return *static_cast<capabilityOnMuxStream::pointer>(fields[2]) = value;
}

inline void MultiplexedStreamCapability::omit_capabilityOnMuxStream ()
{ removeOptionalField( e_capabilityOnMuxStream); }

inline bool MultiplexedStreamCapability::capabilityOnMuxStream_isPresent () const
{ return hasOptionalField( e_capabilityOnMuxStream); }

inline void MultiplexedStreamCapability::swap(MultiplexedStreamCapability& other)
{ Inherited::swap(other); }

inline MultiplexedStreamCapability* MultiplexedStreamCapability::clone() const
{ return static_cast<MultiplexedStreamCapability*> (Inherited::clone()); }

inline H235Media::encryptionAuthenticationAndIntegrity::const_reference H235Media::get_encryptionAuthenticationAndIntegrity () const
{ return *static_cast<encryptionAuthenticationAndIntegrity::const_pointer>(fields[0]);}

inline H235Media::encryptionAuthenticationAndIntegrity::reference H235Media::ref_encryptionAuthenticationAndIntegrity ()
{ return *static_cast<encryptionAuthenticationAndIntegrity::pointer>(fields[0]);}

inline H235Media::encryptionAuthenticationAndIntegrity::reference H235Media::set_encryptionAuthenticationAndIntegrity ()
{ return *static_cast<encryptionAuthenticationAndIntegrity::pointer>(fields[0]);}

inline H235Media::encryptionAuthenticationAndIntegrity::reference H235Media::set_encryptionAuthenticationAndIntegrity (encryptionAuthenticationAndIntegrity::const_reference value)
{ return *static_cast<encryptionAuthenticationAndIntegrity::pointer>(fields[0]) = value ;}

inline void H235Media::swap(H235Media& other)
{ Inherited::swap(other); }

inline H235Media* H235Media::clone() const
{ return static_cast<H235Media*> (Inherited::clone()); }

inline RedundancyEncodingMode::redundancyEncodingMethod::const_reference RedundancyEncodingMode::get_redundancyEncodingMethod () const
{ return *static_cast<redundancyEncodingMethod::const_pointer>(fields[0]);}

inline RedundancyEncodingMode::redundancyEncodingMethod::reference RedundancyEncodingMode::ref_redundancyEncodingMethod ()
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]);}

inline RedundancyEncodingMode::redundancyEncodingMethod::reference RedundancyEncodingMode::set_redundancyEncodingMethod ()
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]);}

inline RedundancyEncodingMode::redundancyEncodingMethod::reference RedundancyEncodingMode::set_redundancyEncodingMethod (redundancyEncodingMethod::const_reference value)
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]) = value ;}

inline RedundancyEncodingMode::secondaryEncoding::const_reference RedundancyEncodingMode::get_secondaryEncoding () const
{
  assert(hasOptionalField(e_secondaryEncoding));
  return *static_cast<secondaryEncoding::const_pointer>(fields[1]);
}

inline RedundancyEncodingMode::secondaryEncoding::reference RedundancyEncodingMode::ref_secondaryEncoding ()
{
  assert(hasOptionalField(e_secondaryEncoding));
  return *static_cast<secondaryEncoding::pointer>(fields[1]);
}

inline RedundancyEncodingMode::secondaryEncoding::reference RedundancyEncodingMode::set_secondaryEncoding ()
{
  includeOptionalField( e_secondaryEncoding, 1);
  return *static_cast<secondaryEncoding::pointer>(fields[1]);
}

inline RedundancyEncodingMode::secondaryEncoding::reference RedundancyEncodingMode::set_secondaryEncoding (secondaryEncoding::const_reference value)
{
  includeOptionalField( e_secondaryEncoding, 1);
  return *static_cast<secondaryEncoding::pointer>(fields[1]) = value;
}

inline void RedundancyEncodingMode::omit_secondaryEncoding ()
{ removeOptionalField( e_secondaryEncoding); }

inline bool RedundancyEncodingMode::secondaryEncoding_isPresent () const
{ return hasOptionalField( e_secondaryEncoding); }

inline void RedundancyEncodingMode::swap(RedundancyEncodingMode& other)
{ Inherited::swap(other); }

inline RedundancyEncodingMode* RedundancyEncodingMode::clone() const
{ return static_cast<RedundancyEncodingMode*> (Inherited::clone()); }

inline DataMode::application::const_reference DataMode::get_application () const
{ return *static_cast<application::const_pointer>(fields[0]);}

inline DataMode::application::reference DataMode::ref_application ()
{ return *static_cast<application::pointer>(fields[0]);}

inline DataMode::application::reference DataMode::set_application ()
{ return *static_cast<application::pointer>(fields[0]);}

inline DataMode::application::reference DataMode::set_application (application::const_reference value)
{ return *static_cast<application::pointer>(fields[0]) = value ;}

inline DataMode::bitRate::const_reference DataMode::get_bitRate () const
{ return *static_cast<bitRate::const_pointer>(fields[1]);}

inline DataMode::bitRate::reference DataMode::ref_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[1]);}

inline DataMode::bitRate::reference DataMode::set_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[1]);}

inline DataMode::bitRate::reference DataMode::set_bitRate (bitRate::value_type::int_type value)
{ return *static_cast<bitRate::pointer>(fields[1]) = value ;}

inline void DataMode::swap(DataMode& other)
{ Inherited::swap(other); }

inline DataMode* DataMode::clone() const
{ return static_cast<DataMode*> (Inherited::clone()); }

inline DialingInformation::nonStandard::const_reference DialingInformation::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline DialingInformation::nonStandard::reference DialingInformation::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline DialingInformation::nonStandard::reference DialingInformation::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline DialingInformation::nonStandard::reference DialingInformation::select_nonStandard (DialingInformation::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool DialingInformation::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline DialingInformation::differential::const_reference DialingInformation::get_differential () const
{
    assert(currentSelection() ==differential::id_);
    return *static_cast<differential::const_pointer>(choice.get());
}

inline DialingInformation::differential::reference DialingInformation::ref_differential ()
{
    assert(currentSelection() ==differential::id_);
    return *static_cast<differential::pointer>(choice.get());
}

inline DialingInformation::differential::reference DialingInformation::select_differential ()
{
    return *static_cast<differential::pointer>(setSelection(differential::id_, ASN1::AbstractData::create( &differential::value_type::theInfo)));
}

inline DialingInformation::differential::reference DialingInformation::select_differential (DialingInformation::differential::const_reference value)
{
    return select_differential() = value;
}

inline bool DialingInformation::differential_isSelected() const
{ 
    return currentSelection() == differential::id_; 
}

inline DialingInformation::infoNotAvailable::const_reference DialingInformation::get_infoNotAvailable () const
{
    assert(currentSelection() ==infoNotAvailable::id_);
    return *static_cast<infoNotAvailable::const_pointer>(choice.get());
}

inline DialingInformation::infoNotAvailable::reference DialingInformation::ref_infoNotAvailable ()
{
    assert(currentSelection() ==infoNotAvailable::id_);
    return *static_cast<infoNotAvailable::pointer>(choice.get());
}

inline DialingInformation::infoNotAvailable::reference DialingInformation::select_infoNotAvailable ()
{
    return *static_cast<infoNotAvailable::pointer>(setSelection(infoNotAvailable::id_, ASN1::AbstractData::create( &infoNotAvailable::value_type::theInfo)));
}

inline DialingInformation::infoNotAvailable::reference DialingInformation::select_infoNotAvailable (DialingInformation::infoNotAvailable::value_type::int_type value)
{
    return select_infoNotAvailable() = value;
}

inline bool DialingInformation::infoNotAvailable_isSelected() const
{ 
    return currentSelection() == infoNotAvailable::id_; 
}

inline DialingInformation::DialingInformation(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline DialingInformation::DialingInformation(differential::Id id, differential::const_reference value)
  : Inherited(&theInfo, id, new differential::value_type(value) )
{ }

inline DialingInformation::DialingInformation(infoNotAvailable::Id id, infoNotAvailable::value_type::int_type value)
  : Inherited(&theInfo, id, new infoNotAvailable::value_type(value) )
{ }


inline void DialingInformation::swap(DialingInformation & other)
{  Inherited::swap(other); }

inline DialingInformation* DialingInformation::clone() const
{ return static_cast<DialingInformation*> (Inherited::clone()); }

inline bool DialingInformation::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MiscellaneousCommand::logicalChannelNumber::const_reference MiscellaneousCommand::get_logicalChannelNumber () const
{ return *static_cast<logicalChannelNumber::const_pointer>(fields[0]);}

inline MiscellaneousCommand::logicalChannelNumber::reference MiscellaneousCommand::ref_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]);}

inline MiscellaneousCommand::logicalChannelNumber::reference MiscellaneousCommand::set_logicalChannelNumber ()
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]);}

inline MiscellaneousCommand::logicalChannelNumber::reference MiscellaneousCommand::set_logicalChannelNumber (logicalChannelNumber::value_type::int_type value)
{ return *static_cast<logicalChannelNumber::pointer>(fields[0]) = value ;}

inline MiscellaneousCommand::type::const_reference MiscellaneousCommand::get_type () const
{ return *static_cast<type::const_pointer>(fields[1]);}

inline MiscellaneousCommand::type::reference MiscellaneousCommand::ref_type ()
{ return *static_cast<type::pointer>(fields[1]);}

inline MiscellaneousCommand::type::reference MiscellaneousCommand::set_type ()
{ return *static_cast<type::pointer>(fields[1]);}

inline MiscellaneousCommand::type::reference MiscellaneousCommand::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[1]) = value ;}

inline MiscellaneousCommand::direction::const_reference MiscellaneousCommand::get_direction () const
{
  assert(hasOptionalField(e_direction));
  return *static_cast<direction::const_pointer>(fields[2]);
}

inline MiscellaneousCommand::direction::reference MiscellaneousCommand::ref_direction ()
{
  assert(hasOptionalField(e_direction));
  return *static_cast<direction::pointer>(fields[2]);
}

inline MiscellaneousCommand::direction::reference MiscellaneousCommand::set_direction ()
{
  includeOptionalField( e_direction, 2);
  return *static_cast<direction::pointer>(fields[2]);
}

inline MiscellaneousCommand::direction::reference MiscellaneousCommand::set_direction (direction::const_reference value)
{
  includeOptionalField( e_direction, 2);
  return *static_cast<direction::pointer>(fields[2]) = value;
}

inline void MiscellaneousCommand::omit_direction ()
{ removeOptionalField( e_direction); }

inline bool MiscellaneousCommand::direction_isPresent () const
{ return hasOptionalField( e_direction); }

inline void MiscellaneousCommand::swap(MiscellaneousCommand& other)
{ Inherited::swap(other); }

inline MiscellaneousCommand* MiscellaneousCommand::clone() const
{ return static_cast<MiscellaneousCommand*> (Inherited::clone()); }

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::reverseLogicalChannelNumber::const_reference OpenLogicalChannelAck_reverseLogicalChannelParameters::get_reverseLogicalChannelNumber () const
{ return *static_cast<reverseLogicalChannelNumber::const_pointer>(fields[0]);}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::reverseLogicalChannelNumber::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::ref_reverseLogicalChannelNumber ()
{ return *static_cast<reverseLogicalChannelNumber::pointer>(fields[0]);}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::reverseLogicalChannelNumber::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::set_reverseLogicalChannelNumber ()
{ return *static_cast<reverseLogicalChannelNumber::pointer>(fields[0]);}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::reverseLogicalChannelNumber::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::set_reverseLogicalChannelNumber (reverseLogicalChannelNumber::value_type::int_type value)
{ return *static_cast<reverseLogicalChannelNumber::pointer>(fields[0]) = value ;}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::portNumber::const_reference OpenLogicalChannelAck_reverseLogicalChannelParameters::get_portNumber () const
{
  assert(hasOptionalField(e_portNumber));
  return *static_cast<portNumber::const_pointer>(fields[1]);
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::portNumber::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::ref_portNumber ()
{
  assert(hasOptionalField(e_portNumber));
  return *static_cast<portNumber::pointer>(fields[1]);
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::portNumber::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::set_portNumber ()
{
  includeOptionalField( e_portNumber, 1);
  return *static_cast<portNumber::pointer>(fields[1]);
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::portNumber::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::set_portNumber (portNumber::value_type::int_type value)
{
  includeOptionalField( e_portNumber, 1);
  return *static_cast<portNumber::pointer>(fields[1]) = value;
}

inline void OpenLogicalChannelAck_reverseLogicalChannelParameters::omit_portNumber ()
{ removeOptionalField( e_portNumber); }

inline bool OpenLogicalChannelAck_reverseLogicalChannelParameters::portNumber_isPresent () const
{ return hasOptionalField( e_portNumber); }

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::multiplexParameters::const_reference OpenLogicalChannelAck_reverseLogicalChannelParameters::get_multiplexParameters () const
{
  assert(hasOptionalField(e_multiplexParameters));
  return *static_cast<multiplexParameters::const_pointer>(fields[2]);
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::multiplexParameters::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::ref_multiplexParameters ()
{
  assert(hasOptionalField(e_multiplexParameters));
  return *static_cast<multiplexParameters::pointer>(fields[2]);
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::multiplexParameters::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::set_multiplexParameters ()
{
  includeOptionalField( e_multiplexParameters, 2);
  return *static_cast<multiplexParameters::pointer>(fields[2]);
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::multiplexParameters::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::set_multiplexParameters (multiplexParameters::const_reference value)
{
  includeOptionalField( e_multiplexParameters, 2);
  return *static_cast<multiplexParameters::pointer>(fields[2]) = value;
}

inline void OpenLogicalChannelAck_reverseLogicalChannelParameters::omit_multiplexParameters ()
{ removeOptionalField( e_multiplexParameters); }

inline bool OpenLogicalChannelAck_reverseLogicalChannelParameters::multiplexParameters_isPresent () const
{ return hasOptionalField( e_multiplexParameters); }

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::replacementFor::const_reference OpenLogicalChannelAck_reverseLogicalChannelParameters::get_replacementFor () const
{
  assert(hasOptionalField(e_replacementFor));
  return *static_cast<replacementFor::const_pointer>(fields[3]);
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::replacementFor::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::ref_replacementFor ()
{
  assert(hasOptionalField(e_replacementFor));
  return *static_cast<replacementFor::pointer>(fields[3]);
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::replacementFor::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::set_replacementFor ()
{
  includeOptionalField( e_replacementFor, 3);
  return *static_cast<replacementFor::pointer>(fields[3]);
}

inline OpenLogicalChannelAck_reverseLogicalChannelParameters::replacementFor::reference OpenLogicalChannelAck_reverseLogicalChannelParameters::set_replacementFor (replacementFor::value_type::int_type value)
{
  includeOptionalField( e_replacementFor, 3);
  return *static_cast<replacementFor::pointer>(fields[3]) = value;
}

inline void OpenLogicalChannelAck_reverseLogicalChannelParameters::omit_replacementFor ()
{ removeOptionalField( e_replacementFor); }

inline bool OpenLogicalChannelAck_reverseLogicalChannelParameters::replacementFor_isPresent () const
{ return hasOptionalField( e_replacementFor); }

inline void OpenLogicalChannelAck_reverseLogicalChannelParameters::swap(OpenLogicalChannelAck_reverseLogicalChannelParameters& other)
{ Inherited::swap(other); }

inline OpenLogicalChannelAck_reverseLogicalChannelParameters* OpenLogicalChannelAck_reverseLogicalChannelParameters::clone() const
{ return static_cast<OpenLogicalChannelAck_reverseLogicalChannelParameters*> (Inherited::clone()); }

inline MultilinkRequest_addConnection::sequenceNumber::const_reference MultilinkRequest_addConnection::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline MultilinkRequest_addConnection::sequenceNumber::reference MultilinkRequest_addConnection::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline MultilinkRequest_addConnection::sequenceNumber::reference MultilinkRequest_addConnection::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline MultilinkRequest_addConnection::sequenceNumber::reference MultilinkRequest_addConnection::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline MultilinkRequest_addConnection::dialingInformation::const_reference MultilinkRequest_addConnection::get_dialingInformation () const
{ return *static_cast<dialingInformation::const_pointer>(fields[1]);}

inline MultilinkRequest_addConnection::dialingInformation::reference MultilinkRequest_addConnection::ref_dialingInformation ()
{ return *static_cast<dialingInformation::pointer>(fields[1]);}

inline MultilinkRequest_addConnection::dialingInformation::reference MultilinkRequest_addConnection::set_dialingInformation ()
{ return *static_cast<dialingInformation::pointer>(fields[1]);}

inline MultilinkRequest_addConnection::dialingInformation::reference MultilinkRequest_addConnection::set_dialingInformation (dialingInformation::const_reference value)
{ return *static_cast<dialingInformation::pointer>(fields[1]) = value ;}

inline void MultilinkRequest_addConnection::swap(MultilinkRequest_addConnection& other)
{ Inherited::swap(other); }

inline MultilinkRequest_addConnection* MultilinkRequest_addConnection::clone() const
{ return static_cast<MultilinkRequest_addConnection*> (Inherited::clone()); }

inline MultilinkResponse_callInformation::dialingInformation::const_reference MultilinkResponse_callInformation::get_dialingInformation () const
{ return *static_cast<dialingInformation::const_pointer>(fields[0]);}

inline MultilinkResponse_callInformation::dialingInformation::reference MultilinkResponse_callInformation::ref_dialingInformation ()
{ return *static_cast<dialingInformation::pointer>(fields[0]);}

inline MultilinkResponse_callInformation::dialingInformation::reference MultilinkResponse_callInformation::set_dialingInformation ()
{ return *static_cast<dialingInformation::pointer>(fields[0]);}

inline MultilinkResponse_callInformation::dialingInformation::reference MultilinkResponse_callInformation::set_dialingInformation (dialingInformation::const_reference value)
{ return *static_cast<dialingInformation::pointer>(fields[0]) = value ;}

inline MultilinkResponse_callInformation::callAssociationNumber::const_reference MultilinkResponse_callInformation::get_callAssociationNumber () const
{ return *static_cast<callAssociationNumber::const_pointer>(fields[1]);}

inline MultilinkResponse_callInformation::callAssociationNumber::reference MultilinkResponse_callInformation::ref_callAssociationNumber ()
{ return *static_cast<callAssociationNumber::pointer>(fields[1]);}

inline MultilinkResponse_callInformation::callAssociationNumber::reference MultilinkResponse_callInformation::set_callAssociationNumber ()
{ return *static_cast<callAssociationNumber::pointer>(fields[1]);}

inline MultilinkResponse_callInformation::callAssociationNumber::reference MultilinkResponse_callInformation::set_callAssociationNumber (callAssociationNumber::value_type::int_type value)
{ return *static_cast<callAssociationNumber::pointer>(fields[1]) = value ;}

inline void MultilinkResponse_callInformation::swap(MultilinkResponse_callInformation& other)
{ Inherited::swap(other); }

inline MultilinkResponse_callInformation* MultilinkResponse_callInformation::clone() const
{ return static_cast<MultilinkResponse_callInformation*> (Inherited::clone()); }

inline H235SecurityCapability::encryptionAuthenticationAndIntegrity::const_reference H235SecurityCapability::get_encryptionAuthenticationAndIntegrity () const
{ return *static_cast<encryptionAuthenticationAndIntegrity::const_pointer>(fields[0]);}

inline H235SecurityCapability::encryptionAuthenticationAndIntegrity::reference H235SecurityCapability::ref_encryptionAuthenticationAndIntegrity ()
{ return *static_cast<encryptionAuthenticationAndIntegrity::pointer>(fields[0]);}

inline H235SecurityCapability::encryptionAuthenticationAndIntegrity::reference H235SecurityCapability::set_encryptionAuthenticationAndIntegrity ()
{ return *static_cast<encryptionAuthenticationAndIntegrity::pointer>(fields[0]);}

inline H235SecurityCapability::encryptionAuthenticationAndIntegrity::reference H235SecurityCapability::set_encryptionAuthenticationAndIntegrity (encryptionAuthenticationAndIntegrity::const_reference value)
{ return *static_cast<encryptionAuthenticationAndIntegrity::pointer>(fields[0]) = value ;}

inline H235SecurityCapability::mediaCapability::const_reference H235SecurityCapability::get_mediaCapability () const
{ return *static_cast<mediaCapability::const_pointer>(fields[1]);}

inline H235SecurityCapability::mediaCapability::reference H235SecurityCapability::ref_mediaCapability ()
{ return *static_cast<mediaCapability::pointer>(fields[1]);}

inline H235SecurityCapability::mediaCapability::reference H235SecurityCapability::set_mediaCapability ()
{ return *static_cast<mediaCapability::pointer>(fields[1]);}

inline H235SecurityCapability::mediaCapability::reference H235SecurityCapability::set_mediaCapability (mediaCapability::value_type::int_type value)
{ return *static_cast<mediaCapability::pointer>(fields[1]) = value ;}

inline void H235SecurityCapability::swap(H235SecurityCapability& other)
{ Inherited::swap(other); }

inline H235SecurityCapability* H235SecurityCapability::clone() const
{ return static_cast<H235SecurityCapability*> (Inherited::clone()); }

inline MediaDistributionCapability::centralizedControl::const_reference MediaDistributionCapability::get_centralizedControl () const
{ return *static_cast<centralizedControl::const_pointer>(fields[0]);}

inline MediaDistributionCapability::centralizedControl::reference MediaDistributionCapability::ref_centralizedControl ()
{ return *static_cast<centralizedControl::pointer>(fields[0]);}

inline MediaDistributionCapability::centralizedControl::reference MediaDistributionCapability::set_centralizedControl ()
{ return *static_cast<centralizedControl::pointer>(fields[0]);}

inline MediaDistributionCapability::centralizedControl::reference MediaDistributionCapability::set_centralizedControl (bool value)
{ return *static_cast<centralizedControl::pointer>(fields[0]) = value ;}

inline MediaDistributionCapability::distributedControl::const_reference MediaDistributionCapability::get_distributedControl () const
{ return *static_cast<distributedControl::const_pointer>(fields[1]);}

inline MediaDistributionCapability::distributedControl::reference MediaDistributionCapability::ref_distributedControl ()
{ return *static_cast<distributedControl::pointer>(fields[1]);}

inline MediaDistributionCapability::distributedControl::reference MediaDistributionCapability::set_distributedControl ()
{ return *static_cast<distributedControl::pointer>(fields[1]);}

inline MediaDistributionCapability::distributedControl::reference MediaDistributionCapability::set_distributedControl (bool value)
{ return *static_cast<distributedControl::pointer>(fields[1]) = value ;}

inline MediaDistributionCapability::centralizedAudio::const_reference MediaDistributionCapability::get_centralizedAudio () const
{ return *static_cast<centralizedAudio::const_pointer>(fields[2]);}

inline MediaDistributionCapability::centralizedAudio::reference MediaDistributionCapability::ref_centralizedAudio ()
{ return *static_cast<centralizedAudio::pointer>(fields[2]);}

inline MediaDistributionCapability::centralizedAudio::reference MediaDistributionCapability::set_centralizedAudio ()
{ return *static_cast<centralizedAudio::pointer>(fields[2]);}

inline MediaDistributionCapability::centralizedAudio::reference MediaDistributionCapability::set_centralizedAudio (bool value)
{ return *static_cast<centralizedAudio::pointer>(fields[2]) = value ;}

inline MediaDistributionCapability::distributedAudio::const_reference MediaDistributionCapability::get_distributedAudio () const
{ return *static_cast<distributedAudio::const_pointer>(fields[3]);}

inline MediaDistributionCapability::distributedAudio::reference MediaDistributionCapability::ref_distributedAudio ()
{ return *static_cast<distributedAudio::pointer>(fields[3]);}

inline MediaDistributionCapability::distributedAudio::reference MediaDistributionCapability::set_distributedAudio ()
{ return *static_cast<distributedAudio::pointer>(fields[3]);}

inline MediaDistributionCapability::distributedAudio::reference MediaDistributionCapability::set_distributedAudio (bool value)
{ return *static_cast<distributedAudio::pointer>(fields[3]) = value ;}

inline MediaDistributionCapability::centralizedVideo::const_reference MediaDistributionCapability::get_centralizedVideo () const
{ return *static_cast<centralizedVideo::const_pointer>(fields[4]);}

inline MediaDistributionCapability::centralizedVideo::reference MediaDistributionCapability::ref_centralizedVideo ()
{ return *static_cast<centralizedVideo::pointer>(fields[4]);}

inline MediaDistributionCapability::centralizedVideo::reference MediaDistributionCapability::set_centralizedVideo ()
{ return *static_cast<centralizedVideo::pointer>(fields[4]);}

inline MediaDistributionCapability::centralizedVideo::reference MediaDistributionCapability::set_centralizedVideo (bool value)
{ return *static_cast<centralizedVideo::pointer>(fields[4]) = value ;}

inline MediaDistributionCapability::distributedVideo::const_reference MediaDistributionCapability::get_distributedVideo () const
{ return *static_cast<distributedVideo::const_pointer>(fields[5]);}

inline MediaDistributionCapability::distributedVideo::reference MediaDistributionCapability::ref_distributedVideo ()
{ return *static_cast<distributedVideo::pointer>(fields[5]);}

inline MediaDistributionCapability::distributedVideo::reference MediaDistributionCapability::set_distributedVideo ()
{ return *static_cast<distributedVideo::pointer>(fields[5]);}

inline MediaDistributionCapability::distributedVideo::reference MediaDistributionCapability::set_distributedVideo (bool value)
{ return *static_cast<distributedVideo::pointer>(fields[5]) = value ;}

inline MediaDistributionCapability::centralizedData::const_reference MediaDistributionCapability::get_centralizedData () const
{
  assert(hasOptionalField(e_centralizedData));
  return *static_cast<centralizedData::const_pointer>(fields[6]);
}

inline MediaDistributionCapability::centralizedData::reference MediaDistributionCapability::ref_centralizedData ()
{
  assert(hasOptionalField(e_centralizedData));
  return *static_cast<centralizedData::pointer>(fields[6]);
}

inline MediaDistributionCapability::centralizedData::reference MediaDistributionCapability::set_centralizedData ()
{
  includeOptionalField( e_centralizedData, 6);
  return *static_cast<centralizedData::pointer>(fields[6]);
}

inline MediaDistributionCapability::centralizedData::reference MediaDistributionCapability::set_centralizedData (centralizedData::const_reference value)
{
  includeOptionalField( e_centralizedData, 6);
  return *static_cast<centralizedData::pointer>(fields[6]) = value;
}

inline void MediaDistributionCapability::omit_centralizedData ()
{ removeOptionalField( e_centralizedData); }

inline bool MediaDistributionCapability::centralizedData_isPresent () const
{ return hasOptionalField( e_centralizedData); }

inline MediaDistributionCapability::distributedData::const_reference MediaDistributionCapability::get_distributedData () const
{
  assert(hasOptionalField(e_distributedData));
  return *static_cast<distributedData::const_pointer>(fields[7]);
}

inline MediaDistributionCapability::distributedData::reference MediaDistributionCapability::ref_distributedData ()
{
  assert(hasOptionalField(e_distributedData));
  return *static_cast<distributedData::pointer>(fields[7]);
}

inline MediaDistributionCapability::distributedData::reference MediaDistributionCapability::set_distributedData ()
{
  includeOptionalField( e_distributedData, 7);
  return *static_cast<distributedData::pointer>(fields[7]);
}

inline MediaDistributionCapability::distributedData::reference MediaDistributionCapability::set_distributedData (distributedData::const_reference value)
{
  includeOptionalField( e_distributedData, 7);
  return *static_cast<distributedData::pointer>(fields[7]) = value;
}

inline void MediaDistributionCapability::omit_distributedData ()
{ removeOptionalField( e_distributedData); }

inline bool MediaDistributionCapability::distributedData_isPresent () const
{ return hasOptionalField( e_distributedData); }

inline void MediaDistributionCapability::swap(MediaDistributionCapability& other)
{ Inherited::swap(other); }

inline MediaDistributionCapability* MediaDistributionCapability::clone() const
{ return static_cast<MediaDistributionCapability*> (Inherited::clone()); }

inline BEnhancementParameters::enhancementOptions::const_reference BEnhancementParameters::get_enhancementOptions () const
{ return *static_cast<enhancementOptions::const_pointer>(fields[0]);}

inline BEnhancementParameters::enhancementOptions::reference BEnhancementParameters::ref_enhancementOptions ()
{ return *static_cast<enhancementOptions::pointer>(fields[0]);}

inline BEnhancementParameters::enhancementOptions::reference BEnhancementParameters::set_enhancementOptions ()
{ return *static_cast<enhancementOptions::pointer>(fields[0]);}

inline BEnhancementParameters::enhancementOptions::reference BEnhancementParameters::set_enhancementOptions (enhancementOptions::const_reference value)
{ return *static_cast<enhancementOptions::pointer>(fields[0]) = value ;}

inline BEnhancementParameters::numberOfBPictures::const_reference BEnhancementParameters::get_numberOfBPictures () const
{ return *static_cast<numberOfBPictures::const_pointer>(fields[1]);}

inline BEnhancementParameters::numberOfBPictures::reference BEnhancementParameters::ref_numberOfBPictures ()
{ return *static_cast<numberOfBPictures::pointer>(fields[1]);}

inline BEnhancementParameters::numberOfBPictures::reference BEnhancementParameters::set_numberOfBPictures ()
{ return *static_cast<numberOfBPictures::pointer>(fields[1]);}

inline BEnhancementParameters::numberOfBPictures::reference BEnhancementParameters::set_numberOfBPictures (numberOfBPictures::value_type::int_type value)
{ return *static_cast<numberOfBPictures::pointer>(fields[1]) = value ;}

inline void BEnhancementParameters::swap(BEnhancementParameters& other)
{ Inherited::swap(other); }

inline BEnhancementParameters* BEnhancementParameters::clone() const
{ return static_cast<BEnhancementParameters*> (Inherited::clone()); }

inline OpenLogicalChannelAck::forwardLogicalChannelNumber::const_reference OpenLogicalChannelAck::get_forwardLogicalChannelNumber () const
{ return *static_cast<forwardLogicalChannelNumber::const_pointer>(fields[0]);}

inline OpenLogicalChannelAck::forwardLogicalChannelNumber::reference OpenLogicalChannelAck::ref_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline OpenLogicalChannelAck::forwardLogicalChannelNumber::reference OpenLogicalChannelAck::set_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline OpenLogicalChannelAck::forwardLogicalChannelNumber::reference OpenLogicalChannelAck::set_forwardLogicalChannelNumber (forwardLogicalChannelNumber::value_type::int_type value)
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]) = value ;}

inline OpenLogicalChannelAck::reverseLogicalChannelParameters::const_reference OpenLogicalChannelAck::get_reverseLogicalChannelParameters () const
{
  assert(hasOptionalField(e_reverseLogicalChannelParameters));
  return *static_cast<reverseLogicalChannelParameters::const_pointer>(fields[1]);
}

inline OpenLogicalChannelAck::reverseLogicalChannelParameters::reference OpenLogicalChannelAck::ref_reverseLogicalChannelParameters ()
{
  assert(hasOptionalField(e_reverseLogicalChannelParameters));
  return *static_cast<reverseLogicalChannelParameters::pointer>(fields[1]);
}

inline OpenLogicalChannelAck::reverseLogicalChannelParameters::reference OpenLogicalChannelAck::set_reverseLogicalChannelParameters ()
{
  includeOptionalField( e_reverseLogicalChannelParameters, 1);
  return *static_cast<reverseLogicalChannelParameters::pointer>(fields[1]);
}

inline OpenLogicalChannelAck::reverseLogicalChannelParameters::reference OpenLogicalChannelAck::set_reverseLogicalChannelParameters (reverseLogicalChannelParameters::const_reference value)
{
  includeOptionalField( e_reverseLogicalChannelParameters, 1);
  return *static_cast<reverseLogicalChannelParameters::pointer>(fields[1]) = value;
}

inline void OpenLogicalChannelAck::omit_reverseLogicalChannelParameters ()
{ removeOptionalField( e_reverseLogicalChannelParameters); }

inline bool OpenLogicalChannelAck::reverseLogicalChannelParameters_isPresent () const
{ return hasOptionalField( e_reverseLogicalChannelParameters); }

inline OpenLogicalChannelAck::separateStack::const_reference OpenLogicalChannelAck::get_separateStack () const
{
  assert(hasOptionalField(e_separateStack));
  return *static_cast<separateStack::const_pointer>(fields[2]);
}

inline OpenLogicalChannelAck::separateStack::reference OpenLogicalChannelAck::ref_separateStack ()
{
  assert(hasOptionalField(e_separateStack));
  return *static_cast<separateStack::pointer>(fields[2]);
}

inline OpenLogicalChannelAck::separateStack::reference OpenLogicalChannelAck::set_separateStack ()
{
  includeOptionalField( e_separateStack, 2);
  return *static_cast<separateStack::pointer>(fields[2]);
}

inline OpenLogicalChannelAck::separateStack::reference OpenLogicalChannelAck::set_separateStack (separateStack::const_reference value)
{
  includeOptionalField( e_separateStack, 2);
  return *static_cast<separateStack::pointer>(fields[2]) = value;
}

inline void OpenLogicalChannelAck::omit_separateStack ()
{ removeOptionalField( e_separateStack); }

inline bool OpenLogicalChannelAck::separateStack_isPresent () const
{ return hasOptionalField( e_separateStack); }

inline OpenLogicalChannelAck::forwardMultiplexAckParameters::const_reference OpenLogicalChannelAck::get_forwardMultiplexAckParameters () const
{
  assert(hasOptionalField(e_forwardMultiplexAckParameters));
  return *static_cast<forwardMultiplexAckParameters::const_pointer>(fields[3]);
}

inline OpenLogicalChannelAck::forwardMultiplexAckParameters::reference OpenLogicalChannelAck::ref_forwardMultiplexAckParameters ()
{
  assert(hasOptionalField(e_forwardMultiplexAckParameters));
  return *static_cast<forwardMultiplexAckParameters::pointer>(fields[3]);
}

inline OpenLogicalChannelAck::forwardMultiplexAckParameters::reference OpenLogicalChannelAck::set_forwardMultiplexAckParameters ()
{
  includeOptionalField( e_forwardMultiplexAckParameters, 3);
  return *static_cast<forwardMultiplexAckParameters::pointer>(fields[3]);
}

inline OpenLogicalChannelAck::forwardMultiplexAckParameters::reference OpenLogicalChannelAck::set_forwardMultiplexAckParameters (forwardMultiplexAckParameters::const_reference value)
{
  includeOptionalField( e_forwardMultiplexAckParameters, 3);
  return *static_cast<forwardMultiplexAckParameters::pointer>(fields[3]) = value;
}

inline void OpenLogicalChannelAck::omit_forwardMultiplexAckParameters ()
{ removeOptionalField( e_forwardMultiplexAckParameters); }

inline bool OpenLogicalChannelAck::forwardMultiplexAckParameters_isPresent () const
{ return hasOptionalField( e_forwardMultiplexAckParameters); }

inline OpenLogicalChannelAck::encryptionSync::const_reference OpenLogicalChannelAck::get_encryptionSync () const
{
  assert(hasOptionalField(e_encryptionSync));
  return *static_cast<encryptionSync::const_pointer>(fields[4]);
}

inline OpenLogicalChannelAck::encryptionSync::reference OpenLogicalChannelAck::ref_encryptionSync ()
{
  assert(hasOptionalField(e_encryptionSync));
  return *static_cast<encryptionSync::pointer>(fields[4]);
}

inline OpenLogicalChannelAck::encryptionSync::reference OpenLogicalChannelAck::set_encryptionSync ()
{
  includeOptionalField( e_encryptionSync, 4);
  return *static_cast<encryptionSync::pointer>(fields[4]);
}

inline OpenLogicalChannelAck::encryptionSync::reference OpenLogicalChannelAck::set_encryptionSync (encryptionSync::const_reference value)
{
  includeOptionalField( e_encryptionSync, 4);
  return *static_cast<encryptionSync::pointer>(fields[4]) = value;
}

inline void OpenLogicalChannelAck::omit_encryptionSync ()
{ removeOptionalField( e_encryptionSync); }

inline bool OpenLogicalChannelAck::encryptionSync_isPresent () const
{ return hasOptionalField( e_encryptionSync); }

inline OpenLogicalChannelAck::genericInformation::const_reference OpenLogicalChannelAck::get_genericInformation () const
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::const_pointer>(fields[5]);
}

inline OpenLogicalChannelAck::genericInformation::reference OpenLogicalChannelAck::ref_genericInformation ()
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::pointer>(fields[5]);
}

inline OpenLogicalChannelAck::genericInformation::reference OpenLogicalChannelAck::set_genericInformation ()
{
  includeOptionalField( e_genericInformation, 5);
  return *static_cast<genericInformation::pointer>(fields[5]);
}

inline OpenLogicalChannelAck::genericInformation::reference OpenLogicalChannelAck::set_genericInformation (genericInformation::const_reference value)
{
  includeOptionalField( e_genericInformation, 5);
  return *static_cast<genericInformation::pointer>(fields[5]) = value;
}

inline void OpenLogicalChannelAck::omit_genericInformation ()
{ removeOptionalField( e_genericInformation); }

inline bool OpenLogicalChannelAck::genericInformation_isPresent () const
{ return hasOptionalField( e_genericInformation); }

inline void OpenLogicalChannelAck::swap(OpenLogicalChannelAck& other)
{ Inherited::swap(other); }

inline OpenLogicalChannelAck* OpenLogicalChannelAck::clone() const
{ return static_cast<OpenLogicalChannelAck*> (Inherited::clone()); }

inline H2250ModeParameters::redundancyEncodingMode::const_reference H2250ModeParameters::get_redundancyEncodingMode () const
{
  assert(hasOptionalField(e_redundancyEncodingMode));
  return *static_cast<redundancyEncodingMode::const_pointer>(fields[0]);
}

inline H2250ModeParameters::redundancyEncodingMode::reference H2250ModeParameters::ref_redundancyEncodingMode ()
{
  assert(hasOptionalField(e_redundancyEncodingMode));
  return *static_cast<redundancyEncodingMode::pointer>(fields[0]);
}

inline H2250ModeParameters::redundancyEncodingMode::reference H2250ModeParameters::set_redundancyEncodingMode ()
{
  includeOptionalField( e_redundancyEncodingMode, 0);
  return *static_cast<redundancyEncodingMode::pointer>(fields[0]);
}

inline H2250ModeParameters::redundancyEncodingMode::reference H2250ModeParameters::set_redundancyEncodingMode (redundancyEncodingMode::const_reference value)
{
  includeOptionalField( e_redundancyEncodingMode, 0);
  return *static_cast<redundancyEncodingMode::pointer>(fields[0]) = value;
}

inline void H2250ModeParameters::omit_redundancyEncodingMode ()
{ removeOptionalField( e_redundancyEncodingMode); }

inline bool H2250ModeParameters::redundancyEncodingMode_isPresent () const
{ return hasOptionalField( e_redundancyEncodingMode); }

inline void H2250ModeParameters::swap(H2250ModeParameters& other)
{ Inherited::swap(other); }

inline H2250ModeParameters* H2250ModeParameters::clone() const
{ return static_cast<H2250ModeParameters*> (Inherited::clone()); }

inline MultilinkRequest::nonStandard::const_reference MultilinkRequest::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline MultilinkRequest::nonStandard::reference MultilinkRequest::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline MultilinkRequest::nonStandard::reference MultilinkRequest::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline MultilinkRequest::nonStandard::reference MultilinkRequest::select_nonStandard (MultilinkRequest::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool MultilinkRequest::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline MultilinkRequest::callInformation::const_reference MultilinkRequest::get_callInformation () const
{
    assert(currentSelection() ==callInformation::id_);
    return *static_cast<callInformation::const_pointer>(choice.get());
}

inline MultilinkRequest::callInformation::reference MultilinkRequest::ref_callInformation ()
{
    assert(currentSelection() ==callInformation::id_);
    return *static_cast<callInformation::pointer>(choice.get());
}

inline MultilinkRequest::callInformation::reference MultilinkRequest::select_callInformation ()
{
    return *static_cast<callInformation::pointer>(setSelection(callInformation::id_, ASN1::AbstractData::create( &callInformation::value_type::theInfo)));
}

inline MultilinkRequest::callInformation::reference MultilinkRequest::select_callInformation (MultilinkRequest::callInformation::const_reference value)
{
    return select_callInformation() = value;
}

inline bool MultilinkRequest::callInformation_isSelected() const
{ 
    return currentSelection() == callInformation::id_; 
}

inline MultilinkRequest::addConnection::const_reference MultilinkRequest::get_addConnection () const
{
    assert(currentSelection() ==addConnection::id_);
    return *static_cast<addConnection::const_pointer>(choice.get());
}

inline MultilinkRequest::addConnection::reference MultilinkRequest::ref_addConnection ()
{
    assert(currentSelection() ==addConnection::id_);
    return *static_cast<addConnection::pointer>(choice.get());
}

inline MultilinkRequest::addConnection::reference MultilinkRequest::select_addConnection ()
{
    return *static_cast<addConnection::pointer>(setSelection(addConnection::id_, ASN1::AbstractData::create( &addConnection::value_type::theInfo)));
}

inline MultilinkRequest::addConnection::reference MultilinkRequest::select_addConnection (MultilinkRequest::addConnection::const_reference value)
{
    return select_addConnection() = value;
}

inline bool MultilinkRequest::addConnection_isSelected() const
{ 
    return currentSelection() == addConnection::id_; 
}

inline MultilinkRequest::removeConnection::const_reference MultilinkRequest::get_removeConnection () const
{
    assert(currentSelection() ==removeConnection::id_);
    return *static_cast<removeConnection::const_pointer>(choice.get());
}

inline MultilinkRequest::removeConnection::reference MultilinkRequest::ref_removeConnection ()
{
    assert(currentSelection() ==removeConnection::id_);
    return *static_cast<removeConnection::pointer>(choice.get());
}

inline MultilinkRequest::removeConnection::reference MultilinkRequest::select_removeConnection ()
{
    return *static_cast<removeConnection::pointer>(setSelection(removeConnection::id_, ASN1::AbstractData::create( &removeConnection::value_type::theInfo)));
}

inline MultilinkRequest::removeConnection::reference MultilinkRequest::select_removeConnection (MultilinkRequest::removeConnection::const_reference value)
{
    return select_removeConnection() = value;
}

inline bool MultilinkRequest::removeConnection_isSelected() const
{ 
    return currentSelection() == removeConnection::id_; 
}

inline MultilinkRequest::maximumHeaderInterval::const_reference MultilinkRequest::get_maximumHeaderInterval () const
{
    assert(currentSelection() ==maximumHeaderInterval::id_);
    return *static_cast<maximumHeaderInterval::const_pointer>(choice.get());
}

inline MultilinkRequest::maximumHeaderInterval::reference MultilinkRequest::ref_maximumHeaderInterval ()
{
    assert(currentSelection() ==maximumHeaderInterval::id_);
    return *static_cast<maximumHeaderInterval::pointer>(choice.get());
}

inline MultilinkRequest::maximumHeaderInterval::reference MultilinkRequest::select_maximumHeaderInterval ()
{
    return *static_cast<maximumHeaderInterval::pointer>(setSelection(maximumHeaderInterval::id_, ASN1::AbstractData::create( &maximumHeaderInterval::value_type::theInfo)));
}

inline MultilinkRequest::maximumHeaderInterval::reference MultilinkRequest::select_maximumHeaderInterval (MultilinkRequest::maximumHeaderInterval::const_reference value)
{
    return select_maximumHeaderInterval() = value;
}

inline bool MultilinkRequest::maximumHeaderInterval_isSelected() const
{ 
    return currentSelection() == maximumHeaderInterval::id_; 
}

inline MultilinkRequest::MultilinkRequest(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline MultilinkRequest::MultilinkRequest(callInformation::Id id, callInformation::const_reference value)
  : Inherited(&theInfo, id, new callInformation::value_type(value) )
{ }

inline MultilinkRequest::MultilinkRequest(addConnection::Id id, addConnection::const_reference value)
  : Inherited(&theInfo, id, new addConnection::value_type(value) )
{ }

inline MultilinkRequest::MultilinkRequest(removeConnection::Id id, removeConnection::const_reference value)
  : Inherited(&theInfo, id, new removeConnection::value_type(value) )
{ }

inline MultilinkRequest::MultilinkRequest(maximumHeaderInterval::Id id, maximumHeaderInterval::const_reference value)
  : Inherited(&theInfo, id, new maximumHeaderInterval::value_type(value) )
{ }


inline void MultilinkRequest::swap(MultilinkRequest & other)
{  Inherited::swap(other); }

inline MultilinkRequest* MultilinkRequest::clone() const
{ return static_cast<MultilinkRequest*> (Inherited::clone()); }

inline bool MultilinkRequest::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MultilinkResponse::nonStandard::const_reference MultilinkResponse::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline MultilinkResponse::nonStandard::reference MultilinkResponse::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline MultilinkResponse::nonStandard::reference MultilinkResponse::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline MultilinkResponse::nonStandard::reference MultilinkResponse::select_nonStandard (MultilinkResponse::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool MultilinkResponse::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline MultilinkResponse::callInformation::const_reference MultilinkResponse::get_callInformation () const
{
    assert(currentSelection() ==callInformation::id_);
    return *static_cast<callInformation::const_pointer>(choice.get());
}

inline MultilinkResponse::callInformation::reference MultilinkResponse::ref_callInformation ()
{
    assert(currentSelection() ==callInformation::id_);
    return *static_cast<callInformation::pointer>(choice.get());
}

inline MultilinkResponse::callInformation::reference MultilinkResponse::select_callInformation ()
{
    return *static_cast<callInformation::pointer>(setSelection(callInformation::id_, ASN1::AbstractData::create( &callInformation::value_type::theInfo)));
}

inline MultilinkResponse::callInformation::reference MultilinkResponse::select_callInformation (MultilinkResponse::callInformation::const_reference value)
{
    return select_callInformation() = value;
}

inline bool MultilinkResponse::callInformation_isSelected() const
{ 
    return currentSelection() == callInformation::id_; 
}

inline MultilinkResponse::addConnection::const_reference MultilinkResponse::get_addConnection () const
{
    assert(currentSelection() ==addConnection::id_);
    return *static_cast<addConnection::const_pointer>(choice.get());
}

inline MultilinkResponse::addConnection::reference MultilinkResponse::ref_addConnection ()
{
    assert(currentSelection() ==addConnection::id_);
    return *static_cast<addConnection::pointer>(choice.get());
}

inline MultilinkResponse::addConnection::reference MultilinkResponse::select_addConnection ()
{
    return *static_cast<addConnection::pointer>(setSelection(addConnection::id_, ASN1::AbstractData::create( &addConnection::value_type::theInfo)));
}

inline MultilinkResponse::addConnection::reference MultilinkResponse::select_addConnection (MultilinkResponse::addConnection::const_reference value)
{
    return select_addConnection() = value;
}

inline bool MultilinkResponse::addConnection_isSelected() const
{ 
    return currentSelection() == addConnection::id_; 
}

inline MultilinkResponse::removeConnection::const_reference MultilinkResponse::get_removeConnection () const
{
    assert(currentSelection() ==removeConnection::id_);
    return *static_cast<removeConnection::const_pointer>(choice.get());
}

inline MultilinkResponse::removeConnection::reference MultilinkResponse::ref_removeConnection ()
{
    assert(currentSelection() ==removeConnection::id_);
    return *static_cast<removeConnection::pointer>(choice.get());
}

inline MultilinkResponse::removeConnection::reference MultilinkResponse::select_removeConnection ()
{
    return *static_cast<removeConnection::pointer>(setSelection(removeConnection::id_, ASN1::AbstractData::create( &removeConnection::value_type::theInfo)));
}

inline MultilinkResponse::removeConnection::reference MultilinkResponse::select_removeConnection (MultilinkResponse::removeConnection::const_reference value)
{
    return select_removeConnection() = value;
}

inline bool MultilinkResponse::removeConnection_isSelected() const
{ 
    return currentSelection() == removeConnection::id_; 
}

inline MultilinkResponse::maximumHeaderInterval::const_reference MultilinkResponse::get_maximumHeaderInterval () const
{
    assert(currentSelection() ==maximumHeaderInterval::id_);
    return *static_cast<maximumHeaderInterval::const_pointer>(choice.get());
}

inline MultilinkResponse::maximumHeaderInterval::reference MultilinkResponse::ref_maximumHeaderInterval ()
{
    assert(currentSelection() ==maximumHeaderInterval::id_);
    return *static_cast<maximumHeaderInterval::pointer>(choice.get());
}

inline MultilinkResponse::maximumHeaderInterval::reference MultilinkResponse::select_maximumHeaderInterval ()
{
    return *static_cast<maximumHeaderInterval::pointer>(setSelection(maximumHeaderInterval::id_, ASN1::AbstractData::create( &maximumHeaderInterval::value_type::theInfo)));
}

inline MultilinkResponse::maximumHeaderInterval::reference MultilinkResponse::select_maximumHeaderInterval (MultilinkResponse::maximumHeaderInterval::const_reference value)
{
    return select_maximumHeaderInterval() = value;
}

inline bool MultilinkResponse::maximumHeaderInterval_isSelected() const
{ 
    return currentSelection() == maximumHeaderInterval::id_; 
}

inline MultilinkResponse::MultilinkResponse(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline MultilinkResponse::MultilinkResponse(callInformation::Id id, callInformation::const_reference value)
  : Inherited(&theInfo, id, new callInformation::value_type(value) )
{ }

inline MultilinkResponse::MultilinkResponse(addConnection::Id id, addConnection::const_reference value)
  : Inherited(&theInfo, id, new addConnection::value_type(value) )
{ }

inline MultilinkResponse::MultilinkResponse(removeConnection::Id id, removeConnection::const_reference value)
  : Inherited(&theInfo, id, new removeConnection::value_type(value) )
{ }

inline MultilinkResponse::MultilinkResponse(maximumHeaderInterval::Id id, maximumHeaderInterval::const_reference value)
  : Inherited(&theInfo, id, new maximumHeaderInterval::value_type(value) )
{ }


inline void MultilinkResponse::swap(MultilinkResponse & other)
{  Inherited::swap(other); }

inline MultilinkResponse* MultilinkResponse::clone() const
{ return static_cast<MultilinkResponse*> (Inherited::clone()); }

inline bool MultilinkResponse::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MultipointCapability::multicastCapability::const_reference MultipointCapability::get_multicastCapability () const
{ return *static_cast<multicastCapability::const_pointer>(fields[0]);}

inline MultipointCapability::multicastCapability::reference MultipointCapability::ref_multicastCapability ()
{ return *static_cast<multicastCapability::pointer>(fields[0]);}

inline MultipointCapability::multicastCapability::reference MultipointCapability::set_multicastCapability ()
{ return *static_cast<multicastCapability::pointer>(fields[0]);}

inline MultipointCapability::multicastCapability::reference MultipointCapability::set_multicastCapability (bool value)
{ return *static_cast<multicastCapability::pointer>(fields[0]) = value ;}

inline MultipointCapability::multiUniCastConference::const_reference MultipointCapability::get_multiUniCastConference () const
{ return *static_cast<multiUniCastConference::const_pointer>(fields[1]);}

inline MultipointCapability::multiUniCastConference::reference MultipointCapability::ref_multiUniCastConference ()
{ return *static_cast<multiUniCastConference::pointer>(fields[1]);}

inline MultipointCapability::multiUniCastConference::reference MultipointCapability::set_multiUniCastConference ()
{ return *static_cast<multiUniCastConference::pointer>(fields[1]);}

inline MultipointCapability::multiUniCastConference::reference MultipointCapability::set_multiUniCastConference (bool value)
{ return *static_cast<multiUniCastConference::pointer>(fields[1]) = value ;}

inline MultipointCapability::mediaDistributionCapability::const_reference MultipointCapability::get_mediaDistributionCapability () const
{ return *static_cast<mediaDistributionCapability::const_pointer>(fields[2]);}

inline MultipointCapability::mediaDistributionCapability::reference MultipointCapability::ref_mediaDistributionCapability ()
{ return *static_cast<mediaDistributionCapability::pointer>(fields[2]);}

inline MultipointCapability::mediaDistributionCapability::reference MultipointCapability::set_mediaDistributionCapability ()
{ return *static_cast<mediaDistributionCapability::pointer>(fields[2]);}

inline MultipointCapability::mediaDistributionCapability::reference MultipointCapability::set_mediaDistributionCapability (mediaDistributionCapability::const_reference value)
{ return *static_cast<mediaDistributionCapability::pointer>(fields[2]) = value ;}

inline void MultipointCapability::swap(MultipointCapability& other)
{ Inherited::swap(other); }

inline MultipointCapability* MultipointCapability::clone() const
{ return static_cast<MultipointCapability*> (Inherited::clone()); }

inline EnhancementLayerInfo::baseBitRateConstrained::const_reference EnhancementLayerInfo::get_baseBitRateConstrained () const
{ return *static_cast<baseBitRateConstrained::const_pointer>(fields[0]);}

inline EnhancementLayerInfo::baseBitRateConstrained::reference EnhancementLayerInfo::ref_baseBitRateConstrained ()
{ return *static_cast<baseBitRateConstrained::pointer>(fields[0]);}

inline EnhancementLayerInfo::baseBitRateConstrained::reference EnhancementLayerInfo::set_baseBitRateConstrained ()
{ return *static_cast<baseBitRateConstrained::pointer>(fields[0]);}

inline EnhancementLayerInfo::baseBitRateConstrained::reference EnhancementLayerInfo::set_baseBitRateConstrained (bool value)
{ return *static_cast<baseBitRateConstrained::pointer>(fields[0]) = value ;}

inline EnhancementLayerInfo::snrEnhancement::const_reference EnhancementLayerInfo::get_snrEnhancement () const
{
  assert(hasOptionalField(e_snrEnhancement));
  return *static_cast<snrEnhancement::const_pointer>(fields[1]);
}

inline EnhancementLayerInfo::snrEnhancement::reference EnhancementLayerInfo::ref_snrEnhancement ()
{
  assert(hasOptionalField(e_snrEnhancement));
  return *static_cast<snrEnhancement::pointer>(fields[1]);
}

inline EnhancementLayerInfo::snrEnhancement::reference EnhancementLayerInfo::set_snrEnhancement ()
{
  includeOptionalField( e_snrEnhancement, 1);
  return *static_cast<snrEnhancement::pointer>(fields[1]);
}

inline EnhancementLayerInfo::snrEnhancement::reference EnhancementLayerInfo::set_snrEnhancement (snrEnhancement::const_reference value)
{
  includeOptionalField( e_snrEnhancement, 1);
  return *static_cast<snrEnhancement::pointer>(fields[1]) = value;
}

inline void EnhancementLayerInfo::omit_snrEnhancement ()
{ removeOptionalField( e_snrEnhancement); }

inline bool EnhancementLayerInfo::snrEnhancement_isPresent () const
{ return hasOptionalField( e_snrEnhancement); }

inline EnhancementLayerInfo::spatialEnhancement::const_reference EnhancementLayerInfo::get_spatialEnhancement () const
{
  assert(hasOptionalField(e_spatialEnhancement));
  return *static_cast<spatialEnhancement::const_pointer>(fields[2]);
}

inline EnhancementLayerInfo::spatialEnhancement::reference EnhancementLayerInfo::ref_spatialEnhancement ()
{
  assert(hasOptionalField(e_spatialEnhancement));
  return *static_cast<spatialEnhancement::pointer>(fields[2]);
}

inline EnhancementLayerInfo::spatialEnhancement::reference EnhancementLayerInfo::set_spatialEnhancement ()
{
  includeOptionalField( e_spatialEnhancement, 2);
  return *static_cast<spatialEnhancement::pointer>(fields[2]);
}

inline EnhancementLayerInfo::spatialEnhancement::reference EnhancementLayerInfo::set_spatialEnhancement (spatialEnhancement::const_reference value)
{
  includeOptionalField( e_spatialEnhancement, 2);
  return *static_cast<spatialEnhancement::pointer>(fields[2]) = value;
}

inline void EnhancementLayerInfo::omit_spatialEnhancement ()
{ removeOptionalField( e_spatialEnhancement); }

inline bool EnhancementLayerInfo::spatialEnhancement_isPresent () const
{ return hasOptionalField( e_spatialEnhancement); }

inline EnhancementLayerInfo::bPictureEnhancement::const_reference EnhancementLayerInfo::get_bPictureEnhancement () const
{
  assert(hasOptionalField(e_bPictureEnhancement));
  return *static_cast<bPictureEnhancement::const_pointer>(fields[3]);
}

inline EnhancementLayerInfo::bPictureEnhancement::reference EnhancementLayerInfo::ref_bPictureEnhancement ()
{
  assert(hasOptionalField(e_bPictureEnhancement));
  return *static_cast<bPictureEnhancement::pointer>(fields[3]);
}

inline EnhancementLayerInfo::bPictureEnhancement::reference EnhancementLayerInfo::set_bPictureEnhancement ()
{
  includeOptionalField( e_bPictureEnhancement, 3);
  return *static_cast<bPictureEnhancement::pointer>(fields[3]);
}

inline EnhancementLayerInfo::bPictureEnhancement::reference EnhancementLayerInfo::set_bPictureEnhancement (bPictureEnhancement::const_reference value)
{
  includeOptionalField( e_bPictureEnhancement, 3);
  return *static_cast<bPictureEnhancement::pointer>(fields[3]) = value;
}

inline void EnhancementLayerInfo::omit_bPictureEnhancement ()
{ removeOptionalField( e_bPictureEnhancement); }

inline bool EnhancementLayerInfo::bPictureEnhancement_isPresent () const
{ return hasOptionalField( e_bPictureEnhancement); }

inline void EnhancementLayerInfo::swap(EnhancementLayerInfo& other)
{ Inherited::swap(other); }

inline EnhancementLayerInfo* EnhancementLayerInfo::clone() const
{ return static_cast<EnhancementLayerInfo*> (Inherited::clone()); }

inline H263VideoMode::resolution::const_reference H263VideoMode::get_resolution () const
{ return *static_cast<resolution::const_pointer>(fields[0]);}

inline H263VideoMode::resolution::reference H263VideoMode::ref_resolution ()
{ return *static_cast<resolution::pointer>(fields[0]);}

inline H263VideoMode::resolution::reference H263VideoMode::set_resolution ()
{ return *static_cast<resolution::pointer>(fields[0]);}

inline H263VideoMode::resolution::reference H263VideoMode::set_resolution (resolution::const_reference value)
{ return *static_cast<resolution::pointer>(fields[0]) = value ;}

inline H263VideoMode::bitRate::const_reference H263VideoMode::get_bitRate () const
{ return *static_cast<bitRate::const_pointer>(fields[1]);}

inline H263VideoMode::bitRate::reference H263VideoMode::ref_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[1]);}

inline H263VideoMode::bitRate::reference H263VideoMode::set_bitRate ()
{ return *static_cast<bitRate::pointer>(fields[1]);}

inline H263VideoMode::bitRate::reference H263VideoMode::set_bitRate (bitRate::value_type::int_type value)
{ return *static_cast<bitRate::pointer>(fields[1]) = value ;}

inline H263VideoMode::unrestrictedVector::const_reference H263VideoMode::get_unrestrictedVector () const
{ return *static_cast<unrestrictedVector::const_pointer>(fields[2]);}

inline H263VideoMode::unrestrictedVector::reference H263VideoMode::ref_unrestrictedVector ()
{ return *static_cast<unrestrictedVector::pointer>(fields[2]);}

inline H263VideoMode::unrestrictedVector::reference H263VideoMode::set_unrestrictedVector ()
{ return *static_cast<unrestrictedVector::pointer>(fields[2]);}

inline H263VideoMode::unrestrictedVector::reference H263VideoMode::set_unrestrictedVector (bool value)
{ return *static_cast<unrestrictedVector::pointer>(fields[2]) = value ;}

inline H263VideoMode::arithmeticCoding::const_reference H263VideoMode::get_arithmeticCoding () const
{ return *static_cast<arithmeticCoding::const_pointer>(fields[3]);}

inline H263VideoMode::arithmeticCoding::reference H263VideoMode::ref_arithmeticCoding ()
{ return *static_cast<arithmeticCoding::pointer>(fields[3]);}

inline H263VideoMode::arithmeticCoding::reference H263VideoMode::set_arithmeticCoding ()
{ return *static_cast<arithmeticCoding::pointer>(fields[3]);}

inline H263VideoMode::arithmeticCoding::reference H263VideoMode::set_arithmeticCoding (bool value)
{ return *static_cast<arithmeticCoding::pointer>(fields[3]) = value ;}

inline H263VideoMode::advancedPrediction::const_reference H263VideoMode::get_advancedPrediction () const
{ return *static_cast<advancedPrediction::const_pointer>(fields[4]);}

inline H263VideoMode::advancedPrediction::reference H263VideoMode::ref_advancedPrediction ()
{ return *static_cast<advancedPrediction::pointer>(fields[4]);}

inline H263VideoMode::advancedPrediction::reference H263VideoMode::set_advancedPrediction ()
{ return *static_cast<advancedPrediction::pointer>(fields[4]);}

inline H263VideoMode::advancedPrediction::reference H263VideoMode::set_advancedPrediction (bool value)
{ return *static_cast<advancedPrediction::pointer>(fields[4]) = value ;}

inline H263VideoMode::pbFrames::const_reference H263VideoMode::get_pbFrames () const
{ return *static_cast<pbFrames::const_pointer>(fields[5]);}

inline H263VideoMode::pbFrames::reference H263VideoMode::ref_pbFrames ()
{ return *static_cast<pbFrames::pointer>(fields[5]);}

inline H263VideoMode::pbFrames::reference H263VideoMode::set_pbFrames ()
{ return *static_cast<pbFrames::pointer>(fields[5]);}

inline H263VideoMode::pbFrames::reference H263VideoMode::set_pbFrames (bool value)
{ return *static_cast<pbFrames::pointer>(fields[5]) = value ;}

inline H263VideoMode::errorCompensation::const_reference H263VideoMode::get_errorCompensation () const
{
  assert(hasOptionalField(e_errorCompensation));
  return *static_cast<errorCompensation::const_pointer>(fields[6]);
}

inline H263VideoMode::errorCompensation::reference H263VideoMode::ref_errorCompensation ()
{
  assert(hasOptionalField(e_errorCompensation));
  return *static_cast<errorCompensation::pointer>(fields[6]);
}

inline H263VideoMode::errorCompensation::reference H263VideoMode::set_errorCompensation ()
{
  includeOptionalField( e_errorCompensation, 6);
  return *static_cast<errorCompensation::pointer>(fields[6]);
}

inline H263VideoMode::errorCompensation::reference H263VideoMode::set_errorCompensation (bool value)
{
  includeOptionalField( e_errorCompensation, 6);
  return *static_cast<errorCompensation::pointer>(fields[6]) = value;
}

inline void H263VideoMode::omit_errorCompensation ()
{ removeOptionalField( e_errorCompensation); }

inline bool H263VideoMode::errorCompensation_isPresent () const
{ return hasOptionalField( e_errorCompensation); }

inline H263VideoMode::enhancementLayerInfo::const_reference H263VideoMode::get_enhancementLayerInfo () const
{
  assert(hasOptionalField(e_enhancementLayerInfo));
  return *static_cast<enhancementLayerInfo::const_pointer>(fields[7]);
}

inline H263VideoMode::enhancementLayerInfo::reference H263VideoMode::ref_enhancementLayerInfo ()
{
  assert(hasOptionalField(e_enhancementLayerInfo));
  return *static_cast<enhancementLayerInfo::pointer>(fields[7]);
}

inline H263VideoMode::enhancementLayerInfo::reference H263VideoMode::set_enhancementLayerInfo ()
{
  includeOptionalField( e_enhancementLayerInfo, 7);
  return *static_cast<enhancementLayerInfo::pointer>(fields[7]);
}

inline H263VideoMode::enhancementLayerInfo::reference H263VideoMode::set_enhancementLayerInfo (enhancementLayerInfo::const_reference value)
{
  includeOptionalField( e_enhancementLayerInfo, 7);
  return *static_cast<enhancementLayerInfo::pointer>(fields[7]) = value;
}

inline void H263VideoMode::omit_enhancementLayerInfo ()
{ removeOptionalField( e_enhancementLayerInfo); }

inline bool H263VideoMode::enhancementLayerInfo_isPresent () const
{ return hasOptionalField( e_enhancementLayerInfo); }

inline H263VideoMode::h263Options::const_reference H263VideoMode::get_h263Options () const
{
  assert(hasOptionalField(e_h263Options));
  return *static_cast<h263Options::const_pointer>(fields[8]);
}

inline H263VideoMode::h263Options::reference H263VideoMode::ref_h263Options ()
{
  assert(hasOptionalField(e_h263Options));
  return *static_cast<h263Options::pointer>(fields[8]);
}

inline H263VideoMode::h263Options::reference H263VideoMode::set_h263Options ()
{
  includeOptionalField( e_h263Options, 8);
  return *static_cast<h263Options::pointer>(fields[8]);
}

inline H263VideoMode::h263Options::reference H263VideoMode::set_h263Options (h263Options::const_reference value)
{
  includeOptionalField( e_h263Options, 8);
  return *static_cast<h263Options::pointer>(fields[8]) = value;
}

inline void H263VideoMode::omit_h263Options ()
{ removeOptionalField( e_h263Options); }

inline bool H263VideoMode::h263Options_isPresent () const
{ return hasOptionalField( e_h263Options); }

inline void H263VideoMode::swap(H263VideoMode& other)
{ Inherited::swap(other); }

inline H263VideoMode* H263VideoMode::clone() const
{ return static_cast<H263VideoMode*> (Inherited::clone()); }

inline H2250Capability::maximumAudioDelayJitter::const_reference H2250Capability::get_maximumAudioDelayJitter () const
{ return *static_cast<maximumAudioDelayJitter::const_pointer>(fields[0]);}

inline H2250Capability::maximumAudioDelayJitter::reference H2250Capability::ref_maximumAudioDelayJitter ()
{ return *static_cast<maximumAudioDelayJitter::pointer>(fields[0]);}

inline H2250Capability::maximumAudioDelayJitter::reference H2250Capability::set_maximumAudioDelayJitter ()
{ return *static_cast<maximumAudioDelayJitter::pointer>(fields[0]);}

inline H2250Capability::maximumAudioDelayJitter::reference H2250Capability::set_maximumAudioDelayJitter (maximumAudioDelayJitter::value_type::int_type value)
{ return *static_cast<maximumAudioDelayJitter::pointer>(fields[0]) = value ;}

inline H2250Capability::receiveMultipointCapability::const_reference H2250Capability::get_receiveMultipointCapability () const
{ return *static_cast<receiveMultipointCapability::const_pointer>(fields[1]);}

inline H2250Capability::receiveMultipointCapability::reference H2250Capability::ref_receiveMultipointCapability ()
{ return *static_cast<receiveMultipointCapability::pointer>(fields[1]);}

inline H2250Capability::receiveMultipointCapability::reference H2250Capability::set_receiveMultipointCapability ()
{ return *static_cast<receiveMultipointCapability::pointer>(fields[1]);}

inline H2250Capability::receiveMultipointCapability::reference H2250Capability::set_receiveMultipointCapability (receiveMultipointCapability::const_reference value)
{ return *static_cast<receiveMultipointCapability::pointer>(fields[1]) = value ;}

inline H2250Capability::transmitMultipointCapability::const_reference H2250Capability::get_transmitMultipointCapability () const
{ return *static_cast<transmitMultipointCapability::const_pointer>(fields[2]);}

inline H2250Capability::transmitMultipointCapability::reference H2250Capability::ref_transmitMultipointCapability ()
{ return *static_cast<transmitMultipointCapability::pointer>(fields[2]);}

inline H2250Capability::transmitMultipointCapability::reference H2250Capability::set_transmitMultipointCapability ()
{ return *static_cast<transmitMultipointCapability::pointer>(fields[2]);}

inline H2250Capability::transmitMultipointCapability::reference H2250Capability::set_transmitMultipointCapability (transmitMultipointCapability::const_reference value)
{ return *static_cast<transmitMultipointCapability::pointer>(fields[2]) = value ;}

inline H2250Capability::receiveAndTransmitMultipointCapability::const_reference H2250Capability::get_receiveAndTransmitMultipointCapability () const
{ return *static_cast<receiveAndTransmitMultipointCapability::const_pointer>(fields[3]);}

inline H2250Capability::receiveAndTransmitMultipointCapability::reference H2250Capability::ref_receiveAndTransmitMultipointCapability ()
{ return *static_cast<receiveAndTransmitMultipointCapability::pointer>(fields[3]);}

inline H2250Capability::receiveAndTransmitMultipointCapability::reference H2250Capability::set_receiveAndTransmitMultipointCapability ()
{ return *static_cast<receiveAndTransmitMultipointCapability::pointer>(fields[3]);}

inline H2250Capability::receiveAndTransmitMultipointCapability::reference H2250Capability::set_receiveAndTransmitMultipointCapability (receiveAndTransmitMultipointCapability::const_reference value)
{ return *static_cast<receiveAndTransmitMultipointCapability::pointer>(fields[3]) = value ;}

inline H2250Capability::mcCapability::const_reference H2250Capability::get_mcCapability () const
{ return *static_cast<mcCapability::const_pointer>(fields[4]);}

inline H2250Capability::mcCapability::reference H2250Capability::ref_mcCapability ()
{ return *static_cast<mcCapability::pointer>(fields[4]);}

inline H2250Capability::mcCapability::reference H2250Capability::set_mcCapability ()
{ return *static_cast<mcCapability::pointer>(fields[4]);}

inline H2250Capability::mcCapability::reference H2250Capability::set_mcCapability (mcCapability::const_reference value)
{ return *static_cast<mcCapability::pointer>(fields[4]) = value ;}

inline H2250Capability::rtcpVideoControlCapability::const_reference H2250Capability::get_rtcpVideoControlCapability () const
{ return *static_cast<rtcpVideoControlCapability::const_pointer>(fields[5]);}

inline H2250Capability::rtcpVideoControlCapability::reference H2250Capability::ref_rtcpVideoControlCapability ()
{ return *static_cast<rtcpVideoControlCapability::pointer>(fields[5]);}

inline H2250Capability::rtcpVideoControlCapability::reference H2250Capability::set_rtcpVideoControlCapability ()
{ return *static_cast<rtcpVideoControlCapability::pointer>(fields[5]);}

inline H2250Capability::rtcpVideoControlCapability::reference H2250Capability::set_rtcpVideoControlCapability (bool value)
{ return *static_cast<rtcpVideoControlCapability::pointer>(fields[5]) = value ;}

inline H2250Capability::mediaPacketizationCapability::const_reference H2250Capability::get_mediaPacketizationCapability () const
{ return *static_cast<mediaPacketizationCapability::const_pointer>(fields[6]);}

inline H2250Capability::mediaPacketizationCapability::reference H2250Capability::ref_mediaPacketizationCapability ()
{ return *static_cast<mediaPacketizationCapability::pointer>(fields[6]);}

inline H2250Capability::mediaPacketizationCapability::reference H2250Capability::set_mediaPacketizationCapability ()
{ return *static_cast<mediaPacketizationCapability::pointer>(fields[6]);}

inline H2250Capability::mediaPacketizationCapability::reference H2250Capability::set_mediaPacketizationCapability (mediaPacketizationCapability::const_reference value)
{ return *static_cast<mediaPacketizationCapability::pointer>(fields[6]) = value ;}

inline H2250Capability::transportCapability::const_reference H2250Capability::get_transportCapability () const
{
  assert(hasOptionalField(e_transportCapability));
  return *static_cast<transportCapability::const_pointer>(fields[7]);
}

inline H2250Capability::transportCapability::reference H2250Capability::ref_transportCapability ()
{
  assert(hasOptionalField(e_transportCapability));
  return *static_cast<transportCapability::pointer>(fields[7]);
}

inline H2250Capability::transportCapability::reference H2250Capability::set_transportCapability ()
{
  includeOptionalField( e_transportCapability, 7);
  return *static_cast<transportCapability::pointer>(fields[7]);
}

inline H2250Capability::transportCapability::reference H2250Capability::set_transportCapability (transportCapability::const_reference value)
{
  includeOptionalField( e_transportCapability, 7);
  return *static_cast<transportCapability::pointer>(fields[7]) = value;
}

inline void H2250Capability::omit_transportCapability ()
{ removeOptionalField( e_transportCapability); }

inline bool H2250Capability::transportCapability_isPresent () const
{ return hasOptionalField( e_transportCapability); }

inline H2250Capability::redundancyEncodingCapability::const_reference H2250Capability::get_redundancyEncodingCapability () const
{
  assert(hasOptionalField(e_redundancyEncodingCapability));
  return *static_cast<redundancyEncodingCapability::const_pointer>(fields[8]);
}

inline H2250Capability::redundancyEncodingCapability::reference H2250Capability::ref_redundancyEncodingCapability ()
{
  assert(hasOptionalField(e_redundancyEncodingCapability));
  return *static_cast<redundancyEncodingCapability::pointer>(fields[8]);
}

inline H2250Capability::redundancyEncodingCapability::reference H2250Capability::set_redundancyEncodingCapability ()
{
  includeOptionalField( e_redundancyEncodingCapability, 8);
  return *static_cast<redundancyEncodingCapability::pointer>(fields[8]);
}

inline H2250Capability::redundancyEncodingCapability::reference H2250Capability::set_redundancyEncodingCapability (redundancyEncodingCapability::const_reference value)
{
  includeOptionalField( e_redundancyEncodingCapability, 8);
  return *static_cast<redundancyEncodingCapability::pointer>(fields[8]) = value;
}

inline void H2250Capability::omit_redundancyEncodingCapability ()
{ removeOptionalField( e_redundancyEncodingCapability); }

inline bool H2250Capability::redundancyEncodingCapability_isPresent () const
{ return hasOptionalField( e_redundancyEncodingCapability); }

inline H2250Capability::logicalChannelSwitchingCapability::const_reference H2250Capability::get_logicalChannelSwitchingCapability () const
{
  assert(hasOptionalField(e_logicalChannelSwitchingCapability));
  return *static_cast<logicalChannelSwitchingCapability::const_pointer>(fields[9]);
}

inline H2250Capability::logicalChannelSwitchingCapability::reference H2250Capability::ref_logicalChannelSwitchingCapability ()
{
  assert(hasOptionalField(e_logicalChannelSwitchingCapability));
  return *static_cast<logicalChannelSwitchingCapability::pointer>(fields[9]);
}

inline H2250Capability::logicalChannelSwitchingCapability::reference H2250Capability::set_logicalChannelSwitchingCapability ()
{
  includeOptionalField( e_logicalChannelSwitchingCapability, 9);
  return *static_cast<logicalChannelSwitchingCapability::pointer>(fields[9]);
}

inline H2250Capability::logicalChannelSwitchingCapability::reference H2250Capability::set_logicalChannelSwitchingCapability (bool value)
{
  includeOptionalField( e_logicalChannelSwitchingCapability, 9);
  return *static_cast<logicalChannelSwitchingCapability::pointer>(fields[9]) = value;
}

inline void H2250Capability::omit_logicalChannelSwitchingCapability ()
{ removeOptionalField( e_logicalChannelSwitchingCapability); }

inline bool H2250Capability::logicalChannelSwitchingCapability_isPresent () const
{ return hasOptionalField( e_logicalChannelSwitchingCapability); }

inline H2250Capability::t120DynamicPortCapability::const_reference H2250Capability::get_t120DynamicPortCapability () const
{
  assert(hasOptionalField(e_t120DynamicPortCapability));
  return *static_cast<t120DynamicPortCapability::const_pointer>(fields[10]);
}

inline H2250Capability::t120DynamicPortCapability::reference H2250Capability::ref_t120DynamicPortCapability ()
{
  assert(hasOptionalField(e_t120DynamicPortCapability));
  return *static_cast<t120DynamicPortCapability::pointer>(fields[10]);
}

inline H2250Capability::t120DynamicPortCapability::reference H2250Capability::set_t120DynamicPortCapability ()
{
  includeOptionalField( e_t120DynamicPortCapability, 10);
  return *static_cast<t120DynamicPortCapability::pointer>(fields[10]);
}

inline H2250Capability::t120DynamicPortCapability::reference H2250Capability::set_t120DynamicPortCapability (bool value)
{
  includeOptionalField( e_t120DynamicPortCapability, 10);
  return *static_cast<t120DynamicPortCapability::pointer>(fields[10]) = value;
}

inline void H2250Capability::omit_t120DynamicPortCapability ()
{ removeOptionalField( e_t120DynamicPortCapability); }

inline bool H2250Capability::t120DynamicPortCapability_isPresent () const
{ return hasOptionalField( e_t120DynamicPortCapability); }

inline void H2250Capability::swap(H2250Capability& other)
{ Inherited::swap(other); }

inline H2250Capability* H2250Capability::clone() const
{ return static_cast<H2250Capability*> (Inherited::clone()); }

inline H263VideoCapability::sqcifMPI::const_reference H263VideoCapability::get_sqcifMPI () const
{
  assert(hasOptionalField(e_sqcifMPI));
  return *static_cast<sqcifMPI::const_pointer>(fields[0]);
}

inline H263VideoCapability::sqcifMPI::reference H263VideoCapability::ref_sqcifMPI ()
{
  assert(hasOptionalField(e_sqcifMPI));
  return *static_cast<sqcifMPI::pointer>(fields[0]);
}

inline H263VideoCapability::sqcifMPI::reference H263VideoCapability::set_sqcifMPI ()
{
  includeOptionalField( e_sqcifMPI, 0);
  return *static_cast<sqcifMPI::pointer>(fields[0]);
}

inline H263VideoCapability::sqcifMPI::reference H263VideoCapability::set_sqcifMPI (sqcifMPI::value_type::int_type value)
{
  includeOptionalField( e_sqcifMPI, 0);
  return *static_cast<sqcifMPI::pointer>(fields[0]) = value;
}

inline void H263VideoCapability::omit_sqcifMPI ()
{ removeOptionalField( e_sqcifMPI); }

inline bool H263VideoCapability::sqcifMPI_isPresent () const
{ return hasOptionalField( e_sqcifMPI); }

inline H263VideoCapability::qcifMPI::const_reference H263VideoCapability::get_qcifMPI () const
{
  assert(hasOptionalField(e_qcifMPI));
  return *static_cast<qcifMPI::const_pointer>(fields[1]);
}

inline H263VideoCapability::qcifMPI::reference H263VideoCapability::ref_qcifMPI ()
{
  assert(hasOptionalField(e_qcifMPI));
  return *static_cast<qcifMPI::pointer>(fields[1]);
}

inline H263VideoCapability::qcifMPI::reference H263VideoCapability::set_qcifMPI ()
{
  includeOptionalField( e_qcifMPI, 1);
  return *static_cast<qcifMPI::pointer>(fields[1]);
}

inline H263VideoCapability::qcifMPI::reference H263VideoCapability::set_qcifMPI (qcifMPI::value_type::int_type value)
{
  includeOptionalField( e_qcifMPI, 1);
  return *static_cast<qcifMPI::pointer>(fields[1]) = value;
}

inline void H263VideoCapability::omit_qcifMPI ()
{ removeOptionalField( e_qcifMPI); }

inline bool H263VideoCapability::qcifMPI_isPresent () const
{ return hasOptionalField( e_qcifMPI); }

inline H263VideoCapability::cifMPI::const_reference H263VideoCapability::get_cifMPI () const
{
  assert(hasOptionalField(e_cifMPI));
  return *static_cast<cifMPI::const_pointer>(fields[2]);
}

inline H263VideoCapability::cifMPI::reference H263VideoCapability::ref_cifMPI ()
{
  assert(hasOptionalField(e_cifMPI));
  return *static_cast<cifMPI::pointer>(fields[2]);
}

inline H263VideoCapability::cifMPI::reference H263VideoCapability::set_cifMPI ()
{
  includeOptionalField( e_cifMPI, 2);
  return *static_cast<cifMPI::pointer>(fields[2]);
}

inline H263VideoCapability::cifMPI::reference H263VideoCapability::set_cifMPI (cifMPI::value_type::int_type value)
{
  includeOptionalField( e_cifMPI, 2);
  return *static_cast<cifMPI::pointer>(fields[2]) = value;
}

inline void H263VideoCapability::omit_cifMPI ()
{ removeOptionalField( e_cifMPI); }

inline bool H263VideoCapability::cifMPI_isPresent () const
{ return hasOptionalField( e_cifMPI); }

inline H263VideoCapability::cif4MPI::const_reference H263VideoCapability::get_cif4MPI () const
{
  assert(hasOptionalField(e_cif4MPI));
  return *static_cast<cif4MPI::const_pointer>(fields[3]);
}

inline H263VideoCapability::cif4MPI::reference H263VideoCapability::ref_cif4MPI ()
{
  assert(hasOptionalField(e_cif4MPI));
  return *static_cast<cif4MPI::pointer>(fields[3]);
}

inline H263VideoCapability::cif4MPI::reference H263VideoCapability::set_cif4MPI ()
{
  includeOptionalField( e_cif4MPI, 3);
  return *static_cast<cif4MPI::pointer>(fields[3]);
}

inline H263VideoCapability::cif4MPI::reference H263VideoCapability::set_cif4MPI (cif4MPI::value_type::int_type value)
{
  includeOptionalField( e_cif4MPI, 3);
  return *static_cast<cif4MPI::pointer>(fields[3]) = value;
}

inline void H263VideoCapability::omit_cif4MPI ()
{ removeOptionalField( e_cif4MPI); }

inline bool H263VideoCapability::cif4MPI_isPresent () const
{ return hasOptionalField( e_cif4MPI); }

inline H263VideoCapability::cif16MPI::const_reference H263VideoCapability::get_cif16MPI () const
{
  assert(hasOptionalField(e_cif16MPI));
  return *static_cast<cif16MPI::const_pointer>(fields[4]);
}

inline H263VideoCapability::cif16MPI::reference H263VideoCapability::ref_cif16MPI ()
{
  assert(hasOptionalField(e_cif16MPI));
  return *static_cast<cif16MPI::pointer>(fields[4]);
}

inline H263VideoCapability::cif16MPI::reference H263VideoCapability::set_cif16MPI ()
{
  includeOptionalField( e_cif16MPI, 4);
  return *static_cast<cif16MPI::pointer>(fields[4]);
}

inline H263VideoCapability::cif16MPI::reference H263VideoCapability::set_cif16MPI (cif16MPI::value_type::int_type value)
{
  includeOptionalField( e_cif16MPI, 4);
  return *static_cast<cif16MPI::pointer>(fields[4]) = value;
}

inline void H263VideoCapability::omit_cif16MPI ()
{ removeOptionalField( e_cif16MPI); }

inline bool H263VideoCapability::cif16MPI_isPresent () const
{ return hasOptionalField( e_cif16MPI); }

inline H263VideoCapability::maxBitRate::const_reference H263VideoCapability::get_maxBitRate () const
{ return *static_cast<maxBitRate::const_pointer>(fields[5]);}

inline H263VideoCapability::maxBitRate::reference H263VideoCapability::ref_maxBitRate ()
{ return *static_cast<maxBitRate::pointer>(fields[5]);}

inline H263VideoCapability::maxBitRate::reference H263VideoCapability::set_maxBitRate ()
{ return *static_cast<maxBitRate::pointer>(fields[5]);}

inline H263VideoCapability::maxBitRate::reference H263VideoCapability::set_maxBitRate (maxBitRate::value_type::int_type value)
{ return *static_cast<maxBitRate::pointer>(fields[5]) = value ;}

inline H263VideoCapability::unrestrictedVector::const_reference H263VideoCapability::get_unrestrictedVector () const
{ return *static_cast<unrestrictedVector::const_pointer>(fields[6]);}

inline H263VideoCapability::unrestrictedVector::reference H263VideoCapability::ref_unrestrictedVector ()
{ return *static_cast<unrestrictedVector::pointer>(fields[6]);}

inline H263VideoCapability::unrestrictedVector::reference H263VideoCapability::set_unrestrictedVector ()
{ return *static_cast<unrestrictedVector::pointer>(fields[6]);}

inline H263VideoCapability::unrestrictedVector::reference H263VideoCapability::set_unrestrictedVector (bool value)
{ return *static_cast<unrestrictedVector::pointer>(fields[6]) = value ;}

inline H263VideoCapability::arithmeticCoding::const_reference H263VideoCapability::get_arithmeticCoding () const
{ return *static_cast<arithmeticCoding::const_pointer>(fields[7]);}

inline H263VideoCapability::arithmeticCoding::reference H263VideoCapability::ref_arithmeticCoding ()
{ return *static_cast<arithmeticCoding::pointer>(fields[7]);}

inline H263VideoCapability::arithmeticCoding::reference H263VideoCapability::set_arithmeticCoding ()
{ return *static_cast<arithmeticCoding::pointer>(fields[7]);}

inline H263VideoCapability::arithmeticCoding::reference H263VideoCapability::set_arithmeticCoding (bool value)
{ return *static_cast<arithmeticCoding::pointer>(fields[7]) = value ;}

inline H263VideoCapability::advancedPrediction::const_reference H263VideoCapability::get_advancedPrediction () const
{ return *static_cast<advancedPrediction::const_pointer>(fields[8]);}

inline H263VideoCapability::advancedPrediction::reference H263VideoCapability::ref_advancedPrediction ()
{ return *static_cast<advancedPrediction::pointer>(fields[8]);}

inline H263VideoCapability::advancedPrediction::reference H263VideoCapability::set_advancedPrediction ()
{ return *static_cast<advancedPrediction::pointer>(fields[8]);}

inline H263VideoCapability::advancedPrediction::reference H263VideoCapability::set_advancedPrediction (bool value)
{ return *static_cast<advancedPrediction::pointer>(fields[8]) = value ;}

inline H263VideoCapability::pbFrames::const_reference H263VideoCapability::get_pbFrames () const
{ return *static_cast<pbFrames::const_pointer>(fields[9]);}

inline H263VideoCapability::pbFrames::reference H263VideoCapability::ref_pbFrames ()
{ return *static_cast<pbFrames::pointer>(fields[9]);}

inline H263VideoCapability::pbFrames::reference H263VideoCapability::set_pbFrames ()
{ return *static_cast<pbFrames::pointer>(fields[9]);}

inline H263VideoCapability::pbFrames::reference H263VideoCapability::set_pbFrames (bool value)
{ return *static_cast<pbFrames::pointer>(fields[9]) = value ;}

inline H263VideoCapability::temporalSpatialTradeOffCapability::const_reference H263VideoCapability::get_temporalSpatialTradeOffCapability () const
{ return *static_cast<temporalSpatialTradeOffCapability::const_pointer>(fields[10]);}

inline H263VideoCapability::temporalSpatialTradeOffCapability::reference H263VideoCapability::ref_temporalSpatialTradeOffCapability ()
{ return *static_cast<temporalSpatialTradeOffCapability::pointer>(fields[10]);}

inline H263VideoCapability::temporalSpatialTradeOffCapability::reference H263VideoCapability::set_temporalSpatialTradeOffCapability ()
{ return *static_cast<temporalSpatialTradeOffCapability::pointer>(fields[10]);}

inline H263VideoCapability::temporalSpatialTradeOffCapability::reference H263VideoCapability::set_temporalSpatialTradeOffCapability (bool value)
{ return *static_cast<temporalSpatialTradeOffCapability::pointer>(fields[10]) = value ;}

inline H263VideoCapability::hrd_B::const_reference H263VideoCapability::get_hrd_B () const
{
  assert(hasOptionalField(e_hrd_B));
  return *static_cast<hrd_B::const_pointer>(fields[11]);
}

inline H263VideoCapability::hrd_B::reference H263VideoCapability::ref_hrd_B ()
{
  assert(hasOptionalField(e_hrd_B));
  return *static_cast<hrd_B::pointer>(fields[11]);
}

inline H263VideoCapability::hrd_B::reference H263VideoCapability::set_hrd_B ()
{
  includeOptionalField( e_hrd_B, 11);
  return *static_cast<hrd_B::pointer>(fields[11]);
}

inline H263VideoCapability::hrd_B::reference H263VideoCapability::set_hrd_B (hrd_B::value_type::int_type value)
{
  includeOptionalField( e_hrd_B, 11);
  return *static_cast<hrd_B::pointer>(fields[11]) = value;
}

inline void H263VideoCapability::omit_hrd_B ()
{ removeOptionalField( e_hrd_B); }

inline bool H263VideoCapability::hrd_B_isPresent () const
{ return hasOptionalField( e_hrd_B); }

inline H263VideoCapability::bppMaxKb::const_reference H263VideoCapability::get_bppMaxKb () const
{
  assert(hasOptionalField(e_bppMaxKb));
  return *static_cast<bppMaxKb::const_pointer>(fields[12]);
}

inline H263VideoCapability::bppMaxKb::reference H263VideoCapability::ref_bppMaxKb ()
{
  assert(hasOptionalField(e_bppMaxKb));
  return *static_cast<bppMaxKb::pointer>(fields[12]);
}

inline H263VideoCapability::bppMaxKb::reference H263VideoCapability::set_bppMaxKb ()
{
  includeOptionalField( e_bppMaxKb, 12);
  return *static_cast<bppMaxKb::pointer>(fields[12]);
}

inline H263VideoCapability::bppMaxKb::reference H263VideoCapability::set_bppMaxKb (bppMaxKb::value_type::int_type value)
{
  includeOptionalField( e_bppMaxKb, 12);
  return *static_cast<bppMaxKb::pointer>(fields[12]) = value;
}

inline void H263VideoCapability::omit_bppMaxKb ()
{ removeOptionalField( e_bppMaxKb); }

inline bool H263VideoCapability::bppMaxKb_isPresent () const
{ return hasOptionalField( e_bppMaxKb); }

inline H263VideoCapability::slowSqcifMPI::const_reference H263VideoCapability::get_slowSqcifMPI () const
{
  assert(hasOptionalField(e_slowSqcifMPI));
  return *static_cast<slowSqcifMPI::const_pointer>(fields[13]);
}

inline H263VideoCapability::slowSqcifMPI::reference H263VideoCapability::ref_slowSqcifMPI ()
{
  assert(hasOptionalField(e_slowSqcifMPI));
  return *static_cast<slowSqcifMPI::pointer>(fields[13]);
}

inline H263VideoCapability::slowSqcifMPI::reference H263VideoCapability::set_slowSqcifMPI ()
{
  includeOptionalField( e_slowSqcifMPI, 13);
  return *static_cast<slowSqcifMPI::pointer>(fields[13]);
}

inline H263VideoCapability::slowSqcifMPI::reference H263VideoCapability::set_slowSqcifMPI (slowSqcifMPI::value_type::int_type value)
{
  includeOptionalField( e_slowSqcifMPI, 13);
  return *static_cast<slowSqcifMPI::pointer>(fields[13]) = value;
}

inline void H263VideoCapability::omit_slowSqcifMPI ()
{ removeOptionalField( e_slowSqcifMPI); }

inline bool H263VideoCapability::slowSqcifMPI_isPresent () const
{ return hasOptionalField( e_slowSqcifMPI); }

inline H263VideoCapability::slowQcifMPI::const_reference H263VideoCapability::get_slowQcifMPI () const
{
  assert(hasOptionalField(e_slowQcifMPI));
  return *static_cast<slowQcifMPI::const_pointer>(fields[14]);
}

inline H263VideoCapability::slowQcifMPI::reference H263VideoCapability::ref_slowQcifMPI ()
{
  assert(hasOptionalField(e_slowQcifMPI));
  return *static_cast<slowQcifMPI::pointer>(fields[14]);
}

inline H263VideoCapability::slowQcifMPI::reference H263VideoCapability::set_slowQcifMPI ()
{
  includeOptionalField( e_slowQcifMPI, 14);
  return *static_cast<slowQcifMPI::pointer>(fields[14]);
}

inline H263VideoCapability::slowQcifMPI::reference H263VideoCapability::set_slowQcifMPI (slowQcifMPI::value_type::int_type value)
{
  includeOptionalField( e_slowQcifMPI, 14);
  return *static_cast<slowQcifMPI::pointer>(fields[14]) = value;
}

inline void H263VideoCapability::omit_slowQcifMPI ()
{ removeOptionalField( e_slowQcifMPI); }

inline bool H263VideoCapability::slowQcifMPI_isPresent () const
{ return hasOptionalField( e_slowQcifMPI); }

inline H263VideoCapability::slowCifMPI::const_reference H263VideoCapability::get_slowCifMPI () const
{
  assert(hasOptionalField(e_slowCifMPI));
  return *static_cast<slowCifMPI::const_pointer>(fields[15]);
}

inline H263VideoCapability::slowCifMPI::reference H263VideoCapability::ref_slowCifMPI ()
{
  assert(hasOptionalField(e_slowCifMPI));
  return *static_cast<slowCifMPI::pointer>(fields[15]);
}

inline H263VideoCapability::slowCifMPI::reference H263VideoCapability::set_slowCifMPI ()
{
  includeOptionalField( e_slowCifMPI, 15);
  return *static_cast<slowCifMPI::pointer>(fields[15]);
}

inline H263VideoCapability::slowCifMPI::reference H263VideoCapability::set_slowCifMPI (slowCifMPI::value_type::int_type value)
{
  includeOptionalField( e_slowCifMPI, 15);
  return *static_cast<slowCifMPI::pointer>(fields[15]) = value;
}

inline void H263VideoCapability::omit_slowCifMPI ()
{ removeOptionalField( e_slowCifMPI); }

inline bool H263VideoCapability::slowCifMPI_isPresent () const
{ return hasOptionalField( e_slowCifMPI); }

inline H263VideoCapability::slowCif4MPI::const_reference H263VideoCapability::get_slowCif4MPI () const
{
  assert(hasOptionalField(e_slowCif4MPI));
  return *static_cast<slowCif4MPI::const_pointer>(fields[16]);
}

inline H263VideoCapability::slowCif4MPI::reference H263VideoCapability::ref_slowCif4MPI ()
{
  assert(hasOptionalField(e_slowCif4MPI));
  return *static_cast<slowCif4MPI::pointer>(fields[16]);
}

inline H263VideoCapability::slowCif4MPI::reference H263VideoCapability::set_slowCif4MPI ()
{
  includeOptionalField( e_slowCif4MPI, 16);
  return *static_cast<slowCif4MPI::pointer>(fields[16]);
}

inline H263VideoCapability::slowCif4MPI::reference H263VideoCapability::set_slowCif4MPI (slowCif4MPI::value_type::int_type value)
{
  includeOptionalField( e_slowCif4MPI, 16);
  return *static_cast<slowCif4MPI::pointer>(fields[16]) = value;
}

inline void H263VideoCapability::omit_slowCif4MPI ()
{ removeOptionalField( e_slowCif4MPI); }

inline bool H263VideoCapability::slowCif4MPI_isPresent () const
{ return hasOptionalField( e_slowCif4MPI); }

inline H263VideoCapability::slowCif16MPI::const_reference H263VideoCapability::get_slowCif16MPI () const
{
  assert(hasOptionalField(e_slowCif16MPI));
  return *static_cast<slowCif16MPI::const_pointer>(fields[17]);
}

inline H263VideoCapability::slowCif16MPI::reference H263VideoCapability::ref_slowCif16MPI ()
{
  assert(hasOptionalField(e_slowCif16MPI));
  return *static_cast<slowCif16MPI::pointer>(fields[17]);
}

inline H263VideoCapability::slowCif16MPI::reference H263VideoCapability::set_slowCif16MPI ()
{
  includeOptionalField( e_slowCif16MPI, 17);
  return *static_cast<slowCif16MPI::pointer>(fields[17]);
}

inline H263VideoCapability::slowCif16MPI::reference H263VideoCapability::set_slowCif16MPI (slowCif16MPI::value_type::int_type value)
{
  includeOptionalField( e_slowCif16MPI, 17);
  return *static_cast<slowCif16MPI::pointer>(fields[17]) = value;
}

inline void H263VideoCapability::omit_slowCif16MPI ()
{ removeOptionalField( e_slowCif16MPI); }

inline bool H263VideoCapability::slowCif16MPI_isPresent () const
{ return hasOptionalField( e_slowCif16MPI); }

inline H263VideoCapability::errorCompensation::const_reference H263VideoCapability::get_errorCompensation () const
{
  assert(hasOptionalField(e_errorCompensation));
  return *static_cast<errorCompensation::const_pointer>(fields[18]);
}

inline H263VideoCapability::errorCompensation::reference H263VideoCapability::ref_errorCompensation ()
{
  assert(hasOptionalField(e_errorCompensation));
  return *static_cast<errorCompensation::pointer>(fields[18]);
}

inline H263VideoCapability::errorCompensation::reference H263VideoCapability::set_errorCompensation ()
{
  includeOptionalField( e_errorCompensation, 18);
  return *static_cast<errorCompensation::pointer>(fields[18]);
}

inline H263VideoCapability::errorCompensation::reference H263VideoCapability::set_errorCompensation (bool value)
{
  includeOptionalField( e_errorCompensation, 18);
  return *static_cast<errorCompensation::pointer>(fields[18]) = value;
}

inline void H263VideoCapability::omit_errorCompensation ()
{ removeOptionalField( e_errorCompensation); }

inline bool H263VideoCapability::errorCompensation_isPresent () const
{ return hasOptionalField( e_errorCompensation); }

inline H263VideoCapability::enhancementLayerInfo::const_reference H263VideoCapability::get_enhancementLayerInfo () const
{
  assert(hasOptionalField(e_enhancementLayerInfo));
  return *static_cast<enhancementLayerInfo::const_pointer>(fields[19]);
}

inline H263VideoCapability::enhancementLayerInfo::reference H263VideoCapability::ref_enhancementLayerInfo ()
{
  assert(hasOptionalField(e_enhancementLayerInfo));
  return *static_cast<enhancementLayerInfo::pointer>(fields[19]);
}

inline H263VideoCapability::enhancementLayerInfo::reference H263VideoCapability::set_enhancementLayerInfo ()
{
  includeOptionalField( e_enhancementLayerInfo, 19);
  return *static_cast<enhancementLayerInfo::pointer>(fields[19]);
}

inline H263VideoCapability::enhancementLayerInfo::reference H263VideoCapability::set_enhancementLayerInfo (enhancementLayerInfo::const_reference value)
{
  includeOptionalField( e_enhancementLayerInfo, 19);
  return *static_cast<enhancementLayerInfo::pointer>(fields[19]) = value;
}

inline void H263VideoCapability::omit_enhancementLayerInfo ()
{ removeOptionalField( e_enhancementLayerInfo); }

inline bool H263VideoCapability::enhancementLayerInfo_isPresent () const
{ return hasOptionalField( e_enhancementLayerInfo); }

inline H263VideoCapability::h263Options::const_reference H263VideoCapability::get_h263Options () const
{
  assert(hasOptionalField(e_h263Options));
  return *static_cast<h263Options::const_pointer>(fields[20]);
}

inline H263VideoCapability::h263Options::reference H263VideoCapability::ref_h263Options ()
{
  assert(hasOptionalField(e_h263Options));
  return *static_cast<h263Options::pointer>(fields[20]);
}

inline H263VideoCapability::h263Options::reference H263VideoCapability::set_h263Options ()
{
  includeOptionalField( e_h263Options, 20);
  return *static_cast<h263Options::pointer>(fields[20]);
}

inline H263VideoCapability::h263Options::reference H263VideoCapability::set_h263Options (h263Options::const_reference value)
{
  includeOptionalField( e_h263Options, 20);
  return *static_cast<h263Options::pointer>(fields[20]) = value;
}

inline void H263VideoCapability::omit_h263Options ()
{ removeOptionalField( e_h263Options); }

inline bool H263VideoCapability::h263Options_isPresent () const
{ return hasOptionalField( e_h263Options); }

inline void H263VideoCapability::swap(H263VideoCapability& other)
{ Inherited::swap(other); }

inline H263VideoCapability* H263VideoCapability::clone() const
{ return static_cast<H263VideoCapability*> (Inherited::clone()); }

inline VideoMode::nonStandard::const_reference VideoMode::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline VideoMode::nonStandard::reference VideoMode::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline VideoMode::nonStandard::reference VideoMode::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline VideoMode::nonStandard::reference VideoMode::select_nonStandard (VideoMode::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool VideoMode::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline VideoMode::h261VideoMode::const_reference VideoMode::get_h261VideoMode () const
{
    assert(currentSelection() ==h261VideoMode::id_);
    return *static_cast<h261VideoMode::const_pointer>(choice.get());
}

inline VideoMode::h261VideoMode::reference VideoMode::ref_h261VideoMode ()
{
    assert(currentSelection() ==h261VideoMode::id_);
    return *static_cast<h261VideoMode::pointer>(choice.get());
}

inline VideoMode::h261VideoMode::reference VideoMode::select_h261VideoMode ()
{
    return *static_cast<h261VideoMode::pointer>(setSelection(h261VideoMode::id_, ASN1::AbstractData::create( &h261VideoMode::value_type::theInfo)));
}

inline VideoMode::h261VideoMode::reference VideoMode::select_h261VideoMode (VideoMode::h261VideoMode::const_reference value)
{
    return select_h261VideoMode() = value;
}

inline bool VideoMode::h261VideoMode_isSelected() const
{ 
    return currentSelection() == h261VideoMode::id_; 
}

inline VideoMode::h262VideoMode::const_reference VideoMode::get_h262VideoMode () const
{
    assert(currentSelection() ==h262VideoMode::id_);
    return *static_cast<h262VideoMode::const_pointer>(choice.get());
}

inline VideoMode::h262VideoMode::reference VideoMode::ref_h262VideoMode ()
{
    assert(currentSelection() ==h262VideoMode::id_);
    return *static_cast<h262VideoMode::pointer>(choice.get());
}

inline VideoMode::h262VideoMode::reference VideoMode::select_h262VideoMode ()
{
    return *static_cast<h262VideoMode::pointer>(setSelection(h262VideoMode::id_, ASN1::AbstractData::create( &h262VideoMode::value_type::theInfo)));
}

inline VideoMode::h262VideoMode::reference VideoMode::select_h262VideoMode (VideoMode::h262VideoMode::const_reference value)
{
    return select_h262VideoMode() = value;
}

inline bool VideoMode::h262VideoMode_isSelected() const
{ 
    return currentSelection() == h262VideoMode::id_; 
}

inline VideoMode::h263VideoMode::const_reference VideoMode::get_h263VideoMode () const
{
    assert(currentSelection() ==h263VideoMode::id_);
    return *static_cast<h263VideoMode::const_pointer>(choice.get());
}

inline VideoMode::h263VideoMode::reference VideoMode::ref_h263VideoMode ()
{
    assert(currentSelection() ==h263VideoMode::id_);
    return *static_cast<h263VideoMode::pointer>(choice.get());
}

inline VideoMode::h263VideoMode::reference VideoMode::select_h263VideoMode ()
{
    return *static_cast<h263VideoMode::pointer>(setSelection(h263VideoMode::id_, ASN1::AbstractData::create( &h263VideoMode::value_type::theInfo)));
}

inline VideoMode::h263VideoMode::reference VideoMode::select_h263VideoMode (VideoMode::h263VideoMode::const_reference value)
{
    return select_h263VideoMode() = value;
}

inline bool VideoMode::h263VideoMode_isSelected() const
{ 
    return currentSelection() == h263VideoMode::id_; 
}

inline VideoMode::is11172VideoMode::const_reference VideoMode::get_is11172VideoMode () const
{
    assert(currentSelection() ==is11172VideoMode::id_);
    return *static_cast<is11172VideoMode::const_pointer>(choice.get());
}

inline VideoMode::is11172VideoMode::reference VideoMode::ref_is11172VideoMode ()
{
    assert(currentSelection() ==is11172VideoMode::id_);
    return *static_cast<is11172VideoMode::pointer>(choice.get());
}

inline VideoMode::is11172VideoMode::reference VideoMode::select_is11172VideoMode ()
{
    return *static_cast<is11172VideoMode::pointer>(setSelection(is11172VideoMode::id_, ASN1::AbstractData::create( &is11172VideoMode::value_type::theInfo)));
}

inline VideoMode::is11172VideoMode::reference VideoMode::select_is11172VideoMode (VideoMode::is11172VideoMode::const_reference value)
{
    return select_is11172VideoMode() = value;
}

inline bool VideoMode::is11172VideoMode_isSelected() const
{ 
    return currentSelection() == is11172VideoMode::id_; 
}

inline VideoMode::genericVideoMode::const_reference VideoMode::get_genericVideoMode () const
{
    assert(currentSelection() ==genericVideoMode::id_);
    return *static_cast<genericVideoMode::const_pointer>(choice.get());
}

inline VideoMode::genericVideoMode::reference VideoMode::ref_genericVideoMode ()
{
    assert(currentSelection() ==genericVideoMode::id_);
    return *static_cast<genericVideoMode::pointer>(choice.get());
}

inline VideoMode::genericVideoMode::reference VideoMode::select_genericVideoMode ()
{
    return *static_cast<genericVideoMode::pointer>(setSelection(genericVideoMode::id_, ASN1::AbstractData::create( &genericVideoMode::value_type::theInfo)));
}

inline VideoMode::genericVideoMode::reference VideoMode::select_genericVideoMode (VideoMode::genericVideoMode::const_reference value)
{
    return select_genericVideoMode() = value;
}

inline bool VideoMode::genericVideoMode_isSelected() const
{ 
    return currentSelection() == genericVideoMode::id_; 
}

inline VideoMode::VideoMode(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline VideoMode::VideoMode(h261VideoMode::Id id, h261VideoMode::const_reference value)
  : Inherited(&theInfo, id, new h261VideoMode::value_type(value) )
{ }

inline VideoMode::VideoMode(h262VideoMode::Id id, h262VideoMode::const_reference value)
  : Inherited(&theInfo, id, new h262VideoMode::value_type(value) )
{ }

inline VideoMode::VideoMode(h263VideoMode::Id id, h263VideoMode::const_reference value)
  : Inherited(&theInfo, id, new h263VideoMode::value_type(value) )
{ }

inline VideoMode::VideoMode(is11172VideoMode::Id id, is11172VideoMode::const_reference value)
  : Inherited(&theInfo, id, new is11172VideoMode::value_type(value) )
{ }

inline VideoMode::VideoMode(genericVideoMode::Id id, genericVideoMode::const_reference value)
  : Inherited(&theInfo, id, new genericVideoMode::value_type(value) )
{ }


inline void VideoMode::swap(VideoMode & other)
{  Inherited::swap(other); }

inline VideoMode* VideoMode::clone() const
{ return static_cast<VideoMode*> (Inherited::clone()); }

inline bool VideoMode::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H235Mode_mediaMode::nonStandard::const_reference H235Mode_mediaMode::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline H235Mode_mediaMode::nonStandard::reference H235Mode_mediaMode::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline H235Mode_mediaMode::nonStandard::reference H235Mode_mediaMode::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline H235Mode_mediaMode::nonStandard::reference H235Mode_mediaMode::select_nonStandard (H235Mode_mediaMode::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool H235Mode_mediaMode::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline H235Mode_mediaMode::videoMode::const_reference H235Mode_mediaMode::get_videoMode () const
{
    assert(currentSelection() ==videoMode::id_);
    return *static_cast<videoMode::const_pointer>(choice.get());
}

inline H235Mode_mediaMode::videoMode::reference H235Mode_mediaMode::ref_videoMode ()
{
    assert(currentSelection() ==videoMode::id_);
    return *static_cast<videoMode::pointer>(choice.get());
}

inline H235Mode_mediaMode::videoMode::reference H235Mode_mediaMode::select_videoMode ()
{
    return *static_cast<videoMode::pointer>(setSelection(videoMode::id_, ASN1::AbstractData::create( &videoMode::value_type::theInfo)));
}

inline H235Mode_mediaMode::videoMode::reference H235Mode_mediaMode::select_videoMode (H235Mode_mediaMode::videoMode::const_reference value)
{
    return select_videoMode() = value;
}

inline bool H235Mode_mediaMode::videoMode_isSelected() const
{ 
    return currentSelection() == videoMode::id_; 
}

inline H235Mode_mediaMode::audioMode::const_reference H235Mode_mediaMode::get_audioMode () const
{
    assert(currentSelection() ==audioMode::id_);
    return *static_cast<audioMode::const_pointer>(choice.get());
}

inline H235Mode_mediaMode::audioMode::reference H235Mode_mediaMode::ref_audioMode ()
{
    assert(currentSelection() ==audioMode::id_);
    return *static_cast<audioMode::pointer>(choice.get());
}

inline H235Mode_mediaMode::audioMode::reference H235Mode_mediaMode::select_audioMode ()
{
    return *static_cast<audioMode::pointer>(setSelection(audioMode::id_, ASN1::AbstractData::create( &audioMode::value_type::theInfo)));
}

inline H235Mode_mediaMode::audioMode::reference H235Mode_mediaMode::select_audioMode (H235Mode_mediaMode::audioMode::const_reference value)
{
    return select_audioMode() = value;
}

inline bool H235Mode_mediaMode::audioMode_isSelected() const
{ 
    return currentSelection() == audioMode::id_; 
}

inline H235Mode_mediaMode::dataMode::const_reference H235Mode_mediaMode::get_dataMode () const
{
    assert(currentSelection() ==dataMode::id_);
    return *static_cast<dataMode::const_pointer>(choice.get());
}

inline H235Mode_mediaMode::dataMode::reference H235Mode_mediaMode::ref_dataMode ()
{
    assert(currentSelection() ==dataMode::id_);
    return *static_cast<dataMode::pointer>(choice.get());
}

inline H235Mode_mediaMode::dataMode::reference H235Mode_mediaMode::select_dataMode ()
{
    return *static_cast<dataMode::pointer>(setSelection(dataMode::id_, ASN1::AbstractData::create( &dataMode::value_type::theInfo)));
}

inline H235Mode_mediaMode::dataMode::reference H235Mode_mediaMode::select_dataMode (H235Mode_mediaMode::dataMode::const_reference value)
{
    return select_dataMode() = value;
}

inline bool H235Mode_mediaMode::dataMode_isSelected() const
{ 
    return currentSelection() == dataMode::id_; 
}

inline H235Mode_mediaMode::H235Mode_mediaMode(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline H235Mode_mediaMode::H235Mode_mediaMode(videoMode::Id id, videoMode::const_reference value)
  : Inherited(&theInfo, id, new videoMode::value_type(value) )
{ }

inline H235Mode_mediaMode::H235Mode_mediaMode(audioMode::Id id, audioMode::const_reference value)
  : Inherited(&theInfo, id, new audioMode::value_type(value) )
{ }

inline H235Mode_mediaMode::H235Mode_mediaMode(dataMode::Id id, dataMode::const_reference value)
  : Inherited(&theInfo, id, new dataMode::value_type(value) )
{ }


inline void H235Mode_mediaMode::swap(H235Mode_mediaMode & other)
{  Inherited::swap(other); }

inline H235Mode_mediaMode* H235Mode_mediaMode::clone() const
{ return static_cast<H235Mode_mediaMode*> (Inherited::clone()); }

inline bool H235Mode_mediaMode::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MultiplexCapability::nonStandard::const_reference MultiplexCapability::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline MultiplexCapability::nonStandard::reference MultiplexCapability::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline MultiplexCapability::nonStandard::reference MultiplexCapability::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline MultiplexCapability::nonStandard::reference MultiplexCapability::select_nonStandard (MultiplexCapability::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool MultiplexCapability::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline MultiplexCapability::h222Capability::const_reference MultiplexCapability::get_h222Capability () const
{
    assert(currentSelection() ==h222Capability::id_);
    return *static_cast<h222Capability::const_pointer>(choice.get());
}

inline MultiplexCapability::h222Capability::reference MultiplexCapability::ref_h222Capability ()
{
    assert(currentSelection() ==h222Capability::id_);
    return *static_cast<h222Capability::pointer>(choice.get());
}

inline MultiplexCapability::h222Capability::reference MultiplexCapability::select_h222Capability ()
{
    return *static_cast<h222Capability::pointer>(setSelection(h222Capability::id_, ASN1::AbstractData::create( &h222Capability::value_type::theInfo)));
}

inline MultiplexCapability::h222Capability::reference MultiplexCapability::select_h222Capability (MultiplexCapability::h222Capability::const_reference value)
{
    return select_h222Capability() = value;
}

inline bool MultiplexCapability::h222Capability_isSelected() const
{ 
    return currentSelection() == h222Capability::id_; 
}

inline MultiplexCapability::h223Capability::const_reference MultiplexCapability::get_h223Capability () const
{
    assert(currentSelection() ==h223Capability::id_);
    return *static_cast<h223Capability::const_pointer>(choice.get());
}

inline MultiplexCapability::h223Capability::reference MultiplexCapability::ref_h223Capability ()
{
    assert(currentSelection() ==h223Capability::id_);
    return *static_cast<h223Capability::pointer>(choice.get());
}

inline MultiplexCapability::h223Capability::reference MultiplexCapability::select_h223Capability ()
{
    return *static_cast<h223Capability::pointer>(setSelection(h223Capability::id_, ASN1::AbstractData::create( &h223Capability::value_type::theInfo)));
}

inline MultiplexCapability::h223Capability::reference MultiplexCapability::select_h223Capability (MultiplexCapability::h223Capability::const_reference value)
{
    return select_h223Capability() = value;
}

inline bool MultiplexCapability::h223Capability_isSelected() const
{ 
    return currentSelection() == h223Capability::id_; 
}

inline MultiplexCapability::v76Capability::const_reference MultiplexCapability::get_v76Capability () const
{
    assert(currentSelection() ==v76Capability::id_);
    return *static_cast<v76Capability::const_pointer>(choice.get());
}

inline MultiplexCapability::v76Capability::reference MultiplexCapability::ref_v76Capability ()
{
    assert(currentSelection() ==v76Capability::id_);
    return *static_cast<v76Capability::pointer>(choice.get());
}

inline MultiplexCapability::v76Capability::reference MultiplexCapability::select_v76Capability ()
{
    return *static_cast<v76Capability::pointer>(setSelection(v76Capability::id_, ASN1::AbstractData::create( &v76Capability::value_type::theInfo)));
}

inline MultiplexCapability::v76Capability::reference MultiplexCapability::select_v76Capability (MultiplexCapability::v76Capability::const_reference value)
{
    return select_v76Capability() = value;
}

inline bool MultiplexCapability::v76Capability_isSelected() const
{ 
    return currentSelection() == v76Capability::id_; 
}

inline MultiplexCapability::h2250Capability::const_reference MultiplexCapability::get_h2250Capability () const
{
    assert(currentSelection() ==h2250Capability::id_);
    return *static_cast<h2250Capability::const_pointer>(choice.get());
}

inline MultiplexCapability::h2250Capability::reference MultiplexCapability::ref_h2250Capability ()
{
    assert(currentSelection() ==h2250Capability::id_);
    return *static_cast<h2250Capability::pointer>(choice.get());
}

inline MultiplexCapability::h2250Capability::reference MultiplexCapability::select_h2250Capability ()
{
    return *static_cast<h2250Capability::pointer>(setSelection(h2250Capability::id_, ASN1::AbstractData::create( &h2250Capability::value_type::theInfo)));
}

inline MultiplexCapability::h2250Capability::reference MultiplexCapability::select_h2250Capability (MultiplexCapability::h2250Capability::const_reference value)
{
    return select_h2250Capability() = value;
}

inline bool MultiplexCapability::h2250Capability_isSelected() const
{ 
    return currentSelection() == h2250Capability::id_; 
}

inline MultiplexCapability::genericMultiplexCapability::const_reference MultiplexCapability::get_genericMultiplexCapability () const
{
    assert(currentSelection() ==genericMultiplexCapability::id_);
    return *static_cast<genericMultiplexCapability::const_pointer>(choice.get());
}

inline MultiplexCapability::genericMultiplexCapability::reference MultiplexCapability::ref_genericMultiplexCapability ()
{
    assert(currentSelection() ==genericMultiplexCapability::id_);
    return *static_cast<genericMultiplexCapability::pointer>(choice.get());
}

inline MultiplexCapability::genericMultiplexCapability::reference MultiplexCapability::select_genericMultiplexCapability ()
{
    return *static_cast<genericMultiplexCapability::pointer>(setSelection(genericMultiplexCapability::id_, ASN1::AbstractData::create( &genericMultiplexCapability::value_type::theInfo)));
}

inline MultiplexCapability::genericMultiplexCapability::reference MultiplexCapability::select_genericMultiplexCapability (MultiplexCapability::genericMultiplexCapability::const_reference value)
{
    return select_genericMultiplexCapability() = value;
}

inline bool MultiplexCapability::genericMultiplexCapability_isSelected() const
{ 
    return currentSelection() == genericMultiplexCapability::id_; 
}

inline MultiplexCapability::MultiplexCapability(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline MultiplexCapability::MultiplexCapability(h222Capability::Id id, h222Capability::const_reference value)
  : Inherited(&theInfo, id, new h222Capability::value_type(value) )
{ }

inline MultiplexCapability::MultiplexCapability(h223Capability::Id id, h223Capability::const_reference value)
  : Inherited(&theInfo, id, new h223Capability::value_type(value) )
{ }

inline MultiplexCapability::MultiplexCapability(v76Capability::Id id, v76Capability::const_reference value)
  : Inherited(&theInfo, id, new v76Capability::value_type(value) )
{ }

inline MultiplexCapability::MultiplexCapability(h2250Capability::Id id, h2250Capability::const_reference value)
  : Inherited(&theInfo, id, new h2250Capability::value_type(value) )
{ }

inline MultiplexCapability::MultiplexCapability(genericMultiplexCapability::Id id, genericMultiplexCapability::const_reference value)
  : Inherited(&theInfo, id, new genericMultiplexCapability::value_type(value) )
{ }


inline void MultiplexCapability::swap(MultiplexCapability & other)
{  Inherited::swap(other); }

inline MultiplexCapability* MultiplexCapability::clone() const
{ return static_cast<MultiplexCapability*> (Inherited::clone()); }

inline bool MultiplexCapability::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline VideoCapability::nonStandard::const_reference VideoCapability::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline VideoCapability::nonStandard::reference VideoCapability::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline VideoCapability::nonStandard::reference VideoCapability::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline VideoCapability::nonStandard::reference VideoCapability::select_nonStandard (VideoCapability::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool VideoCapability::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline VideoCapability::h261VideoCapability::const_reference VideoCapability::get_h261VideoCapability () const
{
    assert(currentSelection() ==h261VideoCapability::id_);
    return *static_cast<h261VideoCapability::const_pointer>(choice.get());
}

inline VideoCapability::h261VideoCapability::reference VideoCapability::ref_h261VideoCapability ()
{
    assert(currentSelection() ==h261VideoCapability::id_);
    return *static_cast<h261VideoCapability::pointer>(choice.get());
}

inline VideoCapability::h261VideoCapability::reference VideoCapability::select_h261VideoCapability ()
{
    return *static_cast<h261VideoCapability::pointer>(setSelection(h261VideoCapability::id_, ASN1::AbstractData::create( &h261VideoCapability::value_type::theInfo)));
}

inline VideoCapability::h261VideoCapability::reference VideoCapability::select_h261VideoCapability (VideoCapability::h261VideoCapability::const_reference value)
{
    return select_h261VideoCapability() = value;
}

inline bool VideoCapability::h261VideoCapability_isSelected() const
{ 
    return currentSelection() == h261VideoCapability::id_; 
}

inline VideoCapability::h262VideoCapability::const_reference VideoCapability::get_h262VideoCapability () const
{
    assert(currentSelection() ==h262VideoCapability::id_);
    return *static_cast<h262VideoCapability::const_pointer>(choice.get());
}

inline VideoCapability::h262VideoCapability::reference VideoCapability::ref_h262VideoCapability ()
{
    assert(currentSelection() ==h262VideoCapability::id_);
    return *static_cast<h262VideoCapability::pointer>(choice.get());
}

inline VideoCapability::h262VideoCapability::reference VideoCapability::select_h262VideoCapability ()
{
    return *static_cast<h262VideoCapability::pointer>(setSelection(h262VideoCapability::id_, ASN1::AbstractData::create( &h262VideoCapability::value_type::theInfo)));
}

inline VideoCapability::h262VideoCapability::reference VideoCapability::select_h262VideoCapability (VideoCapability::h262VideoCapability::const_reference value)
{
    return select_h262VideoCapability() = value;
}

inline bool VideoCapability::h262VideoCapability_isSelected() const
{ 
    return currentSelection() == h262VideoCapability::id_; 
}

inline VideoCapability::h263VideoCapability::const_reference VideoCapability::get_h263VideoCapability () const
{
    assert(currentSelection() ==h263VideoCapability::id_);
    return *static_cast<h263VideoCapability::const_pointer>(choice.get());
}

inline VideoCapability::h263VideoCapability::reference VideoCapability::ref_h263VideoCapability ()
{
    assert(currentSelection() ==h263VideoCapability::id_);
    return *static_cast<h263VideoCapability::pointer>(choice.get());
}

inline VideoCapability::h263VideoCapability::reference VideoCapability::select_h263VideoCapability ()
{
    return *static_cast<h263VideoCapability::pointer>(setSelection(h263VideoCapability::id_, ASN1::AbstractData::create( &h263VideoCapability::value_type::theInfo)));
}

inline VideoCapability::h263VideoCapability::reference VideoCapability::select_h263VideoCapability (VideoCapability::h263VideoCapability::const_reference value)
{
    return select_h263VideoCapability() = value;
}

inline bool VideoCapability::h263VideoCapability_isSelected() const
{ 
    return currentSelection() == h263VideoCapability::id_; 
}

inline VideoCapability::is11172VideoCapability::const_reference VideoCapability::get_is11172VideoCapability () const
{
    assert(currentSelection() ==is11172VideoCapability::id_);
    return *static_cast<is11172VideoCapability::const_pointer>(choice.get());
}

inline VideoCapability::is11172VideoCapability::reference VideoCapability::ref_is11172VideoCapability ()
{
    assert(currentSelection() ==is11172VideoCapability::id_);
    return *static_cast<is11172VideoCapability::pointer>(choice.get());
}

inline VideoCapability::is11172VideoCapability::reference VideoCapability::select_is11172VideoCapability ()
{
    return *static_cast<is11172VideoCapability::pointer>(setSelection(is11172VideoCapability::id_, ASN1::AbstractData::create( &is11172VideoCapability::value_type::theInfo)));
}

inline VideoCapability::is11172VideoCapability::reference VideoCapability::select_is11172VideoCapability (VideoCapability::is11172VideoCapability::const_reference value)
{
    return select_is11172VideoCapability() = value;
}

inline bool VideoCapability::is11172VideoCapability_isSelected() const
{ 
    return currentSelection() == is11172VideoCapability::id_; 
}

inline VideoCapability::genericVideoCapability::const_reference VideoCapability::get_genericVideoCapability () const
{
    assert(currentSelection() ==genericVideoCapability::id_);
    return *static_cast<genericVideoCapability::const_pointer>(choice.get());
}

inline VideoCapability::genericVideoCapability::reference VideoCapability::ref_genericVideoCapability ()
{
    assert(currentSelection() ==genericVideoCapability::id_);
    return *static_cast<genericVideoCapability::pointer>(choice.get());
}

inline VideoCapability::genericVideoCapability::reference VideoCapability::select_genericVideoCapability ()
{
    return *static_cast<genericVideoCapability::pointer>(setSelection(genericVideoCapability::id_, ASN1::AbstractData::create( &genericVideoCapability::value_type::theInfo)));
}

inline VideoCapability::genericVideoCapability::reference VideoCapability::select_genericVideoCapability (VideoCapability::genericVideoCapability::const_reference value)
{
    return select_genericVideoCapability() = value;
}

inline bool VideoCapability::genericVideoCapability_isSelected() const
{ 
    return currentSelection() == genericVideoCapability::id_; 
}

inline VideoCapability::extendedVideoCapability::const_reference VideoCapability::get_extendedVideoCapability () const
{
    assert(currentSelection() ==extendedVideoCapability::id_);
    return *static_cast<extendedVideoCapability::const_pointer>(choice.get());
}

inline VideoCapability::extendedVideoCapability::reference VideoCapability::ref_extendedVideoCapability ()
{
    assert(currentSelection() ==extendedVideoCapability::id_);
    return *static_cast<extendedVideoCapability::pointer>(choice.get());
}

inline VideoCapability::extendedVideoCapability::reference VideoCapability::select_extendedVideoCapability ()
{
    return *static_cast<extendedVideoCapability::pointer>(setSelection(extendedVideoCapability::id_, ASN1::AbstractData::create( &extendedVideoCapability::value_type::theInfo)));
}

inline VideoCapability::extendedVideoCapability::reference VideoCapability::select_extendedVideoCapability (VideoCapability::extendedVideoCapability::const_reference value)
{
    return select_extendedVideoCapability() = value;
}

inline bool VideoCapability::extendedVideoCapability_isSelected() const
{ 
    return currentSelection() == extendedVideoCapability::id_; 
}

inline VideoCapability::VideoCapability(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline VideoCapability::VideoCapability(h261VideoCapability::Id id, h261VideoCapability::const_reference value)
  : Inherited(&theInfo, id, new h261VideoCapability::value_type(value) )
{ }

inline VideoCapability::VideoCapability(h262VideoCapability::Id id, h262VideoCapability::const_reference value)
  : Inherited(&theInfo, id, new h262VideoCapability::value_type(value) )
{ }

inline VideoCapability::VideoCapability(h263VideoCapability::Id id, h263VideoCapability::const_reference value)
  : Inherited(&theInfo, id, new h263VideoCapability::value_type(value) )
{ }

inline VideoCapability::VideoCapability(is11172VideoCapability::Id id, is11172VideoCapability::const_reference value)
  : Inherited(&theInfo, id, new is11172VideoCapability::value_type(value) )
{ }

inline VideoCapability::VideoCapability(genericVideoCapability::Id id, genericVideoCapability::const_reference value)
  : Inherited(&theInfo, id, new genericVideoCapability::value_type(value) )
{ }

inline VideoCapability::VideoCapability(extendedVideoCapability::Id id, extendedVideoCapability::const_reference value)
  : Inherited(&theInfo, id, new extendedVideoCapability::value_type(value) )
{ }


inline void VideoCapability::swap(VideoCapability & other)
{  Inherited::swap(other); }

inline VideoCapability* VideoCapability::clone() const
{ return static_cast<VideoCapability*> (Inherited::clone()); }

inline bool VideoCapability::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ExtendedVideoCapability::videoCapability::const_reference ExtendedVideoCapability::get_videoCapability () const
{ return *static_cast<videoCapability::const_pointer>(fields[0]);}

inline ExtendedVideoCapability::videoCapability::reference ExtendedVideoCapability::ref_videoCapability ()
{ return *static_cast<videoCapability::pointer>(fields[0]);}

inline ExtendedVideoCapability::videoCapability::reference ExtendedVideoCapability::set_videoCapability ()
{ return *static_cast<videoCapability::pointer>(fields[0]);}

inline ExtendedVideoCapability::videoCapability::reference ExtendedVideoCapability::set_videoCapability (videoCapability::const_reference value)
{ return *static_cast<videoCapability::pointer>(fields[0]) = value ;}

inline ExtendedVideoCapability::videoCapabilityExtension::const_reference ExtendedVideoCapability::get_videoCapabilityExtension () const
{
  assert(hasOptionalField(e_videoCapabilityExtension));
  return *static_cast<videoCapabilityExtension::const_pointer>(fields[1]);
}

inline ExtendedVideoCapability::videoCapabilityExtension::reference ExtendedVideoCapability::ref_videoCapabilityExtension ()
{
  assert(hasOptionalField(e_videoCapabilityExtension));
  return *static_cast<videoCapabilityExtension::pointer>(fields[1]);
}

inline ExtendedVideoCapability::videoCapabilityExtension::reference ExtendedVideoCapability::set_videoCapabilityExtension ()
{
  includeOptionalField( e_videoCapabilityExtension, 1);
  return *static_cast<videoCapabilityExtension::pointer>(fields[1]);
}

inline ExtendedVideoCapability::videoCapabilityExtension::reference ExtendedVideoCapability::set_videoCapabilityExtension (videoCapabilityExtension::const_reference value)
{
  includeOptionalField( e_videoCapabilityExtension, 1);
  return *static_cast<videoCapabilityExtension::pointer>(fields[1]) = value;
}

inline void ExtendedVideoCapability::omit_videoCapabilityExtension ()
{ removeOptionalField( e_videoCapabilityExtension); }

inline bool ExtendedVideoCapability::videoCapabilityExtension_isPresent () const
{ return hasOptionalField( e_videoCapabilityExtension); }

inline void ExtendedVideoCapability::swap(ExtendedVideoCapability& other)
{ Inherited::swap(other); }

inline ExtendedVideoCapability* ExtendedVideoCapability::clone() const
{ return static_cast<ExtendedVideoCapability*> (Inherited::clone()); }

inline DataType::nonStandard::const_reference DataType::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline DataType::nonStandard::reference DataType::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline DataType::nonStandard::reference DataType::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline DataType::nonStandard::reference DataType::select_nonStandard (DataType::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool DataType::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline DataType::nullData::reference DataType::select_nullData ()
{
    return *static_cast<nullData::pointer>(setSelection(nullData::id_, ASN1::AbstractData::create( &nullData::value_type::theInfo)));
}

inline bool DataType::nullData_isSelected() const
{ 
    return currentSelection() == nullData::id_; 
}

inline DataType::videoData::const_reference DataType::get_videoData () const
{
    assert(currentSelection() ==videoData::id_);
    return *static_cast<videoData::const_pointer>(choice.get());
}

inline DataType::videoData::reference DataType::ref_videoData ()
{
    assert(currentSelection() ==videoData::id_);
    return *static_cast<videoData::pointer>(choice.get());
}

inline DataType::videoData::reference DataType::select_videoData ()
{
    return *static_cast<videoData::pointer>(setSelection(videoData::id_, ASN1::AbstractData::create( &videoData::value_type::theInfo)));
}

inline DataType::videoData::reference DataType::select_videoData (DataType::videoData::const_reference value)
{
    return select_videoData() = value;
}

inline bool DataType::videoData_isSelected() const
{ 
    return currentSelection() == videoData::id_; 
}

inline DataType::audioData::const_reference DataType::get_audioData () const
{
    assert(currentSelection() ==audioData::id_);
    return *static_cast<audioData::const_pointer>(choice.get());
}

inline DataType::audioData::reference DataType::ref_audioData ()
{
    assert(currentSelection() ==audioData::id_);
    return *static_cast<audioData::pointer>(choice.get());
}

inline DataType::audioData::reference DataType::select_audioData ()
{
    return *static_cast<audioData::pointer>(setSelection(audioData::id_, ASN1::AbstractData::create( &audioData::value_type::theInfo)));
}

inline DataType::audioData::reference DataType::select_audioData (DataType::audioData::const_reference value)
{
    return select_audioData() = value;
}

inline bool DataType::audioData_isSelected() const
{ 
    return currentSelection() == audioData::id_; 
}

inline DataType::data::const_reference DataType::get_data () const
{
    assert(currentSelection() ==data::id_);
    return *static_cast<data::const_pointer>(choice.get());
}

inline DataType::data::reference DataType::ref_data ()
{
    assert(currentSelection() ==data::id_);
    return *static_cast<data::pointer>(choice.get());
}

inline DataType::data::reference DataType::select_data ()
{
    return *static_cast<data::pointer>(setSelection(data::id_, ASN1::AbstractData::create( &data::value_type::theInfo)));
}

inline DataType::data::reference DataType::select_data (DataType::data::const_reference value)
{
    return select_data() = value;
}

inline bool DataType::data_isSelected() const
{ 
    return currentSelection() == data::id_; 
}

inline DataType::encryptionData::const_reference DataType::get_encryptionData () const
{
    assert(currentSelection() ==encryptionData::id_);
    return *static_cast<encryptionData::const_pointer>(choice.get());
}

inline DataType::encryptionData::reference DataType::ref_encryptionData ()
{
    assert(currentSelection() ==encryptionData::id_);
    return *static_cast<encryptionData::pointer>(choice.get());
}

inline DataType::encryptionData::reference DataType::select_encryptionData ()
{
    return *static_cast<encryptionData::pointer>(setSelection(encryptionData::id_, ASN1::AbstractData::create( &encryptionData::value_type::theInfo)));
}

inline DataType::encryptionData::reference DataType::select_encryptionData (DataType::encryptionData::const_reference value)
{
    return select_encryptionData() = value;
}

inline bool DataType::encryptionData_isSelected() const
{ 
    return currentSelection() == encryptionData::id_; 
}

inline DataType::h235Control::const_reference DataType::get_h235Control () const
{
    assert(currentSelection() ==h235Control::id_);
    return *static_cast<h235Control::const_pointer>(choice.get());
}

inline DataType::h235Control::reference DataType::ref_h235Control ()
{
    assert(currentSelection() ==h235Control::id_);
    return *static_cast<h235Control::pointer>(choice.get());
}

inline DataType::h235Control::reference DataType::select_h235Control ()
{
    return *static_cast<h235Control::pointer>(setSelection(h235Control::id_, ASN1::AbstractData::create( &h235Control::value_type::theInfo)));
}

inline DataType::h235Control::reference DataType::select_h235Control (DataType::h235Control::const_reference value)
{
    return select_h235Control() = value;
}

inline bool DataType::h235Control_isSelected() const
{ 
    return currentSelection() == h235Control::id_; 
}

inline DataType::multiplexedStream::const_reference DataType::get_multiplexedStream () const
{
    assert(currentSelection() ==multiplexedStream::id_);
    return *static_cast<multiplexedStream::const_pointer>(choice.get());
}

inline DataType::multiplexedStream::reference DataType::ref_multiplexedStream ()
{
    assert(currentSelection() ==multiplexedStream::id_);
    return *static_cast<multiplexedStream::pointer>(choice.get());
}

inline DataType::multiplexedStream::reference DataType::select_multiplexedStream ()
{
    return *static_cast<multiplexedStream::pointer>(setSelection(multiplexedStream::id_, ASN1::AbstractData::create( &multiplexedStream::value_type::theInfo)));
}

inline DataType::multiplexedStream::reference DataType::select_multiplexedStream (DataType::multiplexedStream::const_reference value)
{
    return select_multiplexedStream() = value;
}

inline bool DataType::multiplexedStream_isSelected() const
{ 
    return currentSelection() == multiplexedStream::id_; 
}

inline DataType::redundancyEncoding::const_reference DataType::get_redundancyEncoding () const
{
    assert(currentSelection() ==redundancyEncoding::id_);
    return *static_cast<redundancyEncoding::const_pointer>(choice.get());
}

inline DataType::redundancyEncoding::reference DataType::ref_redundancyEncoding ()
{
    assert(currentSelection() ==redundancyEncoding::id_);
    return *static_cast<redundancyEncoding::pointer>(choice.get());
}

inline DataType::redundancyEncoding::reference DataType::select_redundancyEncoding ()
{
    return *static_cast<redundancyEncoding::pointer>(setSelection(redundancyEncoding::id_, ASN1::AbstractData::create( &redundancyEncoding::value_type::theInfo)));
}

inline DataType::redundancyEncoding::reference DataType::select_redundancyEncoding (DataType::redundancyEncoding::const_reference value)
{
    return select_redundancyEncoding() = value;
}

inline bool DataType::redundancyEncoding_isSelected() const
{ 
    return currentSelection() == redundancyEncoding::id_; 
}

inline DataType::multiplePayloadStream::const_reference DataType::get_multiplePayloadStream () const
{
    assert(currentSelection() ==multiplePayloadStream::id_);
    return *static_cast<multiplePayloadStream::const_pointer>(choice.get());
}

inline DataType::multiplePayloadStream::reference DataType::ref_multiplePayloadStream ()
{
    assert(currentSelection() ==multiplePayloadStream::id_);
    return *static_cast<multiplePayloadStream::pointer>(choice.get());
}

inline DataType::multiplePayloadStream::reference DataType::select_multiplePayloadStream ()
{
    return *static_cast<multiplePayloadStream::pointer>(setSelection(multiplePayloadStream::id_, ASN1::AbstractData::create( &multiplePayloadStream::value_type::theInfo)));
}

inline DataType::multiplePayloadStream::reference DataType::select_multiplePayloadStream (DataType::multiplePayloadStream::const_reference value)
{
    return select_multiplePayloadStream() = value;
}

inline bool DataType::multiplePayloadStream_isSelected() const
{ 
    return currentSelection() == multiplePayloadStream::id_; 
}

inline DataType::depFec::const_reference DataType::get_depFec () const
{
    assert(currentSelection() ==depFec::id_);
    return *static_cast<depFec::const_pointer>(choice.get());
}

inline DataType::depFec::reference DataType::ref_depFec ()
{
    assert(currentSelection() ==depFec::id_);
    return *static_cast<depFec::pointer>(choice.get());
}

inline DataType::depFec::reference DataType::select_depFec ()
{
    return *static_cast<depFec::pointer>(setSelection(depFec::id_, ASN1::AbstractData::create( &depFec::value_type::theInfo)));
}

inline DataType::depFec::reference DataType::select_depFec (DataType::depFec::const_reference value)
{
    return select_depFec() = value;
}

inline bool DataType::depFec_isSelected() const
{ 
    return currentSelection() == depFec::id_; 
}

inline DataType::fec::const_reference DataType::get_fec () const
{
    assert(currentSelection() ==fec::id_);
    return *static_cast<fec::const_pointer>(choice.get());
}

inline DataType::fec::reference DataType::ref_fec ()
{
    assert(currentSelection() ==fec::id_);
    return *static_cast<fec::pointer>(choice.get());
}

inline DataType::fec::reference DataType::select_fec ()
{
    return *static_cast<fec::pointer>(setSelection(fec::id_, ASN1::AbstractData::create( &fec::value_type::theInfo)));
}

inline DataType::fec::reference DataType::select_fec (DataType::fec::const_reference value)
{
    return select_fec() = value;
}

inline bool DataType::fec_isSelected() const
{ 
    return currentSelection() == fec::id_; 
}

inline DataType::DataType(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline DataType::DataType(nullData::Id id, nullData::const_reference value)
  : Inherited(&theInfo, id, new nullData::value_type(value) )
{ }

inline DataType::DataType(videoData::Id id, videoData::const_reference value)
  : Inherited(&theInfo, id, new videoData::value_type(value) )
{ }

inline DataType::DataType(audioData::Id id, audioData::const_reference value)
  : Inherited(&theInfo, id, new audioData::value_type(value) )
{ }

inline DataType::DataType(data::Id id, data::const_reference value)
  : Inherited(&theInfo, id, new data::value_type(value) )
{ }

inline DataType::DataType(encryptionData::Id id, encryptionData::const_reference value)
  : Inherited(&theInfo, id, new encryptionData::value_type(value) )
{ }

inline DataType::DataType(h235Control::Id id, h235Control::const_reference value)
  : Inherited(&theInfo, id, new h235Control::value_type(value) )
{ }

inline DataType::DataType(multiplexedStream::Id id, multiplexedStream::const_reference value)
  : Inherited(&theInfo, id, new multiplexedStream::value_type(value) )
{ }

inline DataType::DataType(redundancyEncoding::Id id, redundancyEncoding::const_reference value)
  : Inherited(&theInfo, id, new redundancyEncoding::value_type(value) )
{ }

inline DataType::DataType(multiplePayloadStream::Id id, multiplePayloadStream::const_reference value)
  : Inherited(&theInfo, id, new multiplePayloadStream::value_type(value) )
{ }

inline DataType::DataType(depFec::Id id, depFec::const_reference value)
  : Inherited(&theInfo, id, new depFec::value_type(value) )
{ }

inline DataType::DataType(fec::Id id, fec::const_reference value)
  : Inherited(&theInfo, id, new fec::value_type(value) )
{ }


inline void DataType::swap(DataType & other)
{  Inherited::swap(other); }

inline DataType* DataType::clone() const
{ return static_cast<DataType*> (Inherited::clone()); }

inline bool DataType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline H235Mode::encryptionAuthenticationAndIntegrity::const_reference H235Mode::get_encryptionAuthenticationAndIntegrity () const
{ return *static_cast<encryptionAuthenticationAndIntegrity::const_pointer>(fields[0]);}

inline H235Mode::encryptionAuthenticationAndIntegrity::reference H235Mode::ref_encryptionAuthenticationAndIntegrity ()
{ return *static_cast<encryptionAuthenticationAndIntegrity::pointer>(fields[0]);}

inline H235Mode::encryptionAuthenticationAndIntegrity::reference H235Mode::set_encryptionAuthenticationAndIntegrity ()
{ return *static_cast<encryptionAuthenticationAndIntegrity::pointer>(fields[0]);}

inline H235Mode::encryptionAuthenticationAndIntegrity::reference H235Mode::set_encryptionAuthenticationAndIntegrity (encryptionAuthenticationAndIntegrity::const_reference value)
{ return *static_cast<encryptionAuthenticationAndIntegrity::pointer>(fields[0]) = value ;}

inline H235Mode::mediaMode::const_reference H235Mode::get_mediaMode () const
{ return *static_cast<mediaMode::const_pointer>(fields[1]);}

inline H235Mode::mediaMode::reference H235Mode::ref_mediaMode ()
{ return *static_cast<mediaMode::pointer>(fields[1]);}

inline H235Mode::mediaMode::reference H235Mode::set_mediaMode ()
{ return *static_cast<mediaMode::pointer>(fields[1]);}

inline H235Mode::mediaMode::reference H235Mode::set_mediaMode (mediaMode::const_reference value)
{ return *static_cast<mediaMode::pointer>(fields[1]) = value ;}

inline void H235Mode::swap(H235Mode& other)
{ Inherited::swap(other); }

inline H235Mode* H235Mode::clone() const
{ return static_cast<H235Mode*> (Inherited::clone()); }

inline OpenLogicalChannel_forwardLogicalChannelParameters::portNumber::const_reference OpenLogicalChannel_forwardLogicalChannelParameters::get_portNumber () const
{
  assert(hasOptionalField(e_portNumber));
  return *static_cast<portNumber::const_pointer>(fields[0]);
}

inline OpenLogicalChannel_forwardLogicalChannelParameters::portNumber::reference OpenLogicalChannel_forwardLogicalChannelParameters::ref_portNumber ()
{
  assert(hasOptionalField(e_portNumber));
  return *static_cast<portNumber::pointer>(fields[0]);
}

inline OpenLogicalChannel_forwardLogicalChannelParameters::portNumber::reference OpenLogicalChannel_forwardLogicalChannelParameters::set_portNumber ()
{
  includeOptionalField( e_portNumber, 0);
  return *static_cast<portNumber::pointer>(fields[0]);
}

inline OpenLogicalChannel_forwardLogicalChannelParameters::portNumber::reference OpenLogicalChannel_forwardLogicalChannelParameters::set_portNumber (portNumber::value_type::int_type value)
{
  includeOptionalField( e_portNumber, 0);
  return *static_cast<portNumber::pointer>(fields[0]) = value;
}

inline void OpenLogicalChannel_forwardLogicalChannelParameters::omit_portNumber ()
{ removeOptionalField( e_portNumber); }

inline bool OpenLogicalChannel_forwardLogicalChannelParameters::portNumber_isPresent () const
{ return hasOptionalField( e_portNumber); }

inline OpenLogicalChannel_forwardLogicalChannelParameters::dataType::const_reference OpenLogicalChannel_forwardLogicalChannelParameters::get_dataType () const
{ return *static_cast<dataType::const_pointer>(fields[1]);}

inline OpenLogicalChannel_forwardLogicalChannelParameters::dataType::reference OpenLogicalChannel_forwardLogicalChannelParameters::ref_dataType ()
{ return *static_cast<dataType::pointer>(fields[1]);}

inline OpenLogicalChannel_forwardLogicalChannelParameters::dataType::reference OpenLogicalChannel_forwardLogicalChannelParameters::set_dataType ()
{ return *static_cast<dataType::pointer>(fields[1]);}

inline OpenLogicalChannel_forwardLogicalChannelParameters::dataType::reference OpenLogicalChannel_forwardLogicalChannelParameters::set_dataType (dataType::const_reference value)
{ return *static_cast<dataType::pointer>(fields[1]) = value ;}

inline OpenLogicalChannel_forwardLogicalChannelParameters::multiplexParameters::const_reference OpenLogicalChannel_forwardLogicalChannelParameters::get_multiplexParameters () const
{ return *static_cast<multiplexParameters::const_pointer>(fields[2]);}

inline OpenLogicalChannel_forwardLogicalChannelParameters::multiplexParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters::ref_multiplexParameters ()
{ return *static_cast<multiplexParameters::pointer>(fields[2]);}

inline OpenLogicalChannel_forwardLogicalChannelParameters::multiplexParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters::set_multiplexParameters ()
{ return *static_cast<multiplexParameters::pointer>(fields[2]);}

inline OpenLogicalChannel_forwardLogicalChannelParameters::multiplexParameters::reference OpenLogicalChannel_forwardLogicalChannelParameters::set_multiplexParameters (multiplexParameters::const_reference value)
{ return *static_cast<multiplexParameters::pointer>(fields[2]) = value ;}

inline OpenLogicalChannel_forwardLogicalChannelParameters::forwardLogicalChannelDependency::const_reference OpenLogicalChannel_forwardLogicalChannelParameters::get_forwardLogicalChannelDependency () const
{
  assert(hasOptionalField(e_forwardLogicalChannelDependency));
  return *static_cast<forwardLogicalChannelDependency::const_pointer>(fields[3]);
}

inline OpenLogicalChannel_forwardLogicalChannelParameters::forwardLogicalChannelDependency::reference OpenLogicalChannel_forwardLogicalChannelParameters::ref_forwardLogicalChannelDependency ()
{
  assert(hasOptionalField(e_forwardLogicalChannelDependency));
  return *static_cast<forwardLogicalChannelDependency::pointer>(fields[3]);
}

inline OpenLogicalChannel_forwardLogicalChannelParameters::forwardLogicalChannelDependency::reference OpenLogicalChannel_forwardLogicalChannelParameters::set_forwardLogicalChannelDependency ()
{
  includeOptionalField( e_forwardLogicalChannelDependency, 3);
  return *static_cast<forwardLogicalChannelDependency::pointer>(fields[3]);
}

inline OpenLogicalChannel_forwardLogicalChannelParameters::forwardLogicalChannelDependency::reference OpenLogicalChannel_forwardLogicalChannelParameters::set_forwardLogicalChannelDependency (forwardLogicalChannelDependency::value_type::int_type value)
{
  includeOptionalField( e_forwardLogicalChannelDependency, 3);
  return *static_cast<forwardLogicalChannelDependency::pointer>(fields[3]) = value;
}

inline void OpenLogicalChannel_forwardLogicalChannelParameters::omit_forwardLogicalChannelDependency ()
{ removeOptionalField( e_forwardLogicalChannelDependency); }

inline bool OpenLogicalChannel_forwardLogicalChannelParameters::forwardLogicalChannelDependency_isPresent () const
{ return hasOptionalField( e_forwardLogicalChannelDependency); }

inline OpenLogicalChannel_forwardLogicalChannelParameters::replacementFor::const_reference OpenLogicalChannel_forwardLogicalChannelParameters::get_replacementFor () const
{
  assert(hasOptionalField(e_replacementFor));
  return *static_cast<replacementFor::const_pointer>(fields[4]);
}

inline OpenLogicalChannel_forwardLogicalChannelParameters::replacementFor::reference OpenLogicalChannel_forwardLogicalChannelParameters::ref_replacementFor ()
{
  assert(hasOptionalField(e_replacementFor));
  return *static_cast<replacementFor::pointer>(fields[4]);
}

inline OpenLogicalChannel_forwardLogicalChannelParameters::replacementFor::reference OpenLogicalChannel_forwardLogicalChannelParameters::set_replacementFor ()
{
  includeOptionalField( e_replacementFor, 4);
  return *static_cast<replacementFor::pointer>(fields[4]);
}

inline OpenLogicalChannel_forwardLogicalChannelParameters::replacementFor::reference OpenLogicalChannel_forwardLogicalChannelParameters::set_replacementFor (replacementFor::value_type::int_type value)
{
  includeOptionalField( e_replacementFor, 4);
  return *static_cast<replacementFor::pointer>(fields[4]) = value;
}

inline void OpenLogicalChannel_forwardLogicalChannelParameters::omit_replacementFor ()
{ removeOptionalField( e_replacementFor); }

inline bool OpenLogicalChannel_forwardLogicalChannelParameters::replacementFor_isPresent () const
{ return hasOptionalField( e_replacementFor); }

inline void OpenLogicalChannel_forwardLogicalChannelParameters::swap(OpenLogicalChannel_forwardLogicalChannelParameters& other)
{ Inherited::swap(other); }

inline OpenLogicalChannel_forwardLogicalChannelParameters* OpenLogicalChannel_forwardLogicalChannelParameters::clone() const
{ return static_cast<OpenLogicalChannel_forwardLogicalChannelParameters*> (Inherited::clone()); }

inline OpenLogicalChannel_reverseLogicalChannelParameters::dataType::const_reference OpenLogicalChannel_reverseLogicalChannelParameters::get_dataType () const
{ return *static_cast<dataType::const_pointer>(fields[0]);}

inline OpenLogicalChannel_reverseLogicalChannelParameters::dataType::reference OpenLogicalChannel_reverseLogicalChannelParameters::ref_dataType ()
{ return *static_cast<dataType::pointer>(fields[0]);}

inline OpenLogicalChannel_reverseLogicalChannelParameters::dataType::reference OpenLogicalChannel_reverseLogicalChannelParameters::set_dataType ()
{ return *static_cast<dataType::pointer>(fields[0]);}

inline OpenLogicalChannel_reverseLogicalChannelParameters::dataType::reference OpenLogicalChannel_reverseLogicalChannelParameters::set_dataType (dataType::const_reference value)
{ return *static_cast<dataType::pointer>(fields[0]) = value ;}

inline OpenLogicalChannel_reverseLogicalChannelParameters::multiplexParameters::const_reference OpenLogicalChannel_reverseLogicalChannelParameters::get_multiplexParameters () const
{
  assert(hasOptionalField(e_multiplexParameters));
  return *static_cast<multiplexParameters::const_pointer>(fields[1]);
}

inline OpenLogicalChannel_reverseLogicalChannelParameters::multiplexParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters::ref_multiplexParameters ()
{
  assert(hasOptionalField(e_multiplexParameters));
  return *static_cast<multiplexParameters::pointer>(fields[1]);
}

inline OpenLogicalChannel_reverseLogicalChannelParameters::multiplexParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters::set_multiplexParameters ()
{
  includeOptionalField( e_multiplexParameters, 1);
  return *static_cast<multiplexParameters::pointer>(fields[1]);
}

inline OpenLogicalChannel_reverseLogicalChannelParameters::multiplexParameters::reference OpenLogicalChannel_reverseLogicalChannelParameters::set_multiplexParameters (multiplexParameters::const_reference value)
{
  includeOptionalField( e_multiplexParameters, 1);
  return *static_cast<multiplexParameters::pointer>(fields[1]) = value;
}

inline void OpenLogicalChannel_reverseLogicalChannelParameters::omit_multiplexParameters ()
{ removeOptionalField( e_multiplexParameters); }

inline bool OpenLogicalChannel_reverseLogicalChannelParameters::multiplexParameters_isPresent () const
{ return hasOptionalField( e_multiplexParameters); }

inline OpenLogicalChannel_reverseLogicalChannelParameters::reverseLogicalChannelDependency::const_reference OpenLogicalChannel_reverseLogicalChannelParameters::get_reverseLogicalChannelDependency () const
{
  assert(hasOptionalField(e_reverseLogicalChannelDependency));
  return *static_cast<reverseLogicalChannelDependency::const_pointer>(fields[2]);
}

inline OpenLogicalChannel_reverseLogicalChannelParameters::reverseLogicalChannelDependency::reference OpenLogicalChannel_reverseLogicalChannelParameters::ref_reverseLogicalChannelDependency ()
{
  assert(hasOptionalField(e_reverseLogicalChannelDependency));
  return *static_cast<reverseLogicalChannelDependency::pointer>(fields[2]);
}

inline OpenLogicalChannel_reverseLogicalChannelParameters::reverseLogicalChannelDependency::reference OpenLogicalChannel_reverseLogicalChannelParameters::set_reverseLogicalChannelDependency ()
{
  includeOptionalField( e_reverseLogicalChannelDependency, 2);
  return *static_cast<reverseLogicalChannelDependency::pointer>(fields[2]);
}

inline OpenLogicalChannel_reverseLogicalChannelParameters::reverseLogicalChannelDependency::reference OpenLogicalChannel_reverseLogicalChannelParameters::set_reverseLogicalChannelDependency (reverseLogicalChannelDependency::value_type::int_type value)
{
  includeOptionalField( e_reverseLogicalChannelDependency, 2);
  return *static_cast<reverseLogicalChannelDependency::pointer>(fields[2]) = value;
}

inline void OpenLogicalChannel_reverseLogicalChannelParameters::omit_reverseLogicalChannelDependency ()
{ removeOptionalField( e_reverseLogicalChannelDependency); }

inline bool OpenLogicalChannel_reverseLogicalChannelParameters::reverseLogicalChannelDependency_isPresent () const
{ return hasOptionalField( e_reverseLogicalChannelDependency); }

inline OpenLogicalChannel_reverseLogicalChannelParameters::replacementFor::const_reference OpenLogicalChannel_reverseLogicalChannelParameters::get_replacementFor () const
{
  assert(hasOptionalField(e_replacementFor));
  return *static_cast<replacementFor::const_pointer>(fields[3]);
}

inline OpenLogicalChannel_reverseLogicalChannelParameters::replacementFor::reference OpenLogicalChannel_reverseLogicalChannelParameters::ref_replacementFor ()
{
  assert(hasOptionalField(e_replacementFor));
  return *static_cast<replacementFor::pointer>(fields[3]);
}

inline OpenLogicalChannel_reverseLogicalChannelParameters::replacementFor::reference OpenLogicalChannel_reverseLogicalChannelParameters::set_replacementFor ()
{
  includeOptionalField( e_replacementFor, 3);
  return *static_cast<replacementFor::pointer>(fields[3]);
}

inline OpenLogicalChannel_reverseLogicalChannelParameters::replacementFor::reference OpenLogicalChannel_reverseLogicalChannelParameters::set_replacementFor (replacementFor::value_type::int_type value)
{
  includeOptionalField( e_replacementFor, 3);
  return *static_cast<replacementFor::pointer>(fields[3]) = value;
}

inline void OpenLogicalChannel_reverseLogicalChannelParameters::omit_replacementFor ()
{ removeOptionalField( e_replacementFor); }

inline bool OpenLogicalChannel_reverseLogicalChannelParameters::replacementFor_isPresent () const
{ return hasOptionalField( e_replacementFor); }

inline void OpenLogicalChannel_reverseLogicalChannelParameters::swap(OpenLogicalChannel_reverseLogicalChannelParameters& other)
{ Inherited::swap(other); }

inline OpenLogicalChannel_reverseLogicalChannelParameters* OpenLogicalChannel_reverseLogicalChannelParameters::clone() const
{ return static_cast<OpenLogicalChannel_reverseLogicalChannelParameters*> (Inherited::clone()); }

inline RedundancyEncodingDTModeElement_type::nonStandard::const_reference RedundancyEncodingDTModeElement_type::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::nonStandard::reference RedundancyEncodingDTModeElement_type::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::nonStandard::reference RedundancyEncodingDTModeElement_type::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline RedundancyEncodingDTModeElement_type::nonStandard::reference RedundancyEncodingDTModeElement_type::select_nonStandard (RedundancyEncodingDTModeElement_type::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool RedundancyEncodingDTModeElement_type::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline RedundancyEncodingDTModeElement_type::videoMode::const_reference RedundancyEncodingDTModeElement_type::get_videoMode () const
{
    assert(currentSelection() ==videoMode::id_);
    return *static_cast<videoMode::const_pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::videoMode::reference RedundancyEncodingDTModeElement_type::ref_videoMode ()
{
    assert(currentSelection() ==videoMode::id_);
    return *static_cast<videoMode::pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::videoMode::reference RedundancyEncodingDTModeElement_type::select_videoMode ()
{
    return *static_cast<videoMode::pointer>(setSelection(videoMode::id_, ASN1::AbstractData::create( &videoMode::value_type::theInfo)));
}

inline RedundancyEncodingDTModeElement_type::videoMode::reference RedundancyEncodingDTModeElement_type::select_videoMode (RedundancyEncodingDTModeElement_type::videoMode::const_reference value)
{
    return select_videoMode() = value;
}

inline bool RedundancyEncodingDTModeElement_type::videoMode_isSelected() const
{ 
    return currentSelection() == videoMode::id_; 
}

inline RedundancyEncodingDTModeElement_type::audioMode::const_reference RedundancyEncodingDTModeElement_type::get_audioMode () const
{
    assert(currentSelection() ==audioMode::id_);
    return *static_cast<audioMode::const_pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::audioMode::reference RedundancyEncodingDTModeElement_type::ref_audioMode ()
{
    assert(currentSelection() ==audioMode::id_);
    return *static_cast<audioMode::pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::audioMode::reference RedundancyEncodingDTModeElement_type::select_audioMode ()
{
    return *static_cast<audioMode::pointer>(setSelection(audioMode::id_, ASN1::AbstractData::create( &audioMode::value_type::theInfo)));
}

inline RedundancyEncodingDTModeElement_type::audioMode::reference RedundancyEncodingDTModeElement_type::select_audioMode (RedundancyEncodingDTModeElement_type::audioMode::const_reference value)
{
    return select_audioMode() = value;
}

inline bool RedundancyEncodingDTModeElement_type::audioMode_isSelected() const
{ 
    return currentSelection() == audioMode::id_; 
}

inline RedundancyEncodingDTModeElement_type::dataMode::const_reference RedundancyEncodingDTModeElement_type::get_dataMode () const
{
    assert(currentSelection() ==dataMode::id_);
    return *static_cast<dataMode::const_pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::dataMode::reference RedundancyEncodingDTModeElement_type::ref_dataMode ()
{
    assert(currentSelection() ==dataMode::id_);
    return *static_cast<dataMode::pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::dataMode::reference RedundancyEncodingDTModeElement_type::select_dataMode ()
{
    return *static_cast<dataMode::pointer>(setSelection(dataMode::id_, ASN1::AbstractData::create( &dataMode::value_type::theInfo)));
}

inline RedundancyEncodingDTModeElement_type::dataMode::reference RedundancyEncodingDTModeElement_type::select_dataMode (RedundancyEncodingDTModeElement_type::dataMode::const_reference value)
{
    return select_dataMode() = value;
}

inline bool RedundancyEncodingDTModeElement_type::dataMode_isSelected() const
{ 
    return currentSelection() == dataMode::id_; 
}

inline RedundancyEncodingDTModeElement_type::encryptionMode::const_reference RedundancyEncodingDTModeElement_type::get_encryptionMode () const
{
    assert(currentSelection() ==encryptionMode::id_);
    return *static_cast<encryptionMode::const_pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::encryptionMode::reference RedundancyEncodingDTModeElement_type::ref_encryptionMode ()
{
    assert(currentSelection() ==encryptionMode::id_);
    return *static_cast<encryptionMode::pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::encryptionMode::reference RedundancyEncodingDTModeElement_type::select_encryptionMode ()
{
    return *static_cast<encryptionMode::pointer>(setSelection(encryptionMode::id_, ASN1::AbstractData::create( &encryptionMode::value_type::theInfo)));
}

inline RedundancyEncodingDTModeElement_type::encryptionMode::reference RedundancyEncodingDTModeElement_type::select_encryptionMode (RedundancyEncodingDTModeElement_type::encryptionMode::const_reference value)
{
    return select_encryptionMode() = value;
}

inline bool RedundancyEncodingDTModeElement_type::encryptionMode_isSelected() const
{ 
    return currentSelection() == encryptionMode::id_; 
}

inline RedundancyEncodingDTModeElement_type::h235Mode::const_reference RedundancyEncodingDTModeElement_type::get_h235Mode () const
{
    assert(currentSelection() ==h235Mode::id_);
    return *static_cast<h235Mode::const_pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::h235Mode::reference RedundancyEncodingDTModeElement_type::ref_h235Mode ()
{
    assert(currentSelection() ==h235Mode::id_);
    return *static_cast<h235Mode::pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::h235Mode::reference RedundancyEncodingDTModeElement_type::select_h235Mode ()
{
    return *static_cast<h235Mode::pointer>(setSelection(h235Mode::id_, ASN1::AbstractData::create( &h235Mode::value_type::theInfo)));
}

inline RedundancyEncodingDTModeElement_type::h235Mode::reference RedundancyEncodingDTModeElement_type::select_h235Mode (RedundancyEncodingDTModeElement_type::h235Mode::const_reference value)
{
    return select_h235Mode() = value;
}

inline bool RedundancyEncodingDTModeElement_type::h235Mode_isSelected() const
{ 
    return currentSelection() == h235Mode::id_; 
}

inline RedundancyEncodingDTModeElement_type::fecMode::const_reference RedundancyEncodingDTModeElement_type::get_fecMode () const
{
    assert(currentSelection() ==fecMode::id_);
    return *static_cast<fecMode::const_pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::fecMode::reference RedundancyEncodingDTModeElement_type::ref_fecMode ()
{
    assert(currentSelection() ==fecMode::id_);
    return *static_cast<fecMode::pointer>(choice.get());
}

inline RedundancyEncodingDTModeElement_type::fecMode::reference RedundancyEncodingDTModeElement_type::select_fecMode ()
{
    return *static_cast<fecMode::pointer>(setSelection(fecMode::id_, ASN1::AbstractData::create( &fecMode::value_type::theInfo)));
}

inline RedundancyEncodingDTModeElement_type::fecMode::reference RedundancyEncodingDTModeElement_type::select_fecMode (RedundancyEncodingDTModeElement_type::fecMode::const_reference value)
{
    return select_fecMode() = value;
}

inline bool RedundancyEncodingDTModeElement_type::fecMode_isSelected() const
{ 
    return currentSelection() == fecMode::id_; 
}

inline RedundancyEncodingDTModeElement_type::RedundancyEncodingDTModeElement_type(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline RedundancyEncodingDTModeElement_type::RedundancyEncodingDTModeElement_type(videoMode::Id id, videoMode::const_reference value)
  : Inherited(&theInfo, id, new videoMode::value_type(value) )
{ }

inline RedundancyEncodingDTModeElement_type::RedundancyEncodingDTModeElement_type(audioMode::Id id, audioMode::const_reference value)
  : Inherited(&theInfo, id, new audioMode::value_type(value) )
{ }

inline RedundancyEncodingDTModeElement_type::RedundancyEncodingDTModeElement_type(dataMode::Id id, dataMode::const_reference value)
  : Inherited(&theInfo, id, new dataMode::value_type(value) )
{ }

inline RedundancyEncodingDTModeElement_type::RedundancyEncodingDTModeElement_type(encryptionMode::Id id, encryptionMode::const_reference value)
  : Inherited(&theInfo, id, new encryptionMode::value_type(value) )
{ }

inline RedundancyEncodingDTModeElement_type::RedundancyEncodingDTModeElement_type(h235Mode::Id id, h235Mode::const_reference value)
  : Inherited(&theInfo, id, new h235Mode::value_type(value) )
{ }

inline RedundancyEncodingDTModeElement_type::RedundancyEncodingDTModeElement_type(fecMode::Id id, fecMode::const_reference value)
  : Inherited(&theInfo, id, new fecMode::value_type(value) )
{ }


inline void RedundancyEncodingDTModeElement_type::swap(RedundancyEncodingDTModeElement_type & other)
{  Inherited::swap(other); }

inline RedundancyEncodingDTModeElement_type* RedundancyEncodingDTModeElement_type::clone() const
{ return static_cast<RedundancyEncodingDTModeElement_type*> (Inherited::clone()); }

inline bool RedundancyEncodingDTModeElement_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline CommunicationModeTableEntry_dataType::videoData::const_reference CommunicationModeTableEntry_dataType::get_videoData () const
{
    assert(currentSelection() ==videoData::id_);
    return *static_cast<videoData::const_pointer>(choice.get());
}

inline CommunicationModeTableEntry_dataType::videoData::reference CommunicationModeTableEntry_dataType::ref_videoData ()
{
    assert(currentSelection() ==videoData::id_);
    return *static_cast<videoData::pointer>(choice.get());
}

inline CommunicationModeTableEntry_dataType::videoData::reference CommunicationModeTableEntry_dataType::select_videoData ()
{
    return *static_cast<videoData::pointer>(setSelection(videoData::id_, ASN1::AbstractData::create( &videoData::value_type::theInfo)));
}

inline CommunicationModeTableEntry_dataType::videoData::reference CommunicationModeTableEntry_dataType::select_videoData (CommunicationModeTableEntry_dataType::videoData::const_reference value)
{
    return select_videoData() = value;
}

inline bool CommunicationModeTableEntry_dataType::videoData_isSelected() const
{ 
    return currentSelection() == videoData::id_; 
}

inline CommunicationModeTableEntry_dataType::audioData::const_reference CommunicationModeTableEntry_dataType::get_audioData () const
{
    assert(currentSelection() ==audioData::id_);
    return *static_cast<audioData::const_pointer>(choice.get());
}

inline CommunicationModeTableEntry_dataType::audioData::reference CommunicationModeTableEntry_dataType::ref_audioData ()
{
    assert(currentSelection() ==audioData::id_);
    return *static_cast<audioData::pointer>(choice.get());
}

inline CommunicationModeTableEntry_dataType::audioData::reference CommunicationModeTableEntry_dataType::select_audioData ()
{
    return *static_cast<audioData::pointer>(setSelection(audioData::id_, ASN1::AbstractData::create( &audioData::value_type::theInfo)));
}

inline CommunicationModeTableEntry_dataType::audioData::reference CommunicationModeTableEntry_dataType::select_audioData (CommunicationModeTableEntry_dataType::audioData::const_reference value)
{
    return select_audioData() = value;
}

inline bool CommunicationModeTableEntry_dataType::audioData_isSelected() const
{ 
    return currentSelection() == audioData::id_; 
}

inline CommunicationModeTableEntry_dataType::data::const_reference CommunicationModeTableEntry_dataType::get_data () const
{
    assert(currentSelection() ==data::id_);
    return *static_cast<data::const_pointer>(choice.get());
}

inline CommunicationModeTableEntry_dataType::data::reference CommunicationModeTableEntry_dataType::ref_data ()
{
    assert(currentSelection() ==data::id_);
    return *static_cast<data::pointer>(choice.get());
}

inline CommunicationModeTableEntry_dataType::data::reference CommunicationModeTableEntry_dataType::select_data ()
{
    return *static_cast<data::pointer>(setSelection(data::id_, ASN1::AbstractData::create( &data::value_type::theInfo)));
}

inline CommunicationModeTableEntry_dataType::data::reference CommunicationModeTableEntry_dataType::select_data (CommunicationModeTableEntry_dataType::data::const_reference value)
{
    return select_data() = value;
}

inline bool CommunicationModeTableEntry_dataType::data_isSelected() const
{ 
    return currentSelection() == data::id_; 
}

inline CommunicationModeTableEntry_dataType::CommunicationModeTableEntry_dataType(videoData::Id id, videoData::const_reference value)
  : Inherited(&theInfo, id, new videoData::value_type(value) )
{ }

inline CommunicationModeTableEntry_dataType::CommunicationModeTableEntry_dataType(audioData::Id id, audioData::const_reference value)
  : Inherited(&theInfo, id, new audioData::value_type(value) )
{ }

inline CommunicationModeTableEntry_dataType::CommunicationModeTableEntry_dataType(data::Id id, data::const_reference value)
  : Inherited(&theInfo, id, new data::value_type(value) )
{ }


inline void CommunicationModeTableEntry_dataType::swap(CommunicationModeTableEntry_dataType & other)
{  Inherited::swap(other); }

inline CommunicationModeTableEntry_dataType* CommunicationModeTableEntry_dataType::clone() const
{ return static_cast<CommunicationModeTableEntry_dataType*> (Inherited::clone()); }

inline bool CommunicationModeTableEntry_dataType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline Capability::nonStandard::const_reference Capability::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline Capability::nonStandard::reference Capability::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline Capability::nonStandard::reference Capability::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline Capability::nonStandard::reference Capability::select_nonStandard (Capability::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool Capability::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline Capability::receiveVideoCapability::const_reference Capability::get_receiveVideoCapability () const
{
    assert(currentSelection() ==receiveVideoCapability::id_);
    return *static_cast<receiveVideoCapability::const_pointer>(choice.get());
}

inline Capability::receiveVideoCapability::reference Capability::ref_receiveVideoCapability ()
{
    assert(currentSelection() ==receiveVideoCapability::id_);
    return *static_cast<receiveVideoCapability::pointer>(choice.get());
}

inline Capability::receiveVideoCapability::reference Capability::select_receiveVideoCapability ()
{
    return *static_cast<receiveVideoCapability::pointer>(setSelection(receiveVideoCapability::id_, ASN1::AbstractData::create( &receiveVideoCapability::value_type::theInfo)));
}

inline Capability::receiveVideoCapability::reference Capability::select_receiveVideoCapability (Capability::receiveVideoCapability::const_reference value)
{
    return select_receiveVideoCapability() = value;
}

inline bool Capability::receiveVideoCapability_isSelected() const
{ 
    return currentSelection() == receiveVideoCapability::id_; 
}

inline Capability::transmitVideoCapability::const_reference Capability::get_transmitVideoCapability () const
{
    assert(currentSelection() ==transmitVideoCapability::id_);
    return *static_cast<transmitVideoCapability::const_pointer>(choice.get());
}

inline Capability::transmitVideoCapability::reference Capability::ref_transmitVideoCapability ()
{
    assert(currentSelection() ==transmitVideoCapability::id_);
    return *static_cast<transmitVideoCapability::pointer>(choice.get());
}

inline Capability::transmitVideoCapability::reference Capability::select_transmitVideoCapability ()
{
    return *static_cast<transmitVideoCapability::pointer>(setSelection(transmitVideoCapability::id_, ASN1::AbstractData::create( &transmitVideoCapability::value_type::theInfo)));
}

inline Capability::transmitVideoCapability::reference Capability::select_transmitVideoCapability (Capability::transmitVideoCapability::const_reference value)
{
    return select_transmitVideoCapability() = value;
}

inline bool Capability::transmitVideoCapability_isSelected() const
{ 
    return currentSelection() == transmitVideoCapability::id_; 
}

inline Capability::receiveAndTransmitVideoCapability::const_reference Capability::get_receiveAndTransmitVideoCapability () const
{
    assert(currentSelection() ==receiveAndTransmitVideoCapability::id_);
    return *static_cast<receiveAndTransmitVideoCapability::const_pointer>(choice.get());
}

inline Capability::receiveAndTransmitVideoCapability::reference Capability::ref_receiveAndTransmitVideoCapability ()
{
    assert(currentSelection() ==receiveAndTransmitVideoCapability::id_);
    return *static_cast<receiveAndTransmitVideoCapability::pointer>(choice.get());
}

inline Capability::receiveAndTransmitVideoCapability::reference Capability::select_receiveAndTransmitVideoCapability ()
{
    return *static_cast<receiveAndTransmitVideoCapability::pointer>(setSelection(receiveAndTransmitVideoCapability::id_, ASN1::AbstractData::create( &receiveAndTransmitVideoCapability::value_type::theInfo)));
}

inline Capability::receiveAndTransmitVideoCapability::reference Capability::select_receiveAndTransmitVideoCapability (Capability::receiveAndTransmitVideoCapability::const_reference value)
{
    return select_receiveAndTransmitVideoCapability() = value;
}

inline bool Capability::receiveAndTransmitVideoCapability_isSelected() const
{ 
    return currentSelection() == receiveAndTransmitVideoCapability::id_; 
}

inline Capability::receiveAudioCapability::const_reference Capability::get_receiveAudioCapability () const
{
    assert(currentSelection() ==receiveAudioCapability::id_);
    return *static_cast<receiveAudioCapability::const_pointer>(choice.get());
}

inline Capability::receiveAudioCapability::reference Capability::ref_receiveAudioCapability ()
{
    assert(currentSelection() ==receiveAudioCapability::id_);
    return *static_cast<receiveAudioCapability::pointer>(choice.get());
}

inline Capability::receiveAudioCapability::reference Capability::select_receiveAudioCapability ()
{
    return *static_cast<receiveAudioCapability::pointer>(setSelection(receiveAudioCapability::id_, ASN1::AbstractData::create( &receiveAudioCapability::value_type::theInfo)));
}

inline Capability::receiveAudioCapability::reference Capability::select_receiveAudioCapability (Capability::receiveAudioCapability::const_reference value)
{
    return select_receiveAudioCapability() = value;
}

inline bool Capability::receiveAudioCapability_isSelected() const
{ 
    return currentSelection() == receiveAudioCapability::id_; 
}

inline Capability::transmitAudioCapability::const_reference Capability::get_transmitAudioCapability () const
{
    assert(currentSelection() ==transmitAudioCapability::id_);
    return *static_cast<transmitAudioCapability::const_pointer>(choice.get());
}

inline Capability::transmitAudioCapability::reference Capability::ref_transmitAudioCapability ()
{
    assert(currentSelection() ==transmitAudioCapability::id_);
    return *static_cast<transmitAudioCapability::pointer>(choice.get());
}

inline Capability::transmitAudioCapability::reference Capability::select_transmitAudioCapability ()
{
    return *static_cast<transmitAudioCapability::pointer>(setSelection(transmitAudioCapability::id_, ASN1::AbstractData::create( &transmitAudioCapability::value_type::theInfo)));
}

inline Capability::transmitAudioCapability::reference Capability::select_transmitAudioCapability (Capability::transmitAudioCapability::const_reference value)
{
    return select_transmitAudioCapability() = value;
}

inline bool Capability::transmitAudioCapability_isSelected() const
{ 
    return currentSelection() == transmitAudioCapability::id_; 
}

inline Capability::receiveAndTransmitAudioCapability::const_reference Capability::get_receiveAndTransmitAudioCapability () const
{
    assert(currentSelection() ==receiveAndTransmitAudioCapability::id_);
    return *static_cast<receiveAndTransmitAudioCapability::const_pointer>(choice.get());
}

inline Capability::receiveAndTransmitAudioCapability::reference Capability::ref_receiveAndTransmitAudioCapability ()
{
    assert(currentSelection() ==receiveAndTransmitAudioCapability::id_);
    return *static_cast<receiveAndTransmitAudioCapability::pointer>(choice.get());
}

inline Capability::receiveAndTransmitAudioCapability::reference Capability::select_receiveAndTransmitAudioCapability ()
{
    return *static_cast<receiveAndTransmitAudioCapability::pointer>(setSelection(receiveAndTransmitAudioCapability::id_, ASN1::AbstractData::create( &receiveAndTransmitAudioCapability::value_type::theInfo)));
}

inline Capability::receiveAndTransmitAudioCapability::reference Capability::select_receiveAndTransmitAudioCapability (Capability::receiveAndTransmitAudioCapability::const_reference value)
{
    return select_receiveAndTransmitAudioCapability() = value;
}

inline bool Capability::receiveAndTransmitAudioCapability_isSelected() const
{ 
    return currentSelection() == receiveAndTransmitAudioCapability::id_; 
}

inline Capability::receiveDataApplicationCapability::const_reference Capability::get_receiveDataApplicationCapability () const
{
    assert(currentSelection() ==receiveDataApplicationCapability::id_);
    return *static_cast<receiveDataApplicationCapability::const_pointer>(choice.get());
}

inline Capability::receiveDataApplicationCapability::reference Capability::ref_receiveDataApplicationCapability ()
{
    assert(currentSelection() ==receiveDataApplicationCapability::id_);
    return *static_cast<receiveDataApplicationCapability::pointer>(choice.get());
}

inline Capability::receiveDataApplicationCapability::reference Capability::select_receiveDataApplicationCapability ()
{
    return *static_cast<receiveDataApplicationCapability::pointer>(setSelection(receiveDataApplicationCapability::id_, ASN1::AbstractData::create( &receiveDataApplicationCapability::value_type::theInfo)));
}

inline Capability::receiveDataApplicationCapability::reference Capability::select_receiveDataApplicationCapability (Capability::receiveDataApplicationCapability::const_reference value)
{
    return select_receiveDataApplicationCapability() = value;
}

inline bool Capability::receiveDataApplicationCapability_isSelected() const
{ 
    return currentSelection() == receiveDataApplicationCapability::id_; 
}

inline Capability::transmitDataApplicationCapability::const_reference Capability::get_transmitDataApplicationCapability () const
{
    assert(currentSelection() ==transmitDataApplicationCapability::id_);
    return *static_cast<transmitDataApplicationCapability::const_pointer>(choice.get());
}

inline Capability::transmitDataApplicationCapability::reference Capability::ref_transmitDataApplicationCapability ()
{
    assert(currentSelection() ==transmitDataApplicationCapability::id_);
    return *static_cast<transmitDataApplicationCapability::pointer>(choice.get());
}

inline Capability::transmitDataApplicationCapability::reference Capability::select_transmitDataApplicationCapability ()
{
    return *static_cast<transmitDataApplicationCapability::pointer>(setSelection(transmitDataApplicationCapability::id_, ASN1::AbstractData::create( &transmitDataApplicationCapability::value_type::theInfo)));
}

inline Capability::transmitDataApplicationCapability::reference Capability::select_transmitDataApplicationCapability (Capability::transmitDataApplicationCapability::const_reference value)
{
    return select_transmitDataApplicationCapability() = value;
}

inline bool Capability::transmitDataApplicationCapability_isSelected() const
{ 
    return currentSelection() == transmitDataApplicationCapability::id_; 
}

inline Capability::receiveAndTransmitDataApplicationCapability::const_reference Capability::get_receiveAndTransmitDataApplicationCapability () const
{
    assert(currentSelection() ==receiveAndTransmitDataApplicationCapability::id_);
    return *static_cast<receiveAndTransmitDataApplicationCapability::const_pointer>(choice.get());
}

inline Capability::receiveAndTransmitDataApplicationCapability::reference Capability::ref_receiveAndTransmitDataApplicationCapability ()
{
    assert(currentSelection() ==receiveAndTransmitDataApplicationCapability::id_);
    return *static_cast<receiveAndTransmitDataApplicationCapability::pointer>(choice.get());
}

inline Capability::receiveAndTransmitDataApplicationCapability::reference Capability::select_receiveAndTransmitDataApplicationCapability ()
{
    return *static_cast<receiveAndTransmitDataApplicationCapability::pointer>(setSelection(receiveAndTransmitDataApplicationCapability::id_, ASN1::AbstractData::create( &receiveAndTransmitDataApplicationCapability::value_type::theInfo)));
}

inline Capability::receiveAndTransmitDataApplicationCapability::reference Capability::select_receiveAndTransmitDataApplicationCapability (Capability::receiveAndTransmitDataApplicationCapability::const_reference value)
{
    return select_receiveAndTransmitDataApplicationCapability() = value;
}

inline bool Capability::receiveAndTransmitDataApplicationCapability_isSelected() const
{ 
    return currentSelection() == receiveAndTransmitDataApplicationCapability::id_; 
}

inline Capability::h233EncryptionTransmitCapability::const_reference Capability::get_h233EncryptionTransmitCapability () const
{
    assert(currentSelection() ==h233EncryptionTransmitCapability::id_);
    return *static_cast<h233EncryptionTransmitCapability::const_pointer>(choice.get());
}

inline Capability::h233EncryptionTransmitCapability::reference Capability::ref_h233EncryptionTransmitCapability ()
{
    assert(currentSelection() ==h233EncryptionTransmitCapability::id_);
    return *static_cast<h233EncryptionTransmitCapability::pointer>(choice.get());
}

inline Capability::h233EncryptionTransmitCapability::reference Capability::select_h233EncryptionTransmitCapability ()
{
    return *static_cast<h233EncryptionTransmitCapability::pointer>(setSelection(h233EncryptionTransmitCapability::id_, ASN1::AbstractData::create( &h233EncryptionTransmitCapability::value_type::theInfo)));
}

inline Capability::h233EncryptionTransmitCapability::reference Capability::select_h233EncryptionTransmitCapability (bool value)
{
    return select_h233EncryptionTransmitCapability() = value;
}

inline bool Capability::h233EncryptionTransmitCapability_isSelected() const
{ 
    return currentSelection() == h233EncryptionTransmitCapability::id_; 
}

inline Capability::h233EncryptionReceiveCapability::const_reference Capability::get_h233EncryptionReceiveCapability () const
{
    assert(currentSelection() ==h233EncryptionReceiveCapability::id_);
    return *static_cast<h233EncryptionReceiveCapability::const_pointer>(choice.get());
}

inline Capability::h233EncryptionReceiveCapability::reference Capability::ref_h233EncryptionReceiveCapability ()
{
    assert(currentSelection() ==h233EncryptionReceiveCapability::id_);
    return *static_cast<h233EncryptionReceiveCapability::pointer>(choice.get());
}

inline Capability::h233EncryptionReceiveCapability::reference Capability::select_h233EncryptionReceiveCapability ()
{
    return *static_cast<h233EncryptionReceiveCapability::pointer>(setSelection(h233EncryptionReceiveCapability::id_, ASN1::AbstractData::create( &h233EncryptionReceiveCapability::value_type::theInfo)));
}

inline Capability::h233EncryptionReceiveCapability::reference Capability::select_h233EncryptionReceiveCapability (Capability::h233EncryptionReceiveCapability::const_reference value)
{
    return select_h233EncryptionReceiveCapability() = value;
}

inline bool Capability::h233EncryptionReceiveCapability_isSelected() const
{ 
    return currentSelection() == h233EncryptionReceiveCapability::id_; 
}

inline Capability::conferenceCapability::const_reference Capability::get_conferenceCapability () const
{
    assert(currentSelection() ==conferenceCapability::id_);
    return *static_cast<conferenceCapability::const_pointer>(choice.get());
}

inline Capability::conferenceCapability::reference Capability::ref_conferenceCapability ()
{
    assert(currentSelection() ==conferenceCapability::id_);
    return *static_cast<conferenceCapability::pointer>(choice.get());
}

inline Capability::conferenceCapability::reference Capability::select_conferenceCapability ()
{
    return *static_cast<conferenceCapability::pointer>(setSelection(conferenceCapability::id_, ASN1::AbstractData::create( &conferenceCapability::value_type::theInfo)));
}

inline Capability::conferenceCapability::reference Capability::select_conferenceCapability (Capability::conferenceCapability::const_reference value)
{
    return select_conferenceCapability() = value;
}

inline bool Capability::conferenceCapability_isSelected() const
{ 
    return currentSelection() == conferenceCapability::id_; 
}

inline Capability::h235SecurityCapability::const_reference Capability::get_h235SecurityCapability () const
{
    assert(currentSelection() ==h235SecurityCapability::id_);
    return *static_cast<h235SecurityCapability::const_pointer>(choice.get());
}

inline Capability::h235SecurityCapability::reference Capability::ref_h235SecurityCapability ()
{
    assert(currentSelection() ==h235SecurityCapability::id_);
    return *static_cast<h235SecurityCapability::pointer>(choice.get());
}

inline Capability::h235SecurityCapability::reference Capability::select_h235SecurityCapability ()
{
    return *static_cast<h235SecurityCapability::pointer>(setSelection(h235SecurityCapability::id_, ASN1::AbstractData::create( &h235SecurityCapability::value_type::theInfo)));
}

inline Capability::h235SecurityCapability::reference Capability::select_h235SecurityCapability (Capability::h235SecurityCapability::const_reference value)
{
    return select_h235SecurityCapability() = value;
}

inline bool Capability::h235SecurityCapability_isSelected() const
{ 
    return currentSelection() == h235SecurityCapability::id_; 
}

inline Capability::maxPendingReplacementFor::const_reference Capability::get_maxPendingReplacementFor () const
{
    assert(currentSelection() ==maxPendingReplacementFor::id_);
    return *static_cast<maxPendingReplacementFor::const_pointer>(choice.get());
}

inline Capability::maxPendingReplacementFor::reference Capability::ref_maxPendingReplacementFor ()
{
    assert(currentSelection() ==maxPendingReplacementFor::id_);
    return *static_cast<maxPendingReplacementFor::pointer>(choice.get());
}

inline Capability::maxPendingReplacementFor::reference Capability::select_maxPendingReplacementFor ()
{
    return *static_cast<maxPendingReplacementFor::pointer>(setSelection(maxPendingReplacementFor::id_, ASN1::AbstractData::create( &maxPendingReplacementFor::value_type::theInfo)));
}

inline Capability::maxPendingReplacementFor::reference Capability::select_maxPendingReplacementFor (Capability::maxPendingReplacementFor::value_type::int_type value)
{
    return select_maxPendingReplacementFor() = value;
}

inline bool Capability::maxPendingReplacementFor_isSelected() const
{ 
    return currentSelection() == maxPendingReplacementFor::id_; 
}

inline Capability::receiveUserInputCapability::const_reference Capability::get_receiveUserInputCapability () const
{
    assert(currentSelection() ==receiveUserInputCapability::id_);
    return *static_cast<receiveUserInputCapability::const_pointer>(choice.get());
}

inline Capability::receiveUserInputCapability::reference Capability::ref_receiveUserInputCapability ()
{
    assert(currentSelection() ==receiveUserInputCapability::id_);
    return *static_cast<receiveUserInputCapability::pointer>(choice.get());
}

inline Capability::receiveUserInputCapability::reference Capability::select_receiveUserInputCapability ()
{
    return *static_cast<receiveUserInputCapability::pointer>(setSelection(receiveUserInputCapability::id_, ASN1::AbstractData::create( &receiveUserInputCapability::value_type::theInfo)));
}

inline Capability::receiveUserInputCapability::reference Capability::select_receiveUserInputCapability (Capability::receiveUserInputCapability::const_reference value)
{
    return select_receiveUserInputCapability() = value;
}

inline bool Capability::receiveUserInputCapability_isSelected() const
{ 
    return currentSelection() == receiveUserInputCapability::id_; 
}

inline Capability::transmitUserInputCapability::const_reference Capability::get_transmitUserInputCapability () const
{
    assert(currentSelection() ==transmitUserInputCapability::id_);
    return *static_cast<transmitUserInputCapability::const_pointer>(choice.get());
}

inline Capability::transmitUserInputCapability::reference Capability::ref_transmitUserInputCapability ()
{
    assert(currentSelection() ==transmitUserInputCapability::id_);
    return *static_cast<transmitUserInputCapability::pointer>(choice.get());
}

inline Capability::transmitUserInputCapability::reference Capability::select_transmitUserInputCapability ()
{
    return *static_cast<transmitUserInputCapability::pointer>(setSelection(transmitUserInputCapability::id_, ASN1::AbstractData::create( &transmitUserInputCapability::value_type::theInfo)));
}

inline Capability::transmitUserInputCapability::reference Capability::select_transmitUserInputCapability (Capability::transmitUserInputCapability::const_reference value)
{
    return select_transmitUserInputCapability() = value;
}

inline bool Capability::transmitUserInputCapability_isSelected() const
{ 
    return currentSelection() == transmitUserInputCapability::id_; 
}

inline Capability::receiveAndTransmitUserInputCapability::const_reference Capability::get_receiveAndTransmitUserInputCapability () const
{
    assert(currentSelection() ==receiveAndTransmitUserInputCapability::id_);
    return *static_cast<receiveAndTransmitUserInputCapability::const_pointer>(choice.get());
}

inline Capability::receiveAndTransmitUserInputCapability::reference Capability::ref_receiveAndTransmitUserInputCapability ()
{
    assert(currentSelection() ==receiveAndTransmitUserInputCapability::id_);
    return *static_cast<receiveAndTransmitUserInputCapability::pointer>(choice.get());
}

inline Capability::receiveAndTransmitUserInputCapability::reference Capability::select_receiveAndTransmitUserInputCapability ()
{
    return *static_cast<receiveAndTransmitUserInputCapability::pointer>(setSelection(receiveAndTransmitUserInputCapability::id_, ASN1::AbstractData::create( &receiveAndTransmitUserInputCapability::value_type::theInfo)));
}

inline Capability::receiveAndTransmitUserInputCapability::reference Capability::select_receiveAndTransmitUserInputCapability (Capability::receiveAndTransmitUserInputCapability::const_reference value)
{
    return select_receiveAndTransmitUserInputCapability() = value;
}

inline bool Capability::receiveAndTransmitUserInputCapability_isSelected() const
{ 
    return currentSelection() == receiveAndTransmitUserInputCapability::id_; 
}

inline Capability::genericControlCapability::const_reference Capability::get_genericControlCapability () const
{
    assert(currentSelection() ==genericControlCapability::id_);
    return *static_cast<genericControlCapability::const_pointer>(choice.get());
}

inline Capability::genericControlCapability::reference Capability::ref_genericControlCapability ()
{
    assert(currentSelection() ==genericControlCapability::id_);
    return *static_cast<genericControlCapability::pointer>(choice.get());
}

inline Capability::genericControlCapability::reference Capability::select_genericControlCapability ()
{
    return *static_cast<genericControlCapability::pointer>(setSelection(genericControlCapability::id_, ASN1::AbstractData::create( &genericControlCapability::value_type::theInfo)));
}

inline Capability::genericControlCapability::reference Capability::select_genericControlCapability (Capability::genericControlCapability::const_reference value)
{
    return select_genericControlCapability() = value;
}

inline bool Capability::genericControlCapability_isSelected() const
{ 
    return currentSelection() == genericControlCapability::id_; 
}

inline Capability::receiveMultiplexedStreamCapability::const_reference Capability::get_receiveMultiplexedStreamCapability () const
{
    assert(currentSelection() ==receiveMultiplexedStreamCapability::id_);
    return *static_cast<receiveMultiplexedStreamCapability::const_pointer>(choice.get());
}

inline Capability::receiveMultiplexedStreamCapability::reference Capability::ref_receiveMultiplexedStreamCapability ()
{
    assert(currentSelection() ==receiveMultiplexedStreamCapability::id_);
    return *static_cast<receiveMultiplexedStreamCapability::pointer>(choice.get());
}

inline Capability::receiveMultiplexedStreamCapability::reference Capability::select_receiveMultiplexedStreamCapability ()
{
    return *static_cast<receiveMultiplexedStreamCapability::pointer>(setSelection(receiveMultiplexedStreamCapability::id_, ASN1::AbstractData::create( &receiveMultiplexedStreamCapability::value_type::theInfo)));
}

inline Capability::receiveMultiplexedStreamCapability::reference Capability::select_receiveMultiplexedStreamCapability (Capability::receiveMultiplexedStreamCapability::const_reference value)
{
    return select_receiveMultiplexedStreamCapability() = value;
}

inline bool Capability::receiveMultiplexedStreamCapability_isSelected() const
{ 
    return currentSelection() == receiveMultiplexedStreamCapability::id_; 
}

inline Capability::transmitMultiplexedStreamCapability::const_reference Capability::get_transmitMultiplexedStreamCapability () const
{
    assert(currentSelection() ==transmitMultiplexedStreamCapability::id_);
    return *static_cast<transmitMultiplexedStreamCapability::const_pointer>(choice.get());
}

inline Capability::transmitMultiplexedStreamCapability::reference Capability::ref_transmitMultiplexedStreamCapability ()
{
    assert(currentSelection() ==transmitMultiplexedStreamCapability::id_);
    return *static_cast<transmitMultiplexedStreamCapability::pointer>(choice.get());
}

inline Capability::transmitMultiplexedStreamCapability::reference Capability::select_transmitMultiplexedStreamCapability ()
{
    return *static_cast<transmitMultiplexedStreamCapability::pointer>(setSelection(transmitMultiplexedStreamCapability::id_, ASN1::AbstractData::create( &transmitMultiplexedStreamCapability::value_type::theInfo)));
}

inline Capability::transmitMultiplexedStreamCapability::reference Capability::select_transmitMultiplexedStreamCapability (Capability::transmitMultiplexedStreamCapability::const_reference value)
{
    return select_transmitMultiplexedStreamCapability() = value;
}

inline bool Capability::transmitMultiplexedStreamCapability_isSelected() const
{ 
    return currentSelection() == transmitMultiplexedStreamCapability::id_; 
}

inline Capability::receiveAndTransmitMultiplexedStreamCapability::const_reference Capability::get_receiveAndTransmitMultiplexedStreamCapability () const
{
    assert(currentSelection() ==receiveAndTransmitMultiplexedStreamCapability::id_);
    return *static_cast<receiveAndTransmitMultiplexedStreamCapability::const_pointer>(choice.get());
}

inline Capability::receiveAndTransmitMultiplexedStreamCapability::reference Capability::ref_receiveAndTransmitMultiplexedStreamCapability ()
{
    assert(currentSelection() ==receiveAndTransmitMultiplexedStreamCapability::id_);
    return *static_cast<receiveAndTransmitMultiplexedStreamCapability::pointer>(choice.get());
}

inline Capability::receiveAndTransmitMultiplexedStreamCapability::reference Capability::select_receiveAndTransmitMultiplexedStreamCapability ()
{
    return *static_cast<receiveAndTransmitMultiplexedStreamCapability::pointer>(setSelection(receiveAndTransmitMultiplexedStreamCapability::id_, ASN1::AbstractData::create( &receiveAndTransmitMultiplexedStreamCapability::value_type::theInfo)));
}

inline Capability::receiveAndTransmitMultiplexedStreamCapability::reference Capability::select_receiveAndTransmitMultiplexedStreamCapability (Capability::receiveAndTransmitMultiplexedStreamCapability::const_reference value)
{
    return select_receiveAndTransmitMultiplexedStreamCapability() = value;
}

inline bool Capability::receiveAndTransmitMultiplexedStreamCapability_isSelected() const
{ 
    return currentSelection() == receiveAndTransmitMultiplexedStreamCapability::id_; 
}

inline Capability::receiveRTPAudioTelephonyEventCapability::const_reference Capability::get_receiveRTPAudioTelephonyEventCapability () const
{
    assert(currentSelection() ==receiveRTPAudioTelephonyEventCapability::id_);
    return *static_cast<receiveRTPAudioTelephonyEventCapability::const_pointer>(choice.get());
}

inline Capability::receiveRTPAudioTelephonyEventCapability::reference Capability::ref_receiveRTPAudioTelephonyEventCapability ()
{
    assert(currentSelection() ==receiveRTPAudioTelephonyEventCapability::id_);
    return *static_cast<receiveRTPAudioTelephonyEventCapability::pointer>(choice.get());
}

inline Capability::receiveRTPAudioTelephonyEventCapability::reference Capability::select_receiveRTPAudioTelephonyEventCapability ()
{
    return *static_cast<receiveRTPAudioTelephonyEventCapability::pointer>(setSelection(receiveRTPAudioTelephonyEventCapability::id_, ASN1::AbstractData::create( &receiveRTPAudioTelephonyEventCapability::value_type::theInfo)));
}

inline Capability::receiveRTPAudioTelephonyEventCapability::reference Capability::select_receiveRTPAudioTelephonyEventCapability (Capability::receiveRTPAudioTelephonyEventCapability::const_reference value)
{
    return select_receiveRTPAudioTelephonyEventCapability() = value;
}

inline bool Capability::receiveRTPAudioTelephonyEventCapability_isSelected() const
{ 
    return currentSelection() == receiveRTPAudioTelephonyEventCapability::id_; 
}

inline Capability::receiveRTPAudioToneCapability::const_reference Capability::get_receiveRTPAudioToneCapability () const
{
    assert(currentSelection() ==receiveRTPAudioToneCapability::id_);
    return *static_cast<receiveRTPAudioToneCapability::const_pointer>(choice.get());
}

inline Capability::receiveRTPAudioToneCapability::reference Capability::ref_receiveRTPAudioToneCapability ()
{
    assert(currentSelection() ==receiveRTPAudioToneCapability::id_);
    return *static_cast<receiveRTPAudioToneCapability::pointer>(choice.get());
}

inline Capability::receiveRTPAudioToneCapability::reference Capability::select_receiveRTPAudioToneCapability ()
{
    return *static_cast<receiveRTPAudioToneCapability::pointer>(setSelection(receiveRTPAudioToneCapability::id_, ASN1::AbstractData::create( &receiveRTPAudioToneCapability::value_type::theInfo)));
}

inline Capability::receiveRTPAudioToneCapability::reference Capability::select_receiveRTPAudioToneCapability (Capability::receiveRTPAudioToneCapability::const_reference value)
{
    return select_receiveRTPAudioToneCapability() = value;
}

inline bool Capability::receiveRTPAudioToneCapability_isSelected() const
{ 
    return currentSelection() == receiveRTPAudioToneCapability::id_; 
}

inline Capability::depFecCapability::const_reference Capability::get_depFecCapability () const
{
    assert(currentSelection() ==depFecCapability::id_);
    return *static_cast<depFecCapability::const_pointer>(choice.get());
}

inline Capability::depFecCapability::reference Capability::ref_depFecCapability ()
{
    assert(currentSelection() ==depFecCapability::id_);
    return *static_cast<depFecCapability::pointer>(choice.get());
}

inline Capability::depFecCapability::reference Capability::select_depFecCapability ()
{
    return *static_cast<depFecCapability::pointer>(setSelection(depFecCapability::id_, ASN1::AbstractData::create( &depFecCapability::value_type::theInfo)));
}

inline Capability::depFecCapability::reference Capability::select_depFecCapability (Capability::depFecCapability::const_reference value)
{
    return select_depFecCapability() = value;
}

inline bool Capability::depFecCapability_isSelected() const
{ 
    return currentSelection() == depFecCapability::id_; 
}

inline Capability::multiplePayloadStreamCapability::const_reference Capability::get_multiplePayloadStreamCapability () const
{
    assert(currentSelection() ==multiplePayloadStreamCapability::id_);
    return *static_cast<multiplePayloadStreamCapability::const_pointer>(choice.get());
}

inline Capability::multiplePayloadStreamCapability::reference Capability::ref_multiplePayloadStreamCapability ()
{
    assert(currentSelection() ==multiplePayloadStreamCapability::id_);
    return *static_cast<multiplePayloadStreamCapability::pointer>(choice.get());
}

inline Capability::multiplePayloadStreamCapability::reference Capability::select_multiplePayloadStreamCapability ()
{
    return *static_cast<multiplePayloadStreamCapability::pointer>(setSelection(multiplePayloadStreamCapability::id_, ASN1::AbstractData::create( &multiplePayloadStreamCapability::value_type::theInfo)));
}

inline Capability::multiplePayloadStreamCapability::reference Capability::select_multiplePayloadStreamCapability (Capability::multiplePayloadStreamCapability::const_reference value)
{
    return select_multiplePayloadStreamCapability() = value;
}

inline bool Capability::multiplePayloadStreamCapability_isSelected() const
{ 
    return currentSelection() == multiplePayloadStreamCapability::id_; 
}

inline Capability::fecCapability::const_reference Capability::get_fecCapability () const
{
    assert(currentSelection() ==fecCapability::id_);
    return *static_cast<fecCapability::const_pointer>(choice.get());
}

inline Capability::fecCapability::reference Capability::ref_fecCapability ()
{
    assert(currentSelection() ==fecCapability::id_);
    return *static_cast<fecCapability::pointer>(choice.get());
}

inline Capability::fecCapability::reference Capability::select_fecCapability ()
{
    return *static_cast<fecCapability::pointer>(setSelection(fecCapability::id_, ASN1::AbstractData::create( &fecCapability::value_type::theInfo)));
}

inline Capability::fecCapability::reference Capability::select_fecCapability (Capability::fecCapability::const_reference value)
{
    return select_fecCapability() = value;
}

inline bool Capability::fecCapability_isSelected() const
{ 
    return currentSelection() == fecCapability::id_; 
}

inline Capability::redundancyEncodingCap::const_reference Capability::get_redundancyEncodingCap () const
{
    assert(currentSelection() ==redundancyEncodingCap::id_);
    return *static_cast<redundancyEncodingCap::const_pointer>(choice.get());
}

inline Capability::redundancyEncodingCap::reference Capability::ref_redundancyEncodingCap ()
{
    assert(currentSelection() ==redundancyEncodingCap::id_);
    return *static_cast<redundancyEncodingCap::pointer>(choice.get());
}

inline Capability::redundancyEncodingCap::reference Capability::select_redundancyEncodingCap ()
{
    return *static_cast<redundancyEncodingCap::pointer>(setSelection(redundancyEncodingCap::id_, ASN1::AbstractData::create( &redundancyEncodingCap::value_type::theInfo)));
}

inline Capability::redundancyEncodingCap::reference Capability::select_redundancyEncodingCap (Capability::redundancyEncodingCap::const_reference value)
{
    return select_redundancyEncodingCap() = value;
}

inline bool Capability::redundancyEncodingCap_isSelected() const
{ 
    return currentSelection() == redundancyEncodingCap::id_; 
}

inline Capability::oneOfCapabilities::const_reference Capability::get_oneOfCapabilities () const
{
    assert(currentSelection() ==oneOfCapabilities::id_);
    return *static_cast<oneOfCapabilities::const_pointer>(choice.get());
}

inline Capability::oneOfCapabilities::reference Capability::ref_oneOfCapabilities ()
{
    assert(currentSelection() ==oneOfCapabilities::id_);
    return *static_cast<oneOfCapabilities::pointer>(choice.get());
}

inline Capability::oneOfCapabilities::reference Capability::select_oneOfCapabilities ()
{
    return *static_cast<oneOfCapabilities::pointer>(setSelection(oneOfCapabilities::id_, ASN1::AbstractData::create( &oneOfCapabilities::value_type::theInfo)));
}

inline Capability::oneOfCapabilities::reference Capability::select_oneOfCapabilities (Capability::oneOfCapabilities::const_reference value)
{
    return select_oneOfCapabilities() = value;
}

inline bool Capability::oneOfCapabilities_isSelected() const
{ 
    return currentSelection() == oneOfCapabilities::id_; 
}

inline Capability::Capability(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline Capability::Capability(receiveVideoCapability::Id id, receiveVideoCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveVideoCapability::value_type(value) )
{ }

inline Capability::Capability(transmitVideoCapability::Id id, transmitVideoCapability::const_reference value)
  : Inherited(&theInfo, id, new transmitVideoCapability::value_type(value) )
{ }

inline Capability::Capability(receiveAndTransmitVideoCapability::Id id, receiveAndTransmitVideoCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveAndTransmitVideoCapability::value_type(value) )
{ }

inline Capability::Capability(receiveAudioCapability::Id id, receiveAudioCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveAudioCapability::value_type(value) )
{ }

inline Capability::Capability(transmitAudioCapability::Id id, transmitAudioCapability::const_reference value)
  : Inherited(&theInfo, id, new transmitAudioCapability::value_type(value) )
{ }

inline Capability::Capability(receiveAndTransmitAudioCapability::Id id, receiveAndTransmitAudioCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveAndTransmitAudioCapability::value_type(value) )
{ }

inline Capability::Capability(receiveDataApplicationCapability::Id id, receiveDataApplicationCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveDataApplicationCapability::value_type(value) )
{ }

inline Capability::Capability(transmitDataApplicationCapability::Id id, transmitDataApplicationCapability::const_reference value)
  : Inherited(&theInfo, id, new transmitDataApplicationCapability::value_type(value) )
{ }

inline Capability::Capability(receiveAndTransmitDataApplicationCapability::Id id, receiveAndTransmitDataApplicationCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveAndTransmitDataApplicationCapability::value_type(value) )
{ }

inline Capability::Capability(h233EncryptionTransmitCapability::Id id, bool value)
  : Inherited(&theInfo, id, new h233EncryptionTransmitCapability::value_type(value) )
{ }

inline Capability::Capability(h233EncryptionReceiveCapability::Id id, h233EncryptionReceiveCapability::const_reference value)
  : Inherited(&theInfo, id, new h233EncryptionReceiveCapability::value_type(value) )
{ }

inline Capability::Capability(conferenceCapability::Id id, conferenceCapability::const_reference value)
  : Inherited(&theInfo, id, new conferenceCapability::value_type(value) )
{ }

inline Capability::Capability(h235SecurityCapability::Id id, h235SecurityCapability::const_reference value)
  : Inherited(&theInfo, id, new h235SecurityCapability::value_type(value) )
{ }

inline Capability::Capability(maxPendingReplacementFor::Id id, maxPendingReplacementFor::value_type::int_type value)
  : Inherited(&theInfo, id, new maxPendingReplacementFor::value_type(value) )
{ }

inline Capability::Capability(receiveUserInputCapability::Id id, receiveUserInputCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveUserInputCapability::value_type(value) )
{ }

inline Capability::Capability(transmitUserInputCapability::Id id, transmitUserInputCapability::const_reference value)
  : Inherited(&theInfo, id, new transmitUserInputCapability::value_type(value) )
{ }

inline Capability::Capability(receiveAndTransmitUserInputCapability::Id id, receiveAndTransmitUserInputCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveAndTransmitUserInputCapability::value_type(value) )
{ }

inline Capability::Capability(genericControlCapability::Id id, genericControlCapability::const_reference value)
  : Inherited(&theInfo, id, new genericControlCapability::value_type(value) )
{ }

inline Capability::Capability(receiveMultiplexedStreamCapability::Id id, receiveMultiplexedStreamCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveMultiplexedStreamCapability::value_type(value) )
{ }

inline Capability::Capability(transmitMultiplexedStreamCapability::Id id, transmitMultiplexedStreamCapability::const_reference value)
  : Inherited(&theInfo, id, new transmitMultiplexedStreamCapability::value_type(value) )
{ }

inline Capability::Capability(receiveAndTransmitMultiplexedStreamCapability::Id id, receiveAndTransmitMultiplexedStreamCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveAndTransmitMultiplexedStreamCapability::value_type(value) )
{ }

inline Capability::Capability(receiveRTPAudioTelephonyEventCapability::Id id, receiveRTPAudioTelephonyEventCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveRTPAudioTelephonyEventCapability::value_type(value) )
{ }

inline Capability::Capability(receiveRTPAudioToneCapability::Id id, receiveRTPAudioToneCapability::const_reference value)
  : Inherited(&theInfo, id, new receiveRTPAudioToneCapability::value_type(value) )
{ }

inline Capability::Capability(depFecCapability::Id id, depFecCapability::const_reference value)
  : Inherited(&theInfo, id, new depFecCapability::value_type(value) )
{ }

inline Capability::Capability(multiplePayloadStreamCapability::Id id, multiplePayloadStreamCapability::const_reference value)
  : Inherited(&theInfo, id, new multiplePayloadStreamCapability::value_type(value) )
{ }

inline Capability::Capability(fecCapability::Id id, fecCapability::const_reference value)
  : Inherited(&theInfo, id, new fecCapability::value_type(value) )
{ }

inline Capability::Capability(redundancyEncodingCap::Id id, redundancyEncodingCap::const_reference value)
  : Inherited(&theInfo, id, new redundancyEncodingCap::value_type(value) )
{ }

inline Capability::Capability(oneOfCapabilities::Id id, oneOfCapabilities::const_reference value)
  : Inherited(&theInfo, id, new oneOfCapabilities::value_type(value) )
{ }


inline void Capability::swap(Capability & other)
{  Inherited::swap(other); }

inline Capability* Capability::clone() const
{ return static_cast<Capability*> (Inherited::clone()); }

inline bool Capability::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline OpenLogicalChannel::forwardLogicalChannelNumber::const_reference OpenLogicalChannel::get_forwardLogicalChannelNumber () const
{ return *static_cast<forwardLogicalChannelNumber::const_pointer>(fields[0]);}

inline OpenLogicalChannel::forwardLogicalChannelNumber::reference OpenLogicalChannel::ref_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline OpenLogicalChannel::forwardLogicalChannelNumber::reference OpenLogicalChannel::set_forwardLogicalChannelNumber ()
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]);}

inline OpenLogicalChannel::forwardLogicalChannelNumber::reference OpenLogicalChannel::set_forwardLogicalChannelNumber (forwardLogicalChannelNumber::value_type::int_type value)
{ return *static_cast<forwardLogicalChannelNumber::pointer>(fields[0]) = value ;}

inline OpenLogicalChannel::forwardLogicalChannelParameters::const_reference OpenLogicalChannel::get_forwardLogicalChannelParameters () const
{ return *static_cast<forwardLogicalChannelParameters::const_pointer>(fields[1]);}

inline OpenLogicalChannel::forwardLogicalChannelParameters::reference OpenLogicalChannel::ref_forwardLogicalChannelParameters ()
{ return *static_cast<forwardLogicalChannelParameters::pointer>(fields[1]);}

inline OpenLogicalChannel::forwardLogicalChannelParameters::reference OpenLogicalChannel::set_forwardLogicalChannelParameters ()
{ return *static_cast<forwardLogicalChannelParameters::pointer>(fields[1]);}

inline OpenLogicalChannel::forwardLogicalChannelParameters::reference OpenLogicalChannel::set_forwardLogicalChannelParameters (forwardLogicalChannelParameters::const_reference value)
{ return *static_cast<forwardLogicalChannelParameters::pointer>(fields[1]) = value ;}

inline OpenLogicalChannel::reverseLogicalChannelParameters::const_reference OpenLogicalChannel::get_reverseLogicalChannelParameters () const
{
  assert(hasOptionalField(e_reverseLogicalChannelParameters));
  return *static_cast<reverseLogicalChannelParameters::const_pointer>(fields[2]);
}

inline OpenLogicalChannel::reverseLogicalChannelParameters::reference OpenLogicalChannel::ref_reverseLogicalChannelParameters ()
{
  assert(hasOptionalField(e_reverseLogicalChannelParameters));
  return *static_cast<reverseLogicalChannelParameters::pointer>(fields[2]);
}

inline OpenLogicalChannel::reverseLogicalChannelParameters::reference OpenLogicalChannel::set_reverseLogicalChannelParameters ()
{
  includeOptionalField( e_reverseLogicalChannelParameters, 2);
  return *static_cast<reverseLogicalChannelParameters::pointer>(fields[2]);
}

inline OpenLogicalChannel::reverseLogicalChannelParameters::reference OpenLogicalChannel::set_reverseLogicalChannelParameters (reverseLogicalChannelParameters::const_reference value)
{
  includeOptionalField( e_reverseLogicalChannelParameters, 2);
  return *static_cast<reverseLogicalChannelParameters::pointer>(fields[2]) = value;
}

inline void OpenLogicalChannel::omit_reverseLogicalChannelParameters ()
{ removeOptionalField( e_reverseLogicalChannelParameters); }

inline bool OpenLogicalChannel::reverseLogicalChannelParameters_isPresent () const
{ return hasOptionalField( e_reverseLogicalChannelParameters); }

inline OpenLogicalChannel::separateStack::const_reference OpenLogicalChannel::get_separateStack () const
{
  assert(hasOptionalField(e_separateStack));
  return *static_cast<separateStack::const_pointer>(fields[3]);
}

inline OpenLogicalChannel::separateStack::reference OpenLogicalChannel::ref_separateStack ()
{
  assert(hasOptionalField(e_separateStack));
  return *static_cast<separateStack::pointer>(fields[3]);
}

inline OpenLogicalChannel::separateStack::reference OpenLogicalChannel::set_separateStack ()
{
  includeOptionalField( e_separateStack, 3);
  return *static_cast<separateStack::pointer>(fields[3]);
}

inline OpenLogicalChannel::separateStack::reference OpenLogicalChannel::set_separateStack (separateStack::const_reference value)
{
  includeOptionalField( e_separateStack, 3);
  return *static_cast<separateStack::pointer>(fields[3]) = value;
}

inline void OpenLogicalChannel::omit_separateStack ()
{ removeOptionalField( e_separateStack); }

inline bool OpenLogicalChannel::separateStack_isPresent () const
{ return hasOptionalField( e_separateStack); }

inline OpenLogicalChannel::encryptionSync::const_reference OpenLogicalChannel::get_encryptionSync () const
{
  assert(hasOptionalField(e_encryptionSync));
  return *static_cast<encryptionSync::const_pointer>(fields[4]);
}

inline OpenLogicalChannel::encryptionSync::reference OpenLogicalChannel::ref_encryptionSync ()
{
  assert(hasOptionalField(e_encryptionSync));
  return *static_cast<encryptionSync::pointer>(fields[4]);
}

inline OpenLogicalChannel::encryptionSync::reference OpenLogicalChannel::set_encryptionSync ()
{
  includeOptionalField( e_encryptionSync, 4);
  return *static_cast<encryptionSync::pointer>(fields[4]);
}

inline OpenLogicalChannel::encryptionSync::reference OpenLogicalChannel::set_encryptionSync (encryptionSync::const_reference value)
{
  includeOptionalField( e_encryptionSync, 4);
  return *static_cast<encryptionSync::pointer>(fields[4]) = value;
}

inline void OpenLogicalChannel::omit_encryptionSync ()
{ removeOptionalField( e_encryptionSync); }

inline bool OpenLogicalChannel::encryptionSync_isPresent () const
{ return hasOptionalField( e_encryptionSync); }

inline OpenLogicalChannel::genericInformation::const_reference OpenLogicalChannel::get_genericInformation () const
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::const_pointer>(fields[5]);
}

inline OpenLogicalChannel::genericInformation::reference OpenLogicalChannel::ref_genericInformation ()
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::pointer>(fields[5]);
}

inline OpenLogicalChannel::genericInformation::reference OpenLogicalChannel::set_genericInformation ()
{
  includeOptionalField( e_genericInformation, 5);
  return *static_cast<genericInformation::pointer>(fields[5]);
}

inline OpenLogicalChannel::genericInformation::reference OpenLogicalChannel::set_genericInformation (genericInformation::const_reference value)
{
  includeOptionalField( e_genericInformation, 5);
  return *static_cast<genericInformation::pointer>(fields[5]) = value;
}

inline void OpenLogicalChannel::omit_genericInformation ()
{ removeOptionalField( e_genericInformation); }

inline bool OpenLogicalChannel::genericInformation_isPresent () const
{ return hasOptionalField( e_genericInformation); }

inline void OpenLogicalChannel::swap(OpenLogicalChannel& other)
{ Inherited::swap(other); }

inline OpenLogicalChannel* OpenLogicalChannel::clone() const
{ return static_cast<OpenLogicalChannel*> (Inherited::clone()); }

inline RedundancyEncodingDTModeElement::type::const_reference RedundancyEncodingDTModeElement::get_type () const
{ return *static_cast<type::const_pointer>(fields[0]);}

inline RedundancyEncodingDTModeElement::type::reference RedundancyEncodingDTModeElement::ref_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline RedundancyEncodingDTModeElement::type::reference RedundancyEncodingDTModeElement::set_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline RedundancyEncodingDTModeElement::type::reference RedundancyEncodingDTModeElement::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[0]) = value ;}

inline void RedundancyEncodingDTModeElement::swap(RedundancyEncodingDTModeElement& other)
{ Inherited::swap(other); }

inline RedundancyEncodingDTModeElement* RedundancyEncodingDTModeElement::clone() const
{ return static_cast<RedundancyEncodingDTModeElement*> (Inherited::clone()); }

inline CommunicationModeTableEntry::nonStandard::const_reference CommunicationModeTableEntry::get_nonStandard () const
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::const_pointer>(fields[0]);
}

inline CommunicationModeTableEntry::nonStandard::reference CommunicationModeTableEntry::ref_nonStandard ()
{
  assert(hasOptionalField(e_nonStandard));
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline CommunicationModeTableEntry::nonStandard::reference CommunicationModeTableEntry::set_nonStandard ()
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]);
}

inline CommunicationModeTableEntry::nonStandard::reference CommunicationModeTableEntry::set_nonStandard (nonStandard::const_reference value)
{
  includeOptionalField( e_nonStandard, 0);
  return *static_cast<nonStandard::pointer>(fields[0]) = value;
}

inline void CommunicationModeTableEntry::omit_nonStandard ()
{ removeOptionalField( e_nonStandard); }

inline bool CommunicationModeTableEntry::nonStandard_isPresent () const
{ return hasOptionalField( e_nonStandard); }

inline CommunicationModeTableEntry::sessionID::const_reference CommunicationModeTableEntry::get_sessionID () const
{ return *static_cast<sessionID::const_pointer>(fields[1]);}

inline CommunicationModeTableEntry::sessionID::reference CommunicationModeTableEntry::ref_sessionID ()
{ return *static_cast<sessionID::pointer>(fields[1]);}

inline CommunicationModeTableEntry::sessionID::reference CommunicationModeTableEntry::set_sessionID ()
{ return *static_cast<sessionID::pointer>(fields[1]);}

inline CommunicationModeTableEntry::sessionID::reference CommunicationModeTableEntry::set_sessionID (sessionID::value_type::int_type value)
{ return *static_cast<sessionID::pointer>(fields[1]) = value ;}

inline CommunicationModeTableEntry::associatedSessionID::const_reference CommunicationModeTableEntry::get_associatedSessionID () const
{
  assert(hasOptionalField(e_associatedSessionID));
  return *static_cast<associatedSessionID::const_pointer>(fields[2]);
}

inline CommunicationModeTableEntry::associatedSessionID::reference CommunicationModeTableEntry::ref_associatedSessionID ()
{
  assert(hasOptionalField(e_associatedSessionID));
  return *static_cast<associatedSessionID::pointer>(fields[2]);
}

inline CommunicationModeTableEntry::associatedSessionID::reference CommunicationModeTableEntry::set_associatedSessionID ()
{
  includeOptionalField( e_associatedSessionID, 2);
  return *static_cast<associatedSessionID::pointer>(fields[2]);
}

inline CommunicationModeTableEntry::associatedSessionID::reference CommunicationModeTableEntry::set_associatedSessionID (associatedSessionID::value_type::int_type value)
{
  includeOptionalField( e_associatedSessionID, 2);
  return *static_cast<associatedSessionID::pointer>(fields[2]) = value;
}

inline void CommunicationModeTableEntry::omit_associatedSessionID ()
{ removeOptionalField( e_associatedSessionID); }

inline bool CommunicationModeTableEntry::associatedSessionID_isPresent () const
{ return hasOptionalField( e_associatedSessionID); }

inline CommunicationModeTableEntry::terminalLabel::const_reference CommunicationModeTableEntry::get_terminalLabel () const
{
  assert(hasOptionalField(e_terminalLabel));
  return *static_cast<terminalLabel::const_pointer>(fields[3]);
}

inline CommunicationModeTableEntry::terminalLabel::reference CommunicationModeTableEntry::ref_terminalLabel ()
{
  assert(hasOptionalField(e_terminalLabel));
  return *static_cast<terminalLabel::pointer>(fields[3]);
}

inline CommunicationModeTableEntry::terminalLabel::reference CommunicationModeTableEntry::set_terminalLabel ()
{
  includeOptionalField( e_terminalLabel, 3);
  return *static_cast<terminalLabel::pointer>(fields[3]);
}

inline CommunicationModeTableEntry::terminalLabel::reference CommunicationModeTableEntry::set_terminalLabel (terminalLabel::const_reference value)
{
  includeOptionalField( e_terminalLabel, 3);
  return *static_cast<terminalLabel::pointer>(fields[3]) = value;
}

inline void CommunicationModeTableEntry::omit_terminalLabel ()
{ removeOptionalField( e_terminalLabel); }

inline bool CommunicationModeTableEntry::terminalLabel_isPresent () const
{ return hasOptionalField( e_terminalLabel); }

inline CommunicationModeTableEntry::sessionDescription::value_type* CommunicationModeTableEntry::sessionDescription::value_type::clone() const
{ return static_cast<value_type*> (Inherited::clone()); }

inline bool CommunicationModeTableEntry::sessionDescription::value_type::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline CommunicationModeTableEntry::sessionDescription::const_reference CommunicationModeTableEntry::get_sessionDescription () const
{ return *static_cast<sessionDescription::const_pointer>(fields[4]);}

inline CommunicationModeTableEntry::sessionDescription::reference CommunicationModeTableEntry::ref_sessionDescription ()
{ return *static_cast<sessionDescription::pointer>(fields[4]);}

inline CommunicationModeTableEntry::sessionDescription::reference CommunicationModeTableEntry::set_sessionDescription ()
{ return *static_cast<sessionDescription::pointer>(fields[4]);}

inline CommunicationModeTableEntry::sessionDescription::reference CommunicationModeTableEntry::set_sessionDescription (const std::wstring& value)
{ return *static_cast<sessionDescription::pointer>(fields[4]) = value ;}

inline CommunicationModeTableEntry::dataType::const_reference CommunicationModeTableEntry::get_dataType () const
{ return *static_cast<dataType::const_pointer>(fields[5]);}

inline CommunicationModeTableEntry::dataType::reference CommunicationModeTableEntry::ref_dataType ()
{ return *static_cast<dataType::pointer>(fields[5]);}

inline CommunicationModeTableEntry::dataType::reference CommunicationModeTableEntry::set_dataType ()
{ return *static_cast<dataType::pointer>(fields[5]);}

inline CommunicationModeTableEntry::dataType::reference CommunicationModeTableEntry::set_dataType (dataType::const_reference value)
{ return *static_cast<dataType::pointer>(fields[5]) = value ;}

inline CommunicationModeTableEntry::mediaChannel::const_reference CommunicationModeTableEntry::get_mediaChannel () const
{
  assert(hasOptionalField(e_mediaChannel));
  return *static_cast<mediaChannel::const_pointer>(fields[6]);
}

inline CommunicationModeTableEntry::mediaChannel::reference CommunicationModeTableEntry::ref_mediaChannel ()
{
  assert(hasOptionalField(e_mediaChannel));
  return *static_cast<mediaChannel::pointer>(fields[6]);
}

inline CommunicationModeTableEntry::mediaChannel::reference CommunicationModeTableEntry::set_mediaChannel ()
{
  includeOptionalField( e_mediaChannel, 6);
  return *static_cast<mediaChannel::pointer>(fields[6]);
}

inline CommunicationModeTableEntry::mediaChannel::reference CommunicationModeTableEntry::set_mediaChannel (mediaChannel::const_reference value)
{
  includeOptionalField( e_mediaChannel, 6);
  return *static_cast<mediaChannel::pointer>(fields[6]) = value;
}

inline void CommunicationModeTableEntry::omit_mediaChannel ()
{ removeOptionalField( e_mediaChannel); }

inline bool CommunicationModeTableEntry::mediaChannel_isPresent () const
{ return hasOptionalField( e_mediaChannel); }

inline CommunicationModeTableEntry::mediaGuaranteedDelivery::const_reference CommunicationModeTableEntry::get_mediaGuaranteedDelivery () const
{
  assert(hasOptionalField(e_mediaGuaranteedDelivery));
  return *static_cast<mediaGuaranteedDelivery::const_pointer>(fields[7]);
}

inline CommunicationModeTableEntry::mediaGuaranteedDelivery::reference CommunicationModeTableEntry::ref_mediaGuaranteedDelivery ()
{
  assert(hasOptionalField(e_mediaGuaranteedDelivery));
  return *static_cast<mediaGuaranteedDelivery::pointer>(fields[7]);
}

inline CommunicationModeTableEntry::mediaGuaranteedDelivery::reference CommunicationModeTableEntry::set_mediaGuaranteedDelivery ()
{
  includeOptionalField( e_mediaGuaranteedDelivery, 7);
  return *static_cast<mediaGuaranteedDelivery::pointer>(fields[7]);
}

inline CommunicationModeTableEntry::mediaGuaranteedDelivery::reference CommunicationModeTableEntry::set_mediaGuaranteedDelivery (bool value)
{
  includeOptionalField( e_mediaGuaranteedDelivery, 7);
  return *static_cast<mediaGuaranteedDelivery::pointer>(fields[7]) = value;
}

inline void CommunicationModeTableEntry::omit_mediaGuaranteedDelivery ()
{ removeOptionalField( e_mediaGuaranteedDelivery); }

inline bool CommunicationModeTableEntry::mediaGuaranteedDelivery_isPresent () const
{ return hasOptionalField( e_mediaGuaranteedDelivery); }

inline CommunicationModeTableEntry::mediaControlChannel::const_reference CommunicationModeTableEntry::get_mediaControlChannel () const
{
  assert(hasOptionalField(e_mediaControlChannel));
  return *static_cast<mediaControlChannel::const_pointer>(fields[8]);
}

inline CommunicationModeTableEntry::mediaControlChannel::reference CommunicationModeTableEntry::ref_mediaControlChannel ()
{
  assert(hasOptionalField(e_mediaControlChannel));
  return *static_cast<mediaControlChannel::pointer>(fields[8]);
}

inline CommunicationModeTableEntry::mediaControlChannel::reference CommunicationModeTableEntry::set_mediaControlChannel ()
{
  includeOptionalField( e_mediaControlChannel, 8);
  return *static_cast<mediaControlChannel::pointer>(fields[8]);
}

inline CommunicationModeTableEntry::mediaControlChannel::reference CommunicationModeTableEntry::set_mediaControlChannel (mediaControlChannel::const_reference value)
{
  includeOptionalField( e_mediaControlChannel, 8);
  return *static_cast<mediaControlChannel::pointer>(fields[8]) = value;
}

inline void CommunicationModeTableEntry::omit_mediaControlChannel ()
{ removeOptionalField( e_mediaControlChannel); }

inline bool CommunicationModeTableEntry::mediaControlChannel_isPresent () const
{ return hasOptionalField( e_mediaControlChannel); }

inline CommunicationModeTableEntry::mediaControlGuaranteedDelivery::const_reference CommunicationModeTableEntry::get_mediaControlGuaranteedDelivery () const
{
  assert(hasOptionalField(e_mediaControlGuaranteedDelivery));
  return *static_cast<mediaControlGuaranteedDelivery::const_pointer>(fields[9]);
}

inline CommunicationModeTableEntry::mediaControlGuaranteedDelivery::reference CommunicationModeTableEntry::ref_mediaControlGuaranteedDelivery ()
{
  assert(hasOptionalField(e_mediaControlGuaranteedDelivery));
  return *static_cast<mediaControlGuaranteedDelivery::pointer>(fields[9]);
}

inline CommunicationModeTableEntry::mediaControlGuaranteedDelivery::reference CommunicationModeTableEntry::set_mediaControlGuaranteedDelivery ()
{
  includeOptionalField( e_mediaControlGuaranteedDelivery, 9);
  return *static_cast<mediaControlGuaranteedDelivery::pointer>(fields[9]);
}

inline CommunicationModeTableEntry::mediaControlGuaranteedDelivery::reference CommunicationModeTableEntry::set_mediaControlGuaranteedDelivery (bool value)
{
  includeOptionalField( e_mediaControlGuaranteedDelivery, 9);
  return *static_cast<mediaControlGuaranteedDelivery::pointer>(fields[9]) = value;
}

inline void CommunicationModeTableEntry::omit_mediaControlGuaranteedDelivery ()
{ removeOptionalField( e_mediaControlGuaranteedDelivery); }

inline bool CommunicationModeTableEntry::mediaControlGuaranteedDelivery_isPresent () const
{ return hasOptionalField( e_mediaControlGuaranteedDelivery); }

inline CommunicationModeTableEntry::redundancyEncoding::const_reference CommunicationModeTableEntry::get_redundancyEncoding () const
{
  assert(hasOptionalField(e_redundancyEncoding));
  return *static_cast<redundancyEncoding::const_pointer>(fields[10]);
}

inline CommunicationModeTableEntry::redundancyEncoding::reference CommunicationModeTableEntry::ref_redundancyEncoding ()
{
  assert(hasOptionalField(e_redundancyEncoding));
  return *static_cast<redundancyEncoding::pointer>(fields[10]);
}

inline CommunicationModeTableEntry::redundancyEncoding::reference CommunicationModeTableEntry::set_redundancyEncoding ()
{
  includeOptionalField( e_redundancyEncoding, 10);
  return *static_cast<redundancyEncoding::pointer>(fields[10]);
}

inline CommunicationModeTableEntry::redundancyEncoding::reference CommunicationModeTableEntry::set_redundancyEncoding (redundancyEncoding::const_reference value)
{
  includeOptionalField( e_redundancyEncoding, 10);
  return *static_cast<redundancyEncoding::pointer>(fields[10]) = value;
}

inline void CommunicationModeTableEntry::omit_redundancyEncoding ()
{ removeOptionalField( e_redundancyEncoding); }

inline bool CommunicationModeTableEntry::redundancyEncoding_isPresent () const
{ return hasOptionalField( e_redundancyEncoding); }

inline CommunicationModeTableEntry::sessionDependency::const_reference CommunicationModeTableEntry::get_sessionDependency () const
{
  assert(hasOptionalField(e_sessionDependency));
  return *static_cast<sessionDependency::const_pointer>(fields[11]);
}

inline CommunicationModeTableEntry::sessionDependency::reference CommunicationModeTableEntry::ref_sessionDependency ()
{
  assert(hasOptionalField(e_sessionDependency));
  return *static_cast<sessionDependency::pointer>(fields[11]);
}

inline CommunicationModeTableEntry::sessionDependency::reference CommunicationModeTableEntry::set_sessionDependency ()
{
  includeOptionalField( e_sessionDependency, 11);
  return *static_cast<sessionDependency::pointer>(fields[11]);
}

inline CommunicationModeTableEntry::sessionDependency::reference CommunicationModeTableEntry::set_sessionDependency (sessionDependency::value_type::int_type value)
{
  includeOptionalField( e_sessionDependency, 11);
  return *static_cast<sessionDependency::pointer>(fields[11]) = value;
}

inline void CommunicationModeTableEntry::omit_sessionDependency ()
{ removeOptionalField( e_sessionDependency); }

inline bool CommunicationModeTableEntry::sessionDependency_isPresent () const
{ return hasOptionalField( e_sessionDependency); }

inline CommunicationModeTableEntry::destination::const_reference CommunicationModeTableEntry::get_destination () const
{
  assert(hasOptionalField(e_destination));
  return *static_cast<destination::const_pointer>(fields[12]);
}

inline CommunicationModeTableEntry::destination::reference CommunicationModeTableEntry::ref_destination ()
{
  assert(hasOptionalField(e_destination));
  return *static_cast<destination::pointer>(fields[12]);
}

inline CommunicationModeTableEntry::destination::reference CommunicationModeTableEntry::set_destination ()
{
  includeOptionalField( e_destination, 12);
  return *static_cast<destination::pointer>(fields[12]);
}

inline CommunicationModeTableEntry::destination::reference CommunicationModeTableEntry::set_destination (destination::const_reference value)
{
  includeOptionalField( e_destination, 12);
  return *static_cast<destination::pointer>(fields[12]) = value;
}

inline void CommunicationModeTableEntry::omit_destination ()
{ removeOptionalField( e_destination); }

inline bool CommunicationModeTableEntry::destination_isPresent () const
{ return hasOptionalField( e_destination); }

inline void CommunicationModeTableEntry::swap(CommunicationModeTableEntry& other)
{ Inherited::swap(other); }

inline CommunicationModeTableEntry* CommunicationModeTableEntry::clone() const
{ return static_cast<CommunicationModeTableEntry*> (Inherited::clone()); }

inline CapabilityTableEntry::capabilityTableEntryNumber::const_reference CapabilityTableEntry::get_capabilityTableEntryNumber () const
{ return *static_cast<capabilityTableEntryNumber::const_pointer>(fields[0]);}

inline CapabilityTableEntry::capabilityTableEntryNumber::reference CapabilityTableEntry::ref_capabilityTableEntryNumber ()
{ return *static_cast<capabilityTableEntryNumber::pointer>(fields[0]);}

inline CapabilityTableEntry::capabilityTableEntryNumber::reference CapabilityTableEntry::set_capabilityTableEntryNumber ()
{ return *static_cast<capabilityTableEntryNumber::pointer>(fields[0]);}

inline CapabilityTableEntry::capabilityTableEntryNumber::reference CapabilityTableEntry::set_capabilityTableEntryNumber (capabilityTableEntryNumber::value_type::int_type value)
{ return *static_cast<capabilityTableEntryNumber::pointer>(fields[0]) = value ;}

inline CapabilityTableEntry::capability::const_reference CapabilityTableEntry::get_capability () const
{
  assert(hasOptionalField(e_capability));
  return *static_cast<capability::const_pointer>(fields[1]);
}

inline CapabilityTableEntry::capability::reference CapabilityTableEntry::ref_capability ()
{
  assert(hasOptionalField(e_capability));
  return *static_cast<capability::pointer>(fields[1]);
}

inline CapabilityTableEntry::capability::reference CapabilityTableEntry::set_capability ()
{
  includeOptionalField( e_capability, 1);
  return *static_cast<capability::pointer>(fields[1]);
}

inline CapabilityTableEntry::capability::reference CapabilityTableEntry::set_capability (capability::const_reference value)
{
  includeOptionalField( e_capability, 1);
  return *static_cast<capability::pointer>(fields[1]) = value;
}

inline void CapabilityTableEntry::omit_capability ()
{ removeOptionalField( e_capability); }

inline bool CapabilityTableEntry::capability_isPresent () const
{ return hasOptionalField( e_capability); }

inline void CapabilityTableEntry::swap(CapabilityTableEntry& other)
{ Inherited::swap(other); }

inline CapabilityTableEntry* CapabilityTableEntry::clone() const
{ return static_cast<CapabilityTableEntry*> (Inherited::clone()); }

inline RedundancyEncodingDTMode::redundancyEncodingMethod::const_reference RedundancyEncodingDTMode::get_redundancyEncodingMethod () const
{ return *static_cast<redundancyEncodingMethod::const_pointer>(fields[0]);}

inline RedundancyEncodingDTMode::redundancyEncodingMethod::reference RedundancyEncodingDTMode::ref_redundancyEncodingMethod ()
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]);}

inline RedundancyEncodingDTMode::redundancyEncodingMethod::reference RedundancyEncodingDTMode::set_redundancyEncodingMethod ()
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]);}

inline RedundancyEncodingDTMode::redundancyEncodingMethod::reference RedundancyEncodingDTMode::set_redundancyEncodingMethod (redundancyEncodingMethod::const_reference value)
{ return *static_cast<redundancyEncodingMethod::pointer>(fields[0]) = value ;}

inline RedundancyEncodingDTMode::primary::const_reference RedundancyEncodingDTMode::get_primary () const
{ return *static_cast<primary::const_pointer>(fields[1]);}

inline RedundancyEncodingDTMode::primary::reference RedundancyEncodingDTMode::ref_primary ()
{ return *static_cast<primary::pointer>(fields[1]);}

inline RedundancyEncodingDTMode::primary::reference RedundancyEncodingDTMode::set_primary ()
{ return *static_cast<primary::pointer>(fields[1]);}

inline RedundancyEncodingDTMode::primary::reference RedundancyEncodingDTMode::set_primary (primary::const_reference value)
{ return *static_cast<primary::pointer>(fields[1]) = value ;}

inline RedundancyEncodingDTMode::secondary::const_reference RedundancyEncodingDTMode::get_secondary () const
{ return *static_cast<secondary::const_pointer>(fields[2]);}

inline RedundancyEncodingDTMode::secondary::reference RedundancyEncodingDTMode::ref_secondary ()
{ return *static_cast<secondary::pointer>(fields[2]);}

inline RedundancyEncodingDTMode::secondary::reference RedundancyEncodingDTMode::set_secondary ()
{ return *static_cast<secondary::pointer>(fields[2]);}

inline RedundancyEncodingDTMode::secondary::reference RedundancyEncodingDTMode::set_secondary (secondary::const_reference value)
{ return *static_cast<secondary::pointer>(fields[2]) = value ;}

inline void RedundancyEncodingDTMode::swap(RedundancyEncodingDTMode& other)
{ Inherited::swap(other); }

inline RedundancyEncodingDTMode* RedundancyEncodingDTMode::clone() const
{ return static_cast<RedundancyEncodingDTMode*> (Inherited::clone()); }

inline CommunicationModeCommand::communicationModeTable::const_reference CommunicationModeCommand::get_communicationModeTable () const
{ return *static_cast<communicationModeTable::const_pointer>(fields[0]);}

inline CommunicationModeCommand::communicationModeTable::reference CommunicationModeCommand::ref_communicationModeTable ()
{ return *static_cast<communicationModeTable::pointer>(fields[0]);}

inline CommunicationModeCommand::communicationModeTable::reference CommunicationModeCommand::set_communicationModeTable ()
{ return *static_cast<communicationModeTable::pointer>(fields[0]);}

inline CommunicationModeCommand::communicationModeTable::reference CommunicationModeCommand::set_communicationModeTable (communicationModeTable::const_reference value)
{ return *static_cast<communicationModeTable::pointer>(fields[0]) = value ;}

inline void CommunicationModeCommand::swap(CommunicationModeCommand& other)
{ Inherited::swap(other); }

inline CommunicationModeCommand* CommunicationModeCommand::clone() const
{ return static_cast<CommunicationModeCommand*> (Inherited::clone()); }

inline CommunicationModeResponse::communicationModeTable::const_reference CommunicationModeResponse::get_communicationModeTable () const
{
    assert(currentSelection() ==communicationModeTable::id_);
    return *static_cast<communicationModeTable::const_pointer>(choice.get());
}

inline CommunicationModeResponse::communicationModeTable::reference CommunicationModeResponse::ref_communicationModeTable ()
{
    assert(currentSelection() ==communicationModeTable::id_);
    return *static_cast<communicationModeTable::pointer>(choice.get());
}

inline CommunicationModeResponse::communicationModeTable::reference CommunicationModeResponse::select_communicationModeTable ()
{
    return *static_cast<communicationModeTable::pointer>(setSelection(communicationModeTable::id_, ASN1::AbstractData::create( &communicationModeTable::value_type::theInfo)));
}

inline CommunicationModeResponse::communicationModeTable::reference CommunicationModeResponse::select_communicationModeTable (CommunicationModeResponse::communicationModeTable::const_reference value)
{
    return select_communicationModeTable() = value;
}

inline bool CommunicationModeResponse::communicationModeTable_isSelected() const
{ 
    return currentSelection() == communicationModeTable::id_; 
}

inline CommunicationModeResponse::CommunicationModeResponse(communicationModeTable::Id id, communicationModeTable::const_reference value)
  : Inherited(&theInfo, id, new communicationModeTable::value_type(value) )
{ }


inline void CommunicationModeResponse::swap(CommunicationModeResponse & other)
{  Inherited::swap(other); }

inline CommunicationModeResponse* CommunicationModeResponse::clone() const
{ return static_cast<CommunicationModeResponse*> (Inherited::clone()); }

inline bool CommunicationModeResponse::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ResponseMessage::nonStandard::const_reference ResponseMessage::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline ResponseMessage::nonStandard::reference ResponseMessage::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline ResponseMessage::nonStandard::reference ResponseMessage::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline ResponseMessage::nonStandard::reference ResponseMessage::select_nonStandard (ResponseMessage::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool ResponseMessage::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline ResponseMessage::masterSlaveDeterminationAck::const_reference ResponseMessage::get_masterSlaveDeterminationAck () const
{
    assert(currentSelection() ==masterSlaveDeterminationAck::id_);
    return *static_cast<masterSlaveDeterminationAck::const_pointer>(choice.get());
}

inline ResponseMessage::masterSlaveDeterminationAck::reference ResponseMessage::ref_masterSlaveDeterminationAck ()
{
    assert(currentSelection() ==masterSlaveDeterminationAck::id_);
    return *static_cast<masterSlaveDeterminationAck::pointer>(choice.get());
}

inline ResponseMessage::masterSlaveDeterminationAck::reference ResponseMessage::select_masterSlaveDeterminationAck ()
{
    return *static_cast<masterSlaveDeterminationAck::pointer>(setSelection(masterSlaveDeterminationAck::id_, ASN1::AbstractData::create( &masterSlaveDeterminationAck::value_type::theInfo)));
}

inline ResponseMessage::masterSlaveDeterminationAck::reference ResponseMessage::select_masterSlaveDeterminationAck (ResponseMessage::masterSlaveDeterminationAck::const_reference value)
{
    return select_masterSlaveDeterminationAck() = value;
}

inline bool ResponseMessage::masterSlaveDeterminationAck_isSelected() const
{ 
    return currentSelection() == masterSlaveDeterminationAck::id_; 
}

inline ResponseMessage::masterSlaveDeterminationReject::const_reference ResponseMessage::get_masterSlaveDeterminationReject () const
{
    assert(currentSelection() ==masterSlaveDeterminationReject::id_);
    return *static_cast<masterSlaveDeterminationReject::const_pointer>(choice.get());
}

inline ResponseMessage::masterSlaveDeterminationReject::reference ResponseMessage::ref_masterSlaveDeterminationReject ()
{
    assert(currentSelection() ==masterSlaveDeterminationReject::id_);
    return *static_cast<masterSlaveDeterminationReject::pointer>(choice.get());
}

inline ResponseMessage::masterSlaveDeterminationReject::reference ResponseMessage::select_masterSlaveDeterminationReject ()
{
    return *static_cast<masterSlaveDeterminationReject::pointer>(setSelection(masterSlaveDeterminationReject::id_, ASN1::AbstractData::create( &masterSlaveDeterminationReject::value_type::theInfo)));
}

inline ResponseMessage::masterSlaveDeterminationReject::reference ResponseMessage::select_masterSlaveDeterminationReject (ResponseMessage::masterSlaveDeterminationReject::const_reference value)
{
    return select_masterSlaveDeterminationReject() = value;
}

inline bool ResponseMessage::masterSlaveDeterminationReject_isSelected() const
{ 
    return currentSelection() == masterSlaveDeterminationReject::id_; 
}

inline ResponseMessage::terminalCapabilitySetAck::const_reference ResponseMessage::get_terminalCapabilitySetAck () const
{
    assert(currentSelection() ==terminalCapabilitySetAck::id_);
    return *static_cast<terminalCapabilitySetAck::const_pointer>(choice.get());
}

inline ResponseMessage::terminalCapabilitySetAck::reference ResponseMessage::ref_terminalCapabilitySetAck ()
{
    assert(currentSelection() ==terminalCapabilitySetAck::id_);
    return *static_cast<terminalCapabilitySetAck::pointer>(choice.get());
}

inline ResponseMessage::terminalCapabilitySetAck::reference ResponseMessage::select_terminalCapabilitySetAck ()
{
    return *static_cast<terminalCapabilitySetAck::pointer>(setSelection(terminalCapabilitySetAck::id_, ASN1::AbstractData::create( &terminalCapabilitySetAck::value_type::theInfo)));
}

inline ResponseMessage::terminalCapabilitySetAck::reference ResponseMessage::select_terminalCapabilitySetAck (ResponseMessage::terminalCapabilitySetAck::const_reference value)
{
    return select_terminalCapabilitySetAck() = value;
}

inline bool ResponseMessage::terminalCapabilitySetAck_isSelected() const
{ 
    return currentSelection() == terminalCapabilitySetAck::id_; 
}

inline ResponseMessage::terminalCapabilitySetReject::const_reference ResponseMessage::get_terminalCapabilitySetReject () const
{
    assert(currentSelection() ==terminalCapabilitySetReject::id_);
    return *static_cast<terminalCapabilitySetReject::const_pointer>(choice.get());
}

inline ResponseMessage::terminalCapabilitySetReject::reference ResponseMessage::ref_terminalCapabilitySetReject ()
{
    assert(currentSelection() ==terminalCapabilitySetReject::id_);
    return *static_cast<terminalCapabilitySetReject::pointer>(choice.get());
}

inline ResponseMessage::terminalCapabilitySetReject::reference ResponseMessage::select_terminalCapabilitySetReject ()
{
    return *static_cast<terminalCapabilitySetReject::pointer>(setSelection(terminalCapabilitySetReject::id_, ASN1::AbstractData::create( &terminalCapabilitySetReject::value_type::theInfo)));
}

inline ResponseMessage::terminalCapabilitySetReject::reference ResponseMessage::select_terminalCapabilitySetReject (ResponseMessage::terminalCapabilitySetReject::const_reference value)
{
    return select_terminalCapabilitySetReject() = value;
}

inline bool ResponseMessage::terminalCapabilitySetReject_isSelected() const
{ 
    return currentSelection() == terminalCapabilitySetReject::id_; 
}

inline ResponseMessage::openLogicalChannelAck::const_reference ResponseMessage::get_openLogicalChannelAck () const
{
    assert(currentSelection() ==openLogicalChannelAck::id_);
    return *static_cast<openLogicalChannelAck::const_pointer>(choice.get());
}

inline ResponseMessage::openLogicalChannelAck::reference ResponseMessage::ref_openLogicalChannelAck ()
{
    assert(currentSelection() ==openLogicalChannelAck::id_);
    return *static_cast<openLogicalChannelAck::pointer>(choice.get());
}

inline ResponseMessage::openLogicalChannelAck::reference ResponseMessage::select_openLogicalChannelAck ()
{
    return *static_cast<openLogicalChannelAck::pointer>(setSelection(openLogicalChannelAck::id_, ASN1::AbstractData::create( &openLogicalChannelAck::value_type::theInfo)));
}

inline ResponseMessage::openLogicalChannelAck::reference ResponseMessage::select_openLogicalChannelAck (ResponseMessage::openLogicalChannelAck::const_reference value)
{
    return select_openLogicalChannelAck() = value;
}

inline bool ResponseMessage::openLogicalChannelAck_isSelected() const
{ 
    return currentSelection() == openLogicalChannelAck::id_; 
}

inline ResponseMessage::openLogicalChannelReject::const_reference ResponseMessage::get_openLogicalChannelReject () const
{
    assert(currentSelection() ==openLogicalChannelReject::id_);
    return *static_cast<openLogicalChannelReject::const_pointer>(choice.get());
}

inline ResponseMessage::openLogicalChannelReject::reference ResponseMessage::ref_openLogicalChannelReject ()
{
    assert(currentSelection() ==openLogicalChannelReject::id_);
    return *static_cast<openLogicalChannelReject::pointer>(choice.get());
}

inline ResponseMessage::openLogicalChannelReject::reference ResponseMessage::select_openLogicalChannelReject ()
{
    return *static_cast<openLogicalChannelReject::pointer>(setSelection(openLogicalChannelReject::id_, ASN1::AbstractData::create( &openLogicalChannelReject::value_type::theInfo)));
}

inline ResponseMessage::openLogicalChannelReject::reference ResponseMessage::select_openLogicalChannelReject (ResponseMessage::openLogicalChannelReject::const_reference value)
{
    return select_openLogicalChannelReject() = value;
}

inline bool ResponseMessage::openLogicalChannelReject_isSelected() const
{ 
    return currentSelection() == openLogicalChannelReject::id_; 
}

inline ResponseMessage::closeLogicalChannelAck::const_reference ResponseMessage::get_closeLogicalChannelAck () const
{
    assert(currentSelection() ==closeLogicalChannelAck::id_);
    return *static_cast<closeLogicalChannelAck::const_pointer>(choice.get());
}

inline ResponseMessage::closeLogicalChannelAck::reference ResponseMessage::ref_closeLogicalChannelAck ()
{
    assert(currentSelection() ==closeLogicalChannelAck::id_);
    return *static_cast<closeLogicalChannelAck::pointer>(choice.get());
}

inline ResponseMessage::closeLogicalChannelAck::reference ResponseMessage::select_closeLogicalChannelAck ()
{
    return *static_cast<closeLogicalChannelAck::pointer>(setSelection(closeLogicalChannelAck::id_, ASN1::AbstractData::create( &closeLogicalChannelAck::value_type::theInfo)));
}

inline ResponseMessage::closeLogicalChannelAck::reference ResponseMessage::select_closeLogicalChannelAck (ResponseMessage::closeLogicalChannelAck::const_reference value)
{
    return select_closeLogicalChannelAck() = value;
}

inline bool ResponseMessage::closeLogicalChannelAck_isSelected() const
{ 
    return currentSelection() == closeLogicalChannelAck::id_; 
}

inline ResponseMessage::requestChannelCloseAck::const_reference ResponseMessage::get_requestChannelCloseAck () const
{
    assert(currentSelection() ==requestChannelCloseAck::id_);
    return *static_cast<requestChannelCloseAck::const_pointer>(choice.get());
}

inline ResponseMessage::requestChannelCloseAck::reference ResponseMessage::ref_requestChannelCloseAck ()
{
    assert(currentSelection() ==requestChannelCloseAck::id_);
    return *static_cast<requestChannelCloseAck::pointer>(choice.get());
}

inline ResponseMessage::requestChannelCloseAck::reference ResponseMessage::select_requestChannelCloseAck ()
{
    return *static_cast<requestChannelCloseAck::pointer>(setSelection(requestChannelCloseAck::id_, ASN1::AbstractData::create( &requestChannelCloseAck::value_type::theInfo)));
}

inline ResponseMessage::requestChannelCloseAck::reference ResponseMessage::select_requestChannelCloseAck (ResponseMessage::requestChannelCloseAck::const_reference value)
{
    return select_requestChannelCloseAck() = value;
}

inline bool ResponseMessage::requestChannelCloseAck_isSelected() const
{ 
    return currentSelection() == requestChannelCloseAck::id_; 
}

inline ResponseMessage::requestChannelCloseReject::const_reference ResponseMessage::get_requestChannelCloseReject () const
{
    assert(currentSelection() ==requestChannelCloseReject::id_);
    return *static_cast<requestChannelCloseReject::const_pointer>(choice.get());
}

inline ResponseMessage::requestChannelCloseReject::reference ResponseMessage::ref_requestChannelCloseReject ()
{
    assert(currentSelection() ==requestChannelCloseReject::id_);
    return *static_cast<requestChannelCloseReject::pointer>(choice.get());
}

inline ResponseMessage::requestChannelCloseReject::reference ResponseMessage::select_requestChannelCloseReject ()
{
    return *static_cast<requestChannelCloseReject::pointer>(setSelection(requestChannelCloseReject::id_, ASN1::AbstractData::create( &requestChannelCloseReject::value_type::theInfo)));
}

inline ResponseMessage::requestChannelCloseReject::reference ResponseMessage::select_requestChannelCloseReject (ResponseMessage::requestChannelCloseReject::const_reference value)
{
    return select_requestChannelCloseReject() = value;
}

inline bool ResponseMessage::requestChannelCloseReject_isSelected() const
{ 
    return currentSelection() == requestChannelCloseReject::id_; 
}

inline ResponseMessage::multiplexEntrySendAck::const_reference ResponseMessage::get_multiplexEntrySendAck () const
{
    assert(currentSelection() ==multiplexEntrySendAck::id_);
    return *static_cast<multiplexEntrySendAck::const_pointer>(choice.get());
}

inline ResponseMessage::multiplexEntrySendAck::reference ResponseMessage::ref_multiplexEntrySendAck ()
{
    assert(currentSelection() ==multiplexEntrySendAck::id_);
    return *static_cast<multiplexEntrySendAck::pointer>(choice.get());
}

inline ResponseMessage::multiplexEntrySendAck::reference ResponseMessage::select_multiplexEntrySendAck ()
{
    return *static_cast<multiplexEntrySendAck::pointer>(setSelection(multiplexEntrySendAck::id_, ASN1::AbstractData::create( &multiplexEntrySendAck::value_type::theInfo)));
}

inline ResponseMessage::multiplexEntrySendAck::reference ResponseMessage::select_multiplexEntrySendAck (ResponseMessage::multiplexEntrySendAck::const_reference value)
{
    return select_multiplexEntrySendAck() = value;
}

inline bool ResponseMessage::multiplexEntrySendAck_isSelected() const
{ 
    return currentSelection() == multiplexEntrySendAck::id_; 
}

inline ResponseMessage::multiplexEntrySendReject::const_reference ResponseMessage::get_multiplexEntrySendReject () const
{
    assert(currentSelection() ==multiplexEntrySendReject::id_);
    return *static_cast<multiplexEntrySendReject::const_pointer>(choice.get());
}

inline ResponseMessage::multiplexEntrySendReject::reference ResponseMessage::ref_multiplexEntrySendReject ()
{
    assert(currentSelection() ==multiplexEntrySendReject::id_);
    return *static_cast<multiplexEntrySendReject::pointer>(choice.get());
}

inline ResponseMessage::multiplexEntrySendReject::reference ResponseMessage::select_multiplexEntrySendReject ()
{
    return *static_cast<multiplexEntrySendReject::pointer>(setSelection(multiplexEntrySendReject::id_, ASN1::AbstractData::create( &multiplexEntrySendReject::value_type::theInfo)));
}

inline ResponseMessage::multiplexEntrySendReject::reference ResponseMessage::select_multiplexEntrySendReject (ResponseMessage::multiplexEntrySendReject::const_reference value)
{
    return select_multiplexEntrySendReject() = value;
}

inline bool ResponseMessage::multiplexEntrySendReject_isSelected() const
{ 
    return currentSelection() == multiplexEntrySendReject::id_; 
}

inline ResponseMessage::requestMultiplexEntryAck::const_reference ResponseMessage::get_requestMultiplexEntryAck () const
{
    assert(currentSelection() ==requestMultiplexEntryAck::id_);
    return *static_cast<requestMultiplexEntryAck::const_pointer>(choice.get());
}

inline ResponseMessage::requestMultiplexEntryAck::reference ResponseMessage::ref_requestMultiplexEntryAck ()
{
    assert(currentSelection() ==requestMultiplexEntryAck::id_);
    return *static_cast<requestMultiplexEntryAck::pointer>(choice.get());
}

inline ResponseMessage::requestMultiplexEntryAck::reference ResponseMessage::select_requestMultiplexEntryAck ()
{
    return *static_cast<requestMultiplexEntryAck::pointer>(setSelection(requestMultiplexEntryAck::id_, ASN1::AbstractData::create( &requestMultiplexEntryAck::value_type::theInfo)));
}

inline ResponseMessage::requestMultiplexEntryAck::reference ResponseMessage::select_requestMultiplexEntryAck (ResponseMessage::requestMultiplexEntryAck::const_reference value)
{
    return select_requestMultiplexEntryAck() = value;
}

inline bool ResponseMessage::requestMultiplexEntryAck_isSelected() const
{ 
    return currentSelection() == requestMultiplexEntryAck::id_; 
}

inline ResponseMessage::requestMultiplexEntryReject::const_reference ResponseMessage::get_requestMultiplexEntryReject () const
{
    assert(currentSelection() ==requestMultiplexEntryReject::id_);
    return *static_cast<requestMultiplexEntryReject::const_pointer>(choice.get());
}

inline ResponseMessage::requestMultiplexEntryReject::reference ResponseMessage::ref_requestMultiplexEntryReject ()
{
    assert(currentSelection() ==requestMultiplexEntryReject::id_);
    return *static_cast<requestMultiplexEntryReject::pointer>(choice.get());
}

inline ResponseMessage::requestMultiplexEntryReject::reference ResponseMessage::select_requestMultiplexEntryReject ()
{
    return *static_cast<requestMultiplexEntryReject::pointer>(setSelection(requestMultiplexEntryReject::id_, ASN1::AbstractData::create( &requestMultiplexEntryReject::value_type::theInfo)));
}

inline ResponseMessage::requestMultiplexEntryReject::reference ResponseMessage::select_requestMultiplexEntryReject (ResponseMessage::requestMultiplexEntryReject::const_reference value)
{
    return select_requestMultiplexEntryReject() = value;
}

inline bool ResponseMessage::requestMultiplexEntryReject_isSelected() const
{ 
    return currentSelection() == requestMultiplexEntryReject::id_; 
}

inline ResponseMessage::requestModeAck::const_reference ResponseMessage::get_requestModeAck () const
{
    assert(currentSelection() ==requestModeAck::id_);
    return *static_cast<requestModeAck::const_pointer>(choice.get());
}

inline ResponseMessage::requestModeAck::reference ResponseMessage::ref_requestModeAck ()
{
    assert(currentSelection() ==requestModeAck::id_);
    return *static_cast<requestModeAck::pointer>(choice.get());
}

inline ResponseMessage::requestModeAck::reference ResponseMessage::select_requestModeAck ()
{
    return *static_cast<requestModeAck::pointer>(setSelection(requestModeAck::id_, ASN1::AbstractData::create( &requestModeAck::value_type::theInfo)));
}

inline ResponseMessage::requestModeAck::reference ResponseMessage::select_requestModeAck (ResponseMessage::requestModeAck::const_reference value)
{
    return select_requestModeAck() = value;
}

inline bool ResponseMessage::requestModeAck_isSelected() const
{ 
    return currentSelection() == requestModeAck::id_; 
}

inline ResponseMessage::requestModeReject::const_reference ResponseMessage::get_requestModeReject () const
{
    assert(currentSelection() ==requestModeReject::id_);
    return *static_cast<requestModeReject::const_pointer>(choice.get());
}

inline ResponseMessage::requestModeReject::reference ResponseMessage::ref_requestModeReject ()
{
    assert(currentSelection() ==requestModeReject::id_);
    return *static_cast<requestModeReject::pointer>(choice.get());
}

inline ResponseMessage::requestModeReject::reference ResponseMessage::select_requestModeReject ()
{
    return *static_cast<requestModeReject::pointer>(setSelection(requestModeReject::id_, ASN1::AbstractData::create( &requestModeReject::value_type::theInfo)));
}

inline ResponseMessage::requestModeReject::reference ResponseMessage::select_requestModeReject (ResponseMessage::requestModeReject::const_reference value)
{
    return select_requestModeReject() = value;
}

inline bool ResponseMessage::requestModeReject_isSelected() const
{ 
    return currentSelection() == requestModeReject::id_; 
}

inline ResponseMessage::roundTripDelayResponse::const_reference ResponseMessage::get_roundTripDelayResponse () const
{
    assert(currentSelection() ==roundTripDelayResponse::id_);
    return *static_cast<roundTripDelayResponse::const_pointer>(choice.get());
}

inline ResponseMessage::roundTripDelayResponse::reference ResponseMessage::ref_roundTripDelayResponse ()
{
    assert(currentSelection() ==roundTripDelayResponse::id_);
    return *static_cast<roundTripDelayResponse::pointer>(choice.get());
}

inline ResponseMessage::roundTripDelayResponse::reference ResponseMessage::select_roundTripDelayResponse ()
{
    return *static_cast<roundTripDelayResponse::pointer>(setSelection(roundTripDelayResponse::id_, ASN1::AbstractData::create( &roundTripDelayResponse::value_type::theInfo)));
}

inline ResponseMessage::roundTripDelayResponse::reference ResponseMessage::select_roundTripDelayResponse (ResponseMessage::roundTripDelayResponse::const_reference value)
{
    return select_roundTripDelayResponse() = value;
}

inline bool ResponseMessage::roundTripDelayResponse_isSelected() const
{ 
    return currentSelection() == roundTripDelayResponse::id_; 
}

inline ResponseMessage::maintenanceLoopAck::const_reference ResponseMessage::get_maintenanceLoopAck () const
{
    assert(currentSelection() ==maintenanceLoopAck::id_);
    return *static_cast<maintenanceLoopAck::const_pointer>(choice.get());
}

inline ResponseMessage::maintenanceLoopAck::reference ResponseMessage::ref_maintenanceLoopAck ()
{
    assert(currentSelection() ==maintenanceLoopAck::id_);
    return *static_cast<maintenanceLoopAck::pointer>(choice.get());
}

inline ResponseMessage::maintenanceLoopAck::reference ResponseMessage::select_maintenanceLoopAck ()
{
    return *static_cast<maintenanceLoopAck::pointer>(setSelection(maintenanceLoopAck::id_, ASN1::AbstractData::create( &maintenanceLoopAck::value_type::theInfo)));
}

inline ResponseMessage::maintenanceLoopAck::reference ResponseMessage::select_maintenanceLoopAck (ResponseMessage::maintenanceLoopAck::const_reference value)
{
    return select_maintenanceLoopAck() = value;
}

inline bool ResponseMessage::maintenanceLoopAck_isSelected() const
{ 
    return currentSelection() == maintenanceLoopAck::id_; 
}

inline ResponseMessage::maintenanceLoopReject::const_reference ResponseMessage::get_maintenanceLoopReject () const
{
    assert(currentSelection() ==maintenanceLoopReject::id_);
    return *static_cast<maintenanceLoopReject::const_pointer>(choice.get());
}

inline ResponseMessage::maintenanceLoopReject::reference ResponseMessage::ref_maintenanceLoopReject ()
{
    assert(currentSelection() ==maintenanceLoopReject::id_);
    return *static_cast<maintenanceLoopReject::pointer>(choice.get());
}

inline ResponseMessage::maintenanceLoopReject::reference ResponseMessage::select_maintenanceLoopReject ()
{
    return *static_cast<maintenanceLoopReject::pointer>(setSelection(maintenanceLoopReject::id_, ASN1::AbstractData::create( &maintenanceLoopReject::value_type::theInfo)));
}

inline ResponseMessage::maintenanceLoopReject::reference ResponseMessage::select_maintenanceLoopReject (ResponseMessage::maintenanceLoopReject::const_reference value)
{
    return select_maintenanceLoopReject() = value;
}

inline bool ResponseMessage::maintenanceLoopReject_isSelected() const
{ 
    return currentSelection() == maintenanceLoopReject::id_; 
}

inline ResponseMessage::communicationModeResponse::const_reference ResponseMessage::get_communicationModeResponse () const
{
    assert(currentSelection() ==communicationModeResponse::id_);
    return *static_cast<communicationModeResponse::const_pointer>(choice.get());
}

inline ResponseMessage::communicationModeResponse::reference ResponseMessage::ref_communicationModeResponse ()
{
    assert(currentSelection() ==communicationModeResponse::id_);
    return *static_cast<communicationModeResponse::pointer>(choice.get());
}

inline ResponseMessage::communicationModeResponse::reference ResponseMessage::select_communicationModeResponse ()
{
    return *static_cast<communicationModeResponse::pointer>(setSelection(communicationModeResponse::id_, ASN1::AbstractData::create( &communicationModeResponse::value_type::theInfo)));
}

inline ResponseMessage::communicationModeResponse::reference ResponseMessage::select_communicationModeResponse (ResponseMessage::communicationModeResponse::const_reference value)
{
    return select_communicationModeResponse() = value;
}

inline bool ResponseMessage::communicationModeResponse_isSelected() const
{ 
    return currentSelection() == communicationModeResponse::id_; 
}

inline ResponseMessage::conferenceResponse::const_reference ResponseMessage::get_conferenceResponse () const
{
    assert(currentSelection() ==conferenceResponse::id_);
    return *static_cast<conferenceResponse::const_pointer>(choice.get());
}

inline ResponseMessage::conferenceResponse::reference ResponseMessage::ref_conferenceResponse ()
{
    assert(currentSelection() ==conferenceResponse::id_);
    return *static_cast<conferenceResponse::pointer>(choice.get());
}

inline ResponseMessage::conferenceResponse::reference ResponseMessage::select_conferenceResponse ()
{
    return *static_cast<conferenceResponse::pointer>(setSelection(conferenceResponse::id_, ASN1::AbstractData::create( &conferenceResponse::value_type::theInfo)));
}

inline ResponseMessage::conferenceResponse::reference ResponseMessage::select_conferenceResponse (ResponseMessage::conferenceResponse::const_reference value)
{
    return select_conferenceResponse() = value;
}

inline bool ResponseMessage::conferenceResponse_isSelected() const
{ 
    return currentSelection() == conferenceResponse::id_; 
}

inline ResponseMessage::multilinkResponse::const_reference ResponseMessage::get_multilinkResponse () const
{
    assert(currentSelection() ==multilinkResponse::id_);
    return *static_cast<multilinkResponse::const_pointer>(choice.get());
}

inline ResponseMessage::multilinkResponse::reference ResponseMessage::ref_multilinkResponse ()
{
    assert(currentSelection() ==multilinkResponse::id_);
    return *static_cast<multilinkResponse::pointer>(choice.get());
}

inline ResponseMessage::multilinkResponse::reference ResponseMessage::select_multilinkResponse ()
{
    return *static_cast<multilinkResponse::pointer>(setSelection(multilinkResponse::id_, ASN1::AbstractData::create( &multilinkResponse::value_type::theInfo)));
}

inline ResponseMessage::multilinkResponse::reference ResponseMessage::select_multilinkResponse (ResponseMessage::multilinkResponse::const_reference value)
{
    return select_multilinkResponse() = value;
}

inline bool ResponseMessage::multilinkResponse_isSelected() const
{ 
    return currentSelection() == multilinkResponse::id_; 
}

inline ResponseMessage::logicalChannelRateAcknowledge::const_reference ResponseMessage::get_logicalChannelRateAcknowledge () const
{
    assert(currentSelection() ==logicalChannelRateAcknowledge::id_);
    return *static_cast<logicalChannelRateAcknowledge::const_pointer>(choice.get());
}

inline ResponseMessage::logicalChannelRateAcknowledge::reference ResponseMessage::ref_logicalChannelRateAcknowledge ()
{
    assert(currentSelection() ==logicalChannelRateAcknowledge::id_);
    return *static_cast<logicalChannelRateAcknowledge::pointer>(choice.get());
}

inline ResponseMessage::logicalChannelRateAcknowledge::reference ResponseMessage::select_logicalChannelRateAcknowledge ()
{
    return *static_cast<logicalChannelRateAcknowledge::pointer>(setSelection(logicalChannelRateAcknowledge::id_, ASN1::AbstractData::create( &logicalChannelRateAcknowledge::value_type::theInfo)));
}

inline ResponseMessage::logicalChannelRateAcknowledge::reference ResponseMessage::select_logicalChannelRateAcknowledge (ResponseMessage::logicalChannelRateAcknowledge::const_reference value)
{
    return select_logicalChannelRateAcknowledge() = value;
}

inline bool ResponseMessage::logicalChannelRateAcknowledge_isSelected() const
{ 
    return currentSelection() == logicalChannelRateAcknowledge::id_; 
}

inline ResponseMessage::logicalChannelRateReject::const_reference ResponseMessage::get_logicalChannelRateReject () const
{
    assert(currentSelection() ==logicalChannelRateReject::id_);
    return *static_cast<logicalChannelRateReject::const_pointer>(choice.get());
}

inline ResponseMessage::logicalChannelRateReject::reference ResponseMessage::ref_logicalChannelRateReject ()
{
    assert(currentSelection() ==logicalChannelRateReject::id_);
    return *static_cast<logicalChannelRateReject::pointer>(choice.get());
}

inline ResponseMessage::logicalChannelRateReject::reference ResponseMessage::select_logicalChannelRateReject ()
{
    return *static_cast<logicalChannelRateReject::pointer>(setSelection(logicalChannelRateReject::id_, ASN1::AbstractData::create( &logicalChannelRateReject::value_type::theInfo)));
}

inline ResponseMessage::logicalChannelRateReject::reference ResponseMessage::select_logicalChannelRateReject (ResponseMessage::logicalChannelRateReject::const_reference value)
{
    return select_logicalChannelRateReject() = value;
}

inline bool ResponseMessage::logicalChannelRateReject_isSelected() const
{ 
    return currentSelection() == logicalChannelRateReject::id_; 
}

inline ResponseMessage::genericResponse::const_reference ResponseMessage::get_genericResponse () const
{
    assert(currentSelection() ==genericResponse::id_);
    return *static_cast<genericResponse::const_pointer>(choice.get());
}

inline ResponseMessage::genericResponse::reference ResponseMessage::ref_genericResponse ()
{
    assert(currentSelection() ==genericResponse::id_);
    return *static_cast<genericResponse::pointer>(choice.get());
}

inline ResponseMessage::genericResponse::reference ResponseMessage::select_genericResponse ()
{
    return *static_cast<genericResponse::pointer>(setSelection(genericResponse::id_, ASN1::AbstractData::create( &genericResponse::value_type::theInfo)));
}

inline ResponseMessage::genericResponse::reference ResponseMessage::select_genericResponse (ResponseMessage::genericResponse::const_reference value)
{
    return select_genericResponse() = value;
}

inline bool ResponseMessage::genericResponse_isSelected() const
{ 
    return currentSelection() == genericResponse::id_; 
}

inline ResponseMessage::ResponseMessage(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(masterSlaveDeterminationAck::Id id, masterSlaveDeterminationAck::const_reference value)
  : Inherited(&theInfo, id, new masterSlaveDeterminationAck::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(masterSlaveDeterminationReject::Id id, masterSlaveDeterminationReject::const_reference value)
  : Inherited(&theInfo, id, new masterSlaveDeterminationReject::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(terminalCapabilitySetAck::Id id, terminalCapabilitySetAck::const_reference value)
  : Inherited(&theInfo, id, new terminalCapabilitySetAck::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(terminalCapabilitySetReject::Id id, terminalCapabilitySetReject::const_reference value)
  : Inherited(&theInfo, id, new terminalCapabilitySetReject::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(openLogicalChannelAck::Id id, openLogicalChannelAck::const_reference value)
  : Inherited(&theInfo, id, new openLogicalChannelAck::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(openLogicalChannelReject::Id id, openLogicalChannelReject::const_reference value)
  : Inherited(&theInfo, id, new openLogicalChannelReject::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(closeLogicalChannelAck::Id id, closeLogicalChannelAck::const_reference value)
  : Inherited(&theInfo, id, new closeLogicalChannelAck::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(requestChannelCloseAck::Id id, requestChannelCloseAck::const_reference value)
  : Inherited(&theInfo, id, new requestChannelCloseAck::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(requestChannelCloseReject::Id id, requestChannelCloseReject::const_reference value)
  : Inherited(&theInfo, id, new requestChannelCloseReject::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(multiplexEntrySendAck::Id id, multiplexEntrySendAck::const_reference value)
  : Inherited(&theInfo, id, new multiplexEntrySendAck::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(multiplexEntrySendReject::Id id, multiplexEntrySendReject::const_reference value)
  : Inherited(&theInfo, id, new multiplexEntrySendReject::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(requestMultiplexEntryAck::Id id, requestMultiplexEntryAck::const_reference value)
  : Inherited(&theInfo, id, new requestMultiplexEntryAck::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(requestMultiplexEntryReject::Id id, requestMultiplexEntryReject::const_reference value)
  : Inherited(&theInfo, id, new requestMultiplexEntryReject::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(requestModeAck::Id id, requestModeAck::const_reference value)
  : Inherited(&theInfo, id, new requestModeAck::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(requestModeReject::Id id, requestModeReject::const_reference value)
  : Inherited(&theInfo, id, new requestModeReject::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(roundTripDelayResponse::Id id, roundTripDelayResponse::const_reference value)
  : Inherited(&theInfo, id, new roundTripDelayResponse::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(maintenanceLoopAck::Id id, maintenanceLoopAck::const_reference value)
  : Inherited(&theInfo, id, new maintenanceLoopAck::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(maintenanceLoopReject::Id id, maintenanceLoopReject::const_reference value)
  : Inherited(&theInfo, id, new maintenanceLoopReject::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(communicationModeResponse::Id id, communicationModeResponse::const_reference value)
  : Inherited(&theInfo, id, new communicationModeResponse::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(conferenceResponse::Id id, conferenceResponse::const_reference value)
  : Inherited(&theInfo, id, new conferenceResponse::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(multilinkResponse::Id id, multilinkResponse::const_reference value)
  : Inherited(&theInfo, id, new multilinkResponse::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(logicalChannelRateAcknowledge::Id id, logicalChannelRateAcknowledge::const_reference value)
  : Inherited(&theInfo, id, new logicalChannelRateAcknowledge::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(logicalChannelRateReject::Id id, logicalChannelRateReject::const_reference value)
  : Inherited(&theInfo, id, new logicalChannelRateReject::value_type(value) )
{ }

inline ResponseMessage::ResponseMessage(genericResponse::Id id, genericResponse::const_reference value)
  : Inherited(&theInfo, id, new genericResponse::value_type(value) )
{ }


inline void ResponseMessage::swap(ResponseMessage & other)
{  Inherited::swap(other); }

inline ResponseMessage* ResponseMessage::clone() const
{ return static_cast<ResponseMessage*> (Inherited::clone()); }

inline bool ResponseMessage::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline CommandMessage::nonStandard::const_reference CommandMessage::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline CommandMessage::nonStandard::reference CommandMessage::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline CommandMessage::nonStandard::reference CommandMessage::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline CommandMessage::nonStandard::reference CommandMessage::select_nonStandard (CommandMessage::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool CommandMessage::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline CommandMessage::maintenanceLoopOffCommand::const_reference CommandMessage::get_maintenanceLoopOffCommand () const
{
    assert(currentSelection() ==maintenanceLoopOffCommand::id_);
    return *static_cast<maintenanceLoopOffCommand::const_pointer>(choice.get());
}

inline CommandMessage::maintenanceLoopOffCommand::reference CommandMessage::ref_maintenanceLoopOffCommand ()
{
    assert(currentSelection() ==maintenanceLoopOffCommand::id_);
    return *static_cast<maintenanceLoopOffCommand::pointer>(choice.get());
}

inline CommandMessage::maintenanceLoopOffCommand::reference CommandMessage::select_maintenanceLoopOffCommand ()
{
    return *static_cast<maintenanceLoopOffCommand::pointer>(setSelection(maintenanceLoopOffCommand::id_, ASN1::AbstractData::create( &maintenanceLoopOffCommand::value_type::theInfo)));
}

inline CommandMessage::maintenanceLoopOffCommand::reference CommandMessage::select_maintenanceLoopOffCommand (CommandMessage::maintenanceLoopOffCommand::const_reference value)
{
    return select_maintenanceLoopOffCommand() = value;
}

inline bool CommandMessage::maintenanceLoopOffCommand_isSelected() const
{ 
    return currentSelection() == maintenanceLoopOffCommand::id_; 
}

inline CommandMessage::sendTerminalCapabilitySet::const_reference CommandMessage::get_sendTerminalCapabilitySet () const
{
    assert(currentSelection() ==sendTerminalCapabilitySet::id_);
    return *static_cast<sendTerminalCapabilitySet::const_pointer>(choice.get());
}

inline CommandMessage::sendTerminalCapabilitySet::reference CommandMessage::ref_sendTerminalCapabilitySet ()
{
    assert(currentSelection() ==sendTerminalCapabilitySet::id_);
    return *static_cast<sendTerminalCapabilitySet::pointer>(choice.get());
}

inline CommandMessage::sendTerminalCapabilitySet::reference CommandMessage::select_sendTerminalCapabilitySet ()
{
    return *static_cast<sendTerminalCapabilitySet::pointer>(setSelection(sendTerminalCapabilitySet::id_, ASN1::AbstractData::create( &sendTerminalCapabilitySet::value_type::theInfo)));
}

inline CommandMessage::sendTerminalCapabilitySet::reference CommandMessage::select_sendTerminalCapabilitySet (CommandMessage::sendTerminalCapabilitySet::const_reference value)
{
    return select_sendTerminalCapabilitySet() = value;
}

inline bool CommandMessage::sendTerminalCapabilitySet_isSelected() const
{ 
    return currentSelection() == sendTerminalCapabilitySet::id_; 
}

inline CommandMessage::encryptionCommand::const_reference CommandMessage::get_encryptionCommand () const
{
    assert(currentSelection() ==encryptionCommand::id_);
    return *static_cast<encryptionCommand::const_pointer>(choice.get());
}

inline CommandMessage::encryptionCommand::reference CommandMessage::ref_encryptionCommand ()
{
    assert(currentSelection() ==encryptionCommand::id_);
    return *static_cast<encryptionCommand::pointer>(choice.get());
}

inline CommandMessage::encryptionCommand::reference CommandMessage::select_encryptionCommand ()
{
    return *static_cast<encryptionCommand::pointer>(setSelection(encryptionCommand::id_, ASN1::AbstractData::create( &encryptionCommand::value_type::theInfo)));
}

inline CommandMessage::encryptionCommand::reference CommandMessage::select_encryptionCommand (CommandMessage::encryptionCommand::const_reference value)
{
    return select_encryptionCommand() = value;
}

inline bool CommandMessage::encryptionCommand_isSelected() const
{ 
    return currentSelection() == encryptionCommand::id_; 
}

inline CommandMessage::flowControlCommand::const_reference CommandMessage::get_flowControlCommand () const
{
    assert(currentSelection() ==flowControlCommand::id_);
    return *static_cast<flowControlCommand::const_pointer>(choice.get());
}

inline CommandMessage::flowControlCommand::reference CommandMessage::ref_flowControlCommand ()
{
    assert(currentSelection() ==flowControlCommand::id_);
    return *static_cast<flowControlCommand::pointer>(choice.get());
}

inline CommandMessage::flowControlCommand::reference CommandMessage::select_flowControlCommand ()
{
    return *static_cast<flowControlCommand::pointer>(setSelection(flowControlCommand::id_, ASN1::AbstractData::create( &flowControlCommand::value_type::theInfo)));
}

inline CommandMessage::flowControlCommand::reference CommandMessage::select_flowControlCommand (CommandMessage::flowControlCommand::const_reference value)
{
    return select_flowControlCommand() = value;
}

inline bool CommandMessage::flowControlCommand_isSelected() const
{ 
    return currentSelection() == flowControlCommand::id_; 
}

inline CommandMessage::endSessionCommand::const_reference CommandMessage::get_endSessionCommand () const
{
    assert(currentSelection() ==endSessionCommand::id_);
    return *static_cast<endSessionCommand::const_pointer>(choice.get());
}

inline CommandMessage::endSessionCommand::reference CommandMessage::ref_endSessionCommand ()
{
    assert(currentSelection() ==endSessionCommand::id_);
    return *static_cast<endSessionCommand::pointer>(choice.get());
}

inline CommandMessage::endSessionCommand::reference CommandMessage::select_endSessionCommand ()
{
    return *static_cast<endSessionCommand::pointer>(setSelection(endSessionCommand::id_, ASN1::AbstractData::create( &endSessionCommand::value_type::theInfo)));
}

inline CommandMessage::endSessionCommand::reference CommandMessage::select_endSessionCommand (CommandMessage::endSessionCommand::const_reference value)
{
    return select_endSessionCommand() = value;
}

inline bool CommandMessage::endSessionCommand_isSelected() const
{ 
    return currentSelection() == endSessionCommand::id_; 
}

inline CommandMessage::miscellaneousCommand::const_reference CommandMessage::get_miscellaneousCommand () const
{
    assert(currentSelection() ==miscellaneousCommand::id_);
    return *static_cast<miscellaneousCommand::const_pointer>(choice.get());
}

inline CommandMessage::miscellaneousCommand::reference CommandMessage::ref_miscellaneousCommand ()
{
    assert(currentSelection() ==miscellaneousCommand::id_);
    return *static_cast<miscellaneousCommand::pointer>(choice.get());
}

inline CommandMessage::miscellaneousCommand::reference CommandMessage::select_miscellaneousCommand ()
{
    return *static_cast<miscellaneousCommand::pointer>(setSelection(miscellaneousCommand::id_, ASN1::AbstractData::create( &miscellaneousCommand::value_type::theInfo)));
}

inline CommandMessage::miscellaneousCommand::reference CommandMessage::select_miscellaneousCommand (CommandMessage::miscellaneousCommand::const_reference value)
{
    return select_miscellaneousCommand() = value;
}

inline bool CommandMessage::miscellaneousCommand_isSelected() const
{ 
    return currentSelection() == miscellaneousCommand::id_; 
}

inline CommandMessage::communicationModeCommand::const_reference CommandMessage::get_communicationModeCommand () const
{
    assert(currentSelection() ==communicationModeCommand::id_);
    return *static_cast<communicationModeCommand::const_pointer>(choice.get());
}

inline CommandMessage::communicationModeCommand::reference CommandMessage::ref_communicationModeCommand ()
{
    assert(currentSelection() ==communicationModeCommand::id_);
    return *static_cast<communicationModeCommand::pointer>(choice.get());
}

inline CommandMessage::communicationModeCommand::reference CommandMessage::select_communicationModeCommand ()
{
    return *static_cast<communicationModeCommand::pointer>(setSelection(communicationModeCommand::id_, ASN1::AbstractData::create( &communicationModeCommand::value_type::theInfo)));
}

inline CommandMessage::communicationModeCommand::reference CommandMessage::select_communicationModeCommand (CommandMessage::communicationModeCommand::const_reference value)
{
    return select_communicationModeCommand() = value;
}

inline bool CommandMessage::communicationModeCommand_isSelected() const
{ 
    return currentSelection() == communicationModeCommand::id_; 
}

inline CommandMessage::conferenceCommand::const_reference CommandMessage::get_conferenceCommand () const
{
    assert(currentSelection() ==conferenceCommand::id_);
    return *static_cast<conferenceCommand::const_pointer>(choice.get());
}

inline CommandMessage::conferenceCommand::reference CommandMessage::ref_conferenceCommand ()
{
    assert(currentSelection() ==conferenceCommand::id_);
    return *static_cast<conferenceCommand::pointer>(choice.get());
}

inline CommandMessage::conferenceCommand::reference CommandMessage::select_conferenceCommand ()
{
    return *static_cast<conferenceCommand::pointer>(setSelection(conferenceCommand::id_, ASN1::AbstractData::create( &conferenceCommand::value_type::theInfo)));
}

inline CommandMessage::conferenceCommand::reference CommandMessage::select_conferenceCommand (CommandMessage::conferenceCommand::const_reference value)
{
    return select_conferenceCommand() = value;
}

inline bool CommandMessage::conferenceCommand_isSelected() const
{ 
    return currentSelection() == conferenceCommand::id_; 
}

inline CommandMessage::h223MultiplexReconfiguration::const_reference CommandMessage::get_h223MultiplexReconfiguration () const
{
    assert(currentSelection() ==h223MultiplexReconfiguration::id_);
    return *static_cast<h223MultiplexReconfiguration::const_pointer>(choice.get());
}

inline CommandMessage::h223MultiplexReconfiguration::reference CommandMessage::ref_h223MultiplexReconfiguration ()
{
    assert(currentSelection() ==h223MultiplexReconfiguration::id_);
    return *static_cast<h223MultiplexReconfiguration::pointer>(choice.get());
}

inline CommandMessage::h223MultiplexReconfiguration::reference CommandMessage::select_h223MultiplexReconfiguration ()
{
    return *static_cast<h223MultiplexReconfiguration::pointer>(setSelection(h223MultiplexReconfiguration::id_, ASN1::AbstractData::create( &h223MultiplexReconfiguration::value_type::theInfo)));
}

inline CommandMessage::h223MultiplexReconfiguration::reference CommandMessage::select_h223MultiplexReconfiguration (CommandMessage::h223MultiplexReconfiguration::const_reference value)
{
    return select_h223MultiplexReconfiguration() = value;
}

inline bool CommandMessage::h223MultiplexReconfiguration_isSelected() const
{ 
    return currentSelection() == h223MultiplexReconfiguration::id_; 
}

inline CommandMessage::newATMVCCommand::const_reference CommandMessage::get_newATMVCCommand () const
{
    assert(currentSelection() ==newATMVCCommand::id_);
    return *static_cast<newATMVCCommand::const_pointer>(choice.get());
}

inline CommandMessage::newATMVCCommand::reference CommandMessage::ref_newATMVCCommand ()
{
    assert(currentSelection() ==newATMVCCommand::id_);
    return *static_cast<newATMVCCommand::pointer>(choice.get());
}

inline CommandMessage::newATMVCCommand::reference CommandMessage::select_newATMVCCommand ()
{
    return *static_cast<newATMVCCommand::pointer>(setSelection(newATMVCCommand::id_, ASN1::AbstractData::create( &newATMVCCommand::value_type::theInfo)));
}

inline CommandMessage::newATMVCCommand::reference CommandMessage::select_newATMVCCommand (CommandMessage::newATMVCCommand::const_reference value)
{
    return select_newATMVCCommand() = value;
}

inline bool CommandMessage::newATMVCCommand_isSelected() const
{ 
    return currentSelection() == newATMVCCommand::id_; 
}

inline CommandMessage::mobileMultilinkReconfigurationCommand::const_reference CommandMessage::get_mobileMultilinkReconfigurationCommand () const
{
    assert(currentSelection() ==mobileMultilinkReconfigurationCommand::id_);
    return *static_cast<mobileMultilinkReconfigurationCommand::const_pointer>(choice.get());
}

inline CommandMessage::mobileMultilinkReconfigurationCommand::reference CommandMessage::ref_mobileMultilinkReconfigurationCommand ()
{
    assert(currentSelection() ==mobileMultilinkReconfigurationCommand::id_);
    return *static_cast<mobileMultilinkReconfigurationCommand::pointer>(choice.get());
}

inline CommandMessage::mobileMultilinkReconfigurationCommand::reference CommandMessage::select_mobileMultilinkReconfigurationCommand ()
{
    return *static_cast<mobileMultilinkReconfigurationCommand::pointer>(setSelection(mobileMultilinkReconfigurationCommand::id_, ASN1::AbstractData::create( &mobileMultilinkReconfigurationCommand::value_type::theInfo)));
}

inline CommandMessage::mobileMultilinkReconfigurationCommand::reference CommandMessage::select_mobileMultilinkReconfigurationCommand (CommandMessage::mobileMultilinkReconfigurationCommand::const_reference value)
{
    return select_mobileMultilinkReconfigurationCommand() = value;
}

inline bool CommandMessage::mobileMultilinkReconfigurationCommand_isSelected() const
{ 
    return currentSelection() == mobileMultilinkReconfigurationCommand::id_; 
}

inline CommandMessage::genericCommand::const_reference CommandMessage::get_genericCommand () const
{
    assert(currentSelection() ==genericCommand::id_);
    return *static_cast<genericCommand::const_pointer>(choice.get());
}

inline CommandMessage::genericCommand::reference CommandMessage::ref_genericCommand ()
{
    assert(currentSelection() ==genericCommand::id_);
    return *static_cast<genericCommand::pointer>(choice.get());
}

inline CommandMessage::genericCommand::reference CommandMessage::select_genericCommand ()
{
    return *static_cast<genericCommand::pointer>(setSelection(genericCommand::id_, ASN1::AbstractData::create( &genericCommand::value_type::theInfo)));
}

inline CommandMessage::genericCommand::reference CommandMessage::select_genericCommand (CommandMessage::genericCommand::const_reference value)
{
    return select_genericCommand() = value;
}

inline bool CommandMessage::genericCommand_isSelected() const
{ 
    return currentSelection() == genericCommand::id_; 
}

inline CommandMessage::CommandMessage(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline CommandMessage::CommandMessage(maintenanceLoopOffCommand::Id id, maintenanceLoopOffCommand::const_reference value)
  : Inherited(&theInfo, id, new maintenanceLoopOffCommand::value_type(value) )
{ }

inline CommandMessage::CommandMessage(sendTerminalCapabilitySet::Id id, sendTerminalCapabilitySet::const_reference value)
  : Inherited(&theInfo, id, new sendTerminalCapabilitySet::value_type(value) )
{ }

inline CommandMessage::CommandMessage(encryptionCommand::Id id, encryptionCommand::const_reference value)
  : Inherited(&theInfo, id, new encryptionCommand::value_type(value) )
{ }

inline CommandMessage::CommandMessage(flowControlCommand::Id id, flowControlCommand::const_reference value)
  : Inherited(&theInfo, id, new flowControlCommand::value_type(value) )
{ }

inline CommandMessage::CommandMessage(endSessionCommand::Id id, endSessionCommand::const_reference value)
  : Inherited(&theInfo, id, new endSessionCommand::value_type(value) )
{ }

inline CommandMessage::CommandMessage(miscellaneousCommand::Id id, miscellaneousCommand::const_reference value)
  : Inherited(&theInfo, id, new miscellaneousCommand::value_type(value) )
{ }

inline CommandMessage::CommandMessage(communicationModeCommand::Id id, communicationModeCommand::const_reference value)
  : Inherited(&theInfo, id, new communicationModeCommand::value_type(value) )
{ }

inline CommandMessage::CommandMessage(conferenceCommand::Id id, conferenceCommand::const_reference value)
  : Inherited(&theInfo, id, new conferenceCommand::value_type(value) )
{ }

inline CommandMessage::CommandMessage(h223MultiplexReconfiguration::Id id, h223MultiplexReconfiguration::const_reference value)
  : Inherited(&theInfo, id, new h223MultiplexReconfiguration::value_type(value) )
{ }

inline CommandMessage::CommandMessage(newATMVCCommand::Id id, newATMVCCommand::const_reference value)
  : Inherited(&theInfo, id, new newATMVCCommand::value_type(value) )
{ }

inline CommandMessage::CommandMessage(mobileMultilinkReconfigurationCommand::Id id, mobileMultilinkReconfigurationCommand::const_reference value)
  : Inherited(&theInfo, id, new mobileMultilinkReconfigurationCommand::value_type(value) )
{ }

inline CommandMessage::CommandMessage(genericCommand::Id id, genericCommand::const_reference value)
  : Inherited(&theInfo, id, new genericCommand::value_type(value) )
{ }


inline void CommandMessage::swap(CommandMessage & other)
{  Inherited::swap(other); }

inline CommandMessage* CommandMessage::clone() const
{ return static_cast<CommandMessage*> (Inherited::clone()); }

inline bool CommandMessage::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline TerminalCapabilitySet::sequenceNumber::const_reference TerminalCapabilitySet::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline TerminalCapabilitySet::sequenceNumber::reference TerminalCapabilitySet::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline TerminalCapabilitySet::sequenceNumber::reference TerminalCapabilitySet::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline TerminalCapabilitySet::sequenceNumber::reference TerminalCapabilitySet::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline TerminalCapabilitySet::protocolIdentifier::const_reference TerminalCapabilitySet::get_protocolIdentifier () const
{ return *static_cast<protocolIdentifier::const_pointer>(fields[1]);}

inline TerminalCapabilitySet::protocolIdentifier::reference TerminalCapabilitySet::ref_protocolIdentifier ()
{ return *static_cast<protocolIdentifier::pointer>(fields[1]);}

inline TerminalCapabilitySet::protocolIdentifier::reference TerminalCapabilitySet::set_protocolIdentifier ()
{ return *static_cast<protocolIdentifier::pointer>(fields[1]);}

inline TerminalCapabilitySet::protocolIdentifier::reference TerminalCapabilitySet::set_protocolIdentifier (protocolIdentifier::const_reference value)
{ return *static_cast<protocolIdentifier::pointer>(fields[1]) = value ;}

inline TerminalCapabilitySet::multiplexCapability::const_reference TerminalCapabilitySet::get_multiplexCapability () const
{
  assert(hasOptionalField(e_multiplexCapability));
  return *static_cast<multiplexCapability::const_pointer>(fields[2]);
}

inline TerminalCapabilitySet::multiplexCapability::reference TerminalCapabilitySet::ref_multiplexCapability ()
{
  assert(hasOptionalField(e_multiplexCapability));
  return *static_cast<multiplexCapability::pointer>(fields[2]);
}

inline TerminalCapabilitySet::multiplexCapability::reference TerminalCapabilitySet::set_multiplexCapability ()
{
  includeOptionalField( e_multiplexCapability, 2);
  return *static_cast<multiplexCapability::pointer>(fields[2]);
}

inline TerminalCapabilitySet::multiplexCapability::reference TerminalCapabilitySet::set_multiplexCapability (multiplexCapability::const_reference value)
{
  includeOptionalField( e_multiplexCapability, 2);
  return *static_cast<multiplexCapability::pointer>(fields[2]) = value;
}

inline void TerminalCapabilitySet::omit_multiplexCapability ()
{ removeOptionalField( e_multiplexCapability); }

inline bool TerminalCapabilitySet::multiplexCapability_isPresent () const
{ return hasOptionalField( e_multiplexCapability); }

inline TerminalCapabilitySet::capabilityTable::const_reference TerminalCapabilitySet::get_capabilityTable () const
{
  assert(hasOptionalField(e_capabilityTable));
  return *static_cast<capabilityTable::const_pointer>(fields[3]);
}

inline TerminalCapabilitySet::capabilityTable::reference TerminalCapabilitySet::ref_capabilityTable ()
{
  assert(hasOptionalField(e_capabilityTable));
  return *static_cast<capabilityTable::pointer>(fields[3]);
}

inline TerminalCapabilitySet::capabilityTable::reference TerminalCapabilitySet::set_capabilityTable ()
{
  includeOptionalField( e_capabilityTable, 3);
  return *static_cast<capabilityTable::pointer>(fields[3]);
}

inline TerminalCapabilitySet::capabilityTable::reference TerminalCapabilitySet::set_capabilityTable (capabilityTable::const_reference value)
{
  includeOptionalField( e_capabilityTable, 3);
  return *static_cast<capabilityTable::pointer>(fields[3]) = value;
}

inline void TerminalCapabilitySet::omit_capabilityTable ()
{ removeOptionalField( e_capabilityTable); }

inline bool TerminalCapabilitySet::capabilityTable_isPresent () const
{ return hasOptionalField( e_capabilityTable); }

inline TerminalCapabilitySet::capabilityDescriptors::const_reference TerminalCapabilitySet::get_capabilityDescriptors () const
{
  assert(hasOptionalField(e_capabilityDescriptors));
  return *static_cast<capabilityDescriptors::const_pointer>(fields[4]);
}

inline TerminalCapabilitySet::capabilityDescriptors::reference TerminalCapabilitySet::ref_capabilityDescriptors ()
{
  assert(hasOptionalField(e_capabilityDescriptors));
  return *static_cast<capabilityDescriptors::pointer>(fields[4]);
}

inline TerminalCapabilitySet::capabilityDescriptors::reference TerminalCapabilitySet::set_capabilityDescriptors ()
{
  includeOptionalField( e_capabilityDescriptors, 4);
  return *static_cast<capabilityDescriptors::pointer>(fields[4]);
}

inline TerminalCapabilitySet::capabilityDescriptors::reference TerminalCapabilitySet::set_capabilityDescriptors (capabilityDescriptors::const_reference value)
{
  includeOptionalField( e_capabilityDescriptors, 4);
  return *static_cast<capabilityDescriptors::pointer>(fields[4]) = value;
}

inline void TerminalCapabilitySet::omit_capabilityDescriptors ()
{ removeOptionalField( e_capabilityDescriptors); }

inline bool TerminalCapabilitySet::capabilityDescriptors_isPresent () const
{ return hasOptionalField( e_capabilityDescriptors); }

inline TerminalCapabilitySet::genericInformation::const_reference TerminalCapabilitySet::get_genericInformation () const
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::const_pointer>(fields[5]);
}

inline TerminalCapabilitySet::genericInformation::reference TerminalCapabilitySet::ref_genericInformation ()
{
  assert(hasOptionalField(e_genericInformation));
  return *static_cast<genericInformation::pointer>(fields[5]);
}

inline TerminalCapabilitySet::genericInformation::reference TerminalCapabilitySet::set_genericInformation ()
{
  includeOptionalField( e_genericInformation, 5);
  return *static_cast<genericInformation::pointer>(fields[5]);
}

inline TerminalCapabilitySet::genericInformation::reference TerminalCapabilitySet::set_genericInformation (genericInformation::const_reference value)
{
  includeOptionalField( e_genericInformation, 5);
  return *static_cast<genericInformation::pointer>(fields[5]) = value;
}

inline void TerminalCapabilitySet::omit_genericInformation ()
{ removeOptionalField( e_genericInformation); }

inline bool TerminalCapabilitySet::genericInformation_isPresent () const
{ return hasOptionalField( e_genericInformation); }

inline void TerminalCapabilitySet::swap(TerminalCapabilitySet& other)
{ Inherited::swap(other); }

inline TerminalCapabilitySet* TerminalCapabilitySet::clone() const
{ return static_cast<TerminalCapabilitySet*> (Inherited::clone()); }

inline ModeElementType::nonStandard::const_reference ModeElementType::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline ModeElementType::nonStandard::reference ModeElementType::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline ModeElementType::nonStandard::reference ModeElementType::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline ModeElementType::nonStandard::reference ModeElementType::select_nonStandard (ModeElementType::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool ModeElementType::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline ModeElementType::videoMode::const_reference ModeElementType::get_videoMode () const
{
    assert(currentSelection() ==videoMode::id_);
    return *static_cast<videoMode::const_pointer>(choice.get());
}

inline ModeElementType::videoMode::reference ModeElementType::ref_videoMode ()
{
    assert(currentSelection() ==videoMode::id_);
    return *static_cast<videoMode::pointer>(choice.get());
}

inline ModeElementType::videoMode::reference ModeElementType::select_videoMode ()
{
    return *static_cast<videoMode::pointer>(setSelection(videoMode::id_, ASN1::AbstractData::create( &videoMode::value_type::theInfo)));
}

inline ModeElementType::videoMode::reference ModeElementType::select_videoMode (ModeElementType::videoMode::const_reference value)
{
    return select_videoMode() = value;
}

inline bool ModeElementType::videoMode_isSelected() const
{ 
    return currentSelection() == videoMode::id_; 
}

inline ModeElementType::audioMode::const_reference ModeElementType::get_audioMode () const
{
    assert(currentSelection() ==audioMode::id_);
    return *static_cast<audioMode::const_pointer>(choice.get());
}

inline ModeElementType::audioMode::reference ModeElementType::ref_audioMode ()
{
    assert(currentSelection() ==audioMode::id_);
    return *static_cast<audioMode::pointer>(choice.get());
}

inline ModeElementType::audioMode::reference ModeElementType::select_audioMode ()
{
    return *static_cast<audioMode::pointer>(setSelection(audioMode::id_, ASN1::AbstractData::create( &audioMode::value_type::theInfo)));
}

inline ModeElementType::audioMode::reference ModeElementType::select_audioMode (ModeElementType::audioMode::const_reference value)
{
    return select_audioMode() = value;
}

inline bool ModeElementType::audioMode_isSelected() const
{ 
    return currentSelection() == audioMode::id_; 
}

inline ModeElementType::dataMode::const_reference ModeElementType::get_dataMode () const
{
    assert(currentSelection() ==dataMode::id_);
    return *static_cast<dataMode::const_pointer>(choice.get());
}

inline ModeElementType::dataMode::reference ModeElementType::ref_dataMode ()
{
    assert(currentSelection() ==dataMode::id_);
    return *static_cast<dataMode::pointer>(choice.get());
}

inline ModeElementType::dataMode::reference ModeElementType::select_dataMode ()
{
    return *static_cast<dataMode::pointer>(setSelection(dataMode::id_, ASN1::AbstractData::create( &dataMode::value_type::theInfo)));
}

inline ModeElementType::dataMode::reference ModeElementType::select_dataMode (ModeElementType::dataMode::const_reference value)
{
    return select_dataMode() = value;
}

inline bool ModeElementType::dataMode_isSelected() const
{ 
    return currentSelection() == dataMode::id_; 
}

inline ModeElementType::encryptionMode::const_reference ModeElementType::get_encryptionMode () const
{
    assert(currentSelection() ==encryptionMode::id_);
    return *static_cast<encryptionMode::const_pointer>(choice.get());
}

inline ModeElementType::encryptionMode::reference ModeElementType::ref_encryptionMode ()
{
    assert(currentSelection() ==encryptionMode::id_);
    return *static_cast<encryptionMode::pointer>(choice.get());
}

inline ModeElementType::encryptionMode::reference ModeElementType::select_encryptionMode ()
{
    return *static_cast<encryptionMode::pointer>(setSelection(encryptionMode::id_, ASN1::AbstractData::create( &encryptionMode::value_type::theInfo)));
}

inline ModeElementType::encryptionMode::reference ModeElementType::select_encryptionMode (ModeElementType::encryptionMode::const_reference value)
{
    return select_encryptionMode() = value;
}

inline bool ModeElementType::encryptionMode_isSelected() const
{ 
    return currentSelection() == encryptionMode::id_; 
}

inline ModeElementType::h235Mode::const_reference ModeElementType::get_h235Mode () const
{
    assert(currentSelection() ==h235Mode::id_);
    return *static_cast<h235Mode::const_pointer>(choice.get());
}

inline ModeElementType::h235Mode::reference ModeElementType::ref_h235Mode ()
{
    assert(currentSelection() ==h235Mode::id_);
    return *static_cast<h235Mode::pointer>(choice.get());
}

inline ModeElementType::h235Mode::reference ModeElementType::select_h235Mode ()
{
    return *static_cast<h235Mode::pointer>(setSelection(h235Mode::id_, ASN1::AbstractData::create( &h235Mode::value_type::theInfo)));
}

inline ModeElementType::h235Mode::reference ModeElementType::select_h235Mode (ModeElementType::h235Mode::const_reference value)
{
    return select_h235Mode() = value;
}

inline bool ModeElementType::h235Mode_isSelected() const
{ 
    return currentSelection() == h235Mode::id_; 
}

inline ModeElementType::multiplexedStreamMode::const_reference ModeElementType::get_multiplexedStreamMode () const
{
    assert(currentSelection() ==multiplexedStreamMode::id_);
    return *static_cast<multiplexedStreamMode::const_pointer>(choice.get());
}

inline ModeElementType::multiplexedStreamMode::reference ModeElementType::ref_multiplexedStreamMode ()
{
    assert(currentSelection() ==multiplexedStreamMode::id_);
    return *static_cast<multiplexedStreamMode::pointer>(choice.get());
}

inline ModeElementType::multiplexedStreamMode::reference ModeElementType::select_multiplexedStreamMode ()
{
    return *static_cast<multiplexedStreamMode::pointer>(setSelection(multiplexedStreamMode::id_, ASN1::AbstractData::create( &multiplexedStreamMode::value_type::theInfo)));
}

inline ModeElementType::multiplexedStreamMode::reference ModeElementType::select_multiplexedStreamMode (ModeElementType::multiplexedStreamMode::const_reference value)
{
    return select_multiplexedStreamMode() = value;
}

inline bool ModeElementType::multiplexedStreamMode_isSelected() const
{ 
    return currentSelection() == multiplexedStreamMode::id_; 
}

inline ModeElementType::redundancyEncodingDTMode::const_reference ModeElementType::get_redundancyEncodingDTMode () const
{
    assert(currentSelection() ==redundancyEncodingDTMode::id_);
    return *static_cast<redundancyEncodingDTMode::const_pointer>(choice.get());
}

inline ModeElementType::redundancyEncodingDTMode::reference ModeElementType::ref_redundancyEncodingDTMode ()
{
    assert(currentSelection() ==redundancyEncodingDTMode::id_);
    return *static_cast<redundancyEncodingDTMode::pointer>(choice.get());
}

inline ModeElementType::redundancyEncodingDTMode::reference ModeElementType::select_redundancyEncodingDTMode ()
{
    return *static_cast<redundancyEncodingDTMode::pointer>(setSelection(redundancyEncodingDTMode::id_, ASN1::AbstractData::create( &redundancyEncodingDTMode::value_type::theInfo)));
}

inline ModeElementType::redundancyEncodingDTMode::reference ModeElementType::select_redundancyEncodingDTMode (ModeElementType::redundancyEncodingDTMode::const_reference value)
{
    return select_redundancyEncodingDTMode() = value;
}

inline bool ModeElementType::redundancyEncodingDTMode_isSelected() const
{ 
    return currentSelection() == redundancyEncodingDTMode::id_; 
}

inline ModeElementType::fecMode::const_reference ModeElementType::get_fecMode () const
{
    assert(currentSelection() ==fecMode::id_);
    return *static_cast<fecMode::const_pointer>(choice.get());
}

inline ModeElementType::fecMode::reference ModeElementType::ref_fecMode ()
{
    assert(currentSelection() ==fecMode::id_);
    return *static_cast<fecMode::pointer>(choice.get());
}

inline ModeElementType::fecMode::reference ModeElementType::select_fecMode ()
{
    return *static_cast<fecMode::pointer>(setSelection(fecMode::id_, ASN1::AbstractData::create( &fecMode::value_type::theInfo)));
}

inline ModeElementType::fecMode::reference ModeElementType::select_fecMode (ModeElementType::fecMode::const_reference value)
{
    return select_fecMode() = value;
}

inline bool ModeElementType::fecMode_isSelected() const
{ 
    return currentSelection() == fecMode::id_; 
}

inline ModeElementType::ModeElementType(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline ModeElementType::ModeElementType(videoMode::Id id, videoMode::const_reference value)
  : Inherited(&theInfo, id, new videoMode::value_type(value) )
{ }

inline ModeElementType::ModeElementType(audioMode::Id id, audioMode::const_reference value)
  : Inherited(&theInfo, id, new audioMode::value_type(value) )
{ }

inline ModeElementType::ModeElementType(dataMode::Id id, dataMode::const_reference value)
  : Inherited(&theInfo, id, new dataMode::value_type(value) )
{ }

inline ModeElementType::ModeElementType(encryptionMode::Id id, encryptionMode::const_reference value)
  : Inherited(&theInfo, id, new encryptionMode::value_type(value) )
{ }

inline ModeElementType::ModeElementType(h235Mode::Id id, h235Mode::const_reference value)
  : Inherited(&theInfo, id, new h235Mode::value_type(value) )
{ }

inline ModeElementType::ModeElementType(multiplexedStreamMode::Id id, multiplexedStreamMode::const_reference value)
  : Inherited(&theInfo, id, new multiplexedStreamMode::value_type(value) )
{ }

inline ModeElementType::ModeElementType(redundancyEncodingDTMode::Id id, redundancyEncodingDTMode::const_reference value)
  : Inherited(&theInfo, id, new redundancyEncodingDTMode::value_type(value) )
{ }

inline ModeElementType::ModeElementType(fecMode::Id id, fecMode::const_reference value)
  : Inherited(&theInfo, id, new fecMode::value_type(value) )
{ }


inline void ModeElementType::swap(ModeElementType & other)
{  Inherited::swap(other); }

inline ModeElementType* ModeElementType::clone() const
{ return static_cast<ModeElementType*> (Inherited::clone()); }

inline bool ModeElementType::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline ModeElement::type::const_reference ModeElement::get_type () const
{ return *static_cast<type::const_pointer>(fields[0]);}

inline ModeElement::type::reference ModeElement::ref_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline ModeElement::type::reference ModeElement::set_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline ModeElement::type::reference ModeElement::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[0]) = value ;}

inline ModeElement::h223ModeParameters::const_reference ModeElement::get_h223ModeParameters () const
{
  assert(hasOptionalField(e_h223ModeParameters));
  return *static_cast<h223ModeParameters::const_pointer>(fields[1]);
}

inline ModeElement::h223ModeParameters::reference ModeElement::ref_h223ModeParameters ()
{
  assert(hasOptionalField(e_h223ModeParameters));
  return *static_cast<h223ModeParameters::pointer>(fields[1]);
}

inline ModeElement::h223ModeParameters::reference ModeElement::set_h223ModeParameters ()
{
  includeOptionalField( e_h223ModeParameters, 1);
  return *static_cast<h223ModeParameters::pointer>(fields[1]);
}

inline ModeElement::h223ModeParameters::reference ModeElement::set_h223ModeParameters (h223ModeParameters::const_reference value)
{
  includeOptionalField( e_h223ModeParameters, 1);
  return *static_cast<h223ModeParameters::pointer>(fields[1]) = value;
}

inline void ModeElement::omit_h223ModeParameters ()
{ removeOptionalField( e_h223ModeParameters); }

inline bool ModeElement::h223ModeParameters_isPresent () const
{ return hasOptionalField( e_h223ModeParameters); }

inline ModeElement::v76ModeParameters::const_reference ModeElement::get_v76ModeParameters () const
{
  assert(hasOptionalField(e_v76ModeParameters));
  return *static_cast<v76ModeParameters::const_pointer>(fields[2]);
}

inline ModeElement::v76ModeParameters::reference ModeElement::ref_v76ModeParameters ()
{
  assert(hasOptionalField(e_v76ModeParameters));
  return *static_cast<v76ModeParameters::pointer>(fields[2]);
}

inline ModeElement::v76ModeParameters::reference ModeElement::set_v76ModeParameters ()
{
  includeOptionalField( e_v76ModeParameters, 2);
  return *static_cast<v76ModeParameters::pointer>(fields[2]);
}

inline ModeElement::v76ModeParameters::reference ModeElement::set_v76ModeParameters (v76ModeParameters::const_reference value)
{
  includeOptionalField( e_v76ModeParameters, 2);
  return *static_cast<v76ModeParameters::pointer>(fields[2]) = value;
}

inline void ModeElement::omit_v76ModeParameters ()
{ removeOptionalField( e_v76ModeParameters); }

inline bool ModeElement::v76ModeParameters_isPresent () const
{ return hasOptionalField( e_v76ModeParameters); }

inline ModeElement::h2250ModeParameters::const_reference ModeElement::get_h2250ModeParameters () const
{
  assert(hasOptionalField(e_h2250ModeParameters));
  return *static_cast<h2250ModeParameters::const_pointer>(fields[3]);
}

inline ModeElement::h2250ModeParameters::reference ModeElement::ref_h2250ModeParameters ()
{
  assert(hasOptionalField(e_h2250ModeParameters));
  return *static_cast<h2250ModeParameters::pointer>(fields[3]);
}

inline ModeElement::h2250ModeParameters::reference ModeElement::set_h2250ModeParameters ()
{
  includeOptionalField( e_h2250ModeParameters, 3);
  return *static_cast<h2250ModeParameters::pointer>(fields[3]);
}

inline ModeElement::h2250ModeParameters::reference ModeElement::set_h2250ModeParameters (h2250ModeParameters::const_reference value)
{
  includeOptionalField( e_h2250ModeParameters, 3);
  return *static_cast<h2250ModeParameters::pointer>(fields[3]) = value;
}

inline void ModeElement::omit_h2250ModeParameters ()
{ removeOptionalField( e_h2250ModeParameters); }

inline bool ModeElement::h2250ModeParameters_isPresent () const
{ return hasOptionalField( e_h2250ModeParameters); }

inline ModeElement::genericModeParameters::const_reference ModeElement::get_genericModeParameters () const
{
  assert(hasOptionalField(e_genericModeParameters));
  return *static_cast<genericModeParameters::const_pointer>(fields[4]);
}

inline ModeElement::genericModeParameters::reference ModeElement::ref_genericModeParameters ()
{
  assert(hasOptionalField(e_genericModeParameters));
  return *static_cast<genericModeParameters::pointer>(fields[4]);
}

inline ModeElement::genericModeParameters::reference ModeElement::set_genericModeParameters ()
{
  includeOptionalField( e_genericModeParameters, 4);
  return *static_cast<genericModeParameters::pointer>(fields[4]);
}

inline ModeElement::genericModeParameters::reference ModeElement::set_genericModeParameters (genericModeParameters::const_reference value)
{
  includeOptionalField( e_genericModeParameters, 4);
  return *static_cast<genericModeParameters::pointer>(fields[4]) = value;
}

inline void ModeElement::omit_genericModeParameters ()
{ removeOptionalField( e_genericModeParameters); }

inline bool ModeElement::genericModeParameters_isPresent () const
{ return hasOptionalField( e_genericModeParameters); }

inline ModeElement::multiplexedStreamModeParameters::const_reference ModeElement::get_multiplexedStreamModeParameters () const
{
  assert(hasOptionalField(e_multiplexedStreamModeParameters));
  return *static_cast<multiplexedStreamModeParameters::const_pointer>(fields[5]);
}

inline ModeElement::multiplexedStreamModeParameters::reference ModeElement::ref_multiplexedStreamModeParameters ()
{
  assert(hasOptionalField(e_multiplexedStreamModeParameters));
  return *static_cast<multiplexedStreamModeParameters::pointer>(fields[5]);
}

inline ModeElement::multiplexedStreamModeParameters::reference ModeElement::set_multiplexedStreamModeParameters ()
{
  includeOptionalField( e_multiplexedStreamModeParameters, 5);
  return *static_cast<multiplexedStreamModeParameters::pointer>(fields[5]);
}

inline ModeElement::multiplexedStreamModeParameters::reference ModeElement::set_multiplexedStreamModeParameters (multiplexedStreamModeParameters::const_reference value)
{
  includeOptionalField( e_multiplexedStreamModeParameters, 5);
  return *static_cast<multiplexedStreamModeParameters::pointer>(fields[5]) = value;
}

inline void ModeElement::omit_multiplexedStreamModeParameters ()
{ removeOptionalField( e_multiplexedStreamModeParameters); }

inline bool ModeElement::multiplexedStreamModeParameters_isPresent () const
{ return hasOptionalField( e_multiplexedStreamModeParameters); }

inline ModeElement::logicalChannelNumber::const_reference ModeElement::get_logicalChannelNumber () const
{
  assert(hasOptionalField(e_logicalChannelNumber));
  return *static_cast<logicalChannelNumber::const_pointer>(fields[6]);
}

inline ModeElement::logicalChannelNumber::reference ModeElement::ref_logicalChannelNumber ()
{
  assert(hasOptionalField(e_logicalChannelNumber));
  return *static_cast<logicalChannelNumber::pointer>(fields[6]);
}

inline ModeElement::logicalChannelNumber::reference ModeElement::set_logicalChannelNumber ()
{
  includeOptionalField( e_logicalChannelNumber, 6);
  return *static_cast<logicalChannelNumber::pointer>(fields[6]);
}

inline ModeElement::logicalChannelNumber::reference ModeElement::set_logicalChannelNumber (logicalChannelNumber::value_type::int_type value)
{
  includeOptionalField( e_logicalChannelNumber, 6);
  return *static_cast<logicalChannelNumber::pointer>(fields[6]) = value;
}

inline void ModeElement::omit_logicalChannelNumber ()
{ removeOptionalField( e_logicalChannelNumber); }

inline bool ModeElement::logicalChannelNumber_isPresent () const
{ return hasOptionalField( e_logicalChannelNumber); }

inline void ModeElement::swap(ModeElement& other)
{ Inherited::swap(other); }

inline ModeElement* ModeElement::clone() const
{ return static_cast<ModeElement*> (Inherited::clone()); }

inline MultiplePayloadStreamElementMode::type::const_reference MultiplePayloadStreamElementMode::get_type () const
{ return *static_cast<type::const_pointer>(fields[0]);}

inline MultiplePayloadStreamElementMode::type::reference MultiplePayloadStreamElementMode::ref_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline MultiplePayloadStreamElementMode::type::reference MultiplePayloadStreamElementMode::set_type ()
{ return *static_cast<type::pointer>(fields[0]);}

inline MultiplePayloadStreamElementMode::type::reference MultiplePayloadStreamElementMode::set_type (type::const_reference value)
{ return *static_cast<type::pointer>(fields[0]) = value ;}

inline void MultiplePayloadStreamElementMode::swap(MultiplePayloadStreamElementMode& other)
{ Inherited::swap(other); }

inline MultiplePayloadStreamElementMode* MultiplePayloadStreamElementMode::clone() const
{ return static_cast<MultiplePayloadStreamElementMode*> (Inherited::clone()); }

inline MultiplePayloadStreamMode::elements::const_reference MultiplePayloadStreamMode::get_elements () const
{ return *static_cast<elements::const_pointer>(fields[0]);}

inline MultiplePayloadStreamMode::elements::reference MultiplePayloadStreamMode::ref_elements ()
{ return *static_cast<elements::pointer>(fields[0]);}

inline MultiplePayloadStreamMode::elements::reference MultiplePayloadStreamMode::set_elements ()
{ return *static_cast<elements::pointer>(fields[0]);}

inline MultiplePayloadStreamMode::elements::reference MultiplePayloadStreamMode::set_elements (elements::const_reference value)
{ return *static_cast<elements::pointer>(fields[0]) = value ;}

inline void MultiplePayloadStreamMode::swap(MultiplePayloadStreamMode& other)
{ Inherited::swap(other); }

inline MultiplePayloadStreamMode* MultiplePayloadStreamMode::clone() const
{ return static_cast<MultiplePayloadStreamMode*> (Inherited::clone()); }

inline RequestMode::sequenceNumber::const_reference RequestMode::get_sequenceNumber () const
{ return *static_cast<sequenceNumber::const_pointer>(fields[0]);}

inline RequestMode::sequenceNumber::reference RequestMode::ref_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline RequestMode::sequenceNumber::reference RequestMode::set_sequenceNumber ()
{ return *static_cast<sequenceNumber::pointer>(fields[0]);}

inline RequestMode::sequenceNumber::reference RequestMode::set_sequenceNumber (sequenceNumber::value_type::int_type value)
{ return *static_cast<sequenceNumber::pointer>(fields[0]) = value ;}

inline RequestMode::requestedModes::const_reference RequestMode::get_requestedModes () const
{ return *static_cast<requestedModes::const_pointer>(fields[1]);}

inline RequestMode::requestedModes::reference RequestMode::ref_requestedModes ()
{ return *static_cast<requestedModes::pointer>(fields[1]);}

inline RequestMode::requestedModes::reference RequestMode::set_requestedModes ()
{ return *static_cast<requestedModes::pointer>(fields[1]);}

inline RequestMode::requestedModes::reference RequestMode::set_requestedModes (requestedModes::const_reference value)
{ return *static_cast<requestedModes::pointer>(fields[1]) = value ;}

inline void RequestMode::swap(RequestMode& other)
{ Inherited::swap(other); }

inline RequestMode* RequestMode::clone() const
{ return static_cast<RequestMode*> (Inherited::clone()); }

inline RequestMessage::nonStandard::const_reference RequestMessage::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline RequestMessage::nonStandard::reference RequestMessage::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline RequestMessage::nonStandard::reference RequestMessage::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline RequestMessage::nonStandard::reference RequestMessage::select_nonStandard (RequestMessage::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool RequestMessage::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline RequestMessage::masterSlaveDetermination::const_reference RequestMessage::get_masterSlaveDetermination () const
{
    assert(currentSelection() ==masterSlaveDetermination::id_);
    return *static_cast<masterSlaveDetermination::const_pointer>(choice.get());
}

inline RequestMessage::masterSlaveDetermination::reference RequestMessage::ref_masterSlaveDetermination ()
{
    assert(currentSelection() ==masterSlaveDetermination::id_);
    return *static_cast<masterSlaveDetermination::pointer>(choice.get());
}

inline RequestMessage::masterSlaveDetermination::reference RequestMessage::select_masterSlaveDetermination ()
{
    return *static_cast<masterSlaveDetermination::pointer>(setSelection(masterSlaveDetermination::id_, ASN1::AbstractData::create( &masterSlaveDetermination::value_type::theInfo)));
}

inline RequestMessage::masterSlaveDetermination::reference RequestMessage::select_masterSlaveDetermination (RequestMessage::masterSlaveDetermination::const_reference value)
{
    return select_masterSlaveDetermination() = value;
}

inline bool RequestMessage::masterSlaveDetermination_isSelected() const
{ 
    return currentSelection() == masterSlaveDetermination::id_; 
}

inline RequestMessage::terminalCapabilitySet::const_reference RequestMessage::get_terminalCapabilitySet () const
{
    assert(currentSelection() ==terminalCapabilitySet::id_);
    return *static_cast<terminalCapabilitySet::const_pointer>(choice.get());
}

inline RequestMessage::terminalCapabilitySet::reference RequestMessage::ref_terminalCapabilitySet ()
{
    assert(currentSelection() ==terminalCapabilitySet::id_);
    return *static_cast<terminalCapabilitySet::pointer>(choice.get());
}

inline RequestMessage::terminalCapabilitySet::reference RequestMessage::select_terminalCapabilitySet ()
{
    return *static_cast<terminalCapabilitySet::pointer>(setSelection(terminalCapabilitySet::id_, ASN1::AbstractData::create( &terminalCapabilitySet::value_type::theInfo)));
}

inline RequestMessage::terminalCapabilitySet::reference RequestMessage::select_terminalCapabilitySet (RequestMessage::terminalCapabilitySet::const_reference value)
{
    return select_terminalCapabilitySet() = value;
}

inline bool RequestMessage::terminalCapabilitySet_isSelected() const
{ 
    return currentSelection() == terminalCapabilitySet::id_; 
}

inline RequestMessage::openLogicalChannel::const_reference RequestMessage::get_openLogicalChannel () const
{
    assert(currentSelection() ==openLogicalChannel::id_);
    return *static_cast<openLogicalChannel::const_pointer>(choice.get());
}

inline RequestMessage::openLogicalChannel::reference RequestMessage::ref_openLogicalChannel ()
{
    assert(currentSelection() ==openLogicalChannel::id_);
    return *static_cast<openLogicalChannel::pointer>(choice.get());
}

inline RequestMessage::openLogicalChannel::reference RequestMessage::select_openLogicalChannel ()
{
    return *static_cast<openLogicalChannel::pointer>(setSelection(openLogicalChannel::id_, ASN1::AbstractData::create( &openLogicalChannel::value_type::theInfo)));
}

inline RequestMessage::openLogicalChannel::reference RequestMessage::select_openLogicalChannel (RequestMessage::openLogicalChannel::const_reference value)
{
    return select_openLogicalChannel() = value;
}

inline bool RequestMessage::openLogicalChannel_isSelected() const
{ 
    return currentSelection() == openLogicalChannel::id_; 
}

inline RequestMessage::closeLogicalChannel::const_reference RequestMessage::get_closeLogicalChannel () const
{
    assert(currentSelection() ==closeLogicalChannel::id_);
    return *static_cast<closeLogicalChannel::const_pointer>(choice.get());
}

inline RequestMessage::closeLogicalChannel::reference RequestMessage::ref_closeLogicalChannel ()
{
    assert(currentSelection() ==closeLogicalChannel::id_);
    return *static_cast<closeLogicalChannel::pointer>(choice.get());
}

inline RequestMessage::closeLogicalChannel::reference RequestMessage::select_closeLogicalChannel ()
{
    return *static_cast<closeLogicalChannel::pointer>(setSelection(closeLogicalChannel::id_, ASN1::AbstractData::create( &closeLogicalChannel::value_type::theInfo)));
}

inline RequestMessage::closeLogicalChannel::reference RequestMessage::select_closeLogicalChannel (RequestMessage::closeLogicalChannel::const_reference value)
{
    return select_closeLogicalChannel() = value;
}

inline bool RequestMessage::closeLogicalChannel_isSelected() const
{ 
    return currentSelection() == closeLogicalChannel::id_; 
}

inline RequestMessage::requestChannelClose::const_reference RequestMessage::get_requestChannelClose () const
{
    assert(currentSelection() ==requestChannelClose::id_);
    return *static_cast<requestChannelClose::const_pointer>(choice.get());
}

inline RequestMessage::requestChannelClose::reference RequestMessage::ref_requestChannelClose ()
{
    assert(currentSelection() ==requestChannelClose::id_);
    return *static_cast<requestChannelClose::pointer>(choice.get());
}

inline RequestMessage::requestChannelClose::reference RequestMessage::select_requestChannelClose ()
{
    return *static_cast<requestChannelClose::pointer>(setSelection(requestChannelClose::id_, ASN1::AbstractData::create( &requestChannelClose::value_type::theInfo)));
}

inline RequestMessage::requestChannelClose::reference RequestMessage::select_requestChannelClose (RequestMessage::requestChannelClose::const_reference value)
{
    return select_requestChannelClose() = value;
}

inline bool RequestMessage::requestChannelClose_isSelected() const
{ 
    return currentSelection() == requestChannelClose::id_; 
}

inline RequestMessage::multiplexEntrySend::const_reference RequestMessage::get_multiplexEntrySend () const
{
    assert(currentSelection() ==multiplexEntrySend::id_);
    return *static_cast<multiplexEntrySend::const_pointer>(choice.get());
}

inline RequestMessage::multiplexEntrySend::reference RequestMessage::ref_multiplexEntrySend ()
{
    assert(currentSelection() ==multiplexEntrySend::id_);
    return *static_cast<multiplexEntrySend::pointer>(choice.get());
}

inline RequestMessage::multiplexEntrySend::reference RequestMessage::select_multiplexEntrySend ()
{
    return *static_cast<multiplexEntrySend::pointer>(setSelection(multiplexEntrySend::id_, ASN1::AbstractData::create( &multiplexEntrySend::value_type::theInfo)));
}

inline RequestMessage::multiplexEntrySend::reference RequestMessage::select_multiplexEntrySend (RequestMessage::multiplexEntrySend::const_reference value)
{
    return select_multiplexEntrySend() = value;
}

inline bool RequestMessage::multiplexEntrySend_isSelected() const
{ 
    return currentSelection() == multiplexEntrySend::id_; 
}

inline RequestMessage::requestMultiplexEntry::const_reference RequestMessage::get_requestMultiplexEntry () const
{
    assert(currentSelection() ==requestMultiplexEntry::id_);
    return *static_cast<requestMultiplexEntry::const_pointer>(choice.get());
}

inline RequestMessage::requestMultiplexEntry::reference RequestMessage::ref_requestMultiplexEntry ()
{
    assert(currentSelection() ==requestMultiplexEntry::id_);
    return *static_cast<requestMultiplexEntry::pointer>(choice.get());
}

inline RequestMessage::requestMultiplexEntry::reference RequestMessage::select_requestMultiplexEntry ()
{
    return *static_cast<requestMultiplexEntry::pointer>(setSelection(requestMultiplexEntry::id_, ASN1::AbstractData::create( &requestMultiplexEntry::value_type::theInfo)));
}

inline RequestMessage::requestMultiplexEntry::reference RequestMessage::select_requestMultiplexEntry (RequestMessage::requestMultiplexEntry::const_reference value)
{
    return select_requestMultiplexEntry() = value;
}

inline bool RequestMessage::requestMultiplexEntry_isSelected() const
{ 
    return currentSelection() == requestMultiplexEntry::id_; 
}

inline RequestMessage::requestMode::const_reference RequestMessage::get_requestMode () const
{
    assert(currentSelection() ==requestMode::id_);
    return *static_cast<requestMode::const_pointer>(choice.get());
}

inline RequestMessage::requestMode::reference RequestMessage::ref_requestMode ()
{
    assert(currentSelection() ==requestMode::id_);
    return *static_cast<requestMode::pointer>(choice.get());
}

inline RequestMessage::requestMode::reference RequestMessage::select_requestMode ()
{
    return *static_cast<requestMode::pointer>(setSelection(requestMode::id_, ASN1::AbstractData::create( &requestMode::value_type::theInfo)));
}

inline RequestMessage::requestMode::reference RequestMessage::select_requestMode (RequestMessage::requestMode::const_reference value)
{
    return select_requestMode() = value;
}

inline bool RequestMessage::requestMode_isSelected() const
{ 
    return currentSelection() == requestMode::id_; 
}

inline RequestMessage::roundTripDelayRequest::const_reference RequestMessage::get_roundTripDelayRequest () const
{
    assert(currentSelection() ==roundTripDelayRequest::id_);
    return *static_cast<roundTripDelayRequest::const_pointer>(choice.get());
}

inline RequestMessage::roundTripDelayRequest::reference RequestMessage::ref_roundTripDelayRequest ()
{
    assert(currentSelection() ==roundTripDelayRequest::id_);
    return *static_cast<roundTripDelayRequest::pointer>(choice.get());
}

inline RequestMessage::roundTripDelayRequest::reference RequestMessage::select_roundTripDelayRequest ()
{
    return *static_cast<roundTripDelayRequest::pointer>(setSelection(roundTripDelayRequest::id_, ASN1::AbstractData::create( &roundTripDelayRequest::value_type::theInfo)));
}

inline RequestMessage::roundTripDelayRequest::reference RequestMessage::select_roundTripDelayRequest (RequestMessage::roundTripDelayRequest::const_reference value)
{
    return select_roundTripDelayRequest() = value;
}

inline bool RequestMessage::roundTripDelayRequest_isSelected() const
{ 
    return currentSelection() == roundTripDelayRequest::id_; 
}

inline RequestMessage::maintenanceLoopRequest::const_reference RequestMessage::get_maintenanceLoopRequest () const
{
    assert(currentSelection() ==maintenanceLoopRequest::id_);
    return *static_cast<maintenanceLoopRequest::const_pointer>(choice.get());
}

inline RequestMessage::maintenanceLoopRequest::reference RequestMessage::ref_maintenanceLoopRequest ()
{
    assert(currentSelection() ==maintenanceLoopRequest::id_);
    return *static_cast<maintenanceLoopRequest::pointer>(choice.get());
}

inline RequestMessage::maintenanceLoopRequest::reference RequestMessage::select_maintenanceLoopRequest ()
{
    return *static_cast<maintenanceLoopRequest::pointer>(setSelection(maintenanceLoopRequest::id_, ASN1::AbstractData::create( &maintenanceLoopRequest::value_type::theInfo)));
}

inline RequestMessage::maintenanceLoopRequest::reference RequestMessage::select_maintenanceLoopRequest (RequestMessage::maintenanceLoopRequest::const_reference value)
{
    return select_maintenanceLoopRequest() = value;
}

inline bool RequestMessage::maintenanceLoopRequest_isSelected() const
{ 
    return currentSelection() == maintenanceLoopRequest::id_; 
}

inline RequestMessage::communicationModeRequest::const_reference RequestMessage::get_communicationModeRequest () const
{
    assert(currentSelection() ==communicationModeRequest::id_);
    return *static_cast<communicationModeRequest::const_pointer>(choice.get());
}

inline RequestMessage::communicationModeRequest::reference RequestMessage::ref_communicationModeRequest ()
{
    assert(currentSelection() ==communicationModeRequest::id_);
    return *static_cast<communicationModeRequest::pointer>(choice.get());
}

inline RequestMessage::communicationModeRequest::reference RequestMessage::select_communicationModeRequest ()
{
    return *static_cast<communicationModeRequest::pointer>(setSelection(communicationModeRequest::id_, ASN1::AbstractData::create( &communicationModeRequest::value_type::theInfo)));
}

inline RequestMessage::communicationModeRequest::reference RequestMessage::select_communicationModeRequest (RequestMessage::communicationModeRequest::const_reference value)
{
    return select_communicationModeRequest() = value;
}

inline bool RequestMessage::communicationModeRequest_isSelected() const
{ 
    return currentSelection() == communicationModeRequest::id_; 
}

inline RequestMessage::conferenceRequest::const_reference RequestMessage::get_conferenceRequest () const
{
    assert(currentSelection() ==conferenceRequest::id_);
    return *static_cast<conferenceRequest::const_pointer>(choice.get());
}

inline RequestMessage::conferenceRequest::reference RequestMessage::ref_conferenceRequest ()
{
    assert(currentSelection() ==conferenceRequest::id_);
    return *static_cast<conferenceRequest::pointer>(choice.get());
}

inline RequestMessage::conferenceRequest::reference RequestMessage::select_conferenceRequest ()
{
    return *static_cast<conferenceRequest::pointer>(setSelection(conferenceRequest::id_, ASN1::AbstractData::create( &conferenceRequest::value_type::theInfo)));
}

inline RequestMessage::conferenceRequest::reference RequestMessage::select_conferenceRequest (RequestMessage::conferenceRequest::const_reference value)
{
    return select_conferenceRequest() = value;
}

inline bool RequestMessage::conferenceRequest_isSelected() const
{ 
    return currentSelection() == conferenceRequest::id_; 
}

inline RequestMessage::multilinkRequest::const_reference RequestMessage::get_multilinkRequest () const
{
    assert(currentSelection() ==multilinkRequest::id_);
    return *static_cast<multilinkRequest::const_pointer>(choice.get());
}

inline RequestMessage::multilinkRequest::reference RequestMessage::ref_multilinkRequest ()
{
    assert(currentSelection() ==multilinkRequest::id_);
    return *static_cast<multilinkRequest::pointer>(choice.get());
}

inline RequestMessage::multilinkRequest::reference RequestMessage::select_multilinkRequest ()
{
    return *static_cast<multilinkRequest::pointer>(setSelection(multilinkRequest::id_, ASN1::AbstractData::create( &multilinkRequest::value_type::theInfo)));
}

inline RequestMessage::multilinkRequest::reference RequestMessage::select_multilinkRequest (RequestMessage::multilinkRequest::const_reference value)
{
    return select_multilinkRequest() = value;
}

inline bool RequestMessage::multilinkRequest_isSelected() const
{ 
    return currentSelection() == multilinkRequest::id_; 
}

inline RequestMessage::logicalChannelRateRequest::const_reference RequestMessage::get_logicalChannelRateRequest () const
{
    assert(currentSelection() ==logicalChannelRateRequest::id_);
    return *static_cast<logicalChannelRateRequest::const_pointer>(choice.get());
}

inline RequestMessage::logicalChannelRateRequest::reference RequestMessage::ref_logicalChannelRateRequest ()
{
    assert(currentSelection() ==logicalChannelRateRequest::id_);
    return *static_cast<logicalChannelRateRequest::pointer>(choice.get());
}

inline RequestMessage::logicalChannelRateRequest::reference RequestMessage::select_logicalChannelRateRequest ()
{
    return *static_cast<logicalChannelRateRequest::pointer>(setSelection(logicalChannelRateRequest::id_, ASN1::AbstractData::create( &logicalChannelRateRequest::value_type::theInfo)));
}

inline RequestMessage::logicalChannelRateRequest::reference RequestMessage::select_logicalChannelRateRequest (RequestMessage::logicalChannelRateRequest::const_reference value)
{
    return select_logicalChannelRateRequest() = value;
}

inline bool RequestMessage::logicalChannelRateRequest_isSelected() const
{ 
    return currentSelection() == logicalChannelRateRequest::id_; 
}

inline RequestMessage::genericRequest::const_reference RequestMessage::get_genericRequest () const
{
    assert(currentSelection() ==genericRequest::id_);
    return *static_cast<genericRequest::const_pointer>(choice.get());
}

inline RequestMessage::genericRequest::reference RequestMessage::ref_genericRequest ()
{
    assert(currentSelection() ==genericRequest::id_);
    return *static_cast<genericRequest::pointer>(choice.get());
}

inline RequestMessage::genericRequest::reference RequestMessage::select_genericRequest ()
{
    return *static_cast<genericRequest::pointer>(setSelection(genericRequest::id_, ASN1::AbstractData::create( &genericRequest::value_type::theInfo)));
}

inline RequestMessage::genericRequest::reference RequestMessage::select_genericRequest (RequestMessage::genericRequest::const_reference value)
{
    return select_genericRequest() = value;
}

inline bool RequestMessage::genericRequest_isSelected() const
{ 
    return currentSelection() == genericRequest::id_; 
}

inline RequestMessage::RequestMessage(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline RequestMessage::RequestMessage(masterSlaveDetermination::Id id, masterSlaveDetermination::const_reference value)
  : Inherited(&theInfo, id, new masterSlaveDetermination::value_type(value) )
{ }

inline RequestMessage::RequestMessage(terminalCapabilitySet::Id id, terminalCapabilitySet::const_reference value)
  : Inherited(&theInfo, id, new terminalCapabilitySet::value_type(value) )
{ }

inline RequestMessage::RequestMessage(openLogicalChannel::Id id, openLogicalChannel::const_reference value)
  : Inherited(&theInfo, id, new openLogicalChannel::value_type(value) )
{ }

inline RequestMessage::RequestMessage(closeLogicalChannel::Id id, closeLogicalChannel::const_reference value)
  : Inherited(&theInfo, id, new closeLogicalChannel::value_type(value) )
{ }

inline RequestMessage::RequestMessage(requestChannelClose::Id id, requestChannelClose::const_reference value)
  : Inherited(&theInfo, id, new requestChannelClose::value_type(value) )
{ }

inline RequestMessage::RequestMessage(multiplexEntrySend::Id id, multiplexEntrySend::const_reference value)
  : Inherited(&theInfo, id, new multiplexEntrySend::value_type(value) )
{ }

inline RequestMessage::RequestMessage(requestMultiplexEntry::Id id, requestMultiplexEntry::const_reference value)
  : Inherited(&theInfo, id, new requestMultiplexEntry::value_type(value) )
{ }

inline RequestMessage::RequestMessage(requestMode::Id id, requestMode::const_reference value)
  : Inherited(&theInfo, id, new requestMode::value_type(value) )
{ }

inline RequestMessage::RequestMessage(roundTripDelayRequest::Id id, roundTripDelayRequest::const_reference value)
  : Inherited(&theInfo, id, new roundTripDelayRequest::value_type(value) )
{ }

inline RequestMessage::RequestMessage(maintenanceLoopRequest::Id id, maintenanceLoopRequest::const_reference value)
  : Inherited(&theInfo, id, new maintenanceLoopRequest::value_type(value) )
{ }

inline RequestMessage::RequestMessage(communicationModeRequest::Id id, communicationModeRequest::const_reference value)
  : Inherited(&theInfo, id, new communicationModeRequest::value_type(value) )
{ }

inline RequestMessage::RequestMessage(conferenceRequest::Id id, conferenceRequest::const_reference value)
  : Inherited(&theInfo, id, new conferenceRequest::value_type(value) )
{ }

inline RequestMessage::RequestMessage(multilinkRequest::Id id, multilinkRequest::const_reference value)
  : Inherited(&theInfo, id, new multilinkRequest::value_type(value) )
{ }

inline RequestMessage::RequestMessage(logicalChannelRateRequest::Id id, logicalChannelRateRequest::const_reference value)
  : Inherited(&theInfo, id, new logicalChannelRateRequest::value_type(value) )
{ }

inline RequestMessage::RequestMessage(genericRequest::Id id, genericRequest::const_reference value)
  : Inherited(&theInfo, id, new genericRequest::value_type(value) )
{ }


inline void RequestMessage::swap(RequestMessage & other)
{  Inherited::swap(other); }

inline RequestMessage* RequestMessage::clone() const
{ return static_cast<RequestMessage*> (Inherited::clone()); }

inline bool RequestMessage::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline FunctionNotUnderstood::request::const_reference FunctionNotUnderstood::get_request () const
{
    assert(currentSelection() ==request::id_);
    return *static_cast<request::const_pointer>(choice.get());
}

inline FunctionNotUnderstood::request::reference FunctionNotUnderstood::ref_request ()
{
    assert(currentSelection() ==request::id_);
    return *static_cast<request::pointer>(choice.get());
}

inline FunctionNotUnderstood::request::reference FunctionNotUnderstood::select_request ()
{
    return *static_cast<request::pointer>(setSelection(request::id_, ASN1::AbstractData::create( &request::value_type::theInfo)));
}

inline FunctionNotUnderstood::request::reference FunctionNotUnderstood::select_request (FunctionNotUnderstood::request::const_reference value)
{
    return select_request() = value;
}

inline bool FunctionNotUnderstood::request_isSelected() const
{ 
    return currentSelection() == request::id_; 
}

inline FunctionNotUnderstood::response::const_reference FunctionNotUnderstood::get_response () const
{
    assert(currentSelection() ==response::id_);
    return *static_cast<response::const_pointer>(choice.get());
}

inline FunctionNotUnderstood::response::reference FunctionNotUnderstood::ref_response ()
{
    assert(currentSelection() ==response::id_);
    return *static_cast<response::pointer>(choice.get());
}

inline FunctionNotUnderstood::response::reference FunctionNotUnderstood::select_response ()
{
    return *static_cast<response::pointer>(setSelection(response::id_, ASN1::AbstractData::create( &response::value_type::theInfo)));
}

inline FunctionNotUnderstood::response::reference FunctionNotUnderstood::select_response (FunctionNotUnderstood::response::const_reference value)
{
    return select_response() = value;
}

inline bool FunctionNotUnderstood::response_isSelected() const
{ 
    return currentSelection() == response::id_; 
}

inline FunctionNotUnderstood::command::const_reference FunctionNotUnderstood::get_command () const
{
    assert(currentSelection() ==command::id_);
    return *static_cast<command::const_pointer>(choice.get());
}

inline FunctionNotUnderstood::command::reference FunctionNotUnderstood::ref_command ()
{
    assert(currentSelection() ==command::id_);
    return *static_cast<command::pointer>(choice.get());
}

inline FunctionNotUnderstood::command::reference FunctionNotUnderstood::select_command ()
{
    return *static_cast<command::pointer>(setSelection(command::id_, ASN1::AbstractData::create( &command::value_type::theInfo)));
}

inline FunctionNotUnderstood::command::reference FunctionNotUnderstood::select_command (FunctionNotUnderstood::command::const_reference value)
{
    return select_command() = value;
}

inline bool FunctionNotUnderstood::command_isSelected() const
{ 
    return currentSelection() == command::id_; 
}

inline FunctionNotUnderstood::FunctionNotUnderstood(request::Id id, request::const_reference value)
  : Inherited(&theInfo, id, new request::value_type(value) )
{ }

inline FunctionNotUnderstood::FunctionNotUnderstood(response::Id id, response::const_reference value)
  : Inherited(&theInfo, id, new response::value_type(value) )
{ }

inline FunctionNotUnderstood::FunctionNotUnderstood(command::Id id, command::const_reference value)
  : Inherited(&theInfo, id, new command::value_type(value) )
{ }


inline void FunctionNotUnderstood::swap(FunctionNotUnderstood & other)
{  Inherited::swap(other); }

inline FunctionNotUnderstood* FunctionNotUnderstood::clone() const
{ return static_cast<FunctionNotUnderstood*> (Inherited::clone()); }

inline bool FunctionNotUnderstood::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline IndicationMessage::nonStandard::const_reference IndicationMessage::get_nonStandard () const
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::const_pointer>(choice.get());
}

inline IndicationMessage::nonStandard::reference IndicationMessage::ref_nonStandard ()
{
    assert(currentSelection() ==nonStandard::id_);
    return *static_cast<nonStandard::pointer>(choice.get());
}

inline IndicationMessage::nonStandard::reference IndicationMessage::select_nonStandard ()
{
    return *static_cast<nonStandard::pointer>(setSelection(nonStandard::id_, ASN1::AbstractData::create( &nonStandard::value_type::theInfo)));
}

inline IndicationMessage::nonStandard::reference IndicationMessage::select_nonStandard (IndicationMessage::nonStandard::const_reference value)
{
    return select_nonStandard() = value;
}

inline bool IndicationMessage::nonStandard_isSelected() const
{ 
    return currentSelection() == nonStandard::id_; 
}

inline IndicationMessage::functionNotUnderstood::const_reference IndicationMessage::get_functionNotUnderstood () const
{
    assert(currentSelection() ==functionNotUnderstood::id_);
    return *static_cast<functionNotUnderstood::const_pointer>(choice.get());
}

inline IndicationMessage::functionNotUnderstood::reference IndicationMessage::ref_functionNotUnderstood ()
{
    assert(currentSelection() ==functionNotUnderstood::id_);
    return *static_cast<functionNotUnderstood::pointer>(choice.get());
}

inline IndicationMessage::functionNotUnderstood::reference IndicationMessage::select_functionNotUnderstood ()
{
    return *static_cast<functionNotUnderstood::pointer>(setSelection(functionNotUnderstood::id_, ASN1::AbstractData::create( &functionNotUnderstood::value_type::theInfo)));
}

inline IndicationMessage::functionNotUnderstood::reference IndicationMessage::select_functionNotUnderstood (IndicationMessage::functionNotUnderstood::const_reference value)
{
    return select_functionNotUnderstood() = value;
}

inline bool IndicationMessage::functionNotUnderstood_isSelected() const
{ 
    return currentSelection() == functionNotUnderstood::id_; 
}

inline IndicationMessage::masterSlaveDeterminationRelease::const_reference IndicationMessage::get_masterSlaveDeterminationRelease () const
{
    assert(currentSelection() ==masterSlaveDeterminationRelease::id_);
    return *static_cast<masterSlaveDeterminationRelease::const_pointer>(choice.get());
}

inline IndicationMessage::masterSlaveDeterminationRelease::reference IndicationMessage::ref_masterSlaveDeterminationRelease ()
{
    assert(currentSelection() ==masterSlaveDeterminationRelease::id_);
    return *static_cast<masterSlaveDeterminationRelease::pointer>(choice.get());
}

inline IndicationMessage::masterSlaveDeterminationRelease::reference IndicationMessage::select_masterSlaveDeterminationRelease ()
{
    return *static_cast<masterSlaveDeterminationRelease::pointer>(setSelection(masterSlaveDeterminationRelease::id_, ASN1::AbstractData::create( &masterSlaveDeterminationRelease::value_type::theInfo)));
}

inline IndicationMessage::masterSlaveDeterminationRelease::reference IndicationMessage::select_masterSlaveDeterminationRelease (IndicationMessage::masterSlaveDeterminationRelease::const_reference value)
{
    return select_masterSlaveDeterminationRelease() = value;
}

inline bool IndicationMessage::masterSlaveDeterminationRelease_isSelected() const
{ 
    return currentSelection() == masterSlaveDeterminationRelease::id_; 
}

inline IndicationMessage::terminalCapabilitySetRelease::const_reference IndicationMessage::get_terminalCapabilitySetRelease () const
{
    assert(currentSelection() ==terminalCapabilitySetRelease::id_);
    return *static_cast<terminalCapabilitySetRelease::const_pointer>(choice.get());
}

inline IndicationMessage::terminalCapabilitySetRelease::reference IndicationMessage::ref_terminalCapabilitySetRelease ()
{
    assert(currentSelection() ==terminalCapabilitySetRelease::id_);
    return *static_cast<terminalCapabilitySetRelease::pointer>(choice.get());
}

inline IndicationMessage::terminalCapabilitySetRelease::reference IndicationMessage::select_terminalCapabilitySetRelease ()
{
    return *static_cast<terminalCapabilitySetRelease::pointer>(setSelection(terminalCapabilitySetRelease::id_, ASN1::AbstractData::create( &terminalCapabilitySetRelease::value_type::theInfo)));
}

inline IndicationMessage::terminalCapabilitySetRelease::reference IndicationMessage::select_terminalCapabilitySetRelease (IndicationMessage::terminalCapabilitySetRelease::const_reference value)
{
    return select_terminalCapabilitySetRelease() = value;
}

inline bool IndicationMessage::terminalCapabilitySetRelease_isSelected() const
{ 
    return currentSelection() == terminalCapabilitySetRelease::id_; 
}

inline IndicationMessage::openLogicalChannelConfirm::const_reference IndicationMessage::get_openLogicalChannelConfirm () const
{
    assert(currentSelection() ==openLogicalChannelConfirm::id_);
    return *static_cast<openLogicalChannelConfirm::const_pointer>(choice.get());
}

inline IndicationMessage::openLogicalChannelConfirm::reference IndicationMessage::ref_openLogicalChannelConfirm ()
{
    assert(currentSelection() ==openLogicalChannelConfirm::id_);
    return *static_cast<openLogicalChannelConfirm::pointer>(choice.get());
}

inline IndicationMessage::openLogicalChannelConfirm::reference IndicationMessage::select_openLogicalChannelConfirm ()
{
    return *static_cast<openLogicalChannelConfirm::pointer>(setSelection(openLogicalChannelConfirm::id_, ASN1::AbstractData::create( &openLogicalChannelConfirm::value_type::theInfo)));
}

inline IndicationMessage::openLogicalChannelConfirm::reference IndicationMessage::select_openLogicalChannelConfirm (IndicationMessage::openLogicalChannelConfirm::const_reference value)
{
    return select_openLogicalChannelConfirm() = value;
}

inline bool IndicationMessage::openLogicalChannelConfirm_isSelected() const
{ 
    return currentSelection() == openLogicalChannelConfirm::id_; 
}

inline IndicationMessage::requestChannelCloseRelease::const_reference IndicationMessage::get_requestChannelCloseRelease () const
{
    assert(currentSelection() ==requestChannelCloseRelease::id_);
    return *static_cast<requestChannelCloseRelease::const_pointer>(choice.get());
}

inline IndicationMessage::requestChannelCloseRelease::reference IndicationMessage::ref_requestChannelCloseRelease ()
{
    assert(currentSelection() ==requestChannelCloseRelease::id_);
    return *static_cast<requestChannelCloseRelease::pointer>(choice.get());
}

inline IndicationMessage::requestChannelCloseRelease::reference IndicationMessage::select_requestChannelCloseRelease ()
{
    return *static_cast<requestChannelCloseRelease::pointer>(setSelection(requestChannelCloseRelease::id_, ASN1::AbstractData::create( &requestChannelCloseRelease::value_type::theInfo)));
}

inline IndicationMessage::requestChannelCloseRelease::reference IndicationMessage::select_requestChannelCloseRelease (IndicationMessage::requestChannelCloseRelease::const_reference value)
{
    return select_requestChannelCloseRelease() = value;
}

inline bool IndicationMessage::requestChannelCloseRelease_isSelected() const
{ 
    return currentSelection() == requestChannelCloseRelease::id_; 
}

inline IndicationMessage::multiplexEntrySendRelease::const_reference IndicationMessage::get_multiplexEntrySendRelease () const
{
    assert(currentSelection() ==multiplexEntrySendRelease::id_);
    return *static_cast<multiplexEntrySendRelease::const_pointer>(choice.get());
}

inline IndicationMessage::multiplexEntrySendRelease::reference IndicationMessage::ref_multiplexEntrySendRelease ()
{
    assert(currentSelection() ==multiplexEntrySendRelease::id_);
    return *static_cast<multiplexEntrySendRelease::pointer>(choice.get());
}

inline IndicationMessage::multiplexEntrySendRelease::reference IndicationMessage::select_multiplexEntrySendRelease ()
{
    return *static_cast<multiplexEntrySendRelease::pointer>(setSelection(multiplexEntrySendRelease::id_, ASN1::AbstractData::create( &multiplexEntrySendRelease::value_type::theInfo)));
}

inline IndicationMessage::multiplexEntrySendRelease::reference IndicationMessage::select_multiplexEntrySendRelease (IndicationMessage::multiplexEntrySendRelease::const_reference value)
{
    return select_multiplexEntrySendRelease() = value;
}

inline bool IndicationMessage::multiplexEntrySendRelease_isSelected() const
{ 
    return currentSelection() == multiplexEntrySendRelease::id_; 
}

inline IndicationMessage::requestMultiplexEntryRelease::const_reference IndicationMessage::get_requestMultiplexEntryRelease () const
{
    assert(currentSelection() ==requestMultiplexEntryRelease::id_);
    return *static_cast<requestMultiplexEntryRelease::const_pointer>(choice.get());
}

inline IndicationMessage::requestMultiplexEntryRelease::reference IndicationMessage::ref_requestMultiplexEntryRelease ()
{
    assert(currentSelection() ==requestMultiplexEntryRelease::id_);
    return *static_cast<requestMultiplexEntryRelease::pointer>(choice.get());
}

inline IndicationMessage::requestMultiplexEntryRelease::reference IndicationMessage::select_requestMultiplexEntryRelease ()
{
    return *static_cast<requestMultiplexEntryRelease::pointer>(setSelection(requestMultiplexEntryRelease::id_, ASN1::AbstractData::create( &requestMultiplexEntryRelease::value_type::theInfo)));
}

inline IndicationMessage::requestMultiplexEntryRelease::reference IndicationMessage::select_requestMultiplexEntryRelease (IndicationMessage::requestMultiplexEntryRelease::const_reference value)
{
    return select_requestMultiplexEntryRelease() = value;
}

inline bool IndicationMessage::requestMultiplexEntryRelease_isSelected() const
{ 
    return currentSelection() == requestMultiplexEntryRelease::id_; 
}

inline IndicationMessage::requestModeRelease::const_reference IndicationMessage::get_requestModeRelease () const
{
    assert(currentSelection() ==requestModeRelease::id_);
    return *static_cast<requestModeRelease::const_pointer>(choice.get());
}

inline IndicationMessage::requestModeRelease::reference IndicationMessage::ref_requestModeRelease ()
{
    assert(currentSelection() ==requestModeRelease::id_);
    return *static_cast<requestModeRelease::pointer>(choice.get());
}

inline IndicationMessage::requestModeRelease::reference IndicationMessage::select_requestModeRelease ()
{
    return *static_cast<requestModeRelease::pointer>(setSelection(requestModeRelease::id_, ASN1::AbstractData::create( &requestModeRelease::value_type::theInfo)));
}

inline IndicationMessage::requestModeRelease::reference IndicationMessage::select_requestModeRelease (IndicationMessage::requestModeRelease::const_reference value)
{
    return select_requestModeRelease() = value;
}

inline bool IndicationMessage::requestModeRelease_isSelected() const
{ 
    return currentSelection() == requestModeRelease::id_; 
}

inline IndicationMessage::miscellaneousIndication::const_reference IndicationMessage::get_miscellaneousIndication () const
{
    assert(currentSelection() ==miscellaneousIndication::id_);
    return *static_cast<miscellaneousIndication::const_pointer>(choice.get());
}

inline IndicationMessage::miscellaneousIndication::reference IndicationMessage::ref_miscellaneousIndication ()
{
    assert(currentSelection() ==miscellaneousIndication::id_);
    return *static_cast<miscellaneousIndication::pointer>(choice.get());
}

inline IndicationMessage::miscellaneousIndication::reference IndicationMessage::select_miscellaneousIndication ()
{
    return *static_cast<miscellaneousIndication::pointer>(setSelection(miscellaneousIndication::id_, ASN1::AbstractData::create( &miscellaneousIndication::value_type::theInfo)));
}

inline IndicationMessage::miscellaneousIndication::reference IndicationMessage::select_miscellaneousIndication (IndicationMessage::miscellaneousIndication::const_reference value)
{
    return select_miscellaneousIndication() = value;
}

inline bool IndicationMessage::miscellaneousIndication_isSelected() const
{ 
    return currentSelection() == miscellaneousIndication::id_; 
}

inline IndicationMessage::jitterIndication::const_reference IndicationMessage::get_jitterIndication () const
{
    assert(currentSelection() ==jitterIndication::id_);
    return *static_cast<jitterIndication::const_pointer>(choice.get());
}

inline IndicationMessage::jitterIndication::reference IndicationMessage::ref_jitterIndication ()
{
    assert(currentSelection() ==jitterIndication::id_);
    return *static_cast<jitterIndication::pointer>(choice.get());
}

inline IndicationMessage::jitterIndication::reference IndicationMessage::select_jitterIndication ()
{
    return *static_cast<jitterIndication::pointer>(setSelection(jitterIndication::id_, ASN1::AbstractData::create( &jitterIndication::value_type::theInfo)));
}

inline IndicationMessage::jitterIndication::reference IndicationMessage::select_jitterIndication (IndicationMessage::jitterIndication::const_reference value)
{
    return select_jitterIndication() = value;
}

inline bool IndicationMessage::jitterIndication_isSelected() const
{ 
    return currentSelection() == jitterIndication::id_; 
}

inline IndicationMessage::h223SkewIndication::const_reference IndicationMessage::get_h223SkewIndication () const
{
    assert(currentSelection() ==h223SkewIndication::id_);
    return *static_cast<h223SkewIndication::const_pointer>(choice.get());
}

inline IndicationMessage::h223SkewIndication::reference IndicationMessage::ref_h223SkewIndication ()
{
    assert(currentSelection() ==h223SkewIndication::id_);
    return *static_cast<h223SkewIndication::pointer>(choice.get());
}

inline IndicationMessage::h223SkewIndication::reference IndicationMessage::select_h223SkewIndication ()
{
    return *static_cast<h223SkewIndication::pointer>(setSelection(h223SkewIndication::id_, ASN1::AbstractData::create( &h223SkewIndication::value_type::theInfo)));
}

inline IndicationMessage::h223SkewIndication::reference IndicationMessage::select_h223SkewIndication (IndicationMessage::h223SkewIndication::const_reference value)
{
    return select_h223SkewIndication() = value;
}

inline bool IndicationMessage::h223SkewIndication_isSelected() const
{ 
    return currentSelection() == h223SkewIndication::id_; 
}

inline IndicationMessage::newATMVCIndication::const_reference IndicationMessage::get_newATMVCIndication () const
{
    assert(currentSelection() ==newATMVCIndication::id_);
    return *static_cast<newATMVCIndication::const_pointer>(choice.get());
}

inline IndicationMessage::newATMVCIndication::reference IndicationMessage::ref_newATMVCIndication ()
{
    assert(currentSelection() ==newATMVCIndication::id_);
    return *static_cast<newATMVCIndication::pointer>(choice.get());
}

inline IndicationMessage::newATMVCIndication::reference IndicationMessage::select_newATMVCIndication ()
{
    return *static_cast<newATMVCIndication::pointer>(setSelection(newATMVCIndication::id_, ASN1::AbstractData::create( &newATMVCIndication::value_type::theInfo)));
}

inline IndicationMessage::newATMVCIndication::reference IndicationMessage::select_newATMVCIndication (IndicationMessage::newATMVCIndication::const_reference value)
{
    return select_newATMVCIndication() = value;
}

inline bool IndicationMessage::newATMVCIndication_isSelected() const
{ 
    return currentSelection() == newATMVCIndication::id_; 
}

inline IndicationMessage::userInput::const_reference IndicationMessage::get_userInput () const
{
    assert(currentSelection() ==userInput::id_);
    return *static_cast<userInput::const_pointer>(choice.get());
}

inline IndicationMessage::userInput::reference IndicationMessage::ref_userInput ()
{
    assert(currentSelection() ==userInput::id_);
    return *static_cast<userInput::pointer>(choice.get());
}

inline IndicationMessage::userInput::reference IndicationMessage::select_userInput ()
{
    return *static_cast<userInput::pointer>(setSelection(userInput::id_, ASN1::AbstractData::create( &userInput::value_type::theInfo)));
}

inline IndicationMessage::userInput::reference IndicationMessage::select_userInput (IndicationMessage::userInput::const_reference value)
{
    return select_userInput() = value;
}

inline bool IndicationMessage::userInput_isSelected() const
{ 
    return currentSelection() == userInput::id_; 
}

inline IndicationMessage::h2250MaximumSkewIndication::const_reference IndicationMessage::get_h2250MaximumSkewIndication () const
{
    assert(currentSelection() ==h2250MaximumSkewIndication::id_);
    return *static_cast<h2250MaximumSkewIndication::const_pointer>(choice.get());
}

inline IndicationMessage::h2250MaximumSkewIndication::reference IndicationMessage::ref_h2250MaximumSkewIndication ()
{
    assert(currentSelection() ==h2250MaximumSkewIndication::id_);
    return *static_cast<h2250MaximumSkewIndication::pointer>(choice.get());
}

inline IndicationMessage::h2250MaximumSkewIndication::reference IndicationMessage::select_h2250MaximumSkewIndication ()
{
    return *static_cast<h2250MaximumSkewIndication::pointer>(setSelection(h2250MaximumSkewIndication::id_, ASN1::AbstractData::create( &h2250MaximumSkewIndication::value_type::theInfo)));
}

inline IndicationMessage::h2250MaximumSkewIndication::reference IndicationMessage::select_h2250MaximumSkewIndication (IndicationMessage::h2250MaximumSkewIndication::const_reference value)
{
    return select_h2250MaximumSkewIndication() = value;
}

inline bool IndicationMessage::h2250MaximumSkewIndication_isSelected() const
{ 
    return currentSelection() == h2250MaximumSkewIndication::id_; 
}

inline IndicationMessage::mcLocationIndication::const_reference IndicationMessage::get_mcLocationIndication () const
{
    assert(currentSelection() ==mcLocationIndication::id_);
    return *static_cast<mcLocationIndication::const_pointer>(choice.get());
}

inline IndicationMessage::mcLocationIndication::reference IndicationMessage::ref_mcLocationIndication ()
{
    assert(currentSelection() ==mcLocationIndication::id_);
    return *static_cast<mcLocationIndication::pointer>(choice.get());
}

inline IndicationMessage::mcLocationIndication::reference IndicationMessage::select_mcLocationIndication ()
{
    return *static_cast<mcLocationIndication::pointer>(setSelection(mcLocationIndication::id_, ASN1::AbstractData::create( &mcLocationIndication::value_type::theInfo)));
}

inline IndicationMessage::mcLocationIndication::reference IndicationMessage::select_mcLocationIndication (IndicationMessage::mcLocationIndication::const_reference value)
{
    return select_mcLocationIndication() = value;
}

inline bool IndicationMessage::mcLocationIndication_isSelected() const
{ 
    return currentSelection() == mcLocationIndication::id_; 
}

inline IndicationMessage::conferenceIndication::const_reference IndicationMessage::get_conferenceIndication () const
{
    assert(currentSelection() ==conferenceIndication::id_);
    return *static_cast<conferenceIndication::const_pointer>(choice.get());
}

inline IndicationMessage::conferenceIndication::reference IndicationMessage::ref_conferenceIndication ()
{
    assert(currentSelection() ==conferenceIndication::id_);
    return *static_cast<conferenceIndication::pointer>(choice.get());
}

inline IndicationMessage::conferenceIndication::reference IndicationMessage::select_conferenceIndication ()
{
    return *static_cast<conferenceIndication::pointer>(setSelection(conferenceIndication::id_, ASN1::AbstractData::create( &conferenceIndication::value_type::theInfo)));
}

inline IndicationMessage::conferenceIndication::reference IndicationMessage::select_conferenceIndication (IndicationMessage::conferenceIndication::const_reference value)
{
    return select_conferenceIndication() = value;
}

inline bool IndicationMessage::conferenceIndication_isSelected() const
{ 
    return currentSelection() == conferenceIndication::id_; 
}

inline IndicationMessage::vendorIdentification::const_reference IndicationMessage::get_vendorIdentification () const
{
    assert(currentSelection() ==vendorIdentification::id_);
    return *static_cast<vendorIdentification::const_pointer>(choice.get());
}

inline IndicationMessage::vendorIdentification::reference IndicationMessage::ref_vendorIdentification ()
{
    assert(currentSelection() ==vendorIdentification::id_);
    return *static_cast<vendorIdentification::pointer>(choice.get());
}

inline IndicationMessage::vendorIdentification::reference IndicationMessage::select_vendorIdentification ()
{
    return *static_cast<vendorIdentification::pointer>(setSelection(vendorIdentification::id_, ASN1::AbstractData::create( &vendorIdentification::value_type::theInfo)));
}

inline IndicationMessage::vendorIdentification::reference IndicationMessage::select_vendorIdentification (IndicationMessage::vendorIdentification::const_reference value)
{
    return select_vendorIdentification() = value;
}

inline bool IndicationMessage::vendorIdentification_isSelected() const
{ 
    return currentSelection() == vendorIdentification::id_; 
}

inline IndicationMessage::functionNotSupported::const_reference IndicationMessage::get_functionNotSupported () const
{
    assert(currentSelection() ==functionNotSupported::id_);
    return *static_cast<functionNotSupported::const_pointer>(choice.get());
}

inline IndicationMessage::functionNotSupported::reference IndicationMessage::ref_functionNotSupported ()
{
    assert(currentSelection() ==functionNotSupported::id_);
    return *static_cast<functionNotSupported::pointer>(choice.get());
}

inline IndicationMessage::functionNotSupported::reference IndicationMessage::select_functionNotSupported ()
{
    return *static_cast<functionNotSupported::pointer>(setSelection(functionNotSupported::id_, ASN1::AbstractData::create( &functionNotSupported::value_type::theInfo)));
}

inline IndicationMessage::functionNotSupported::reference IndicationMessage::select_functionNotSupported (IndicationMessage::functionNotSupported::const_reference value)
{
    return select_functionNotSupported() = value;
}

inline bool IndicationMessage::functionNotSupported_isSelected() const
{ 
    return currentSelection() == functionNotSupported::id_; 
}

inline IndicationMessage::multilinkIndication::const_reference IndicationMessage::get_multilinkIndication () const
{
    assert(currentSelection() ==multilinkIndication::id_);
    return *static_cast<multilinkIndication::const_pointer>(choice.get());
}

inline IndicationMessage::multilinkIndication::reference IndicationMessage::ref_multilinkIndication ()
{
    assert(currentSelection() ==multilinkIndication::id_);
    return *static_cast<multilinkIndication::pointer>(choice.get());
}

inline IndicationMessage::multilinkIndication::reference IndicationMessage::select_multilinkIndication ()
{
    return *static_cast<multilinkIndication::pointer>(setSelection(multilinkIndication::id_, ASN1::AbstractData::create( &multilinkIndication::value_type::theInfo)));
}

inline IndicationMessage::multilinkIndication::reference IndicationMessage::select_multilinkIndication (IndicationMessage::multilinkIndication::const_reference value)
{
    return select_multilinkIndication() = value;
}

inline bool IndicationMessage::multilinkIndication_isSelected() const
{ 
    return currentSelection() == multilinkIndication::id_; 
}

inline IndicationMessage::logicalChannelRateRelease::const_reference IndicationMessage::get_logicalChannelRateRelease () const
{
    assert(currentSelection() ==logicalChannelRateRelease::id_);
    return *static_cast<logicalChannelRateRelease::const_pointer>(choice.get());
}

inline IndicationMessage::logicalChannelRateRelease::reference IndicationMessage::ref_logicalChannelRateRelease ()
{
    assert(currentSelection() ==logicalChannelRateRelease::id_);
    return *static_cast<logicalChannelRateRelease::pointer>(choice.get());
}

inline IndicationMessage::logicalChannelRateRelease::reference IndicationMessage::select_logicalChannelRateRelease ()
{
    return *static_cast<logicalChannelRateRelease::pointer>(setSelection(logicalChannelRateRelease::id_, ASN1::AbstractData::create( &logicalChannelRateRelease::value_type::theInfo)));
}

inline IndicationMessage::logicalChannelRateRelease::reference IndicationMessage::select_logicalChannelRateRelease (IndicationMessage::logicalChannelRateRelease::const_reference value)
{
    return select_logicalChannelRateRelease() = value;
}

inline bool IndicationMessage::logicalChannelRateRelease_isSelected() const
{ 
    return currentSelection() == logicalChannelRateRelease::id_; 
}

inline IndicationMessage::flowControlIndication::const_reference IndicationMessage::get_flowControlIndication () const
{
    assert(currentSelection() ==flowControlIndication::id_);
    return *static_cast<flowControlIndication::const_pointer>(choice.get());
}

inline IndicationMessage::flowControlIndication::reference IndicationMessage::ref_flowControlIndication ()
{
    assert(currentSelection() ==flowControlIndication::id_);
    return *static_cast<flowControlIndication::pointer>(choice.get());
}

inline IndicationMessage::flowControlIndication::reference IndicationMessage::select_flowControlIndication ()
{
    return *static_cast<flowControlIndication::pointer>(setSelection(flowControlIndication::id_, ASN1::AbstractData::create( &flowControlIndication::value_type::theInfo)));
}

inline IndicationMessage::flowControlIndication::reference IndicationMessage::select_flowControlIndication (IndicationMessage::flowControlIndication::const_reference value)
{
    return select_flowControlIndication() = value;
}

inline bool IndicationMessage::flowControlIndication_isSelected() const
{ 
    return currentSelection() == flowControlIndication::id_; 
}

inline IndicationMessage::mobileMultilinkReconfigurationIndication::const_reference IndicationMessage::get_mobileMultilinkReconfigurationIndication () const
{
    assert(currentSelection() ==mobileMultilinkReconfigurationIndication::id_);
    return *static_cast<mobileMultilinkReconfigurationIndication::const_pointer>(choice.get());
}

inline IndicationMessage::mobileMultilinkReconfigurationIndication::reference IndicationMessage::ref_mobileMultilinkReconfigurationIndication ()
{
    assert(currentSelection() ==mobileMultilinkReconfigurationIndication::id_);
    return *static_cast<mobileMultilinkReconfigurationIndication::pointer>(choice.get());
}

inline IndicationMessage::mobileMultilinkReconfigurationIndication::reference IndicationMessage::select_mobileMultilinkReconfigurationIndication ()
{
    return *static_cast<mobileMultilinkReconfigurationIndication::pointer>(setSelection(mobileMultilinkReconfigurationIndication::id_, ASN1::AbstractData::create( &mobileMultilinkReconfigurationIndication::value_type::theInfo)));
}

inline IndicationMessage::mobileMultilinkReconfigurationIndication::reference IndicationMessage::select_mobileMultilinkReconfigurationIndication (IndicationMessage::mobileMultilinkReconfigurationIndication::const_reference value)
{
    return select_mobileMultilinkReconfigurationIndication() = value;
}

inline bool IndicationMessage::mobileMultilinkReconfigurationIndication_isSelected() const
{ 
    return currentSelection() == mobileMultilinkReconfigurationIndication::id_; 
}

inline IndicationMessage::genericIndication::const_reference IndicationMessage::get_genericIndication () const
{
    assert(currentSelection() ==genericIndication::id_);
    return *static_cast<genericIndication::const_pointer>(choice.get());
}

inline IndicationMessage::genericIndication::reference IndicationMessage::ref_genericIndication ()
{
    assert(currentSelection() ==genericIndication::id_);
    return *static_cast<genericIndication::pointer>(choice.get());
}

inline IndicationMessage::genericIndication::reference IndicationMessage::select_genericIndication ()
{
    return *static_cast<genericIndication::pointer>(setSelection(genericIndication::id_, ASN1::AbstractData::create( &genericIndication::value_type::theInfo)));
}

inline IndicationMessage::genericIndication::reference IndicationMessage::select_genericIndication (IndicationMessage::genericIndication::const_reference value)
{
    return select_genericIndication() = value;
}

inline bool IndicationMessage::genericIndication_isSelected() const
{ 
    return currentSelection() == genericIndication::id_; 
}

inline IndicationMessage::IndicationMessage(nonStandard::Id id, nonStandard::const_reference value)
  : Inherited(&theInfo, id, new nonStandard::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(functionNotUnderstood::Id id, functionNotUnderstood::const_reference value)
  : Inherited(&theInfo, id, new functionNotUnderstood::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(masterSlaveDeterminationRelease::Id id, masterSlaveDeterminationRelease::const_reference value)
  : Inherited(&theInfo, id, new masterSlaveDeterminationRelease::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(terminalCapabilitySetRelease::Id id, terminalCapabilitySetRelease::const_reference value)
  : Inherited(&theInfo, id, new terminalCapabilitySetRelease::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(openLogicalChannelConfirm::Id id, openLogicalChannelConfirm::const_reference value)
  : Inherited(&theInfo, id, new openLogicalChannelConfirm::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(requestChannelCloseRelease::Id id, requestChannelCloseRelease::const_reference value)
  : Inherited(&theInfo, id, new requestChannelCloseRelease::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(multiplexEntrySendRelease::Id id, multiplexEntrySendRelease::const_reference value)
  : Inherited(&theInfo, id, new multiplexEntrySendRelease::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(requestMultiplexEntryRelease::Id id, requestMultiplexEntryRelease::const_reference value)
  : Inherited(&theInfo, id, new requestMultiplexEntryRelease::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(requestModeRelease::Id id, requestModeRelease::const_reference value)
  : Inherited(&theInfo, id, new requestModeRelease::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(miscellaneousIndication::Id id, miscellaneousIndication::const_reference value)
  : Inherited(&theInfo, id, new miscellaneousIndication::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(jitterIndication::Id id, jitterIndication::const_reference value)
  : Inherited(&theInfo, id, new jitterIndication::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(h223SkewIndication::Id id, h223SkewIndication::const_reference value)
  : Inherited(&theInfo, id, new h223SkewIndication::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(newATMVCIndication::Id id, newATMVCIndication::const_reference value)
  : Inherited(&theInfo, id, new newATMVCIndication::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(userInput::Id id, userInput::const_reference value)
  : Inherited(&theInfo, id, new userInput::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(h2250MaximumSkewIndication::Id id, h2250MaximumSkewIndication::const_reference value)
  : Inherited(&theInfo, id, new h2250MaximumSkewIndication::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(mcLocationIndication::Id id, mcLocationIndication::const_reference value)
  : Inherited(&theInfo, id, new mcLocationIndication::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(conferenceIndication::Id id, conferenceIndication::const_reference value)
  : Inherited(&theInfo, id, new conferenceIndication::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(vendorIdentification::Id id, vendorIdentification::const_reference value)
  : Inherited(&theInfo, id, new vendorIdentification::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(functionNotSupported::Id id, functionNotSupported::const_reference value)
  : Inherited(&theInfo, id, new functionNotSupported::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(multilinkIndication::Id id, multilinkIndication::const_reference value)
  : Inherited(&theInfo, id, new multilinkIndication::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(logicalChannelRateRelease::Id id, logicalChannelRateRelease::const_reference value)
  : Inherited(&theInfo, id, new logicalChannelRateRelease::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(flowControlIndication::Id id, flowControlIndication::const_reference value)
  : Inherited(&theInfo, id, new flowControlIndication::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(mobileMultilinkReconfigurationIndication::Id id, mobileMultilinkReconfigurationIndication::const_reference value)
  : Inherited(&theInfo, id, new mobileMultilinkReconfigurationIndication::value_type(value) )
{ }

inline IndicationMessage::IndicationMessage(genericIndication::Id id, genericIndication::const_reference value)
  : Inherited(&theInfo, id, new genericIndication::value_type(value) )
{ }


inline void IndicationMessage::swap(IndicationMessage & other)
{  Inherited::swap(other); }

inline IndicationMessage* IndicationMessage::clone() const
{ return static_cast<IndicationMessage*> (Inherited::clone()); }

inline bool IndicationMessage::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

inline MultimediaSystemControlMessage::request::const_reference MultimediaSystemControlMessage::get_request () const
{
    assert(currentSelection() ==request::id_);
    return *static_cast<request::const_pointer>(choice.get());
}

inline MultimediaSystemControlMessage::request::reference MultimediaSystemControlMessage::ref_request ()
{
    assert(currentSelection() ==request::id_);
    return *static_cast<request::pointer>(choice.get());
}

inline MultimediaSystemControlMessage::request::reference MultimediaSystemControlMessage::select_request ()
{
    return *static_cast<request::pointer>(setSelection(request::id_, ASN1::AbstractData::create( &request::value_type::theInfo)));
}

inline MultimediaSystemControlMessage::request::reference MultimediaSystemControlMessage::select_request (MultimediaSystemControlMessage::request::const_reference value)
{
    return select_request() = value;
}

inline bool MultimediaSystemControlMessage::request_isSelected() const
{ 
    return currentSelection() == request::id_; 
}

inline MultimediaSystemControlMessage::response::const_reference MultimediaSystemControlMessage::get_response () const
{
    assert(currentSelection() ==response::id_);
    return *static_cast<response::const_pointer>(choice.get());
}

inline MultimediaSystemControlMessage::response::reference MultimediaSystemControlMessage::ref_response ()
{
    assert(currentSelection() ==response::id_);
    return *static_cast<response::pointer>(choice.get());
}

inline MultimediaSystemControlMessage::response::reference MultimediaSystemControlMessage::select_response ()
{
    return *static_cast<response::pointer>(setSelection(response::id_, ASN1::AbstractData::create( &response::value_type::theInfo)));
}

inline MultimediaSystemControlMessage::response::reference MultimediaSystemControlMessage::select_response (MultimediaSystemControlMessage::response::const_reference value)
{
    return select_response() = value;
}

inline bool MultimediaSystemControlMessage::response_isSelected() const
{ 
    return currentSelection() == response::id_; 
}

inline MultimediaSystemControlMessage::command::const_reference MultimediaSystemControlMessage::get_command () const
{
    assert(currentSelection() ==command::id_);
    return *static_cast<command::const_pointer>(choice.get());
}

inline MultimediaSystemControlMessage::command::reference MultimediaSystemControlMessage::ref_command ()
{
    assert(currentSelection() ==command::id_);
    return *static_cast<command::pointer>(choice.get());
}

inline MultimediaSystemControlMessage::command::reference MultimediaSystemControlMessage::select_command ()
{
    return *static_cast<command::pointer>(setSelection(command::id_, ASN1::AbstractData::create( &command::value_type::theInfo)));
}

inline MultimediaSystemControlMessage::command::reference MultimediaSystemControlMessage::select_command (MultimediaSystemControlMessage::command::const_reference value)
{
    return select_command() = value;
}

inline bool MultimediaSystemControlMessage::command_isSelected() const
{ 
    return currentSelection() == command::id_; 
}

inline MultimediaSystemControlMessage::indication::const_reference MultimediaSystemControlMessage::get_indication () const
{
    assert(currentSelection() ==indication::id_);
    return *static_cast<indication::const_pointer>(choice.get());
}

inline MultimediaSystemControlMessage::indication::reference MultimediaSystemControlMessage::ref_indication ()
{
    assert(currentSelection() ==indication::id_);
    return *static_cast<indication::pointer>(choice.get());
}

inline MultimediaSystemControlMessage::indication::reference MultimediaSystemControlMessage::select_indication ()
{
    return *static_cast<indication::pointer>(setSelection(indication::id_, ASN1::AbstractData::create( &indication::value_type::theInfo)));
}

inline MultimediaSystemControlMessage::indication::reference MultimediaSystemControlMessage::select_indication (MultimediaSystemControlMessage::indication::const_reference value)
{
    return select_indication() = value;
}

inline bool MultimediaSystemControlMessage::indication_isSelected() const
{ 
    return currentSelection() == indication::id_; 
}

inline MultimediaSystemControlMessage::MultimediaSystemControlMessage(request::Id id, request::const_reference value)
  : Inherited(&theInfo, id, new request::value_type(value) )
{ }

inline MultimediaSystemControlMessage::MultimediaSystemControlMessage(response::Id id, response::const_reference value)
  : Inherited(&theInfo, id, new response::value_type(value) )
{ }

inline MultimediaSystemControlMessage::MultimediaSystemControlMessage(command::Id id, command::const_reference value)
  : Inherited(&theInfo, id, new command::value_type(value) )
{ }

inline MultimediaSystemControlMessage::MultimediaSystemControlMessage(indication::Id id, indication::const_reference value)
  : Inherited(&theInfo, id, new indication::value_type(value) )
{ }


inline void MultimediaSystemControlMessage::swap(MultimediaSystemControlMessage & other)
{  Inherited::swap(other); }

inline MultimediaSystemControlMessage* MultimediaSystemControlMessage::clone() const
{ return static_cast<MultimediaSystemControlMessage*> (Inherited::clone()); }

inline bool MultimediaSystemControlMessage::equal_type(const ASN1::AbstractData& type)
{ return type.info() == reinterpret_cast<const ASN1::AbstractData::InfoType*>(&theInfo); }

#endif

// End of multimedia_system_control.inl
